{"version":3,"sources":["CardType.js"],"names":["ddz","CardType","cc","Class","ctor","_type","arguments","_point","_count","_cards","_laiZiCnt","setType","type","setPoint","point","setCount","count","getType","getPoint","getCount","getCards","setLaiziCnt","cnt","getLaiziCnt","dump","LOGD","i","length","_getBombType","t_type","Enums","PaixingType","BOMB_CARD","lzCnt","nIndex","isLargerThan","ct","type1","ERROR_CARD","ROCKET","bombType","ctBombType"],"mappings":"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","file":"CardType.js","sourceRoot":"../../../../../../assets/Script/ddz/models","sourcesContent":["/**\n * 牌型\n */\nddz.CardType = cc.Class({\n\n\t/**\n\t * 因为Creator 不允许在构造里写参数,所有这里保留了参数说明,在创建对像的时候还是按这个顺序传参\n\t * @param type 牌型\n\t * @param point 主牌型的点数\n\t * @param count 牌的数目\n\t * @param cards 手牌\n     * @param laiZiCnt 癞子牌的个数\n     */\n\tctor : function() {\n\n\t\tthis._type = arguments[0];\n\t\tthis._point = arguments[1];\n\t\tthis._count = arguments[2];\n\t\tthis._cards = arguments[3];\n\t\tthis._laiZiCnt = arguments[4];\n\n\t},\n\n\tsetType : function(type) {\n\t\tthis._type = type;\n\t},\n\n\tsetPoint : function(point) {\n\t\tthis._point = point;\n\t},\n\n\tsetCount : function(count) {\n\t\tthis._count = count;\n\t},\n\n\tgetType : function() {\n\t\treturn this._type;\n\t},\n\n\tgetPoint : function() {\n\t\treturn this._point;\n\t},\n\n\tgetCount : function() {\n\t\treturn this._count;\n\t},\n\n\tgetCards : function() {\n\t\treturn this._cards;\n\t},\n\n\tsetLaiziCnt: function(cnt){\n\t\tthis._laiZiCnt = cnt;\n\t},\n\n\tgetLaiziCnt: function(){\n\t\treturn this._laiZiCnt;\n\t},\n\n\tdump : function() {\n\t\tddz.LOGD(null, \"card type \" + this._type + \" point : \" + this._point + \" count : \" + this._count );\n\t\tfor(var i = 0; i < this._cards.length; i++) {\n\t\t\tddz.LOGD(null, this._cards[i]);\n\t\t}\n\t},\n\n\t// 获取炸弹类型\n\t// 'pureLzBomb',\t//纯癞子炸弹，大于普通炸弹小于王炸\n\t// 'normalBomb',\t//普通炸弹，大于癞子炸弹\n\t// 'softBomb',\t\t//软炸弹，小于普通炸弹，大于其他牌\n\t// 'notBomb'\t\t//不是炸弹\n\t_getBombType:function(){\n\t\t// 不是4张，不可能是炸弹\n\t\tif (this._cards.length != 4) {\n\t\t\treturn 'notBomb';\n\t\t}\n\n\t\t// 牌型\n\t\tvar t_type = this.getType();\n\t\t// 是炸弹\n\t\tif (t_type == ddz.Enums.PaixingType.BOMB_CARD) {\n\t\t\t/************\n\t\t\t * 统计炸弹中的癞子牌数量\n\t\t\t * 这里的逻辑很骚\n\t\t\t * 对topCard，构造对象前，癞子牌已经转化为实际牌大小\n\t\t\t * 对自己选中的牌，构造对象前，癞子牌的point还是癞子值\n\t\t\t */\n\t\t\tvar lzCnt = 0;\n\t\t\tfor(var nIndex = 0;nIndex<4;nIndex++){\n\t\t\t\t//如果有任何一张是癞子牌凑的\n\t\t\t\tif (this._cards[nIndex] > 53) {\n\t\t\t\t\tlzCnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( lzCnt < this._laiZiCnt ){\n\t\t\t\tlzCnt = this._laiZiCnt;\n\t\t\t}\n\t\t\t//根据癞子牌数量判断炸弹类型\n\n\t\t\t//常规炸弹\n\t\t\tif (lzCnt == 0) {\n\t\t\t\treturn 'normalBomb';\n\t\t\t}\n\t\t\t// 纯癞子炸弹\n\t\t\tif(lzCnt == 4){\n\t\t\t\treturn 'pureLzBomb';\n\t\t\t}\n\t\t\t//软蛋\n\t\t\tif(lzCnt>0 && lzCnt<4){\n\t\t\t\treturn 'softBomb';\n\t\t\t}\n\t\t}\n\t\t//不是炸弹\n\t\telse{\n\t\t\treturn 'notBomb';\n\t\t}\n\t},\n\n\t/**\n\t * this._type - 当前手牌\n\t * ct，待比较的牌\n\t */\n\tisLargerThan : function(ct) {\n\t\tvar type1 = ct.getType(); \n\t\tif(this._type == ddz.Enums.PaixingType.ERROR_CARD || type1 == ddz.Enums.PaixingType.ERROR_CARD) {\t\t//其实不是很有必要，如果牌型错误，其他地方也没办法正常运行而报错\n\t\t\tddz.LOGD(null, \"error!!!!!!!! error card type in isLargerThan in cardtype.js\");\n\t\t}\n\n\t\t// 先判断火箭\n\t\tif(this._type == ddz.Enums.PaixingType.ROCKET){\n\t\t\treturn true;\n\t\t}\n\n\t\tif(type1 == ddz.Enums.PaixingType.ROCKET) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// 相同牌型\n\t\tif(this._type == type1) {\n\t\t\t/**\n\t\t\t * 炸弹牌型单独比较\n\t\t\t * 纯癞子炸弹 > 普通炸弹 > 癞子炸弹\n\t\t\t */\n\t\t\tif(type1 == ddz.Enums.PaixingType.BOMB_CARD){\n\t\t\t\t// 纯癞子炸弹最大\n\t\t\t\tvar bombType = this._getBombType();\n\t\t\t\tddz.LOGD(null, 'this._type bombType=' + bombType);\n\t\t\t\tif( bombType == 'pureLzBomb' ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar ctBombType = ct._getBombType();\n\t\t\t\tddz.LOGD(null, 'compareType bombType=' + ctBombType);\n\t\t\t\tif( ctBombType == 'pureLzBomb' ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// 普通炸弹大于癞子炸弹\n\t\t\t\tif( bombType == 'normalBomb' && ctBombType == 'softBomb' ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif( bombType == 'softBomb' && ctBombType == 'normalBomb' ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._count == ct.getCount() && this._point > ct.getPoint();\n\t\t}\n\n\t\t// 炸弹管其他所有，如果都是炸弹，会在上面return\n\t\tif(this._type == ddz.Enums.PaixingType.BOMB_CARD) {\t\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n});\n"]}