{"version":3,"sources":["AIRobot.js"],"names":["require","ddz","AIRobot","cc","Class","ctor","LOGD","_isGrab","playerCards","called","cards","cardNum","dizhuPos","currentPlayPos","lastPlayPos","playerNum","dipai","topCards","callMulti","bombCount","chuntian","bcmulti","showmulti","seatPlayCardCount","winStreakNum","_longestType","AILongestType","addBombCount","setIsGrab","bIsGrab","reset","shuffle","deck","i","r","Math","floor","random","tmp","fapai","argument","slice","setCall","call","seatIndex","length","getCall","onDestroy","playAGame","initGame","playCards","GlobalFuncs","GetNextIndex","genOneStep","playActively","_passivityCards","types","RobotGlobal","judgeType","hall","PrintArray","_isIntervene","win_cards","findWinCardsFromArray","_isDizhu","_filterFollowCards","cardType","_isIntervenePartner","_getCardsCnt","_isFollowUpPartner","getPreIndex","getType","Enums","PaixingType","DOUBLE_CARD","SINGLE_CARD","getPoint","srcCards","playerPos","pos","checkGameOver","startGame","_dumpResultArr","strDescribe","arr","_findLongestFromSelectedCards","getOneLongestCardType","_rocketWin","pc","_getPCArrayByPoint","sort","_sortByPoint","newarr","index","aObj","oldIndex","oldObj","point","cardsInfo","cardsInfoIndex","push","count","str","j","numberToPoint","lz_obj","_getLaiziObject","reportLaiziCount","return_arr","_findAvailableAircraft","_findAvailableContinous","_findAvailableThree","enemyIndex","preIndex","enemyCardsLen","pairs","singles","_findMinDouble","_findMinSingle","reverse","sordPlayCards","cardNums","rtnCards","tmpCardNums","tmpPoint","sortFunc","a","b","num","concat"],"mappings":"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","file":"AIRobot.js","sourceRoot":"../../../../../assets/Script/ddz","sourcesContent":["//\n//  ddz_robot.js\n//  ddz\n//\n//  Created by weitongming on 14-04-28.\n//  封装robot的操作\n\n// 网络版的流程\n// client      server\n// 1、quickStart\n// \t\t\t2 quickStart\n// \t\t\t  tableInfo\n// 3、每个玩家发 ready （之前是有个sit的协议的）\n// \t\t\t4、广播ready给每个人\n// \t\t\t5、发回gameReady\n// \t\t\t6、发回next操作（这时客户端决定要显示叫地主还是打牌的按钮）\n// 7、点击叫地主的按钮\n// \t\t\t8、广播给玩家叫地主消息\n// \t\t\t9、叫完地主之后发回game_start(打开托管按钮)\n// \t\t\t   设置癞子牌\n// 10、card（出牌）\n// \t\t\t11、广播card\n// \t\t\t    可选的设置为托管\n// \t\t\t12、最后发 game_win\n\n// 单机ai流程梳理\n// client              AI\n// \t\t\t\t\t1、init 设置玩法、生成每个seat的牌和seatId、底牌、癞子牌 + sit +ready （client可以不依赖这个ready的回调来设置界面）\n// 2、玩家叫地主并通知AI\n// \t\t\t\t\t3、AI决定2个机器人是否叫地主，并反馈给client（玩家一定是2号，左手边是1号，右手边是0号，可以玩家先坐下，之后生成上家和下家；一定是玩家第一个叫地主，单机时如果不出牌就一定是等待）\n// \t\t\t\t\t4、反馈game_start( 决定谁是地主)\n// 5、自己出牌（需要有提示功能和判断牌型功能）或让AI主动出牌\n// 6、通知AI牌的变化\n// \t\t\t\t\t7、反馈一局游戏结束\n\nrequire('AILongestType');\n\nddz.AIRobot = cc.Class({\n\t// --------- 公共部分\n\tctor: function() {\n\t\tddz.LOGD(null, \" in ctor new ddz.AIRobot\");\n\t\tthis._isGrab = false; //是不是抢地主模式\n\t\tthis.playerCards = []; // 3个玩家的手牌，单机模式下我的seatIndex = 1, 然后是右边玩家seatIndex =2, 左边seatIndex = 3。 出牌叫地主按从玩家起逆时针顺序\n\t\tthis.called = []; //叫地主的分\n\t\tthis.cards = []; // 一副牌，里面存的是number  0-53 + [54, 63]\n\t\tthis.cardNum = 54; // 共54张牌\n\t\tthis.dizhuPos = 0; // 地主所在的位置（叫地主后确定）\n\n\t\tthis.currentPlayPos = 0; // 当前在打牌的位置\n\t\tthis.lastPlayPos = 0; //上次出牌的玩家位置，如果与当前的一致，则表示主动出牌\n\t\tthis.playerNum = 3; // 玩家人数\n\t\tthis.dipai = []; // 底牌（共3张），叫地主时会被放入地主的手中\n\n\t\tthis.topCards = []; //不存储this.top_type，需要的时候重新计算，因为在上家出牌的时候虽然能知道是什么牌型，但是毕竟在出牌策略中夹杂一些保存card_type的东西，会影响复杂。算一遍card_type本身代价不大\n\n\t\t//数据统计\t\n\t\tthis.callMulti = 1; //\t叫分倍数,最高叫几分为几\n\t\tthis.bombCount = 0; //统计一局中炸弹数量, 有几次炸弹为几\n\t\tthis.chuntian = 1; //\t如果有打出春天，则为2\n\t\tthis.bcmulti = 1; //底牌, 备用\n\t\tthis.showmulti = 1; //明牌, 备用\n\t\tthis.seatPlayCardCount = [0, 0, 0]; // 玩家出牌的次数,index:0为自己，1为右上角玩家，2为左上角玩家\n\t\tthis.winStreakNum = 0; // 记录我连胜的次数\n\n\t\t//拖动出牌，选出最长牌\n\t\tthis._longestType = new ddz.AILongestType(this);\n\t},\n\n\taddBombCount: function() {\n\t\tthis.bombCount++;\n\t},\n\n\tsetIsGrab: function(bIsGrab) {\n\t\tthis._isGrab = bIsGrab;\n\t},\n\n\treset: function() {\n\t\tddz.LOGD(null, \"reset in AI.................\");\n\t\tthis.playerCards = [];\n\t\tthis.called = [];\n\t\tthis.cards = [];\n\t\tthis.dizhuPos = 0;\n\n\t\tthis.currentPlayPos = 0;\n\t\tthis.lastPlayPos = 0;\n\t\tthis.dipai = [];\n\n\t\tthis.topCards = [];\n\n\t\t//数据统计\t\n\t\tthis.callMulti = 1;\n\t\tthis.bombCount = 0;\n\t\tthis.chuntian = 1;\n\t\tthis.bcmulti = 1;\n\t\tthis.showmulti = 1;\n\t},\n\n\t// 洗牌\n\tshuffle: function() {\n\t\tvar deck = this.cards;\n\t\t// 先设置初始值，之后进行随机\n\t\tvar i = 0;\n\t\tfor (i = 0; i < this.cardNum; i++) {\n\t\t\tdeck[i] = i;\n\t\t}\n\t\tfor (i = this.cardNum - 1; i > 0; i--) {\n\t\t\tvar r = Math.floor(Math.random() * (i + 1));\n\t\t\tvar tmp;\n\t\t\ttmp = deck[i];\n\t\t\tdeck[i] = deck[r];\n\t\t\tdeck[r] = tmp;\n\t\t\t// ddz.LOGD(null, i + '------->' + r);\n\t\t}\n\t},\n\n\t// 发牌，在shuffle之后\n\tfapai: function(argument) {\n\t\tfor (var i = 0; i < this.playerNum; i++) {\n\t\t\tthis.playerCards[i] = this.cards.slice(17 * i, 17 * (i + 1));\n\t\t}\n\t\tthis.dipai = this.cards.slice(51, 54); // 最后3张是底牌\n\t},\n\n\tsetCall: function(call, seatIndex) { //设定seatIndex位置叫的分数，目前只用于设定玩家叫分\n\t\tif (seatIndex < 1 || seatIndex > 3) {\n\t\t\tddz.LOGD(null, \"error seat index in set call!!! return\");\n\t\t\treturn;\n\t\t}\n\t\tthis.called[seatIndex - 1] = call;\n\t\tif (!this._isGrab && call == 3) {\n\t\t\tthis.dizhuPos = 1;\n\t\t}\n\t\t//如果是抢地主模式，且是玩家第二次叫分，则确定地主pos\n\t\tif (this._isGrab && this.called.length > 1) {\n\t\t\tif (call == 1) {\n\t\t\t\tthis.dizhuPos = 1;\n\t\t\t\tthis.callMulti *= 2;\n\t\t\t} else { //最后一个抢地主的为地主\n\t\t\t\tthis.dizhuPos = this.called[2] == 1 ? 3 : 2;\n\t\t\t}\n\t\t}\n\t},\n\n\t//命令某座位玩家叫分，并返回所叫分，如果是玩家座位(seatIndex == 1)，则直接返回， 否则会生成分。\n\tgetCall: function(seatIndex) {\n\t\tif (seatIndex < 1 || seatIndex > 3) {\n\t\t\tddz.LOGD(null, \"error seat index in set call!!! return\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.called.length >= seatIndex) { //因为是命令叫分，所以不考虑重复让某玩家叫分的情况（已经叫过的话，get直接取值返回），一局游戏中此方法对一个seatIndex只会调用一次\n\t\t\tddz.LOGD(null, \"this seatindex called, error ,return\");\n\t\t\treturn;\n\t\t}\n\t\tvar call;\n\t\tif (this._isGrab) { //抢地主模式\n\t\t\tif (seatIndex == 2) { //右边玩家随机\n\t\t\t\tcall = Math.floor(Math.random() * 2); //随机为0或者1\n\t\t\t\tif (call > 0) {\n\t\t\t\t\tthis.callMulti *= 2;\n\t\t\t\t}\n\t\t\t\tthis.called[1] = call;\n\t\t\t} else if (seatIndex == 3) { //左边玩家，如果前2个都没叫，则一定叫，否则随机\n\t\t\t\tif (this.called[0] == 0 && this.called[1] == 0) {\n\t\t\t\t\tcall = 1;\n\t\t\t\t} else {\n\t\t\t\t\tcall = Math.floor(Math.random() * 2); //随机为0或者1\n\t\t\t\t\tif (call > 0) {\n\t\t\t\t\t\tthis.callMulti *= 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.called[2] = call;\n\t\t\t} else { //should not enter this scope\n\t\t\t\tcall = this.called[0];\n\t\t\t}\n\t\t\t//抢地主模式下，只有这2种情况可以确定地主\n\t\t\t//如果玩家没有叫地主，则左边玩家叫完后，直接确定地主座位\n\t\t\tif (this.called[0] == 0) {\n\t\t\t\tthis.dizhuPos = this.called[2] == 1 ? 3 : 2; //如果左边玩家叫分为1，则一定是左边地主，否则一定是右边地主\n\t\t\t} else {\n\t\t\t\tif (this.called.length == 3 && this.called[1] == 0 && this.called[2] == 0) { //必须用length来判断，否则undefined == 0\n\t\t\t\t\tthis.dizhuPos = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else { //叫地主模式\n\t\t\tif (seatIndex == 1) { //should not enter this scope\n\t\t\t\tcall = this.called[0];\n\t\t\t} else if (seatIndex == 2) { //右边玩家，必须比玩家分大，或者不叫\n\t\t\t\tdo {\n\t\t\t\t\tcall = Math.floor(Math.random() * 4); //0,1,2,3\n\t\t\t\t} while (call != 0 && call <= this.called[0]);\n\t\t\t\tthis.called[1] = call;\n\t\t\t\tif (call > 0) {\n\t\t\t\t\tthis.callMulti = call;\n\t\t\t\t}\n\t\t\t} else { //左边玩家叫分，只要轮到左边玩家叫，一定叫3分,防止了都不叫开不了游戏\n\t\t\t\tcall = 3;\n\t\t\t\tthis.callMulti = 3;\n\t\t\t\tthis.called[2] = call;\n\t\t\t}\n\t\t\tif (call == 3) { //有叫3分的，直接该座位为地主\n\t\t\t\tthis.dizhuPos = seatIndex;\n\t\t\t}\n\t\t}\n\t\treturn call;\n\t},\n\n\tonDestroy: function() {\n\t\t// 释放\n\t\t// todo：释放图片资源什么的\n\t\tddz.LOGD(null, \" onDestroy ---->ddz.AIRobot\");\n\t},\n\n\tplayAGame: function() {\n\t\tthis.initGame();\n\t},\n\n\t// 初始化，参数依次是\n\tinitGame: function() {\n\t\tddz.LOGD(null, \"init game in AI\");\n\t\tthis.shuffle();\n\t\tthis.fapai();\n\t\t// this.zhengli(); // 整理成一定的数据结构，以便进行进一步的处理\n\n\t\t// this.jisuanfenshu(); // 计算分数\n\t\t// this.jiaopai();\t\t\t// 叫牌\n\n\t\t// this.setLoard(); // 确定地主\n\n\t\t// this.play();            //  开始打牌的流程\n\t},\n\n\tplayCards: function(seatIndex, cards) { //某个座位的玩家出牌, 这里也不需要删除，因为在playcontroller会进行删除\n\t\tthis.currentPlayPos = ddz.GlobalFuncs.GetNextIndex(this.currentPlayPos);\n\t\tif (cards.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\t// 统计玩家出牌的次数\n\t\tthis.seatPlayCardCount[seatIndex - 1] += 1;\n\t\tthis.lastPlayPos = seatIndex;\n\t\tthis.topCards = cards;\n\t\tddz.LOGD(null, \"this.topCards = \" + this.topCards);\n\t},\n\n\t// 让AI打一手牌,返回打的牌（num的数组）,主动出牌不传topcards参数，即为undefined\n\tgenOneStep: function() {\n\t\tvar cards;\n\t\tif (this.lastPlayPos == 0 || this.lastPlayPos == this.currentPlayPos) {\n\t\t\t//主动出牌\n\t\t\tddz.LOGD(null, \"play cards actively......\");\n\t\t\tcards = this.playActively(this.currentPlayPos);\n\t\t} else {\n\t\t\t//被动出牌\n\t\t\tcards = this._passivityCards();\n\t\t}\n\t\tthis.playCards(this.currentPlayPos, cards);\n\n\t\treturn cards;\n\t},\n\n\t_passivityCards: function() {\n\t\t//被动出牌，管topcard\n\t\tvar types = ddz.RobotGlobal.judgeType(this.topCards, false);\n\t\tif (types.length == 0) {\n\t\t\tddz.LOGD(null, \"error!!! top cards illegal...\");\n\t\t\thall.GlobalFuncs.PrintArray(this.topCards);\n\t\t}\n\n\t\tif (!this._isIntervene(types[0])) {\n\t\t\tddz.LOGD(null, \"not isIntervene, this.currentPlayPos = \" + this.currentPlayPos);\n\t\t\treturn [];\n\t\t}\n\n\t\tvar win_cards = this.findWinCardsFromArray(types[0], this.playerCards[this.currentPlayPos - 1]); //[[2,3], [4, 5]]...所有能赢的数组，挑第一个传出去即可\n\n\t\t//过滤跟牌，当前出牌的为非地主且上次出牌的也不是地主\n\t\tif (!this._isDizhu(this.currentPlayPos) && !this._isDizhu(this.lastPlayPos) && win_cards.length > 0) {\n\t\t\twin_cards = this._filterFollowCards(win_cards);\n\t\t}\n\n\t\treturn win_cards.length > 0 ? win_cards[0] : [];\n\t},\n\n\t/*\n\t *是否管上家出的牌\n\t *argu : cardType,上家的牌类型\n\t */\n\t_isIntervene: function(cardType) {\n\t\t//原则：1，地主总要出；2，上次出牌的是我同伙，不出；否则，出；\n\t\tif (this.dizhuPos == this.currentPlayPos) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.dizhuPos == this.lastPlayPos) {\n\t\t\t//上次是地主出的，管上\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._isIntervenePartner(cardType);\n\t},\n\n\t//是否干预队友\n\t_isIntervenePartner: function(cardType) {\n\t\t//进入到此函数中时，上次出牌的一定是队友\n\t\tif (this.dizhuPos == this.lastPlayPos) {\n\t\t\tddz.LOGD(null, \"Error，not my partner !!!!\");\n\t\t\treturn true;\n\t\t}\n\n\t\t//1，只有一张牌时干预队友\n\t\tif (this._getCardsCnt(this.currentPlayPos) == 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//2，队友只有一张牌了，不干预\n\t\tif (this._getCardsCnt(this.lastPlayPos) <= 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//策划需求：当手牌≤2张时，按现有AI出牌方式出牌\n\t\tif (this._getCardsCnt(this.currentPlayPos) <= 2) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//根据牌型判断是否跟进队友的牌\n\t\treturn this._isFollowUpPartner(cardType);\n\t},\n\n\t//是否跟进队友的牌\n\t_isFollowUpPartner: function(cardType) {\n\t\tif (this._isDizhu(this.lastPlayPos)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this._isDizhu(ddz.GlobalFuncs.getPreIndex(this.currentPlayPos))) {\n\t\t\t//我的上家是地主，此时地主没有出牌，不跟\n\t\t\treturn false;\n\t\t}\n\n\t\tif (cardType.getType() > ddz.Enums.PaixingType.DOUBLE_CARD) {\n\t\t\t//队友出的是大于对子的牌型，不跟\n\t\t\treturn false;\n\t\t}\n\n\t\t//跟进单牌的小牌点(<A)\n\t\tif (cardType.getType() == ddz.Enums.PaixingType.SINGLE_CARD) {\n\t\t\t//跟进小于A的牌\n\t\t\tif (cardType.getPoint() < 11) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t//跟进小于K的对子\n\t\tif (cardType.getPoint() < 10) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t//过滤跟队友的牌\n\t_filterFollowCards: function(srcCards) {\n\t\t//TODO\n\t\t//如果跟的是对2、单王、小王的就不跟了\n\t\t//防止用对2、大、小王压死队友\n\t\tif (srcCards.length <= 0) {\n\t\t\treturn srcCards;\n\t\t}\n\n\t\tvar types = ddz.RobotGlobal.judgeType(srcCards[0], false);\n\t\tif (types.length < 0) {\n\t\t\treturn srcCards;\n\t\t}\n\t\tif (types[0].getPoint() >= 12) {\n\t\t\treturn [];\n\t\t}\n\t\treturn srcCards;\n\t},\n\n\t//获取玩家的手牌数量\n\t_getCardsCnt: function(playerPos) {\n\t\treturn this.playerCards[playerPos - 1].length;\n\t},\n\n\t//是否是地主\n\t_isDizhu: function(pos) {\n\t\treturn this.dizhuPos == pos;\n\t},\n\n\tcheckGameOver: function() {\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\tif (this.playerCards[i].length == 0) {\n\t\t\t\treturn {\n\t\t\t\t\t\"dizhuwin\": i + 1 == this.dizhuPos\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\tstartGame: function() { //不要将底牌加入手牌，因为在playController里面, seatInfo.cards与这里的player[]是一个对象，两个地方都插入的话会重复\n\t\tddz.LOGD(null, \"start game, set current playpos \" + this.dizhuPos);\n\t\tthis.currentPlayPos = this.dizhuPos;\n\t},\n\n\t_dumpResultArr: function(strDescribe, arr) {\n\n\t},\n\n\t//从选中的牌中挑选出最长的牌\n\t_findLongestFromSelectedCards: function(arr) {\n\t\t//选中牌的长度\n\t\treturn this._longestType.getOneLongestCardType(arr);\n\t},\n\t// 主动出牌judge\n\tplayActively: function(seatIndex) {\n\t\tif (seatIndex == 1) { //玩家不应该主动出牌\n\t\t\tddz.LOGD(null, \"error!!! seatindex == 1 in playActively\");\n\t\t\treturn [];\n\t\t}\n\t\tvar cards = this.playerCards[seatIndex - 1];\n\n\t\t//判断当前手牌是不是一个牌型\n\t\tvar types = ddz.RobotGlobal.judgeType(cards, false);\n\t\tif (types.length > 0) { //是一副手牌\n\t\t\treturn cards.slice(0);\n\t\t}\n\t\tif (this._rocketWin(cards)) { //双王致胜\n\t\t\treturn [52, 53];\n\t\t}\n\n\t\tvar pc = this._getPCArrayByPoint(cards);\n\t\tpc.sort(this._sortByPoint);\n\n\t\t// 填补成连续的数组\n\t\tvar newarr = [];\n\t\tfor (index = 0; index < 15; index++) {\n\t\t\tvar aObj = {\n\t\t\t\t'point': index,\n\t\t\t\t'count': 0,\n\t\t\t\t'cards': []\n\t\t\t};\n\n\t\t\tfor (var oldIndex = 0; oldIndex < pc.length; oldIndex++) {\n\t\t\t\tvar oldObj = pc[oldIndex];\n\n\t\t\t\tif (oldObj.point == aObj.point) {\n\t\t\t\t\taObj = oldObj;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 深拷贝\n\t\t\tvar cardsInfo = [];\n\t\t\tfor (var cardsInfoIndex = 0; cardsInfoIndex < aObj.cards.length; cardsInfoIndex++) {\n\t\t\t\tcardsInfo.push(aObj['cards'][cardsInfoIndex])\n\t\t\t}\n\t\t\tnewarr.push({\n\t\t\t\t'point': aObj.point,\n\t\t\t\t'count': aObj.count,\n\t\t\t\t'cards': cardsInfo\n\t\t\t})\n\t\t}\n\n\t\tvar i = 0, tmp, str;\n\t\tddz.LOGD(null, \"dump _fillDicarr in play actively..........\");\n\t\tfor (i = 0; i < newarr.length; i++) {\n\t\t\ttmp = newarr[i];\n\t\t\tddz.LOGD(null, \"point : \" + tmp.point + \" count: \" + tmp.count);\n\n\t\t\tstr = '';\n\t\t\t// ddz.LOGD(null, \"point : \" + tmp.point + \" count: \" + tmp.count);\n\t\t\tfor (var j = 0; j < tmp.count; j++) {\n\t\t\t\tvar point = ddz.GlobalFuncs.numberToPoint(tmp.cards[j]);\n\t\t\t\tstr = str + '[' + point + ']';\n\t\t\t}\n\n\t\t\tddz.LOGD(null, str);\n\t\t}\n\t\tddz.LOGD(null, \"dump _fillDicarr in play actively.......... end\");\n\n\t\t//[20140521][jinrifeng] 使用接口\n\t\tvar lz_obj = this._getLaiziObject(newarr);\n\n\t\tddz.LOGD(null, 'laizi count ' + lz_obj.count + '; laizi are ');\n\n\t\tfor (i = 0; i < lz_obj.cards.length; i++) {\n\t\t\tddz.LOGD(null, lz_obj.cards[i]);\n\t\t}\n\n\t\tvar reportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\t//找飞机\n\t\tvar return_arr = this._findAvailableAircraft(newarr, lz_obj);\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found aircraft', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableAircraft(newarr, lz_obj); //找飞机\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found aircraft', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\treportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards; //找最小连对\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found liandui', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards; //找最小连对\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found liandui', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\treportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards; //找最小顺子\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found shunzi', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards; //找最小顺子\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found shunzi', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\treturn_arr = this._findAvailableThree(newarr, lz_obj); //找第一个出现的3个, 内部考虑了先找不带癞子的\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found three', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 机器人主动出对和主动出单的策略\n\t\t// 敌人定义:如果下家是同盟,则敌人是上家,否则敌人是下家。\n\t\t// 1.敌人手牌>4张 : 正常出牌策略\n\t\t// 2.敌人手牌<=4张: 敌人剩单数张优先出对子,剩双数张优先出单,同时:\n\t\t//  2.1 下家和自己是同盟 : 从小往大出\n\t\t//  2.2 下家和自己是敌人 :\n\t\t//      2.2.1 自己手牌有和下家手牌奇偶不同的牌,如下家剩1张(奇),自己有对子(偶) : 从小往大出对子\n\t\t//      2.2.2 自己手牌没有和下家手牌奇偶不同的牌,如下家剩1张(奇),自己没有对子 : 从大往小出单\n\t\tvar enemyIndex;\n\t\tvar preIndex = ddz.GlobalFuncs.getPreIndex(this.currentPlayPos);\n\t\tif (this.dizhuPos == preIndex) { //只有地主是我上家，则敌人是上家，否则敌人都是下家\n\t\t\tenemyIndex = preIndex;\n\t\t} else {\n\t\t\tenemyIndex = ddz.GlobalFuncs.GetNextIndex(this.currentPlayPos);\n\t\t}\n\t\tvar enemyCardsLen = this.playerCards[enemyIndex - 1].length;\n\t\tvar pairs, singles;\n\t\tif (enemyCardsLen > 4) { //敌人手牌多余4张，正常出牌，挑最小对出，没有则挑最小单出\n\t\t\tpairs = this._findMinDouble(lz_obj, pc, 1, [], false); //[[1, 2], [3, 4]]...\n\t\t\tif (pairs.length > 0) {\n\t\t\t\tddz.LOGD(null, \"find min double in find available aircraft....\");\n\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\treturn pairs[0];\n\t\t\t}\n\t\t\tsingles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\tif (singles.length == 0) {\n\t\t\t\tddz.LOGD(null, \"assert!!!! error in play actively!!\"); //没有对子又没有单，应该报错\n\t\t\t}\n\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\treturn singles;\n\t\t} else {\n\t\t\tif (this.dizhuPos != preIndex) { //下家是同盟，从小往大出，否则从大往下出\n\t\t\t\tpc.reverse();\n\t\t\t}\n\t\t\tif (enemyCardsLen % 2 == 1) { //敌人手牌单数，优先出对子\n\t\t\t\tpairs = this._findMinDouble(lz_obj, pc, 1, [], false); //[[1, 2], [3, 4]]...\n\t\t\t\tif (pairs.length > 0) {\n\t\t\t\t\tddz.LOGD(null, \"find min double in find available aircraft....\");\n\t\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\t\treturn pairs[0];\n\t\t\t\t}\n\t\t\t\tsingles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\t\treturn singles;\n\t\t\t} else { //敌人手牌双数，优先出单牌\n\t\t\t\tsingles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\t\tif (singles.length > 0) {\n\t\t\t\t\tddz.LOGD(null, \"find min double in find available aircraft....\");\n\t\t\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\t\t\treturn singles;\n\t\t\t\t}\n\t\t\t\tpairs = this._findMinDouble(lz_obj, pc, 1, [], false);\n\t\t\t\tif (pairs.length == 0) {\n\t\t\t\t\tddz.LOGD(null, \"assert!!!! error in play actively!!\"); //没有对子又没有单，应该报错\n\t\t\t\t}\n\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\treturn pairs[0];\n\t\t\t}\n\t\t}\n\t},\n\n\t// 对出的牌排序(花色 按照黑桃红心梅花方块)\n\tsordPlayCards:function(cardNums) {\n\t\tvar cards = cardNums;\n\t\t\t\tvar rtnCards = [];\n\t\t\t\tvar tmpCardNums = [];\n\t\t\t\tvar tmpPoint = -1;\n\t\t\t\tvar sortFunc = function(a, b) {\n\t\t\t\t\tif (a > 53 || b > 53) {\n\t\t\t\t\t\treturn a - b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn b - a;\n\t\t\t\t\t}\n\t\t};\n\t\tfor (var i = 0; i < cards.length; i++) {\n\t\t\tvar num = cards[i];\n\t\t\tvar point = ddz.GlobalFuncs.numberToPoint(num);\n\t\t\tif (point != tmpPoint) {\n\t\t\t\tif (tmpCardNums.length > 0) {\n\t\t\t\t\ttmpCardNums.sort(sortFunc);\n\t\t\t\t\trtnCards = rtnCards.concat(tmpCardNums);\n\t\t\t\t}\n\t\t\t\ttmpCardNums = [num];\n\t\t\t\ttmpPoint = point;\n\t\t\t} else {\n\t\t\t\ttmpCardNums.push(num);\n\t\t\t}\n\t\t}\n\t\tif (tmpCardNums.length > 0) {\n\t\t\ttmpCardNums.sort(sortFunc);\n\t\t\trtnCards = rtnCards.concat(tmpCardNums);\n\t\t}\n\t\treturn rtnCards;\n\t},\n});"]}