{"version":3,"sources":["ddzsingle_robot.js"],"names":["ddz","AIRobot","cc","Class","_TAG","ctor","LOGD","_isGrab","playerCards","called","cards","cardNum","dizhuPos","currentPlayPos","lastPlayPos","playerNum","dipai","topCards","callMulti","bombCount","chuntian","bcmulti","showmulti","seatPlayCardCount","winStreakNum","killBossRoundNum","killBossRoundNumBack","isPassCurStage","runningBigStageId","runningSmallStageId","_typeJudger","AITypeJudger","_longestType","AILongestType","_typeFinder","typeFinder","addBombCount","setIsGrab","bIsGrab","hall","reset","shuffle","deck","i","r","Math","floor","random","tmp","fapai","argument","slice","log","JSON","stringify","setCall","call","seatIndex","length","getCall","onDestroy","_super","destroy","playAGame","initGame","playCards","GlobalFuncs","GetNextIndex","genOneStep","isInTrust","playActively","_passivityCards","exchangeCard","cardId","srcIdx","_findId","randomIndex","parseInt","dst","array","types","judgeType","PrintArray","_isIntervene","win_cards","findWinCardsFromArray","_isDizhu","_filterFollowCards","getType","Enums","PaixingType","SHUNZI_CARD","reverse","cardType","_isIntervenePartner","_getCardsCnt","_isFollowUpPartner","getPreIndex","DOUBLE_CARD","SINGLE_CARD","getPoint","srcCards","playerPos","pos","arr","bLzChangable","len","laiziCnt","dump","dicarr","_getPointCountDicArray","lz_obj","_getLaiziObject","newarr","_fillDicarr","index","point","count","checkGameOver","dizhuwin","startGame","_sortByCount","o1","o2","_sortByPoint","sort","GetCardValueByPoint","cdic","num","getCardValueByNum","key","value","push","SortNumberFunc","return_arr","_getPCArrayByCount","_getPCArrayByPoint","start","_findMinSingle","pLaizi","pcArray","ex","bDivide","returnArr","t","FindInArray","j","_findMinDouble","ele","CardTable","print","laizi_use","getLaiziNumByValue","_findBomb","laiziMax","need","n","c","_findRocket","bking","rking","ret","findActivePlayCards","result","tmpArr","init","find","findBombResult","card","bomb","rocket","type","f","ROCKET","_rocketWin","_findWinSingle","_findWinDouble","THREE_CARD","THREE_ONE_CARD","THREE_TWO_CARD","_findWinThree","BOMB_CARD","BOMB_TWO_CARD","BOMB_TWO_TWO_CARD","_findWinBomb","LIANDUI_CARD","AIRCRAFT_CARD","AIRCRAFT_SINGLE_CARD","AIRCRAFT_DOUBLE_CARD","_findWinContinous","pc","needSingleJoker","realPoint","GetCardPointByNum","bombs","concat","nIndex","newCount","_copyOnePCObj","dest","src","_copyPCArr","pcObj","t_type","extra","lz_objTmp","pop","_getBombType","_cards","_laiZiCnt","bombType","getCount","continue_count","cell_count","exc","lz_used","sub_index","tmp_cards","newlz","left","_findAvailableAircraft","newarrpara","resultObj","_findAvailableContinous","aObj","str","pairs","p_length","k","singles","index_report","lz_use","clen","_findAvailableContinousDevide","curIndex","remainLzCnt","oneResult","_sortByLength","_findAvailableThree","leftArr","midResult","_dumpResultArr","strDescribe","loginfo","_getCombinatorialVariety","_findLongestFromSelectedCards","selCards","getOneLongestCardType","oldIndex","oldObj","cardsInfo","cardsInfoIndex","reportLaiziCount","enemyIndex","preIndex","enemyCardsLen","testPlayActively","robot","testTag","aitest","testinjudger","minGetTest","res","passTest","testPassive","passTestNew","testPlayPassively","_CardTable","countTable","selcards","testJudge","testPlanAndTwoDouble","resType"],"mappings":"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AI,IAAI/I,QAAQ,CAAhB,EAAmBA,QAAQ8C,IAAIvG,MAA/B,EAAuCyD,OAAvC,EAAgD;AAC/CnH,MAAIM,IAAJ,CAAS4P,OAAT,EAAkB,wBAAwB/I,KAA1C;AACAnH,MAAIqJ,SAAJ,CAAcC,KAAd,CAAoBW,IAAI9C,KAAJ,CAApB;AACA;AACD;AACD;AACA,IAAIuJ,oBAAoB,SAApBA,iBAAoB,GAAU;AACjC1Q,KAAIqJ,SAAJ,GAAgB,IAAIrJ,IAAI2Q,UAAR,EAAhB;AACA3Q,KAAIwQ,WAAJ,GAAkB,IAAIxQ,IAAIC,OAAR,EAAlB;AACAD,KAAIM,IAAJ,CAAS4P,OAAT,EAAkB,mBAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;;;AAIG;AACF;AACD;AACA;AACA;AACA;;;AAIG;AACA;AACF;AACD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGG;AACF;AACD;AACA;AACA;AACA;;AAEG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA,KAAIU,aAAa5Q,IAAIqJ,SAAJ,CAAchC,KAA/B;AACA,KAAItC,QAAQ;AACX;AACA6L,YAAW,UAAX,CAFW,EAGXA,WAAW,UAAX,CAHW,EAKXA,WAAW,UAAX,CALW,EAMXA,WAAW,UAAX,CANW,EAOXA,WAAW,UAAX,CAPW,EASXA,WAAW,WAAX,CATW,EAUXA,WAAW,WAAX,CAVW,EAYXA,WAAW,UAAX,CAZW,EAaXA,WAAW,UAAX,CAbW,CAAZ;AAeA,KAAIC,WAAW7Q,IAAIwQ,WAAJ,CAAgBnB,6BAAhB,CAA8CtK,KAA9C,CAAf;AACA/E,KAAIM,IAAJ,CAAS4P,OAAT,EAAkB,SAAlB;AACAlQ,KAAIqJ,SAAJ,CAAcC,KAAd,CAAoBuH,QAApB;AACA,CArRD;AAsRA;;AAEA,SAASC,SAAT,GAAqB;AACpB9Q,KAAIoQ,YAAJ,GAAmB,IAAIpQ,IAAIC,OAAR,EAAnuBAAuB,SAAvBA,oBAAuB,GAAW;AACrC/Q,KAAIM,IAAJ,CAAS4P,OAAT,EAAkB,+BAAlB;AACAlQ,KAAIoQ,YAAJ,GAAmB,IAAIpQ,IAAIC,OAAR,EAAnB;AACAD,KAAIwQ,WAAJ,GAAkB,IAAIxQ,IAAIC,OAAR,EAAlB;AACAD,KAAIqJ,SAAJ,GAAgB,IAAIrJ,IAAI2Q,UAAR,EAAhB;;AAEA,KAAIhG,OAAOwF,OAAO,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,CAAT,EAAW,EAAX,EAAc,EAAd,EAAiB,EAAjB,EAAoB,CAApB,EAAuB,EAAvB,EAA2B,EAA3B,CAAP,CAAX,CANqC,CAMc;AACnD;AACA;AACA;AACA;AACA,KAAIzP,QAAQ,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,CAAT,EAAW,EAAX,EAAc,EAAd,EAAiB,EAAjB,EAAoB,CAApB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,CAAZ;AACA,KAAI4P,MAAMC,SAAS5F,IAAT,EAAejK,KAAf,CAAV;AACA;AACA;;AAEA;AACA;AACAV,KAAIM,IAAJ,CAAS4P,OAAT,EAAkB,gBAAgB7M,KAAKC,SAAL,CAAegN,GAAf,CAAlC;AACA,KAAIU,UAAUb,OAAOG,GAAP,CAAd;AACA,CApBD;AAqBA","file":"ddzsingle_robot.js","sourceRoot":"../../../../../../assets/Script/ComponentScript/component","sourcesContent":["//\n//  ddz_robot.js\n//  ddz\n//\n//  Created by weitongming on 14-04-28.\n//  封装robot的操作\n\n// 网络版的流程\n// client      server\n// 1、quickStart\n// \t\t\t2 quickStart\n// \t\t\t  tableInfo\n// 3、每个玩家发 ready （之前是有个sit的协议的）\n// \t\t\t4、广播ready给每个人\n// \t\t\t5、发回gameReady\n// \t\t\t6、发回next操作（这时客户端决定要显示叫地主还是打牌的按钮）\n// 7、点击叫地主的按钮\n// \t\t\t8、广播给玩家叫地主消息\n// \t\t\t9、叫完地主之后发回game_start(打开托管按钮)\n// \t\t\t   设置癞子牌\n// 10、card（出牌）\n// \t\t\t11、广播card\n// \t\t\t    可选的设置为托管\n// \t\t\t12、最后发 game_win\n\n// 单机ai流程梳理\n// client              AI\n// \t\t\t\t\t1、init 设置玩法、生成每个seat的牌和seatId、底牌、癞子牌 + sit +ready （client可以不依赖这个ready的回调来设置界面）\n// 2、玩家叫地主并通知AI\n// \t\t\t\t\t3、AI决定2个机器人是否叫地主，并反馈给client（玩家一定是2号，左手边是1号，右手边是0号，可以玩家先坐下，之后生成上家和下家；一定是玩家第一个叫地主，单机时如果不出牌就一定是等待）\n// \t\t\t\t\t4、反馈game_start( 决定谁是地主)\n// 5、自己出牌（需要有提示功能和判断牌型功能）或让AI主动出牌\n// 6、通知AI牌的变化\n// \t\t\t\t\t7、反馈一局游戏结束\n\nddz.AIRobot = cc.Class({\n\t_TAG : 'ddz.AIRobot',\n\n\t// --------- 公共部分\n\tctor: function() {\n\t\tddz.LOGD(this._TAG, \" in ctor new ddz.AIRobot\");\n\t\tthis._isGrab = false;//是不是抢地主模式\n\t\tthis.playerCards = []; // 3个玩家的手牌，单机模式下我的seatIndex = 1, 然后是右边玩家seatIndex =2, 左边seatIndex = 3。 出牌叫地主按从玩家起逆时针顺序\n\t\tthis.called = []; //叫地主的分\n\t\tthis.cards = []; // 一副牌，里面存的是number  0-53 + [54, 63]\n\t\tthis.cardNum = 54; // 共54张牌\n\t\tthis.dizhuPos = 0; // 地主所在的位置（叫地主后确定）\n\n\t\tthis.currentPlayPos = 0; // 当前在打牌的位置\n\t\tthis.lastPlayPos = 0; //上次出牌的玩家位置，如果与当前的一致，则表示主动出牌\n\t\tthis.playerNum = 3; // 玩家人数\n\t\tthis.dipai = []; // 底牌（共3张），叫地主时会被放入地主的手中\n\n\t\tthis.topCards = []; //不存储this.top_type，需要的时候重新计算，因为在上家出牌的时候虽然能知道是什么牌型，但是毕竟在出牌策略中夹杂一些保存card_type的东西，会影响复杂。算一遍card_type本身代价不大\n\n\t\t//数据统计\t\n\t\tthis.callMulti = 1; //\t叫分倍数,最高叫几分为几\n\t\tthis.bombCount = 0; //统计一局中炸弹数量, 有几次炸弹为几\n\t\tthis.chuntian = 1; //\t如果有打出春天，则为2\n\t\tthis.bcmulti = 1; //底牌, 备用\n\t\tthis.showmulti = 1; //明牌, 备用\n\t\tthis.seatPlayCardCount = [0,0,0];// 玩家出牌的次数,index:0为自己，1为右上角玩家，2为左上角玩家\n\t\tthis.winStreakNum = 0;// 记录我连胜的次数\n\t\tthis.killBossRoundNum = 0;// 闯关斗地主中记录我干掉当前boss所用的回合数\n\t\tthis.killBossRoundNumBack = 0;\n\n\t\tthis.isPassCurStage = false;\n\t\tthis.runningBigStageId = -1;\n\t\tthis.runningSmallStageId = -1;\n\n\t\t//类型判断\n\t\tthis._typeJudger = new ddz.AITypeJudger();\n\n\t\t//拖动出牌，选出最长牌\n\t\tthis._longestType = new ddz.AILongestType(this);\n\n\t\tthis._typeFinder = new ddz.typeFinder();\n\t},\n\n\taddBombCount: function() {\n\t\tthis.bombCount++;\n\t},\n\n\tsetIsGrab: function(bIsGrab) {\n\t\tthis._isGrab = bIsGrab;\n\t\thall.LOGD(this._TAG, 'setIsGrab = ' + this._isGrab);\n\t},\n\n\treset: function() {\n\t\tddz.LOGD(this._TAG, \"reset in AI.................\");\n\t\tthis.playerCards = [];\n\t\tthis.called = [];\n\t\tthis.cards = [];\n\t\tthis.dizhuPos = 0;\n\t\tthis._isGrab = false;\n\t\tthis.currentPlayPos = 0;\n\t\tthis.lastPlayPos = 0;\n\t\tthis.dipai = [];\n\n\t\tthis.topCards = [];\n\n\t\t//数据统计\t\n\t\tthis.callMulti = 1;\n\t\tthis.bombCount = 0;\n\t\tthis.chuntian = 1;\n\t\tthis.bcmulti = 1;\n\t\tthis.showmulti = 1;\n\t},\n\n\t// 洗牌\n\tshuffle: function() {\n\t\tvar deck = this.cards;\n\t\t// 先设置初始值，之后进行随机\n\t\tfor (var i = 0; i < this.cardNum; i++) {\n\t\t\tdeck[i] = i;\n\t\t}\n\t\tfor (var i = this.cardNum - 1; i > 0; i--) {\n\t\t\tvar r = Math.floor(Math.random() * (i + 1));\n\t\t\tvar tmp;\n\t\t\ttmp = deck[i];\n\t\t\tdeck[i] = deck[r];\n\t\t\tdeck[r] = tmp;\n\t\t\t// ddz.LOGD(i + '------->' + r);\n\t\t}\n\t},\n\n\t// 发牌，在shuffle之后\n\tfapai: function(argument) {\n\t\tfor (var i = 0; i < this.playerNum; i++) {\n\t\t\tvar cards = this.cards.slice(17 * i, 17 * (i + 1));\n\t\t\tthis.playerCards[i] = cards;\n\t\t};\n\t\tthis.dipai = this.cards.slice(51, 54); // 最后3张是底牌\n\n\t\tcc.log('test 0000 this.playerCards[0] = ' + JSON.stringify(this.playerCards[0]));\n\t\tcc.log('test 0001 this.playerCards[1] = ' + JSON.stringify(this.playerCards[1]));\n\t\tcc.log('test 0002 this.playerCards[2] = ' + JSON.stringify(this.playerCards[2]));\n\t\tcc.log('test 0003 this.dipai = ' + JSON.stringify(this.dipai));\n\t},\n\n\tsetCall: function(call, seatIndex) { //设定seatIndex位置叫的分数，目前只用于设定玩家叫分\n\t\tif (seatIndex < 1 || seatIndex > 3) {\n\t\t\tddz.LOGD(this._TAG, \"error seat index in set call!!! return\");\n\t\t\treturn;\n\t\t}\n\t\tthis.called[seatIndex - 1] = call;\n\t\tif (!this._isGrab && call == 3) {\n\t\t\tthis.callMulti = 3;\n\t\t\tthis.dizhuPos = 1;\n\t\t}\n\t\t//如果是抢地主模式，且是玩家第二次叫分，则确定地主pos\n\t\tif (this._isGrab && this.called.length > 1) {\n\t\t\tif (call == 1) {\n\t\t\t\tthis.dizhuPos = 1;\n\t\t\t\tthis.callMulti *= 2;\n\t\t\t} else { //最后一个抢地主的为地主\n\t\t\t\tthis.dizhuPos = this.called[2] == 1 ? 3 : 2;\n\t\t\t}\n\t\t}\n\t},\n\n\t//命令某座位玩家叫分，并返回所叫分，如果是玩家座位(seatIndex == 1)，则直接返回， 否则会生成分。\n\tgetCall: function(seatIndex) {\n\t\thall.LOGD(this._TAG, 'getCall seatIndex=' + seatIndex + ' and grab type = ' + this._isGrab);\n\t\tif (seatIndex < 1 || seatIndex > 3) {\n\t\t\thall.LOGD(this._TAG, \"error seat index in set call!!! return\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.called.length >= seatIndex) { //因为是命令叫分，所以不考虑重复让某玩家叫分的情况（已经叫过的话，get直接取值返回），一局游戏中此方法对一个seatIndex只会调用一次\n\t\t\thall.LOGD(this._TAG, \"this seatindex called, error ,return\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar call;\n\t\tif (this._isGrab) { //抢地主模式\n\t\t\tif (seatIndex == 2) { //右边玩家随机\n\t\t\t\tcall = Math.floor(Math.random() * 2); //随机为0或者1\n\t\t\t\tif (call > 0) {\n\t\t\t\t\tthis.callMulti *= 2;\n\t\t\t\t}\n\t\t\t\tthis.called[1] = call;\n\t\t\t} else if (seatIndex == 3) { //左边玩家，如果前2个都没叫，则一定叫，否则随机\n\t\t\t\tif (this.called[0] == 0 && this.called[1] == 0) {\n\t\t\t\t\tcall = 1;\n\t\t\t\t}\n\t\t\t\telse if (this.called[0]==1 && this.called[1]==0) {\n\t\t\t\t\t// 单机欢乐场简单处理，下家不抢，上家一定要抢\n\t\t\t\t\tcall = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcall = Math.floor(Math.random() * 2); //随机为0或者1\n\t\t\t\t\tif (call > 0) {\n\t\t\t\t\t\tthis.callMulti *= 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.called[2] = call;\n\t\t\t} else { //should not enter this scope\n\t\t\t\tcall = this.called[0];\n\t\t\t}\n\t\t\t//抢地主模式下，只有这2种情况可以确定地主\n\t\t\t//如果玩家没有叫地主，则左边玩家叫完后，直接确定地主座位\n\t\t\tif (this.called[0] == 0) {\n\t\t\t\tthis.dizhuPos = this.called[2] == 1 ? 3 : 2; //如果左边玩家叫分为1，则一定是左边地主，否则一定是右边地主\n\t\t\t} else {\n\t\t\t\tif (this.called.length == 3 && this.called[1] == 0 && this.called[2] == 0) { //必须用length来判断，否则undefined == 0\n\t\t\t\t\tthis.dizhuPos = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else { //叫地主模式\n\t\t\tif (seatIndex == 1) { //should not enter this scope\n\t\t\t\tcall = this.called[0];\n\t\t\t} else if (seatIndex == 2) { //右边玩家，必须比玩家分大，或者不叫\n\t\t\t\tdo {\n\t\t\t\t\tcall = Math.floor(Math.random() * 4); //0,1,2,3\n\t\t\t\t} while (call != 0 && call <= this.called[0]);\n\t\t\t\tthis.called[1] = call;\n\t\t\t\tif (call > 0) {\n\t\t\t\t\tthis.callMulti = call;\n\t\t\t\t}\n\t\t\t} else { //左边玩家叫分，只要轮到左边玩家叫，一定叫3分,防止了都不叫开不了游戏\n\t\t\t\tcall = 3;\n\t\t\t\tthis.callMulti = 3;\n\t\t\t\tthis.called[2] = call;\n\t\t\t}\n\n\t\t\tif (call == 3) { //有叫3分的，直接该座位为地主\n\t\t\t\tthis.dizhuPos = seatIndex;\n\t\t\t}\n\t\t}\n\t\treturn call;\n\t},\n\n\tonDestroy: function() {\n\t\t// 释放\n\t\tthis._super();\n\t\tthis._typeFinder.destroy();\n\t\t// todo：释放图片资源什么的\n\t\tddz.LOGD(this._TAG, \" onDestroy ---->ddz.AIRobot\");\n\n\t},\n\n\tplayAGame: function() {\n\t\tthis.initGame();\n\t},\n\n\t// 初始化，参数依次是\n\tinitGame: function() {\n\t\tddz.LOGD(this._TAG, \"init game in AI\");\n\t\tthis.shuffle();\n\t\tthis.fapai();\n\t\t// this.zhengli(); // 整理成一定的数据结构，以便进行进一步的处理\n\n\t\t// this.jisuanfenshu(); // 计算分数\n\t\t// this.jiaopai();\t\t\t// 叫牌\n\n\t\t// this.setLoard(); // 确定地主\n\n\t\t// this.play();            //  开始打牌的流程\n\t},\n\n\tplayCards: function(seatIndex, cards) { //某个座位的玩家出牌, 这里也不需要删除，因为在playcontroller会进行删除\n\t\tthis.currentPlayPos = hall.GlobalFuncs.GetNextIndex(this.currentPlayPos);\n\t\tif (cards.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\t// 统计玩家出牌的次数\n\t\tthis.seatPlayCardCount[seatIndex - 1] +=1;\n\t\tthis.lastPlayPos = seatIndex;\n\t\tthis.topCards = cards;\n\t\tddz.LOGD(this._TAG, \"this.topCards = \" + this.topCards);\n\t},\n\n\t// 让AI打一手牌,返回打的牌（num的数组）,主动出牌不传topcards参数，即为undefined\n\tgenOneStep: function(isInTrust) {\n\t\tvar cards;\n\t\tif (this.lastPlayPos == 0 || this.lastPlayPos == this.currentPlayPos)\n\t\t{\n\t\t\t//主动出牌\n\t\t\tddz.LOGD(this._TAG, \"play cards actively......\");\n\t\t\tcards = this.playActively(this.currentPlayPos);\n\t\t} \n\t\telse\n\t\t{\n\t\t\t//被动出牌\n\t\t\tcards = this._passivityCards();\n\t\t}\n\t\tif (!isInTrust) {\n\t\t\tthis.playCards(this.currentPlayPos, cards);\n\t\t}\n\n\t\treturn cards;\n\t},\n\n\t// 换牌\n\texchangeCard: function(cardId) {\n\t\t// 根据传入的cardId和上家的牌playerCards[2]进行随即替换\n\t\tvar srcIdx = this._findId(cardId, this.playerCards[0]);\n\t\tif (srcIdx < 0) {\n\t\t\tddz.LOGD('exchangeCard find srcIdx is error !!!');\n\t\t\treturn -1;\n\t\t}\n\n\t\t// 随机更换牌的位置\n\t\tvar randomIndex =  parseInt(Math.random() * this.playerCards[2].length);\n\n\t\tddz.LOGD('exchangeCard srcval = ' + this.playerCards[0][srcIdx]);\n\t\tddz.LOGD('randomIndex = ' + randomIndex + ' dstCard dstval = ' + this.playerCards[2][randomIndex]);\n\n\t\t// 交换两个数的位置\n\t\tvar dst = this.playerCards[2][randomIndex];\n\t\tthis.playerCards[2][randomIndex] = this.playerCards[0][srcIdx];\n\t\tthis.playerCards[0][srcIdx] = dst;\n\n\t\treturn dst;\n\t},\n\n\t_findId: function(cardId, array) {\n\t\t// 寻找牌的在数组中的下标\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tif(array[i] == cardId) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\t_passivityCards: function() {\n\t\t//被动出牌，管topcard\n\t\tvar types = this.judgeType(this.topCards, false);\n\t\tif(types.length== 0)\n\t\t{\n\t\t\tddz.LOGD(this._TAG, \"error!!! top cards illegal...\");\n\t\t\thall.GlobalFuncs.PrintArray(this.topCards);\n\t\t}\n\t\tif (!this._isIntervene(types[0])) {\n\t\t\tddz.LOGD(this._TAG, \"not isIntervene, this.currentPlayPos = \" + this.currentPlayPos);\n\t\t\treturn [];\n\t\t}\n\n\t\tvar win_cards = this.findWinCardsFromArray(types[0], this.playerCards[this.currentPlayPos - 1]); //[[2,3], [4, 5]]...所有能赢的数组，挑第一个传出去即可\n\n\t\t//过滤跟牌，当前出牌的为非地主且上次出牌的也不是地主\n\t\tif (!this._isDizhu(this.currentPlayPos) && !this._isDizhu(this.lastPlayPos) && win_cards.length>0) {\n\t\t\twin_cards = this._filterFollowCards(win_cards);\n\t\t}\n\t\tif(types[0].getType() == hall.Enums.PaixingType.SHUNZI_CARD){// V3.705产品要求其他两个玩家出顺子时的顺序为从左到右从大到小排列\n\t\t\treturn win_cards.length > 0 ? win_cards[0].reverse() : [];\n\t\t}else{\n\t\t\treturn win_cards.length > 0 ? win_cards[0] : [];\n\t\t}\n\t},\n\n\t/*\n\t  *是否管上家出的牌\n\t  *argu : cardType,上家的牌类型\n\t */\n\t_isIntervene: function(cardType) {\n\t\t//原则：1，地主总要出；2，上次出牌的是我同伙，不出；否则，出；\n\t\tif (this.dizhuPos == this.currentPlayPos) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.dizhuPos == this.lastPlayPos) {\n\t\t\t//上次是地主出的，管上\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._isIntervenePartner(cardType);\n\t},\n\n\t//是否干预队友\n\t_isIntervenePartner: function(cardType) {\n\t\t//进入到此函数中时，上次出牌的一定是队友\n\t\tif (this.dizhuPos == this.lastPlayPos) {\n\t\t\tddz.LOGD(this._TAG, \"Error，not my partner !!!!\");\n\t\t\treturn true;\n\t\t}\n\n\t\t//1，只有一张牌时干预队友\n\t\tif(this._getCardsCnt(this.currentPlayPos) == 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//2，队友只有一张牌了，不干预\n\t\tif (this._getCardsCnt(this.lastPlayPos) <= 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//策划需求：当手牌≤2张时，按现有AI出牌方式出牌\n\t\tif(this._getCardsCnt(this.currentPlayPos) <= 2) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//根据牌型判断是否跟进队友的牌\n\t\treturn this._isFollowUpPartner(cardType);\n\t},\n\n\t//是否跟进队友的牌\n\t_isFollowUpPartner :function(cardType) {\n\t\tif (this._isDizhu(this.lastPlayPos)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif(this._isDizhu(hall.GlobalFuncs.getPreIndex(this.currentPlayPos))) {\n\t\t\t//我的上家是地主，此时地主没有出牌，不跟\n\t\t\treturn false;\n\t\t}\n\n\t\tif (cardType.getType() > hall.Enums.PaixingType.DOUBLE_CARD) {\n\t\t\t//队友出的是大于对子的牌型，不跟\n\t\t\treturn false;\n\t\t}\n\n\t\t//跟进单牌的小牌点(<A)\n\t\tif (cardType.getType() == hall.Enums.PaixingType.SINGLE_CARD) {\n\t\t\t//跟进小于A的牌\n\t\t\tif (cardType.getPoint()<11) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t//跟进小于K的对子\n\t\tif (cardType.getPoint()<10) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t//过滤跟队友的牌\n\t_filterFollowCards:function(srcCards) {\n\t\t//TODO\n\t\t//如果跟的是对2、单王、小王的就不跟了\n\t\t//防止用对2、大、小王压死队友\n\t\tif (srcCards.length <= 0) {\n\t\t\treturn srcCards;\n\t\t}\n\t\tfor(var i=0; i<srcCards.length; ++i) {\n\t\t\tddz.LOGD(this._TAG, \"srcCard[\"+i+\"] = \" + srcCards[i]);\n\t\t}\n\t\tvar types = this.judgeType(srcCards[0], false);\n\t\tddz.LOGD(this._TAG, \"types = \" + types);\n\t\tif (types.length < 0) {\n\t\t\treturn srcCards;\n\t\t}\n\t\tif (types[0].getPoint() >= 12) {\n\t\t\t//\n\t\t\tddz.LOGD(this._TAG, \"I can not follow : = \" + types[0].getPoint());\n\t\t\treturn [];\n\t\t}\n\t\treturn srcCards;\n\t},\n\n\t//获取玩家的手牌数量\n\t_getCardsCnt: function(playerPos) {\n\t\treturn this.playerCards[playerPos - 1].length;\n\t},\n\n\t//是否是地主\n\t_isDizhu: function(pos) {\n\t\treturn this.dizhuPos == pos;\n\t},\n\n\t/*********\n\t * arr - 带判断的牌数组\n\t * bLzChangable - 是否转化为癞子牌\n\t *\ttrue - 可以转化\n\t * \tfalse - 不可以转化\n\t */\n\tjudgeType: function(arr, bLzChangable) {\t// bLzChangable 表示癞子牌是否需要转化。判断topcard的时候，癞子牌已经是其实际值，不需要转化。主动出牌选牌时，癞子可以转换成任意牌\n\t\tvar cards = arr.slice(0);\t//避免修改原数组\n\t\tvar len = cards.length;\n\t\tvar laiziCnt = 0;\n\t\tif(!bLzChangable) {\t\t//癞子不可以转化，则把癞子牌转成其实际代表的牌\n\t\t\tfor(var i = 0; i < len; i++) {\n\t\t\t\tif(cards[i] > 53) {\n\t\t\t\t\tcards[i] -= 54;\t\n\t\t\t\t\t++laiziCnt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tddz.LOGD(this._TAG, \"dump cards arr....\");\n\t\tcc.dump(arr);\n\t\t\n\t\thall.GlobalFuncs.PrintArray(cards);\n\t\tvar dicarr = this._getPointCountDicArray(cards);\n\t\tvar lz_obj = this._getLaiziObject(dicarr);\n\t\tvar newarr = this._fillDicarr(dicarr);\n\t\tddz.LOGD(this._TAG, \"dump new arr......\");\n\t\tfor (var index = 0; index < newarr.length; index++) {\n\t\t\tvar tmp = newarr[index];\n\t\t\tddz.LOGD(this._TAG, \"point \" + tmp.point + \" count \" + tmp.count + \" cards \" + tmp.cards.length);\n\t\t}\n\t\treturn this._typeJudger.judgeType(cards, dicarr, newarr, lz_obj, laiziCnt);\n\t},\n\n\tcheckGameOver: function() {\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\tif (this.playerCards[i].length == 0) {\n\t\t\t\tvar dizhuwin = (i + 1 == this.dizhuPos);\n\t\t\t\treturn {\n\t\t\t\t\t\"dizhuwin\": dizhuwin\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// //for test\n\t\t// return {\n\t\t// \t\t\t\"dizhuwin\": true\n\t\t// \t\t}\n\t\treturn null;\n\t},\n\n\tstartGame: function() { //不要将底牌加入手牌，因为在playController里面, seatInfo.cards与这里的player[]是一个对象，两个地方都插入的话会重复\n\t\tddz.LOGD(this._TAG, \"start game, set current playpos \" + this.dizhuPos);\n\t\tthis.currentPlayPos = this.dizhuPos;\n\t},\n\n\t//----------------------------------------------- 判断牌型相关\n\n\t_sortByCount: function(o1, o2) {\n\t\treturn o1.count < o2.count;\n\t},\n\n\t_sortByPoint: function(o1, o2) {\n\t\treturn o1.point > o2.point;\n\t},\n\n\t_getLaiziObject: function(dicarr) {\n\t\tddz.LOGD('dic arr size is ' + dicarr.length);\n\t\tdicarr.sort(this._sortByPoint);\n\n\t\t//找出癞子数目\n\t\tvar lz_obj = null;\n\t\tvar tmp = dicarr[dicarr.length - 1]; //从小到大排列，所以最后一个是value最大\n\t\tif (null != tmp && tmp.point == 15) {\n\t\t\tlz_obj = {\n\t\t\t\tcount: tmp.count,\n\t\t\t\tpoint: tmp.point,\n\t\t\t\tcards: tmp.cards\n\t\t\t};\n\t\t\ttmp.count = 0; //癞子牌留个占位，因为癞子牌可以当做自己用，例如LLL55544,L为6则为66655544，L为3则为55544433\n\t\t\ttmp.point = hall.GlobalFuncs.GetCardValueByPoint(lz_obj.cards[0] - 53);\n\t\t\ttmp.cards = [];\n\t\t} else {\n\t\t\tlz_obj = {\n\t\t\t\tcount: 0,\n\t\t\t\tpoint: -1,\n\t\t\t\tcards: []\n\t\t\t};\n\t\t}\n\t\treturn lz_obj;\n\t},\n\n\t_getPointCountDicArray: function(arr) { //把数组number，转换成点数：牌数的数组\t点数3 = 0最小，大王 = 14最大\n\t\tvar cdic = {};\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tvar num = arr[i];\n\t\t\tvar pos = hall.GlobalFuncs.getCardValueByNum(num);\n\t\t\tvar key = \"\" + pos;\n\t\t\tvar value = cdic[key];\n\t\t\tif (value) {\n\t\t\t\tvalue.count++;\n\t\t\t\tvalue.cards.push(num);\n\t\t\t} else {\n\t\t\t\tvalue = {\n\t\t\t\t\t\"count\": 1,\n\t\t\t\t\t\"cards\": [num],\n\t\t\t\t};\n\t\t\t\tcdic[key] = value;\n\t\t\t}\n\t\t}\n\t\tfor (var key in cdic) { //把牌排序，避免选2，3张相同点数的时候选上位置上不相连的\n\t\t\tvar cards = cdic[key].cards;\n\t\t\tif (cards.length > 1) {\n\t\t\t\tcards.sort(hall.GlobalFuncs.SortNumberFunc);\n\t\t\t}\n\t\t}\n\t\t// ddz.LOGD(this._TAG, \"dump cdic in get point dic array..........\");\n\t\t// for (var key in cdic) {\n\t\t// \tddz.LOGD(this._TAG, \"point : \" + key + \" count \" + cdic[key].count);\n\t\t// \tvar nums = cdic[key].cards;\n\t\t// \tfor (var i = 0; i < nums.length; i++) {\n\t\t// \t\tddz.LOGD(nums[i] + \"\\t\");\n\t\t// \t}\n\t\t// }\n\t\t// ddz.LOGD(this._TAG, \"dump cdic in get point dic array end..........\");\n\t\tvar return_arr = [];\n\t\tfor (var key in cdic) {\n\t\t\treturn_arr.push({\n\t\t\t\t\"point\": parseInt(key),\n\t\t\t\t\"count\": cdic[key].count,\n\t\t\t\t\"cards\": cdic[key].cards\n\t\t\t});\n\t\t}\n\t\treturn return_arr;\n\t},\n\n\t_getPCArrayByCount: function(arr) { //把数组number，转换成点数：牌数数组， 并将此数组按count从大到小排序\n\t\tvar return_arr = this._getPointCountDicArray(arr);\n\t\treturn_arr.sort(this._sortByCount);\n\t\treturn return_arr;\n\t},\n\n\t_getPCArrayByPoint: function(arr) { //把数组number，转换成点数：牌数数组， 并将此数组按point从小到大排序\n\t\tvar return_arr = this._getPointCountDicArray(arr);\n\t\treturn_arr.sort(this._sortByPoint);\n\t\treturn return_arr;\n\t},\n\n\t_fillDicarr: function(dicarr) { //检测连续的时候，因为癞子可以用来填充连续，所以检测连续的数组必须把没有的点数用数量0填充\n\t\t//才能每个点数都检测到（虽然飞机的时候，因为癞子数只有4，不可能连续填充2个，但为了统一，还是全部填充）\n\t\tdicarr.sort(this._sortByPoint);\n\t\tdicarr.reverse(); //按点数从大到小排列\n\t\tvar newarr = [];\n\t\tvar start = 14;\n\t\tfor (var index = 0; index < dicarr.length; index++) { //dicarr是从大到小\n\t\t\tvar point = dicarr[index].point;\n\t\t\tif (point > 14) { //dicarr不能出现癞子牌（point = 15）\n\t\t\t\tddz.LOGD(this._TAG, \"error! should not contain laizi in dicarr\");\n\t\t\t\tbreak;\n\t\t\t} \n\t\t\tfor (var i = start; i > point; i--) {\n\t\t\t\tnewarr.push({\n\t\t\t\t\t\"point\": i,\n\t\t\t\t\t\"count\": 0,\n\t\t\t\t\t\"cards\": []\n\t\t\t\t});\n\t\t\t}\n\t\t\tnewarr.push(dicarr[index]);\n\t\t\tstart = point - 1;\n\t\t\tif (index == dicarr.length - 1 && start >= 0) { //到最小点数时，填充到3\n\t\t\t\tfor (var i = 0; i <= start; i++) {\n\t\t\t\t\tnewarr.push({\n\t\t\t\t\t\t\"point\": i,\n\t\t\t\t\t\t\"count\": 0,\n\t\t\t\t\t\t\"cards\": []\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn newarr;\n\t},\n\n\t//[20140521][jinrifeng]添加癞子参数(pLaizi)和处理\n\t//找最小的单牌，用来给三带一， 四带二，飞机带等等, bDivide表示是否拆分，如果不拆分，则不需要ex参数\n\t//pcArray为已经转换好的point-count数组，按point排好序。count为数量， ex为需要排除的点数， 策略是从小到大找单牌，然后再拆牌\n\t//包含癞子的情况，如果是主动出牌，先寻找单牌，如果没有\n\t_findMinSingle: function(pLaizi, pcArray, count, ex, bDivide) {\t\t//如果pcArray是从小到大排列，则是从最小取。 如果是从大到小排列，则是从最大取\n        var newarr = pcArray.slice(0);\n\t\tddz.LOGD(this._TAG, \"[_findMinSingle][in] newarr.length = \" + newarr.length);\n\t\t// 把newarr按照生序排列\n\t\tnewarr.sort(this._sortByPoint);\n\t\tvar returnArr = [];\n\t\tfor (var i = 0; i < newarr.length; i++) {\n\t\t\tvar t = newarr[i];\n\t\t\tddz.LOGD(this._TAG, \"_findMinSingle t.point = \" + t.point);\n\t\t\tif (t.count != 1 || (bDivide && hall.GlobalFuncs.FindInArray(ex, t.point) >= 0) //只有需要拆分的时候，才需要去判断ex\n\t\t\t\t|| t.point == 15) { //在找单牌时，先排除癞子。\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturnArr.push(t.cards[0]);\n\t\t\tddz.LOGD(this._TAG, \"t.cards[0] = \" + t.cards[0]);\n\t\t\tif (returnArr.length >= count) {\n\t\t\t\tddz.LOGD(this._TAG, \"[_findMinSingle][renturn][找到单牌返回]\");\n\t\t\t\treturn returnArr;\n\t\t\t}\n\t\t}\n\n\n   //暂时注释掉，不考虑癞子\n   //     if (pLaizi != null && pLaizi.count > 0) {\n   //     \t\t//取两张单牌时，只给一个癞子。\n   //     \t\treturnArr.push(pLaizi.cards[0]);\n   //         \tif (returnArr.length >= count) {\n   //         \t\tddz.LOGD(this._TAG, \"[_findMinSingle][renturn][无单牌，找到癞子返回]\");\n\t\t\t// \treturn returnArr;\n\t\t\t// }\n   //     \t}\n\n\t\tif (bDivide) { //单牌不够的时候，拆分对子或者多牌来凑数\n\t\t\tfor (var i = 0; i < newarr.length; i++) {\n\t\t\t\tvar t = newarr[i];\n\t\t\t\tif (t.count > 1 && hall.GlobalFuncs.FindInArray(ex, t.point) < 0) {\n\t\t\t\t\tvar cards = t.cards;\n\t\t\t\t\tfor (var j = 0; j < cards.length; j++) {\n\t\t\t\t\t\treturnArr.push(cards[j]);\n\t\t\t\t\t\tif (returnArr.length >= count) {\n\t\t\t\t\t\t\tddz.LOGD(this._TAG, \"[_findMinSingle][renturn][拆分对子和多牌后返回]\");\n\t\t\t\t\t\t\treturn returnArr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tddz.LOGD(this._TAG, \"[_findMinSingle][out][返回空]\");\n\t\treturn []; //找不到需要的数量，直接返回空数组\n\t},\n\n\t//[20140521][jinrifeng]添加癞子参数(pLaizi)和处理\n\t//找最小的对子牌，用来给三带2， 四带二，飞机带等等， bDivide表示是否拆分3牌，如果不拆分，则不需要ex参数\n\t//pcArray为已经转换好的point-count数组，按point排好序。count为数量， ex为需要排除的点数， 策略是从小到大找单牌，然后再拆牌\n\t_findMinDouble: function(pLaizi, pcArray, count, ex, bDivide) {\t\t\t//如果pcArray是从小到大排列，则是从最小取。 如果是从大到小排列，则是从最大取\n\t\tddz.LOGD(this._TAG, \"[_findMinDouble][in]\");\n\t\t//pcArray.sort(this._sortByPoint);\t//确保是按点数从小到大排序\n\t\tfor(var i = 0;i<pcArray.length;i++){\n\t\t\tvar ele = pcArray[i];\n\t\t\tddz.LOGD(this._TAG, \"长度：\"+ele.count);\n\t\t\tddz.CardTable.print(ele.cards);\n\t\t}\n        var newarr = pcArray.slice(0);\n        var returnArr = [];\n\t\tvar laizi_use = 0;\n\t\tfor (var i = 0; i < newarr.length; i++) {\n\t\t\tvar t = newarr[i];\n\t\t\tif (t.count != 2 || (bDivide && hall.GlobalFuncs.FindInArray(ex, t.point) >= 0) || t.point == 15) { //只有需要拆分的时候，才需要去判断ex\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturnArr.push([t.cards[0], t.cards[1]]);\n\t\t\tif (returnArr.length >= count) {\n\t\t\t\tddz.LOGD(this._TAG, \"[_findMinDouble][renturn][找到对返回]\");\n\t\t\t\treturn returnArr;\n\t\t\t}\n\t\t}\n\n\n        //如果有癞子，寻找单牌后拼接成双牌。\n       if (pLaizi != null && pLaizi.count > 0) {\n           for (var i = 0; i < newarr.length; i++) {\n               var t = newarr[i];\n               if (t.point != 15 && t.count ==1 && (hall.GlobalFuncs.FindInArray(ex, t.point) < 0 || !bDivide)) { //寻找单牌\n                   returnArr.push([t.cards[0],hall.GlobalFuncs.getLaiziNumByValue(t.point)]);\n                   laizi_use++;\n                   if (returnArr.length >= count){\n                   \t   pLaizi.count -= laizi_use;  //更新癞子数目\n                       ddz.LOGD(this._TAG, \"[_findMinDouble][renturn][返回单牌带癞子]\");\n                       return returnArr;\n                   }\n                   if (laizi_use >= pLaizi.count) \n                   \t\tbreak;\n                }\n            }\n        }\n\n\t\tif (bDivide) { //拆分3牌，不拆分炸弹\n\t\t\tfor (var i = 0; i < newarr.length; i++) { //单牌不够的时候，拆分3张来凑数, 不拆分炸弹\n\t\t\t\tvar t = newarr[i];\n\t\t\t\tif (t.count == 3 && hall.GlobalFuncs.FindInArray(ex, t.point) < 0) {\n\t\t\t\t\tddz.LOGD(this._TAG, \"split 3 cards in find min double\");\n\t\t\t\t\tvar cards = t.cards;\n\t\t\t\t\treturnArr.push([cards[0], cards[1]]);\n\t\t\t\t\tif (returnArr.length >= count) {\n\t\t\t\t\t\tpLaizi.count -= laizi_use;  //更新癞子数目\n\t\t\t\t\t\tddz.LOGD(this._TAG, \"[_findMinDouble][renturn][拆分3牌]\");\n\t\t\t\t\t\treturn returnArr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n                                   \n        //需要两个癞子变成对的情况\n        if (pLaizi != null && pLaizi.count - laizi_use > 1) {\n           returnArr.push([pLaizi.cards[0],pLaizi.cards[1]]);\n           laizi_use += 2;\n           if (returnArr.length >= count) {\n           \t\tpLaizi.count -= laizi_use;  //更新癞子数目\n           \t \tddz.LOGD(this._TAG, \"[_findMinDouble][renturn][返回2个癞子]\");\n           \t\treturn returnArr;\n\t\t    }\n        }\n                                   \n\t\tddz.LOGD(this._TAG, \"[_findMinDouble][out][返回空]\");\n\t\treturn []; //找不到需要的数量，直接返回null\n\t},\n\n\t_findBomb: function(pcArray, lz_obj) {\n\t\tddz.LOGD(this._TAG, \"start find bomb ....\");\n\t\tvar return_arr = [];\n\t\t\n\t\tfor(var laiziMax = 0; laiziMax <= lz_obj.count; laiziMax++){\n\t\t\tddz.LOGD('查找需要' + laiziMax + '个癞子的炸弹');\n\t\t\tvar newarr = this._fillDicarr(pcArray);\n\t\t\tfor (var i = newarr.length - 1; i >= 2; i--) { //最后找炸弹\n\t\t\t\tvar t = newarr[i];\n\t\t\t\tvar need = 4 - t.count;\n\t\t\t\tif ((need == laiziMax) && (need < 4) && (need <= lz_obj.count)) {\t\n\t\t\t\t\tvar cards = t.cards.slice(0);\n\t\t\t\t\tvar n = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\t\t\t\t\tfor(var j = 0; j < need; j++) {\n\t\t\t\t\t\tcards.push(n);\n\t\t\t\t\t}\n\t\t\t\t\treturn_arr.push(cards);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 癞子炸弹\n\t\tif(lz_obj.count == 4) {\n\t\t\tvar c = lz_obj.cards[0];\n\t\t\treturn_arr.push([c, c, c, c]);\n\t\t}\n\t\tddz.LOGD(this._TAG, \"find bomb length \" + return_arr.length);\n\t\treturn return_arr;\n\t},\n\n\t_findRocket: function(pcArray) {\n\t\tddz.LOGD(this._TAG, \"start find rocket ....\");\n\t\tvar bking = false;\n\t\tvar rking = false;\n\t\tfor (var i = pcArray.length - 1; i >= 0; i--) { //最后找火箭\n\t\t\tvar t = pcArray[i];\n\t\t\tif (t.point == 14) {\n\t\t\t\trking = true;\n\t\t\t} \n\t\t\telse if (t.point == 13) {\n\t\t\t\tbking = true;\n\t\t\t}\n\t\t\tif (rking && bking) { //一旦找到就break出去\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t\tvar ret = bking&&rking;\n\t\tif (ret) {\n\t\t\tddz.LOGD(this._TAG, \"找到了火箭\");\n\t\t}\n\t\telse{\n\t\t\tddz.LOGD(this._TAG, \"没找到火箭\");\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// 查找主动出牌的提示\n\tfindActivePlayCards: function(array) {\n\t\t// 判断当前的手牌能否组合成一个有效牌型\n\t\tvar types = this.judgeType(array, true);\n\t\tif (types.length > 0) {\n\t\t\treturn [array];\n\t\t}\n\n\t\tvar result = [];\n\t\tvar tmpArr = this._getPCArrayByPoint(array);\n\t\tvar lz_obj = this._getLaiziObject(tmpArr);\n\n\t\tthis._typeFinder.init(tmpArr, lz_obj);\n\n\t\treturn this._typeFinder.find();\n\t},\n\n\t// 查找手牌中的炸弹个数\n\tfindBombResult: function(card) {\n\t\t// _findBomb\n\t\tvar result = [];\n\t\tvar tmpArr = this._getPCArrayByPoint(array);\n\t\tvar lz_obj = this._getLaiziObject(tmpArr);\n\n\t\tthis._typeFinder.init(tmpArr, lz_obj);\n\n\t\tvar bomb = this._typeFinder._findBomb();\t\n\t\tvar rocket = this._typeFinder._findRocket();\n\n\t\treturn bomb.length + rocket.length;\n\t},\n\n\t/* \n\t * 被动出牌：从牌堆中找出可以赢过的牌数组\n\t * array是指的0-53的值，当然，癞子>53\n\t * type - 牌型\n\t * array - 手牌\n\t */\n\tfindWinCardsFromArray: function(type, array) { //从array中找到所有可以赢过type的手牌组成数组传回\n\t\tddz.LOGD(this._TAG, \"in find win cards from arrary\");\n\t\tvar len = array.length;\n\t\tvar tmpArr = this._getPCArrayByPoint(array);\n\n\t\t//[20140521][jinrifeng] 癞子处理 使用接口\n\t\tvar lz_obj = this._getLaiziObject(tmpArr);\n\t\tddz.LOGD(this._TAG, \"癞子张数in findWinCardsFromArray\"+lz_obj.count);\n\t\tddz.LOGD(this._TAG, \"dump tmparr in find wincards\");\n\t\tfor(var index = 0; index < tmpArr.length; index++) {\n\t\t\tvar f = tmpArr[index];\n\t\t\tddz.LOGD(this._TAG, \" point \" + f.point + \"count \" + f.count );\n\t\t}\n\n\t\t// 单独处理火箭和火箭致胜的情况\n\t\tif( type.getType() == hall.Enums.PaixingType.ROCKET ){\n\t\t\treturn []; \t// 火箭最大，管不上\n\t\t}\n\n\t\t// 火箭致胜：火箭+一手牌，先出火箭\n\t\tif(this._rocketWin(array, true)){\n\t\t\tvar return_arr = [];\n\t\t\treturn_arr.push([52, 53]);\t\n\t\t\treturn return_arr;\n\t\t}\n\n\t\tswitch (type.getType()) {\n\t\t\t\t//单牌\n\t\t\tcase hall.Enums.PaixingType.SINGLE_CARD:\n\t\t\t\treturn this._findWinSingle(type, tmpArr, lz_obj);\n\n\t\t\t\t//对牌\n\t\t\tcase hall.Enums.PaixingType.DOUBLE_CARD:\n\t\t\t\treturn this._findWinDouble(type, tmpArr, lz_obj);\n\n\t\t\t\t//三张，三带一，三带二\n\t\t\tcase hall.Enums.PaixingType.THREE_CARD:\n\t\t\tcase hall.Enums.PaixingType.THREE_ONE_CARD:\n\t\t\tcase hall.Enums.PaixingType.THREE_TWO_CARD:\n\t\t\t\tddz.LOGD(this._TAG, \"测试三带类型\"+type.getType());\n\t\t\t\treturn this._findWinThree(type, tmpArr, lz_obj);\n\n\t\t\t\t//4张，4带2单， 4带2对\n\t\t\tcase hall.Enums.PaixingType.BOMB_CARD:\n\t\t\tcase hall.Enums.PaixingType.BOMB_TWO_CARD:\n\t\t\tcase hall.Enums.PaixingType.BOMB_TWO_TWO_CARD:\n\t\t\t\treturn this._findWinBomb(type, tmpArr, lz_obj);\n\n\t\t\t\t//顺子，连对，飞机毛都不带，飞机带2单，飞机带2对\n\t\t\tcase hall.Enums.PaixingType.SHUNZI_CARD:\n\t\t\tcase hall.Enums.PaixingType.LIANDUI_CARD:\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_CARD:\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD:\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD:\n\t\t\t\treturn this._findWinContinous(type, tmpArr, lz_obj);\n\n\t\t\tdefault:\n\t\t\t\tddz.LOGD(this._TAG, \"error card_type in findWinCardsFromArray!!!\");\n\t\t\t\treturn [];\n\t\t}\n\t},\n\n\t//被动出牌：单牌\n\t//从array中找到管type的手牌集合，策略是先找大于的单牌，其次再拆散其他牌型\n\t_findWinSingle: function(type, pc, lz_obj) {\n\t\tddz.LOGD(this._TAG, \"find win single......in robots\");\n\t\t//返回结果，把每一种能管得住type得牌放入其中\n\t\tvar return_arr = [];\n\t\tvar needSingleJoker = true;\n\t\t\n\t\t//优先把单数的牌都push进去\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.point > type.getPoint() && t.count == 1) {\n\t\t\t\treturn_arr.push([t.cards[0]]);\n\t\t\t}\n\t\t}\n\n\t\t//其次拆散非单牌\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.point > type.getPoint() && (t.count == 2 || t.count == 3)) {\n\t\t\t\treturn_arr.push([t.cards[0]]);\n\t\t\t}\n\t\t}\n\n\t\t///////////////////////////////////////////////////////////////考虑癞子\n\t\t//分为两种情况\n\t\tif (lz_obj.count >= 1) {\n\t\t\t//癞子牌不用作癞子，用作它本来的值\n\t\t\t//癞子的实际pos值\n\t\t\tvar realPoint = hall.GlobalFuncs.GetCardValueByPoint(hall.GlobalFuncs.GetCardPointByNum(lz_obj.cards[0]));\n\t\t\tif (realPoint > type.getPoint()) {\n\t\t\t\treturn_arr.push([lz_obj.cards[0]]);\n\t\t\t}\n\n\t\t\t//癞子牌用作癞子\n\t\t\t//哎呦我操，对于单牌来说，癞子没法癞\n\t\t}\n\n\t\t//最后是炸弹\n\t\t//不找火箭，因为有大小王则在前面选单会选择\n\t\tddz.LOGD(this._TAG, \"found bomb in find win single\");\n\t\tvar bombs = this._findBomb(pc, lz_obj);\n\t\treturn_arr = return_arr.concat(bombs);\n\n\t\t//找火箭\n\t\tif(this._findRocket(pc)){\n\t\t\treturn_arr.push([52, 53]);\n\t\t}\n\n\t\t//查找完毕，返回结果\n\t\treturn return_arr;\n\t},\n\n\t//被动出牌：对子\n\t_findWinDouble: function(type, pc, lz_obj) {\n\t\tddz.LOGD(this._TAG, \"find win double......in robots\");\n\n\t\tvar return_arr = [];\n\n\t\t////////////////////////////////////////////////////////////////////简单搜索\n\t\t//优先把对子的牌都push进去\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.point > type.getPoint() && t.count == 2) {\n\t\t\t\treturn_arr.push([t.cards[0], t.cards[1]]);\n\t\t\t}\n\t\t}\n\n\t\t//////////////////////////////////////////////////////////////////////考虑癞子\n\t\tif (lz_obj.count >= 1) {\n\n\t\t\tddz.LOGD(this._TAG, \"使用癞子 in _findWinDouble\");\n\t\t\t//(1)当癞子牌当做癞子使用时,凑对子\n\n\t\t\tfor(var nIndex = 0; nIndex < pc.length; nIndex++){\n\t\t\t\tvar t = pc[nIndex];\n\n\t\t\t\tif (t.point > type.getPoint()&&t.count == 1) {\n\t\t\t\t\t//不能和大小王凑对子\n\t\t\t\t\tif (t.point == 13 || t.point == 14) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tddz.LOGD(this._TAG, \"凑对子 in _findWinDouble\");\n\t\t\t\t\t//和其他牌凑对子\n\t\t\t\t\t//癞子凑对后的count值\n\t\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\t\t\t\t\treturn_arr.push([t.cards[0], newCount]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//（2）当癞子牌不当癞子用时,当lz_obj.count==4时在炸弹中处理\n\t\t\tif (lz_obj.count == 2 || lz_obj.count == 3) {\n\t\t\t\tvar realPoint = hall.GlobalFuncs.GetCardValueByPoint(hall.GlobalFuncs.GetCardPointByNum(lz_obj.cards[0]));\n\n\t\t\t\tddz.LOGD(this._TAG, \"_in findWinDouble 癞子不癞，realpoint = \"+realPoint);\n\t\t\t\tif (realPoint>type.getPoint()) {\n\t\t\t\t\tddz.LOGD(this._TAG, \"_in findWinDouble 癞子不癞,成功\");\n\t\t\t\t\treturn_arr.push([lz_obj.cards[0],lz_obj.cards[1]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t//其次拆散3张\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.point > type.getPoint() && t.count == 3) {\n\t\t\t\treturn_arr.push([t.cards[0], t.cards[1]]);\n\t\t\t}\n\t\t}\n\n\n\t\t////////////////////////////////////////////////////////////////////找炸弹及火箭\n\t\tvar bombs = this._findBomb(pc, lz_obj);\n\t\treturn_arr = return_arr.concat(bombs);\n\t\tif (this._findRocket(pc)) {\n\t\t\treturn_arr.push([52, 53]);\n\t\t}\n\n\t\treturn return_arr;\n\t},\n\n\t//拷贝一个p-c-c对象\n\t_copyOnePCObj:function(dest,src){\n\t\tddz.LOGD(this._TAG, \"复制一个pc格式的对象\");\n\t\tdest.count = src.count;\n\t\tdest.point = src.point;\n\t\tdest.cards = [];\n\t\tif (src.count<=0) {\n\t\t\t//ddz.LOGD(this._TAG, \"复制失败\");\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0;i<src.count; i++) {\n\t\t\tdest.cards.push(src.cards[i]);\n\t\t}\n\t},\n\n\t//拷贝由（point - count - cards ）对象组成的数组\n\t_copyPCArr:function(dest,src){\n\t\tddz.LOGD(this._TAG, \"复制pcArr\");\n\t\tfor(var nIndex = 0;nIndex < src.length;nIndex++){\n\t\t\tvar pcObj = {};\n\t\t\tthis._copyOnePCObj(pcObj,src[nIndex]);\n\t\t\tdest.push(pcObj);\n\t\t}\n\t\t\n\t},\n\t//被动出牌：三带\n\t_findWinThree: function(type, pc, lz_obj) { //找到能管住type的所有三不带, 三带一， 三带二\n\t\tddz.LOGD(this._TAG, \"find win three......in robots\");\n\t\tvar return_arr = [];\t\t\n\t\t//类型\n\t\tvar t_type = type.getType();\n\n\t\t/////////////////////////////////////////////////////////////////不使用癞子\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\t//找三张\n\t\t\tif (t.point > type.getPoint() && t.count == 3) {\n\t\t\t\tcc.dump(t.cards);\n\t\t\t\t//一个可能的解\n\t\t\t\tvar tmp = [t.cards[0], t.cards[1], t.cards[2]];\n\n\t\t\t\t//////////////////////////找带的牌\n\t\t\t\t//三带一，找一个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.THREE_ONE_CARD) {\n\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到了可以带的牌，则当前可能解添加进可带的牌\n\t\t\t\t\tif(extra.length > 0){\n\t\t\t\t\t\ttmp.push(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//三带二 \n\t\t\t\telse if (t_type == hall.Enums.PaixingType.THREE_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到可带的对子，则添加进当前可能解\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//找不到可带的对子，则当前解作废\n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t///////////////////////////////////////////////////////////////使用癞子\n\t\t//临时保存一下癞子\n\t\tvar lz_objTmp = {};\n\t\tthis._copyOnePCObj(lz_objTmp,lz_obj);\n\n\t\t//（1）癞子牌当做癞子使用，凑三张\n\n\t\t//（1.1）先凑2原牌+1癞子\n\n\t\tfor(var nIndex = 0; nIndex < pc.length; nIndex++){\n\t\t\tvar t = pc[nIndex];\n\n\t\t\t//先凑三张，再找带的牌\n\n\t\t\tif(t.point>type.getPoint()&&t.count == 2&&(lz_obj.count==1||lz_obj.count==2||lz_obj.count == 3)){\n\t\t\t\t\n\t\t\t\t//////////////////////////////(step1)凑三张\n\t\t\t\t//癞子凑数后的count值\n\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\t\t\t\tvar tmp = [t.cards[0], t.cards[1], newCount];\n\t\t\t\t//去掉癞子数\n\t\t\t\tlz_obj.count--;\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t/////////////////////////////(step2)找带的牌\n\t\t\t\t//三带一，找一个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.THREE_ONE_CARD) {\n\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到了可以带的牌，则当前可能解添加进可带的牌\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp.push(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//没有可带的牌，则当前可能解作废 \n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//三带二 \n\t\t\t\telse if (t_type == hall.Enums.PaixingType.THREE_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到可带的对子，则添加进当前可能解\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//找不到可带的对子，则当前解作废\n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\t//恢复原癞子信息\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\t\t}\n\n\t\t//（1.2）再凑1原牌+2癞子 \n\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\n\t\tfor(var nIndex = 0; nIndex < pc.length; nIndex++){\n\t\t\tvar t = pc[nIndex];\n\t\t\t//////////////////////////////先凑三张，再找带的牌\n\n\t\t\tif(t.point>type.getPoint()&&t.count == 1&&(lz_obj.count == 2||lz_obj.count == 3)){\n\t\t\t\t\n\t\t\t\t//不能和大小王拼三张\n\t\t\t\tif (t.point == 13 || t.point == 14) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/////////////////////////////（step1）凑三张\n\t\t\t\t//癞子凑数后的count值\n\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\t\t\t\tvar tmp = [t.cards[0], newCount, newCount];\n\t\t\t\t//去掉癞子数\n\t\t\t\tlz_obj.count -= 2;\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\t/////////////////////////////(step2)找带的牌\n\t\t\t\t//三带一，找一个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.THREE_ONE_CARD) {\n\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到了可以带的牌，则当前可能解添加进可带的牌\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp.push(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//没有可带的牌，则当前可能解作废 \n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//三带二 \n\t\t\t\telse if (t_type == hall.Enums.PaixingType.THREE_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 1, [t.point], true);\n\t\t\t\t\t//找到可带的对子，则添加进当前可能解\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//找不到可带的对子，则当前解作废\n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t\t//恢复原癞子信息\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\t\t}\n\n\t\t//（2）假如癞子牌不当做癞子使用，当lz_obj.count==4时在炸弹中处理\n\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\tcc.dump(lz_obj.cards);\n\t\tif (lz_obj.count == 3) {\n\t\t\tvar realPoint = hall.GlobalFuncs.GetCardValueByPoint(hall.GlobalFuncs.GetCardPointByNum(lz_obj.cards[0]));\n\n\t\t\tif (realPoint>type.getPoint()) {\n\t\t\t\t//初始化三张牌\n\t\t\t\tvar tmp = [lz_obj.cards[0],lz_obj.cards[1],lz_obj.cards[2]]\n\t\t\t\tlz_obj.count -= 3;\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t//再找带的牌\n\t\t\t\t//三带一，找一个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.THREE_ONE_CARD) {\n\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 1, [], true);\n\t\t\t\t\t//找到了可以带的牌，则当前可能解添加进可带的牌\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp.push(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//没有可带的牌，则当前可能解作废 \n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//三带二 \n\t\t\t\telse if (t_type == hall.Enums.PaixingType.THREE_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 1, [], true);\n\t\t\t\t\t//找到可带的对子，则添加进当前可能解\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t}\n\t\t\t\t\t//找不到可带的对子，则当前解作废\n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//恢复癞子\n\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t//////////////////////////////////////////////////////////////////////////////找炸弹及火箭\n\t\t\n\t\tvar bombs = this._findBomb(pc, lz_obj);\n\t\treturn_arr = return_arr.concat(bombs);\n\t\tif (this._findRocket(pc)){\n\t\t\treturn_arr.push([52, 53]);\n\t\t}\n\t\treturn return_arr;\n\t},\n\n\t// 获取炸弹类型\n\t// 'pureLzBomb',\t//纯癞子炸弹，大于普通炸弹小于王炸\n\t// 'normalBomb',\t//普通炸弹，大于癞子炸弹\n\t// 'softBomb',\t\t//软炸弹，小于普通炸弹，大于其他牌\n\t// 'notBomb'\t\t//不是炸弹\n\t_getBombType:function(type){\n\t\t// 不是4张，不可能是炸弹\n\t\tif (type._cards.length != 4) {\n\t\t\treturn 'notBomb';\n\t\t};\n\n\t\tcc.dump(type);\n\n\t\t// 牌型\n\t\tvar t_type = type.getType();\n\t\t// 是炸弹\n\t\tif (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\tddz.LOGD('LaiziCount = ' + type._laiZiCnt);\n\t\t\tif( typeof(type._laiZiCnt) == \"undefined\" || type._laiZiCnt <= 0) {\n\t\t\t\treturn 'normalBomb';\n\t\t\t}\n\t\t\telse if (type._laiZiCnt == 4) {\n\t\t\t\treturn 'pureLzBomb';\n\t\t\t}\n\t\t\treturn 'softBomb';\n\t\t}\n\t\t//不是炸弹\n\t\telse{\n\t\t\treturn 'notBomb';\n\t\t}\n\t},\n\n\t/***\n\t * 被动出牌\n\t * 找到能管住type的所有炸弹, 4带2， 4带2对\n\t */\n\t_findWinBomb: function(type, pc, lz_obj) {\n\t\tddz.LOGD(this._TAG, \"find win bomb......in robots\");\n\t\tvar return_arr = [];\n\n\t\t//四带类型\n\t\tvar t_type = type.getType();\n\t\t//炸弹类型，在这里获知炸弹类型，纯癞子炸弹 > 普通炸弹 > 癞子炸弹\n\t\tvar bombType = this._getBombType(type);\n\t\tddz.LOGD(this._TAG, \"bombType = \" + bombType);\n\n\t\t///////////////////////////////////////////////////////////////////////////不考虑癞子\n\t\t//先找到四张，再找带的牌\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\n\t\t\t//找到四张\n\t\t\tif(t.count == 4){\n\t\t\t\t//常规四张\n\t\t\t\tvar tmp = [t.cards[0], t.cards[1], t.cards[2], t.cards[3]];\n\n\t\t\t\t//////////////////////////找带的牌\n\t\t\t\t//4带2，找2个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.BOMB_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra);\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//4带2对\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_TWO_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//4毛带不带\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\t\t\t//上家牌是纯癞子炸弹\n\t\t\t\t\tif(bombType == 'pureLzBomb'){\n\t\t\t\t\t\t//如果不使用癞子，那么除了火箭永远都干不过纯癞子炸弹\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t// 软炸弹\n\t\t\t\t\telse if(bombType == 'softBomb'){\n\t\t\t\t\t\t//所有常规炸弹(不考虑点数)和部分软炸弹（当前不考虑）\n\t\t\t\t\t\t;\n\t\t\t\t\t}\n\t\t\t\t\t//常规炸弹\n\t\t\t\t\telse if (bombType == 'normalBomb') {\n\t\t\t\t\t\tif(t.point <= type.getPoint()){\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//不是炸弹啊\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//根本不是四带啊\n\t\t\t\telse{\n\t\t\t\t\ttmp = [];\n\t\t\t\t}\n\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//////////////////////////////////////////////////////////////////////////考虑癞子\n\n\t\t//临时保存一下癞子\n\t\tvar lz_objTmp = {};\n\t\tthis._copyOnePCObj(lz_objTmp,lz_obj);\n\t\t\n\t\t//（1）癞子牌当癞子使用\n\t\t//(1.1)三张原牌+1癞子\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\t//四张纯癞子不应该拆\n\t\t\tif (t.count == 3 && (lz_obj.count >= 1&&lz_obj.count<4)) {\n\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\n\t\t\t\tvar tmp = [t.cards[0], t.cards[1], t.cards[2], newCount];\n\n\t\t\t\t//癞子使用更新\n\t\t\t\tlz_obj.count -= 1;\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t//找带的牌\n\t\t\t\t//4带2，找2个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.BOMB_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra);\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//4带2对\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_TWO_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[1]);\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//4毛带不带\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\t\t\t//上家牌是纯癞子炸弹\n\t\t\t\t\tif(bombType == 'pureLzBomb'){\n\t\t\t\t\t\t//软炸弹干不过\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t// 软炸弹\n\t\t\t\t\telse if(bombType == 'softBomb'){\n\t\t\t\t\t\t//只有点数大得软炸弹才能干的过\n\t\t\t\t\t\tif (t.point<=type.getPoint()) {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//常规炸弹\n\t\t\t\t\telse if (bombType == 'normalBomb') {\n\t\t\t\t\t\t//软炸弹干不过常规炸弹\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t//不是炸弹啊\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//根本不是四带\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = [];\n\t\t\t\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t\t//恢复癞子\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\n\t\t}\n\n\t\t//(1.2)2张原牌+2癞子\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.count == 2 && (lz_obj.count >= 2 && lz_obj.count <= 3)) {\n\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\n\t\t\t\tvar tmp = [t.cards[0], t.cards[1], newCount, newCount];\n\n\t\t\t\t//癞子使用更新\n\t\t\t\tlz_obj.count -= 2;\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t//找带的牌\n\t\t\t\t//4带2，找2个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.BOMB_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4带2对\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_TWO_TWO_CARD) {\n\t\t\t\t\tif(t.point > type.getPoint()){\n\t\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4毛带不带\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\t\t\t//上家牌是纯癞子炸弹\n\t\t\t\t\tif(bombType == 'pureLzBomb'){\n\t\t\t\t\t\t//软炸弹干不过\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t// 软炸弹\n\t\t\t\t\telse if(bombType == 'softBomb'){\n\t\t\t\t\t\t//只有点数大得软炸弹才能干的过\n\t\t\t\t\t\tif (t.point<=type.getPoint()) {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//常规炸弹\n\t\t\t\t\telse if (bombType == 'normalBomb') {\n\t\t\t\t\t\t//软炸弹干不过常规炸弹\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t//不是炸弹啊\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttmp = [];\n\t\t\t\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\t//恢复癞子\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\n\t\t}\n\n\t\t//(1.3)1张原牌+3癞子\n\t\tfor (var i = 0; i < pc.length; i++) {\n\t\t\tvar t = pc[i];\n\t\t\tif (t.count == 1 && lz_obj.count == 3) {\n\t\t\t\t\n\t\t\t\t//不能和大小王拼四张\n\t\t\t\tif (t.point == 13 || t.point == 14) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar newCount = hall.GlobalFuncs.getLaiziNumByValue(t.point);\n\t\t\t\t//初始化四张牌\n\t\t\t\tvar tmp = [t.cards[0], newCount, newCount, newCount];\n\n\t\t\t\t//癞子使用更新\n\t\t\t\tlz_obj.count -= 3;\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t//找带的牌\n\t\t\t\t//4带2，找2个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.BOMB_TWO_CARD) {\n\t\t\t\t\tif (t.point > type.getPoint()) {\n\t\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4带2对\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_TWO_TWO_CARD) {\n\t\t\t\t\tif (t.point > type.getPoint()) {\n\t\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 2, [t.point], true);\n\t\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t\t\ttmp = tmp.concat(extra[1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4毛带不带\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\t\t\t//上家牌是纯癞子炸弹\n\t\t\t\t\tif(bombType == 'pureLzBomb'){\n\t\t\t\t\t\t//软炸弹干不过\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t// 软炸弹\n\t\t\t\t\telse if(bombType == 'softBomb'){\n\t\t\t\t\t\t//只有点数大得软炸弹才能干的过\n\t\t\t\t\t\tif (t.point<=type.getPoint()) {\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//常规炸弹\n\t\t\t\t\telse if (bombType == 'normalBomb') {\n\t\t\t\t\t\t//软炸弹干不过常规炸弹\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t\t//不是炸弹啊\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttmp = [];\n\t\t\t\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t\t//恢复癞子\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\n\t\t}\n\n\n\t\t//（2）癞子不癞\n\t\tif (lz_obj.count == 4) {\n\t\t\tvar realPoint = hall.GlobalFuncs.GetCardValueByPoint(hall.GlobalFuncs.GetCardPointByNum(lz_obj.cards[0]));\n\n\t\t\tif (realPoint>type.getPoint()) {\n\t\t\t\t//先初始化四张牌\n\t\t\t\tvar tmp = [lz_obj.cards[0], lz_obj.cards[1], lz_obj.cards[2], lz_obj.cards[3]];\n\n\t\t\t\t//癞子使用更新\n\t\t\t\tlz_obj.count -= 4;\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\t\t\t\tlz_obj.cards.pop();\n\n\t\t\t\t//再找带的牌\n\t\t\t\t//4带2，找2个单牌\n\t\t\t\tif (t_type == hall.Enums.PaixingType.BOMB_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinSingle(lz_obj,pc, 2, [], true);\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4带2对\n\t\t\t\telse if (t_type == hall.Enums.PaixingType.BOMB_TWO_TWO_CARD) {\n\t\t\t\t\tvar extra = this._findMinDouble(lz_obj,pc, 2, [], true);\n\t\t\t\t\tif (extra.length > 0) {\n\t\t\t\t\t\ttmp = tmp.concat(extra[0]);\n\t\t\t\t\t\ttmp = tmp.concat(extra[1]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//4毛带不带\n\t\t\t\t//else if (t_type == hall.Enums.PaixingType.BOMB_CARD) {\n\t\t\t//\t\t;\n\t\t\t//\t}\n\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\treturn_arr.push(tmp);\n\t\t\t\t}\n\t\t\t\t//恢复癞子\n\t\t\t\tthis._copyOnePCObj(lz_obj,lz_objTmp);\n\t\t\t}\n\t\t};\n\n\n\n\t\t//找火箭\n\t\tif (this._findRocket(pc)) {\n\t\t\treturn_arr.push([52, 53]);\n\t\t}\n\t\treturn return_arr;\n\t},\n\n\t//被动出牌\n\t////找到能管住type的顺子, 连对， 飞机\n\t_findWinContinous: function(type, pc, lz_obj) {\n\t\tddz.LOGD(this._TAG, \"find win continious, type :\" + type.getType() + \" point \" + type.getPoint() + \" count \" + type.getCount()); \n\t\t//顺子为array长度，连对为array长度/2， 飞机为array长度/4\n\t\tvar continue_count;\n\n\t\t//顺子为1， 连对为2， 飞机为3\n\t\tvar cell_count;\n\t\tvar t_type = type.getType();\n\t\tswitch (t_type) {\n\t\t\t//顺子\n\t\t\tcase hall.Enums.PaixingType.SHUNZI_CARD:\n\t\t\t\tddz.LOGD(this._TAG, 'test find wincard 00000');\n\t\t\t\tcontinue_count = type.getCount();\n\t\t\t\tcell_count = 1;\n\t\t\t\tbreak;\n\n\t\t\t\t//连对\n\t\t\tcase hall.Enums.PaixingType.LIANDUI_CARD:\n\t\t\t\tddz.LOGD(this._TAG, 'test find wincard 00001');\n\t\t\t\tcontinue_count = type.getCount() / 2;\n\t\t\t\tcell_count = 2;\n\t\t\t\tbreak;\n\n\t\t\t\t//飞机\t\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_CARD:\n\t\t\t\tddz.LOGD(this._TAG, 'test find wincard 00002');\n\t\t\t\tcontinue_count = type.getCount() / 3;\n\t\t\t\tcell_count = 3;\n\t\t\t\tbreak;\n\n\t\t\t\t//飞机带点东西\t\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD:\n\t\t\tcase hall.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD:\n\t\t\t\tddz.LOGD(this._TAG, 'test find wincard 00003');\n\t\t\t\tcontinue_count = Math.floor(type.getCount() / 4);\n\t\t\t\tcell_count = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tddz.LOGD(this._TAG, \"error in find win continous!!! illegal type\");\n\t\t}\n\t\tvar return_arr = [];\n\t\tvar newarr = this._fillDicarr(pc);\n\t\tnewarr.reverse(); //因为从小到大找起，所以要reverse\n\t\t// ddz.LOGD(this._TAG, \"dump new arr in find win continuous......\");\n\t\t// for (var index = 0; index < newarr.length; index++) {\n\t\t// \tvar tmp = newarr[index];\n\t\t// \tddz.LOGD(this._TAG, \" point: \" + tmp.point + \" count \" + tmp.count + \" cards \" + tmp.cards.length);\n\t\t// }\n\t\tfor (var index = 0; index + continue_count <= newarr.length  - 3; index++) {\t// 2不能在顺子连对飞机中\n\t\t\tvar point = newarr[index].point;\n\t\t\tif (point <= type.getPoint()) { \n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 按照使用的癞子数从少到多寻找解\n\t\t\tfor (var laiziMax = 0; laiziMax <= lz_obj.count; laiziMax++) {\n\t\t\t\tddz.LOGD('查找需要' + laiziMax + \"个癞子的解\");\n\t\t\t\tvar cards = [];\n\t\t\t\tvar exc = [];\n\t\t\t\tvar lz_used = 0;\n\t\t\t\tvar sub_index = 0;\n\n\t\t\t\twhile (sub_index < continue_count) {\n\t\t\t\t\tvar tmp = newarr[index + sub_index];\n\t\t\t\t\tvar tmp_cards = tmp.cards;\n\t\t\t\t\tif (tmp.count >= cell_count) {\n\t\t\t\t\t\tfor (var i = 0; i < cell_count; i++) {\n\t\t\t\t\t\t\tcards.push(tmp_cards[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar need = cell_count - tmp.count;\n\t\t\t\t\t\tif ((need == laiziMax) && (lz_obj.count - lz_used >= need)) { //癞子足够的话\n\t\t\t\t\t\t\tcards = cards.concat(tmp.cards);\n\t\t\t\t\t\t\tvar n = hall.GlobalFuncs.getLaiziNumByValue(tmp.point);\n\t\t\t\t\t\t\tfor (var i = 0; i < need; i++) {\n\t\t\t\t\t\t\t\tcards.push(n);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlz_used += need;\n\t\t\t\t\t\t} else { //癞子不够用， break\n\t\t\t\t\t\t\tcards = [];\n\t\t\t\t\t\t\tddz.LOGD(this._TAG, \"break ,laizi not enough\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\texc.push(tmp.point);\n\t\t\t\t\tsub_index++;\n\t\t\t\t} //while\n\n\t\t\t\tif (cards.length > 0) {\n\t\t\t\t\tif (t_type == hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD || t_type == hall.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD) { //找翅膀\n\t\t\t\t\t\t//不能把飞机找齐了，再去找翅膀，因为翅膀可能会拆掉3个生成\n\t\t\t\t\t\t// ddz.LOGD(this._TAG, \"dump exc....\");\n\t\t\t\t\t\t// for(var i = 0; i < exc.length; i++) {\n\t\t\t\t\t\t// \tddz.LOGD(exc[i]);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tvar newlz = {\"point\" : lz_obj.point, \"count\":lz_obj.count - lz_used, \"cards\":lz_obj.cards};\n\t\t\t\t\t\tvar extra = t_type == hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD ? this._findMinSingle(newlz, pc, continue_count, exc, true) : this._findMinDouble(newlz, pc, continue_count, exc, true);\n\t\t\t\t\t\tif(extra.length > 0) {\n\t\t\t\t\t\t\tcc.log('test find wincard 00004 cards = ' + JSON.stringify(cards));\n\t\t\t\t\t\t\tif (t_type == hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD) {\n\t\t\t\t\t\t\t\t//飞机带单牌可以直接这么拼\n\t\t\t\t\t\t\t\tcards = cards.concat(extra);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//飞机带俩／仨对，需要单独拼接\n\t\t\t\t\t\t\t\tfor (var i=0; i<continue_count&&extra[i]; i++) {\n\t\t\t\t\t\t\t\t\t// 此时返回的是元素是数组的数组[[13,26],[30,43]]\n\t\t\t\t\t\t\t\t\tcards = cards.concat(extra[i]);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcc.log('test find wincard 00005 extra = ' + JSON.stringify(extra));\n\t\t\t\t\t\t\tcc.log('test find wincard 00006 cards = ' + JSON.stringify(cards));\n\t\t\t\t\t\t} else {\t//找不够翅膀，清空cards\n\t\t\t\t\t\t\tcards = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(cards.length > 0) {\n\t\t\t\t\t\treturn_arr.push(cards);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 找炸弹解\n\t\tvar bombs = this._findBomb(pc, lz_obj);\n\t\treturn_arr = return_arr.concat(bombs);\n\n\t\t// 找火箭解\n\t\tif (this._findRocket(pc)){\n\t\t\treturn_arr.push([52, 53]);\n\t\t}\n\t\treturn return_arr;\n\t},\n\n\t_rocketWin: function(cards) {\n\t\tcards.sort(hall.GlobalFuncs.SortNumberFunc); //先从小到大排列\n\t\tvar len = cards.length;\n\t\tif (cards[len - 1] == 53 && cards[len - 2] == 52) {\n\t\t\tif( cards.length == 2 ){\n\t\t\t\treturn true;\t\t// 只有两张牌了，大小王，必然是双王致胜\n\t\t\t}\n\n\t\t\tvar left = cards.slice(0, len - 2);\n\t\t\tvar types = this.judgeType(left, true);\n\t\t\tif (types.length > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t_findAvailableAircraft: function(newarrpara, lz_obj) {\n\n\t\t// ddz.LOGD('laizi count '+ lz_obj.count + '; before find aircraft ! in _findAvailableAircraft');\n\n\t\tvar newarr = [];\n\t\tthis._copyPCArr(newarr,newarrpara);\n\n\t\tvar resultObj = this._findAvailableContinous(newarr, 3, lz_obj);\n\t\tvar return_arr = resultObj.cards;\n\n\t\t// ddz.LOGD('after find aircraft');\n\t\t// ddz.LOGD('return_arr len == ' + return_arr.length);\n\n\t\tfor (var i = 0; i < return_arr.length; i++) {\n\t\t\tddz.LOGD('times == ' + i);\n\n\t\t\tvar num = return_arr[i];\n\t\t\tvar point = hall.GlobalFuncs.getCardValueByNum(num);\n\n\t\t\tnewarr[point].count = 0; // 将数量置为0\n\t\t\tnewarr[point].cards = [];\n\t\t};\n\n\n\t\t//寻找翅膀,先找对子，再找单数\n\t\tvar len = return_arr.length;\n\n\t\tif (len > 0) {\n\t\t\tddz.LOGD('reshow the arr');\n\t\t\tfor (var i = 0; i < newarr.length; i++) {\n\t\t\t\tvar aObj = newarr[i];\n\n\t\t\t\tddz.LOGD(this._TAG, \"point : \" + aObj.point + \" count: \" + aObj.count);\n\n\t\t\t\tstr = '';\n\n\t\t\t\tfor (var j = 0; j < aObj.count; j++) {\n\t\t\t\t\tvar point = hall.GlobalFuncs.GetCardPointByNum(aObj.cards[j]);\n\t\t\t\t\tstr = str + '[' + point + ']';\n\t\t\t\t};\n\n\t\t\t\tddz.LOGD(str);\n\t\t\t};\n\n\t\t\tvar pairs = this._findMinDouble(lz_obj, newarr, len / 3, [], false); // 找带的对子\n\t\t\tvar p_length = pairs.length;\n\t\t\tif (p_length > 0) {\n\t\t\t\tddz.LOGD(this._TAG, \"find min double in find available aircraft....\");\n\n\t\t\t\tfor (var k = 0; k < p_length; k++) {\n\t\t\t\t\treturn_arr = return_arr.concat(pairs[k]);\n\t\t\t\t}\n\t\t\t\treturn return_arr;\n\t\t\t}\n\t\t\tvar singles = this._findMinSingle(lz_obj, newarr, len / 3, [], false); //[1,2,3,4]...\n\t\t\tif (singles.length > 0) {\n\t\t\t\tddz.LOGD(this._TAG, \"find min single in find available aircraft....\");\n\t\t\t\treturn_arr = return_arr.concat(singles);\n\t\t\t\treturn return_arr;\n\t\t\t}\n\t\t}\n\t\t// ddz.LOGD('reshow the arr ----end');\n\t\t// ddz.LOGD('laizi count == ' + lz_obj.count);\n\t\treturn return_arr;\n\t},\n\n\t//找最大连对cell_count = 2, 顺子cell_count = 1， 不包括2和双王, \n\t_findAvailableContinous: function(newarr, cell_count, lz_obj) {\n\t\tddz.LOGD('laizi count '+ lz_obj.count + ';  _findAvailableContinous, cell_count == ' + cell_count);\n\t\tvar index_report = -1;\n\t\t// 默认是升序排列newarr，如果要找最大的可以倒序\n\t\tfor (var index = 0; index < 11; index++) {\n\t\t\t// 连子的最小是点数3，最大是A\n\t\t\tvar lz_use = 0;\n\t\t\tvar i = 0;\n\t\t\tvar cards = [];\n\t\t\tvar point = -1;\n\t\t\t// ddz.LOGD(this._TAG, \"now start index : \" + index);\n\n\t\t\twhile (i <= (11 - index)) {\n\t\t\t\tvar sub_index = index + i;\n\t\t\t\tvar tmp = newarr[sub_index];\n\n\t\t\t\t// ddz.LOGD(this._TAG, \"sub index \" + sub_index + \" point == \" + tmp.point);\n\t\t\t\tvar need = cell_count - tmp.count;\n\t\t\t\tif (need < 0) {\n\t\t\t\t\t// 不要拆更多张数的主牌型，比如找飞机时不要拆炸弹，找连对时，不要拆3张\n\t\t\t\t\tddz.LOGD('not divide' + 'index == ' +index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlz_use += need;\n\t\t\t\t// ddz.LOGD('lz_use == ' + lz_use + 'laizi count == ' + lz_obj.count);\n\t\t\t\tif (lz_use > lz_obj.count) {\n\t\t\t\t\t//  不够时要还原回去\n\t\t\t\t\tlz_use -= need;\n\n\t\t\t\t\t// ddz.LOGD('laizi not enough!' + 'index ==' +index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpoint = tmp.point;\n\n\t\t\t\tif (need > 0) {\n\t\t\t\t\t//需要用癞子补，则把癞子转换成相应的值\n\t\t\t\t\tvar n = hall.GlobalFuncs.getLaiziNumByValue(point);\n\t\t\t\t\tfor (var j = 0; j < need; j++) {\n\t\t\t\t\t\tcards.push(n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// ddz.LOGD('push cards at index :' + sub_index);\n\t\t\t\tcards = cards.concat(tmp.cards);\n\t\t\t\ti++;\n\t\t\t\t// ddz.LOGD(this._TAG, \"i \" + i + \" array index \" + index);\n\t\t\t}\n\n\t\t\tvar clen = cards.length;\n\t\t\tif (clen >= 5) {\n\t\t\t\t// 找到1个就可以了\n\t\t\t\tddz.LOGD('find Available Continous------------ index == ' + index);\n\n\t\t\t\t// 更新癞子的数量\n\t\t\t\tlz_obj.count -= lz_use;\n\t\t\t\tddz.LOGD('laizi count == ' + lz_obj.count);\n\t\t\t\tddz.CardTable.print(cards);\n\t\t\t\treturn {\n\t\t\t\t\t'index': index - 1,\n\t\t\t\t\t'len': i,\n\t\t\t\t\t'cards': cards\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// 找不到时返回空数组\n\t\treturn {\n\t\t\t'index': -1,\n\t\t\t'len': 0,\n\t\t\t'cards': []\n\t\t};\n\t},\n\t//找最大连对cell_count = 2, 顺子cell_count = 1， 不包括2和双王, \n\t_findAvailableContinousDevide: function(newarr, cell_count, lz_obj) {\n\t\tddz.LOGD('laizi count '+ lz_obj.count + ';  _findAvailableContinous, cell_count == ' + cell_count);\n\t\t// 默认是升序排列newarr，如果要找最大的可以倒序\n\t\tvar return_arr = [];\n\t\t//index为起始搜索位置\n\t\t//curIndex是张数\n\t\tfor (var index = 0; index < 11; index++){\n\t\t\t// 连子的最小是点数3，最大是A\n\t\t\tvar lz_use = 0;\n\t\t\tvar curIndex = 0;\n\t\t\tvar cards = [];\n\t\t\tvar point = -1;\n\t\t\t// ddz.LOGD(this._TAG, \"now start index : \" + index);\n\n\t\t\twhile (curIndex <= (11 - index)) {\n\t\t\t\tvar sub_index = index + curIndex;\n\t\t\t\tvar tmp = newarr[sub_index];\n\t\t\t\tpoint = tmp.point;\n\t\t\t\t//还缺几张牌？\n\t\t\t\t//if need==0：正好\n\t\t\t\t//if need>0：缺need张\n\t\t\t\t//if need<0：多了（-need）张\n\t\t\t\tvar need = cell_count - tmp.count;\n\n\t\t\t\t//需要用癞子补，则把癞子转换成相应的值\n\t\t\t\tif (need > 0) {\n\t\t\t\t\t//剩余癞子数\n\t\t\t\t\tvar remainLzCnt = lz_obj.count - lz_use;\n\n\t\t\t\t\t//如果癞子不够或者没有癞子\n\t\t\t\t\tif(remainLzCnt < need){\n\t\t\t\t\t\t// index = sub_index + 1;\n\t\t\t\t\t\t// ddz.LOGD(this._TAG, \"new index == \"+index);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//癞子足够，用癞子补\n\t\t\t\t\telse{\n\t\t\t\t\t\t//增加使用计数\n\t\t\t\t\t\tlz_use += need;\n\t\t\t\t\t\tvar n = hall.GlobalFuncs.getLaiziNumByValue(point);\n\t\t\t\t\t\tfor (var j = 0; j < need; j++) {\n\t\t\t\t\t\t\tcards.push(n);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcards = cards.concat(tmp.cards);\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//不需要用癞子补\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tddz.CardTable.print(tmp.cards);\n\t\t\t\t\tfor(var i = 0;i<cell_count;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcards.push(tmp.cards[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurIndex++;\n\t\t\t}\n\n\t\t\tvar clen = cards.length;\n\t\t\tif (clen >= 5) {\n\t\t\t\t// \n\t\t\t\tddz.LOGD('find Available Continous------------ curStart == ' + index);\n\n\t\t\t\t// 更新癞子的数量\n\t\t\t\tlz_obj.count -= lz_use;\n\t\t\t\tddz.LOGD('laizi count == ' + lz_obj.count);\n\t\t\t\tddz.CardTable.print(cards);\n\n\t\t\t\tvar oneResult = {\n\t\t\t\t\t'index': index - 1,\n\t\t\t\t\t'len': curIndex,\n\t\t\t\t\t'cards': cards\n\t\t\t\t}; \n\t\t\t\treturn_arr.push(oneResult);\n\t\t\t}\n\t\t}\n\n\n\t\t///////////////////////////////////////////////////////////////////////////////////////////////查找完毕\n\t\t//没有找到结果\n\t\tif (return_arr.length<=0) {\n\t\t\treturn {\n\t\t\t\t\t'index': -1,\n\t\t\t\t\t'len': 0,\n\t\t\t\t\t'cards': []\n\t\t\t\t}; ;\n\t\t}\n\t\t//按照长度从大到小进行排序\n\t\telse {\n\t\t\treturn_arr.sort(this._sortByLength);\n\t\t}\n\t\t\n\t\t// 返回\n\t\treturn return_arr[0];\n\t},\n\t_sortByLength: function(o1, o2) {\n\t\treturn o1['len'] < o2['len'];\n\t},\n\t// 在此之前是检查连对、飞机、顺子等牌型\n\t_findAvailableThree: function(newarrpara, lz_obj) {\n\t\tvar newarr = [];\n\t\tthis._copyPCArr(newarr,newarrpara);\n\t\tvar return_arr = [];\n\t\tvar index;\n\t\tvar tmp;\n\t\tvar cards = [];\n\t\tvar leftArr;\n\n\t\t// 先找本身就是3个的，之后再用癞子拼, 找到小王就可以了\n\t\tfor (index = 0; index < 13; index++) {\n\t\t\ttmp = newarr[index];\n\t\t\tif (tmp.count == 3)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (index < 13) {\n\t\t\tvar midResult = newarr[index];\n\n\t\t\tfor (var i = 0; i < midResult.count; i++) {\n\t\t\t\tddz.LOGD(midResult.cards[i]);\n\t\t\t}\n\n\t\t\t// 找到了\n\t\t\treturn_arr = return_arr.concat(midResult.cards);\n\n\t\t\t// 清理数据\n\t\t\tnewarr[index].cards = [];\n\t\t\tnewarr[index].count = 0;\n\t\t} else {\n\t\t\t// 需要拼\n\t\t\tfor (index = 0; index < 13; index++) {\n\t\t\t\ttmp = newarr[index];\n\t\t\t\tvar need = 3 - tmp.count;\n\n\t\t\t\tif (need < 0) {\n\t\t\t\t\t// 不能拆炸弹\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (need <= lz_obj.count) {\n\t\t\t\t\t//癞子够拼\n\t\t\t\t\tcards = tmp.cards.slice(0);\n\t\t\t\t\tif (need > 0) {\n\t\t\t\t\t\tvar n = hall.GlobalFuncs.getLaiziNumByValue(tmp.point);\n\t\t\t\t\t\tfor (var i = 0; i < need; i++) {\n\t\t\t\t\t\t\tcards.push(n);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn_arr = return_arr.concat(cards);\n\n\t\t\t\t\ttmp.cards = [];\n\t\t\t\t\ttmp.count = 0;\n\t\t\t\t\t// 减少癞子的数量\n\t\t\t\t\tlz_obj.count -= need;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} // end of for\n\n\t\t\tif (index == 13) {\n\t\t\t\t// 无法构成3张\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// 从剩下的牌里面找次牌型\n\t\t/////////////////////////////////////////  主牌型结束\n\n\n\t\t//找带的对，没有的话找带的单\n\t\tvar pairs = this._findMinDouble(lz_obj, newarr, 1, [], false); //[[1, 2], [3, 4]]...\n\t\tif (pairs.length > 0) {\n\t\t\tddz.LOGD(this._TAG, \"find min double in find available _findAvailableThree....\");\n\t\t\treturn_arr = return_arr.concat(pairs[0]);\n\t\t} else {\n\t\t\tvar singles = this._findMinSingle(lz_obj, newarr, 1, [], false); //[1,2,3,4]...\n\t\t\tif (singles.length > 0) {\n\t\t\t\tddz.LOGD(this._TAG, \"find min single in find available _findAvailableThree....\");\n\t\t\t\treturn_arr = return_arr.concat(singles[0]);\n\t\t\t}\n\t\t}\n\t\treturn return_arr;\n\t},\n\n\t_dumpResultArr: function(strDescribe, arr) {\n\t\t// body...\n\t\tddz.LOGD(strDescribe);\n\n\t\tvar loginfo = '';\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tloginfo = loginfo + '[' + hall.GlobalFuncs.GetCardPointByNum(arr[i]) + ']';\n\t\t};\n\n\t\tddz.LOGD(loginfo);\n\t\tddz.LOGD('////////////////////////////////////////////////////////////////');\n\t},\n\n\t//组合的种类数\n\t_getCombinatorialVariety: function(n,r){\n\t\treturn 0;\n\t},\n \t\n\t//从选中的牌中挑选出最长的牌\n\t_findLongestFromSelectedCards:function(arr){\n\t\t//选中牌的长度\n\t\tvar selCards = this._longestType.getOneLongestCardType(arr);\n\t\treturn selCards;\n\t},\n\t// 主动出牌judge\n\tplayActively: function(seatIndex) {\n\t\t// if (seatIndex == 1) { //玩家不应该主动出牌\n\t\t// \tddz.LOGD(this._TAG, \"error!!! seatindex == 1 in playActively\");\n\t\t// \treturn [];\n\t\t// }\n\t\tvar cards = this.playerCards[seatIndex - 1];\n\n\t\t//判断当前手牌是不是一个牌型\n\t\tvar types = this.judgeType(cards, false);\n\t\tif (types.length > 0) { //是一副手牌\n\t\t\treturn cards.slice(0);\n\t\t}\n\t\tif (this._rocketWin(cards)) { //双王致胜\n\t\t\treturn [52, 53];\n\t\t}\n\n\t\tvar pc = this._getPCArrayByPoint(cards);\n\t\tpc.sort(this._sortByPoint);\n\n\t\t// 填补成连续的数组\n\t\tvar newarr = [];\n\t\tfor (index = 0; index < 15; index++) {\n\t\t\tvar aObj = {\n\t\t\t\t'point': index,\n\t\t\t\t'count': 0,\n\t\t\t\t'cards': []\n\t\t\t};\n\n\t\t\tfor (var oldIndex = 0; oldIndex < pc.length; oldIndex++) {\n\t\t\t\tvar oldObj = pc[oldIndex];\n\n\t\t\t\tif (oldObj.point == aObj.point) {\n\t\t\t\t\taObj = oldObj;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 深拷贝\n\t\t\tvar cardsInfo = [];\n\t\t\tfor (var cardsInfoIndex = 0; cardsInfoIndex < aObj.cards.length; cardsInfoIndex++) {\n\t\t\t\tcardsInfo.push(aObj['cards'][cardsInfoIndex])\n\t\t\t};\n\t\t\tnewarr.push({\n\t\t\t\t'point': aObj.point,\n\t\t\t\t'count': aObj.count,\n\t\t\t\t'cards': cardsInfo\n\t\t\t})\n\t\t}\n\n\t\tddz.LOGD(this._TAG, \"dump _fillDicarr in play actively..........\");\n\t\tfor (var i = 0; i < newarr.length; i++) {\n\t\t\ttmp = newarr[i];\n\t\t\tddz.LOGD(this._TAG, \"point : \" + tmp.point + \" count: \" + tmp.count);\n\n\t\t\tstr = '';\n\t\t\t// ddz.LOGD(this._TAG, \"point : \" + tmp.point + \" count: \" + tmp.count);\n\t\t\tfor (var j = 0; j < tmp.count; j++) {\n\t\t\t\tvar point = hall.GlobalFuncs.GetCardPointByNum(tmp.cards[j]);\n\t\t\t\tstr = str + '[' + point + ']';\n\t\t\t};\n\n\t\t\tddz.LOGD(str);\n\t\t}\n\t\tddz.LOGD(this._TAG, \"dump _fillDicarr in play actively.......... end\");\n\n\t\t//[20140521][jinrifeng] 使用接口\n\t\tvar lz_obj = this._getLaiziObject(newarr);\n\n\t\tddz.LOGD('laizi count ' + lz_obj.count + '; laizi are ');\n\n\t\tfor (var i = 0; i < lz_obj.cards.length; i++) {\n\t\t\tddz.LOGD(lz_obj.cards[i]);\n\t\t};\n\n\t\tvar reportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\t//找飞机\n\t\tvar return_arr = this._findAvailableAircraft(newarr, lz_obj);\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found aircraft', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableAircraft(newarr, lz_obj); //找飞机\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found aircraft', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\treportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards; //找最小连对\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found liandui', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards; //找最小连对\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found liandui', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\treportLaiziCount = lz_obj.count;\n\t\t// 先考虑本身就能够构成这种牌型的牌\n\t\tlz_obj.count = 0;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards; //找最小顺子\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found shunzi', return_arr);\n\n\t\t\treturn return_arr.reverse();// V3.705产品要求其他两个玩家出顺子时的顺序为从左到右从大到小排列\n\t\t}\n\n\t\t// 找带癞子拼成的\n\t\tlz_obj.count = reportLaiziCount;\n\n\t\treturn_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards; //找最小顺子\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found shunzi', return_arr);\n\n\t\t\treturn return_arr.reverse();// V3.705产品要求其他两个玩家出顺子时的顺序为从左到右从大到小排列\n\t\t}\n\n\t\treturn_arr = this._findAvailableThree(newarr, lz_obj); //找第一个出现的3个, 内部考虑了先找不带癞子的\n\t\tif (return_arr.length > 0) {\n\t\t\tthis._dumpResultArr('found three', return_arr);\n\n\t\t\treturn return_arr;\n\t\t}\n\n\t\t// 机器人主动出对和主动出单的策略\n\t\t// 敌人定义:如果下家是同盟,则敌人是上家,否则敌人是下家。\n\t\t// 1.敌人手牌>4张 : 正常出牌策略\n\t\t// 2.敌人手牌<=4张: 敌人剩单数张优先出对子,剩双数张优先出单,同时:\n\t\t//  2.1 下家和自己是同盟 : 从小往大出\n\t\t//  2.2 下家和自己是敌人 :\n\t\t//      2.2.1 自己手牌有和下家手牌奇偶不同的牌,如下家剩1张(奇),自己有对子(偶) : 从小往大出对子\n\t\t//      2.2.2 自己手牌没有和下家手牌奇偶不同的牌,如下家剩1张(奇),自己没有对子 : 从大往小出单\n\t\tvar enemyIndex;\n\t\tvar preIndex = hall.GlobalFuncs.getPreIndex(this.currentPlayPos);\n\t\tif (this.dizhuPos == preIndex) { //只有地主是我上家，则敌人是上家，否则敌人都是下家\n\t\t\tenemyIndex = preIndex;\n\t\t} else {\n\t\t\tenemyIndex = hall.GlobalFuncs.GetNextIndex(this.currentPlayPos);\n\t\t}\n\t\tvar enemyCardsLen = this.playerCards[enemyIndex - 1].length;\n\t\tif (enemyCardsLen > 4) { //敌人手牌多余4张，正常出牌，挑最小对出，没有则挑最小单出\n\t\t\tvar pairs = this._findMinDouble(lz_obj, pc, 1, [], false); //[[1, 2], [3, 4]]...\n\t\t\tif (pairs.length > 0) {\n\t\t\t\tddz.LOGD(this._TAG, \"find min double in find available aircraft....\");\n\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\treturn pairs[0];\n\t\t\t}\n\t\t\tvar singles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\tif (singles.length == 0) {\n\t\t\t\tddz.LOGD(this._TAG, \"assert!!!! error in play actively!!\"); //没有对子又没有单，应该报错\n\t\t\t}\n\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\treturn singles;\n\t\t} else {\n\t\t\tif (this.dizhuPos != preIndex) { //下家是同盟，从小往大出，否则从大往下出\n\t\t\t\tpc.reverse();\n\t\t\t}\n\t\t\tif (enemyCardsLen % 2 == 1) { //敌人手牌单数，优先出对子\n\t\t\t\tvar pairs = this._findMinDouble(lz_obj, pc, 1, [], false); //[[1, 2], [3, 4]]...\n\t\t\t\tif (pairs.length > 0) {\n\t\t\t\t\tddz.LOGD(this._TAG, \"find min double in find available aircraft....\");\n\t\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\t\treturn pairs[0];\n\t\t\t\t}\n\t\t\t\tvar singles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\t\treturn singles;\n\t\t\t} else { //敌人手牌双数，优先出单牌\n\t\t\t\tvar singles = this._findMinSingle(lz_obj, pc, 1, [], false); //[1,2,3,4]...\n\t\t\t\tif (singles.length > 0) {\n\t\t\t\t\tddz.LOGD(this._TAG, \"find min double in find available aircraft....\");\n\t\t\t\t\tthis._dumpResultArr('found min single', singles);\n\t\t\t\t\treturn singles;\n\t\t\t\t}\n\t\t\t\tvar pairs = this._findMinDouble(lz_obj, pc, 1, [], false);\n\t\t\t\tif (pairs.length == 0) {\n\t\t\t\t\tddz.LOGD(this._TAG, \"assert!!!! error in play actively!!\"); //没有对子又没有单，应该报错\n\t\t\t\t}\n\t\t\t\tthis._dumpResultArr('found min double', pairs[0]);\n\t\t\t\treturn pairs[0];\n\t\t\t}\n\t\t}\n\t},\n\n});\n\nfunction testPlayActively() {\n\tvar robot = new ddz.AIRobot();\n\t// robot.players[1] = [0,1, 56, 56, 16, 29, 4,17,30, 5, 18, 31, 6,7,8,9,10]; //A2L L44555666   78910j   ---->55566678\n\t// robot.setLaiziPoint(3); // 3是癞子\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, 16, 29, 4,17,30, 5, 18, 31, 6,7,20,8,9,10]; //A2L L44555666   78910j   ---->5556664488 \n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,17,     5, 18, 31,     \t6,7,8,9,10]; //A2L L4455666   78910j  ---->444555666789\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,17,30,  5, 18,      \t6,7,8,9,10]; //A2L L4455566   78910j  ------>444555666\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,17,     5, 18, \t\t\t6,7,8,9,10]; //A2L L445566   78910j  ---->44455578\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,17,     5, 18, \t\t\t6,7,20,8,9,10]; //A2L L445566   788910j  ---->4445556688\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,        5, 18, \t\t\t6,7,8,9,10];     //A2L L44566   78910j----->44556677\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,        5,  \t\t\t6,7,8,9,10];     //A2L L4456   78910j----->445566\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, 29, \t4,17,        5,  \t\t\t6,7,8,9,10];     //A2L L44556   78910j----->44455567\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, \t4,17,        5,  \t\t\t6,19,7,8,9,10];     //A2L L4556   778910j----->44556677\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, \t4,17,        5,18,  \t\t\t6,19,7,8,9,10];     //A2L L45566   778910j----->55566648\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, \t        5,18,  \t\t\t6,8,9,10,11,12];     //A2L L466   7 910jqk----->   910jqkA\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t16, \t        5,18,  \t\t\t6,8,9,10];     //A2L L466   7 910j----->   78910jq\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t \t        5,18,  \t\t\t6,8,9,10];     //A2L L66   7 910j----->     78910jq\n\t// robot.playActively(2);\n\n\t// robot.players[1] = [0,1, 56, 56, \t3,  \t     5, 18, 31,     \t9]; //A2L L4666   10  ---->66644\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t3,  \t     5, 18, 31,     \t9, 22]; //A2L L4666   1010  ---->6661010\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t3,  \t     5, 18,      \t9,22]; //A2L L466   1010  ---->44466\n\t// robot.playActively(2); \n\n\t// robot.players[1] = [0,1, 56, 56, \t3,  \t     5, 18,      \t9]; //A2L L466   10  ---->44466\n\t// robot.playActively(2); \n\n\t// robot.players[0] = [0,1, 56, 56, \t3]; // 大于4张\n\t// robot.dizhuPos = 1;\n\t// robot.currentPlayPos = 2;\n\t// robot.players[2] = [0,1, 56, 56, \t3,  \t     5, 18,      \t9]; // 大于4张\n\t// robot.players[1] = [0,1, 56, ]; //A2L\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1, 56, 56, \t3,  \t     5, 18,      \t9]; // 大于4张\n\t// robot.players[1] = [0,1,]; //A2\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1, 56, ]; // 3张\n\t// robot.players[1] = [0,1,  \t     5, 18]; //A266 -->66\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1,]; // 2张\n\t// robot.players[1] = [0,1,  \t     5, 18, 9, 22]; //A266 1010-->66\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1, 56, ]; // 3张\n\t// robot.players[1] = [0,1, ]; //A266 -->A\n\t// robot.playActively(2);\n\n\t// robot.players[0] = [0,1, 56, 56, \t3, 4]; // 大于4张\n\t// robot.players[2] = [0,1,]; // 2张\n\t// robot.players[1] = [0,1,  \t     5, 18, 9, 22]; //A266 1010-->66\n\t// robot.playActively(2);\n\n\n\t// robot.players[2] = [0,1, 56, ]; // 3张\n\t// robot.players[1] = [0,1, ]; //A266 -->A\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1,]; // 2张\n\t// robot.players[1] = [0,1,  \t     5, 18, 9, 22]; //A266 1010-->66\n\t// robot.playActively(2);\n\n\t// robot.dizhuPos = 3;\n\t// robot.players[2] = [0,1, 56, ]; // 3张\n\t// robot.players[1] = [0,1,  \t     5, 18]; //A266 -->66\n\t// robot.playActively(2);\n\n\t// robot.players[2] = [0,1,]; // 2张\n\t// robot.players[1] = [0,1,  \t     5, 18, 9, 22]; //A266 1010-->66\n\t// robot.playActively(2);\n}\n\nvar testTag = 'ddzAiTest';\n\nvar aitest = function(cards, bLzChangable) {\n\tddz.LOGD(testTag, \"judge ..........\");\n\tfor (var i = 0; i < cards.length; i++) {\n\t\tddz.LOGD(cards[i]);\n\t}\n\tvar types = ddz.testinjudger.judgeType(cards,bLzChangable);\n\tif (types.length == 0) {\n\t\tddz.LOGD(testTag, \"illegal types......\");\n\t\treturn;\n\t}\n\tfor (var i = 0; i < types.length; i++) {\n\t\tddz.LOGD(testTag, \"type......\" + i);\n\t\ttypes[i].dump();\n\t}\n\n\treturn types[0];\n};\n\nvar minGetTest = function(cards) {\n\n\tvar pc = ddz.testinjudger._getPCArrayByPoint(cards);\n\tvar\tlz_obj = {count: 1,point:3,cards: [56]};\n\n\n\t//测试时，lz_obj,获取个数和［］需随意设置不同的值\n\t//var res = ddz.testinjudger._findMinSingle(lz_obj,pc, 1, [], true);\n    var res = ddz.testinjudger._findMinDouble(lz_obj,pc, 2, [], true);\n    for (var i = 0; i < res.length; i++) {\n    \t ddz.LOGD(testTag, \"res = \" + res[i]);\n    };\n};\n\n\n\nfunction passTest(type, array) {\n\tvar ret = ddz.testPassive.findWinCardsFromArray(type, array);\n\tddz.LOGD(testTag, \"dump play passive result......\");\n\tfor(var index = 0; index < ret.length; index++) {\n\t\tddz.LOGD(testTag, \"result index.......\" + index);\n\t\thall.GlobalFuncs.PrintArray(ret[index]);\n\t}\n\treturn ret;\n};\nfunction passTestNew(type, array) {\n\tvar ret = ddz.testPassive.findWinCardsFromArray(type, array);\n\tddz.LOGD(testTag, \"dump play passive result......\");\n\tfor(var index = 0; index < ret.length; index++) {\n\t\tddz.LOGD(testTag, \"result index.......\" + index);\n\t\tddz.CardTable.print(ret[index]);\n\t}\n};\n//被动出牌测试\nvar testPlayPassively = function(){\n\tddz.CardTable = new ddz._CardTable();\n\tddz.testPassive = new ddz.AIRobot();\n\tddz.LOGD(testTag, \"AI test by Jiguan\");\n\n\t/////////////////////(一)测试单牌///////////////////////////////\n\t//(1) 无癞子纯单牌\n\t//（2）无癞子拆成单牌\n\t//（3）使用癞子管得住\n\t//（4）使用癞子管不住\n\t//（一.1）\n\t// var cards = [1, 14, 35, 55];//22210\n\t// var type = new ddz.CardType(hall.Enums.PaixingType.THREE_ONE_CARD, 12, 4, cards);\n\t// var array = [52, 53, 3, 4, 5, 6, 7, 8, 65, 65];//红桃9，红桃J，红桃Q，黑桃Q，红桃K，红桃A,黑桃A，梅花A,癞子2\n\t// passTest(type, array);\n\n\t//(一.2)\n\t//测试大小王\n\t// var countTable = ddz.CardTable.count;\n\t// var cards = [countTable['CARD_H_Q']];//Q\n\t// var type = new ddz.CardType(hall.Enums.PaixingType.SINGLE_CARD, ddz.CardTable.pos['CARD_Q'], 1, cards);\n\t// var array = [\n\t// \tcountTable['CARD_JL'],\n\t// \tcountTable['CARD_JB']\n\t// ];\n\t// ddz.LOGD(testTag, \"测试手牌只剩大小王，管单牌的情况\");\n\t// ddz.LOGD(array);\n\t// passTestNew(type, array);\n\n\t///////////////////（二）测试对牌///////////////////////////////\n\t//(1)无癞子纯对子\n\t//(2)使用癞子凑对子\n\t//(3)使用纯癞子\n\t//(4)拆三张\n\t// cards = [35,48];//红桃10,黑桃10\n\t// type = new ddz.CardType(hall.Enums.PaixingType.DOUBLE_CARD, 7, 2, cards);\n\t// array = [34,47,36,37,50,26,39,13,66,66];//红桃9，黑桃9，红桃J，红桃Q，黑桃Q，红桃A,黑桃A，梅花A,癞子K,癞子K\n\t// //预期结果：[37,50],[36,64],[66,66]，[13,26]\n\t// passTest(type, array);\n\n\n\t//////////////////（三）测试三张///////////////////////////////\n\t//（1）纯三张\n\t//（2）2原牌+1癞子\n\t//（3）1原牌+2癞子\n\t//（4）纯癞子\n\n\n\t// //（三.1）纯三张\n\t// cards = [35,48,22];//红桃10,黑桃10，梅花10\n\t// type = new ddz.CardType(hall.Enums.PaixingType.THREE_CARD, 7, 3, cards);\n\t// array = [34,47,21, 36,49,23, 37,50, 26, 66,66,66];//红桃9，黑桃9，梅花9，红桃J，黑桃J，梅花J，红桃Q，黑桃Q，红桃A,癞子K,癞子K，癞子K\n\t// //预期结果：[23,36,49],[37,50,65],[26,54,54],[66,66,66]\n\t// ddz.LOGD(testTag, \"被动，测试纯三张\");\n\t// passTest(type, array);\n\t// cards = [];\n \t// type = {};\n \t// array = [];\n\n\t//（三.1）纯三张\n\t// cards = [35,48,22];//红桃10,黑桃10，梅花10\n\t// type = new ddz.CardType(hall.Enums.PaixingType.THREE_CARD, 7, 3, cards);\n\t// array = [34,47,21, 36,49,23, 37,50, 26, 66,66,66];//红桃9，黑桃9，梅花9，红桃J，黑桃J，梅花J，红桃Q，黑桃Q，红桃A,癞子K,癞子K，癞子K\n\t// //预期结果：[23,36,49],[37,50,65],[26,54,54],[66,66,66]\n\t// passTest(type, array);\n\n\n\n    //（三.2）三带1\n \t//cards = [10,36,49,18];//方片J，红桃J,黑桃J,梅花6\n\t// type = new ddz.CardType(hall.Enums.PaixingType.THREE_ONE_CARD, 8, 4, cards);\n\t// array = [46,34,35,11,37,12,25,51,0,13,1,14,53,60,60,60];//\n\t// //预期结果：\n\t// passTest(type, array);\n\n\n\n    //（三.3）三带2\n    //带牌的策略是：纯对子，凑对子，拆三张，纯癞子\n \t//cards = [35,48,22,28,41];//红桃10,黑桃10，梅花10，红桃3，黑桃3\n\t// type = new ddz.CardType(hall.Enums.PaixingType.THREE_TWO_CARD, 7, 5, cards);\n\t// array = [34,47,21, 36,49,23, 37,50, 26, 66,66,66];//红桃9，黑桃9，梅花9，红桃J，黑桃J，梅花J，红桃Q，黑桃Q，红桃A,癞子K,癞子K，癞子K\n\t// //预期结果：JJJ-QQ[23,36,49,37,50],QQL-AL[37,50,65,26，54],ALL-QQ[26,54,54，37，50],KKK-QQ[66,66,66，37，50]\n\t// passTest(type, array);\n\n\n\t//////////////////（四）测试四张///////////////////////////////////\n\t//搜索顺序如下：\n\t//（1）纯四张\n\t//（2）3原牌+1癞子\n\t//（3）2原牌+2癞子\n\t//（4）1原牌+3癞子\n\t//（5）4纯癞子\n\t///////////////\n\n\t//（四.1）纯四张\n\t//(四.1.1)\n\t// cards = [35,48,22,9];//红桃10,黑桃10，梅花10，方片10\n\t// type = new ddz.CardType(hall.Enums.PaixingType.BOMB_CARD, 7, 4, cards);\n\t// array = [47,34,21,8,  49,36,23,10, 50,37,24, 39,26,  40, 66,66,66,66];//《黑桃9，红桃9，梅花9，方片9》，《 黑桃J，红桃J，梅花J，方片J》，《黑桃Q，红桃Q，梅花Q》，《黑桃A，红桃A》,《黑桃2》《癞子K,癞子K，癞子K，癞子K》\n\t// //预期结果：JJJJ[49，36，23，10],QQQL[50，37，24，65],AALL[39，26，54，54],2LLL[40，55，55，55],KKKK[66,66,66，66]\n\t// passTest(type, array);\n\n\t//(四.1.2)\n\t// ddz.LOGD(testTag, \"测试任意常规炸弹大于软炸弹\");\n\t// var countTable = ddz.CardTable.count;\n\t// var cards = [countTable['CARD_D_Q'], countTable['CARD_C_Q'],countTable['CARD_H_Q'],countTable['CARD_L_Q']];//QQQL\n\t// var type = new ddz.CardType(hall.Enums.PaixingType.BOMB_CARD, ddz.CardTable.pos['CARD_Q'], 4, cards);\n\t// var array = [\n\t// //四个3\n\t// countTable['CARD_D_3'],\n\t// countTable['CARD_C_3'],\n\t// countTable['CARD_H_3'],\n\t// countTable['CARD_S_3'],\n\n\t// //三个K\n\t// countTable['CARD_D_K'],\n\t// countTable['CARD_C_K'],\n\t// countTable['CARD_H_K'],\n\n\t// //两个A\n\t// countTable['CARD_D_A'],\n\t// countTable['CARD_C_A'],\n\n\t// //三个J\n\t// countTable['CARD_D_J'],\t\n\t// countTable['CARD_D_J'],\n\t// countTable['CARD_D_J'],\n\n\t// //两个癞子4\n\t// countTable['CARD_L_4'],\t\n\t// countTable['CARD_L_4']\n\t// ];\n\t// passTestNew(type, array);\n\n\t//(四.1.3)\n\t// ddz.LOGD(testTag, \"测试任意常规炸弹和软炸弹都小于纯癞子炸弹\");\n\t// var countTable = ddz.CardTable.count;\n\t// var cards = [countTable['CARD_L_Q'], countTable['CARD_L_Q'],countTable['CARD_L_Q'],countTable['CARD_L_Q']];//QQQL\n\t// var type = new ddz.CardType(hall.Enums.PaixingType.BOMB_CARD, ddz.CardTable.pos['CARD_Q'], 4, cards);\n\t// var array = [\n\t// //四个3\n\t// countTable['CARD_D_3'],\n\t// countTable['CARD_C_3'],\n\t// countTable['CARD_H_3'],\n\t// countTable['CARD_S_3'],\n\n\t// //四个A\n\t// countTable['CARD_D_A'],\n\t// countTable['CARD_C_A'],\n\t// countTable['CARD_H_A'],\n\t// countTable['CARD_S_A'],\n\n\t// //三个J\n\t// countTable['CARD_D_J'],\t\n\t// countTable['CARD_D_J'],\n\t// countTable['CARD_D_J'],\n\n\t// //四个癞子4\n\t// countTable['CARD_L_K'],\t\n\t// countTable['CARD_L_K'],\n\t// countTable['CARD_L_K'],\t\n\t// countTable['CARD_L_K']\n\t// ];\n\t// passTestNew(type, array);\n\n\n\t//(四.1.4)\n\t// ddz.LOGD(testTag, \"测试炸弹BUG\");\n\t// var countTable = ddz.CardTable.count;\n\t// var cards = [countTable['CARD_D_10'], countTable['CARD_C_10'],countTable['CARD_S_10'],countTable['CARD_L_10']];//10 10 10 L\n\t// var type = new ddz.CardType(hall.Enums.PaixingType.BOMB_CARD, ddz.CardTable.pos['CARD_10'], 4, cards);\n\t// var array = [\n\t// //小王\n\n\t// //3个2\n\t// countTable['CARD_D_2'],\n\t// countTable['CARD_C_2'],\n\t// countTable['CARD_S_2'],\n\n\t// //1个A\n\t// countTable['CARD_S_A'],\n\n\t// //1个K\n\t// countTable['CARD_D_K'],\t\n\n\t// //1个J\n\t// countTable['CARD_S_J'],\t\n\n\t// //1个10\n\t// countTable['CARD_H_10'],\n\n\t// //2个3\n\t// countTable['CARD_C_3'],\n\t// countTable['CARD_S_3'],\n\n\t// //2个癞子Q\n\t// countTable['CARD_L_Q'],\t\n\t// countTable['CARD_L_Q'],\n\t// ];\n\t// passTestNew(type, array);\n\n\n    //（四.2）四带两张\n \t//cards = [35,48,22,9,41,28];//红桃10,黑桃10，梅花10，方片10,黑桃3，红桃3\n\t// type = new ddz.CardType(hall.Enums.PaixingType.BOMB_TWO_CARD, 7, 6, cards);\n\t// array = [42, 43, 47,34,21,8,  49,36,23,10, 50,37,24, 39,26,  40, 66,66,66,66];//《黑桃4》《黑桃5》《黑桃9，红桃9，梅花9，方片9》，《 黑桃J，红桃J，梅花J，方片J》，《黑桃Q，红桃Q，梅花Q》，《黑桃A，红桃A》,《黑桃2》《癞子K,癞子K，癞子K，癞子K》\n\t// //预期结果：JJJJ-34[49，36，23，10-42,43],QQQL-34[50，37，24，65-42,43],AALL-34[39，26，54，54-42,43],2LLL-34[40，55，55，55-42,43],KKKK-34[66,66,66，66-42,43]\n\t// passTest(type, array);\n\n    //（四.3）四带1对\n\t///////////////////（五）测试顺子//////////////////////////////////\n\t// cards = [3, 4, 5, 6, 7];//45678\n\t// type = new ddz.CardType(hall.Enums.PaixingType.SHUNZI_CARD, 1, 5, cards);\n\t// // array = [2, 3, 17, 18, 19, 21, 22, 23, 11, 12, 13, 14];// 34567 910JQKA2\n\t// // //预期输出 21, 22, 23, 11, 12/ 22, 23, 11, 12, 13  应该不能带2，\n\t// // passTest(type, array);\n\n\t// array = [4, 5, 6, 7, 65, 9];\n\t// //预期输出 4, 5, 6, 7, 62/ 5, 6, 7, 62, 9 \n\t// passTest(type, array);\n\n\t// cards = [3, 16, 4, 17, 5, 18];//445566\n\t// type = new ddz.CardType(hall.Enums.PaixingType.LIANDUI_CARD, 1, 6, cards);\n\t// array = [3, 16, 4, 17, 5, 18, 6, 19, 7, 65, 8, 65];\n\t// array = [3, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21];\n\t// //预期输出 4, 17, 5, 18, 6, 19/ 5, 18, 6, 19, 7,  20/ 6, 19, 7, 61, 8, 21\n\t// passTest(type, array);\n\n\t// cards = [3, 16, 29, 4, 17, 30];//444555\n\t// type = new ddz.CardType(hall.Enums.PaixingType.AIRCRAFT_CARD, 1, 6, cards);\n\t// array = [3, 16, 4, 17, 30, 5, 18, 31, 6, 19, 32, 8, 21, 34, 9, 22, 35];\n\t//预期输出 4, 17, 30, 5, 18, 31/ 5, 18, 31, 6, 19,  32/ 8, 21, 34, 9, 22, 35\n\t// array = [3, 16, 4, 17, 65, 5, 18, 31, 6, 19, 32, 8, 65, 34, 9, 65, 65];\n\t//预期输出 4, 17, 58, 5, 18, 31/ 5, 18, 31, 6, 19, 32/ 6, 19, 32, 61, 61, 61/ 8, 34, 62, 9, 63, 63\n\t// passTest(type, array);\n\n\t// cards = [3, 16, 29, 4, 17, 30, 5, 6];//44455567\n\t// type = new ddz.CardType(hall.Enums.PaixingType.AIRCRAFT_SINGLE_CARD, 1, 8, cards);\n\t// array = [3, 16, 4, 17, 30, 5, 18, 31, 6, 19, 32, 8, 21, 34, 9, 22, 35, 10];\n\t//预期输出: 4, 17, 30, 5, 18, 31, 3, 10/ 5, 18, 31, 6, 19, 32, 3, 10/ 8, 21, 34, 9, 22, 35, 3, 10\n\t// array = [3, 16, 4, 17, 65, 5, 18, 65, 6, 19, 65, 8, 21, 34, 9, 22, 35, 65];\n\t//预期输出 4, 17, 58, 5, 18, 59, 3, 16 / 5, 18, 59, 6, 19, 60, 3, 16/ 8, 21, 34, 9, 22, 35, 3, 16/ 6, 19, 60, 61, 61, 61, 3, 16/ 61, 61, 61, 8, 21, 34, 3, 16\n\t// passTest(type, array);\n\n\t// cards = [3, 16, 29, 4, 17, 30, 5, 18, 6, 19];//44455567\n\t// type = new ddz.CardType(hall.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD, 1, 10, cards);\n\t// array = [3, 16, 4, 17, 30, 5, 18, 31, 6, 19,  8, 21, 34, 9, 22, 35, 10, 11, 24];\n\t//预期结果: 4, 17, 30, 5, 18, 31, 3, 16, 6, 19/ 8, 21, 34, 9, 22, 35, 3, 16, 6, 19\n\t// array = [3, 16, 29, 4, 17, 30, 5, 18, 31, 8, 21, 34, 9, 22, 35, 10, 11, 24];//需要拆分3个来凑对子\n\t//预期结果:  4, 17, 30, 5, 18, 31, 3, 16, 11, 24/ 8, 21, 34, 9, 22, 35, 3, 16, 11, 24\n\t// array = [3, 4, 17, 65, 5, 18, 65, 6, 65,  8, 21, 34, 9, 22, 65, 10, 11, 24];\t//需要用癞子凑对子\n\t//预期结果: 4, 17, 58, 5, 18, 59, 9, 22, 11, 24/5 18 59 6 60 60 4,17 9,22 / 8, 21, 34, 9, 22, 63, 3, 57, 11, 24......结果太多了- -\n\t//passTest(type, array);\n\n\n\n\t////////////////////////////////////////////////测试组合\n\tvar countTable = ddz.CardTable.count;\n\tvar array = [\n\t\t//3,4,5,6,7,8,9,10\n\t\tcountTable['CARD_D_8'],\n\t\tcountTable['CARD_C_8'],\n\n\t\tcountTable['CARD_D_9'],\n\t\tcountTable['CARD_C_9'],\n\t\tcountTable['CARD_S_9'],\n\n\t\tcountTable['CARD_D_10'],\n\t\tcountTable['CARD_C_10'],\n\n\t\tcountTable['CARD_H_J'],\n\t\tcountTable['CARD_S_J']\n\t];\n\tvar selcards = ddz.testPassive._findLongestFromSelectedCards(array);\n\tddz.LOGD(testTag, \"测试组合哈哈哈\");\n\tddz.CardTable.print(selcards);\n};\n// testPlayPassively();\n\nfunction testJudge() {\n\tddz.testinjudger = new ddz.AIRobot();\n\t// aitest([52, 56, 56, 9], true); // 4\n\t// aitest([3]); // 4\n\t// aitest([56]); //L(3)\n\t// aitest([55]); //L(2)\n\t// aitest([3, 4]); // 4,5\n\t// aitest([3, 56]); //4L\n\t// aitest([56, 56]); //LL(3)\n\t// aitest([3, 4, 5]);\t//456\n\t// aitest([3, 16, 5]);\t//445\n\t// aitest([3, 16, 29]);\t//444\n\t// aitest([3, 16, 62]);\t//\t44L\n\t// aitest([3, 4, 56]);\t//45L\n\t// aitest([55, 55, 55]);\t//LLL\n\n\t// aitest([3, 16, 29, 4]); //4445\n\t// aitest([3, 16, 4, 17]); //4455\n\t// aitest([3, 16, 4, 5]); //4456\n\t// aitest([3, 16, 59, 4]); //44L5(L = 6, value = 3)\n\t// aitest([3, 16, 29, 59]); //444L\n\t// aitest([3, 59, 4, 59]); //4LL5\n\t// aitest([3, 16, 59, 59]); //44LL     4446\n\t// aitest([3, 59, 59, 59]); //4LLL \t6664\n\t// aitest([3, 56, 56, 56]); //4LLL     4443\n\t// aitest([59, 59, 59, 59]); //LLLL\n\t// aitest([3, 16, 29, 42]); //4444\n\n\t// aitest([3, 16, 29, 4, 5]); //44456\t\n\t// aitest([3, 16, 4, 5, 6]); //44567\n\t// aitest([3, 16, 4, 17, 5]); //44556\n\t// aitest([3, 16, 4, 5, 59]); //4456L\n\t// aitest([3, 16, 29, 4, 17]); //44455\n\t// aitest([3, 16, 29, 4, 59]); //4445L(6)\n\t// aitest([3, 16, 4, 17, 59]); //4455L\n\t// aitest([3, 16, 29, 59, 59]); //444LL\n\t// aitest([3, 16, 29, 42, 59]); //4444L\n\t// aitest([3, 16, 4, 59, 59]); //445LL\n\t// aitest([3, 16, 59, 59, 59]); //44LLL\n\t// aitest([3, 4, 59, 59, 59]); //45LLL\n\n\n\t// aitest([52, 53]);\t//kk\n\t// aitest([2, 15, 28, 41, 3, 4]);\t//333345\n\t// aitest([2, 15, 28, 41, 3, 59]);\t//33334L\n\t// aitest([2, 15, 28, 59, 3, 4]);\t//333L45\n\t// aitest([2, 15, 28, 41, 59, 59]);\t//3333LL\n\t// aitest([2, 15, 28, 59, 3, 59]);\t\t//333L4L\n\t// aitest([2, 15, 59, 59, 3, 16]);\t\t//33LL44\n\t// aitest([2, 15, 59, 59, 3, 4]);\t\t//33LL45\n\t// aitest([2, 59, 59, 59, 3, 4]);\t\t//3LLL45\n\t// aitest([2, 59, 59, 59, 3, 16]); \t\t//3LLL44\n\t// aitest([59, 59, 59, 59, 2, 15]);\t\t//LLLL33\n\t// aitest([59, 59, 59, 59, 2, 3]);\t\t//LLLL34\n\t// aitest([59, 59, 59, 59, 8, 21]);\t\t//LLL88(l=6, VALUE = 3)\n\t// aitest([59, 59, 59, 59, 8, 9]);\t\t//LLLL89\n\n\t// aitest([3, 16, 29, 42, 4, 17, 5, 18]);\t//44445566\n\t// aitest([3, 16, 29, 42, 4, 6, 5, 18]);\t//44445667\n\t// aitest([3, 16, 29, 42, 7, 6, 5, 4]);\t//44445678\n\t// aitest([3, 16, 29, 59, 4, 17, 5, 18]);\t//444L5566\n\t// aitest([3, 16, 29, 42, 4, 17, 5, 59]);\t//4444556L\n\t// aitest([3, 16, 29, 59, 4, 6, 5, 18]);\t//444L5667\n\t// aitest([3, 16, 59, 59, 4, 17, 5, 18]);\t//44LL5566\n\t// aitest([3, 16, 29, 42, 4, 17, 59, 59]);\t\t//444455LL\n\t// aitest([3, 16, 29, 42, 4, 5, 59, 59]); //44445L6L...\n\t// aitest([3, 16, 29, 59, 4, 17, 5, 59]); //444L556L\n\t// aitest([3, 16, 29, 59, 4, 6, 5, 59]); //444L567L\n\t// aitest([3, 59, 59, 59, 4, 17, 5, 18]); //LLL45566....\n\t// aitest([3, 16, 59, 59, 4, 59, 5, 18]); //LLL44566...\n\t// aitest([3, 16, 29, 59, 59, 59, 5, 18]); //LLL44466...\n\t// aitest([3, 16, 29, 59, 59, 59, 5, 4]); //LLL44456\n\t// aitest([59, 59, 59, 5, 4, 6, 7, 3]); //LLL45678\n\t// aitest([59, 59, 59, 59, 4, 17, 6, 19]); //LLLL5577\n\t// aitest([59, 59, 59, 59, 2, 15, 3, 16]); //LLLL4433\n\t// aitest([59, 59, 59, 59, 4, 5, 6, 7]); //LLLL5678\n\t// aitest([59, 59, 59, 59, 4, 17, 5, 6]); //LLLL5567\n\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 6]); //44455567\n\t// aitest([3, 16, 28, 4, 17, 30, 5, 6]); //44355567\n\t// aitest([3, 16, 29, 42, 4, 17, 30, 5]); //44445556\n\t// aitest([3, 16, 29, 42, 4, 5, 18, 6]); //44445667\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 62]); //4445556L (L=9, V = 6)\n\t// aitest([3, 16, 62, 4, 17, 30, 5, 6]); //44L55567\n\t// aitest([3, 16, 29, 4, 17, 30, 62, 62]); //444555LL\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 6]); //4445LL67\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 62]); //44455L6L\n\t// aitest([3, 16, 29, 62, 62, 62, 5, 6]); //444LLL56\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 62]); //4445LL6L\n\t// aitest([3, 16, 62, 4, 62, 62, 5, 6]); //44L5LL67\n\t// aitest([3, 16, 29, 4, 17, 62, 62, 62]); //44455LLL\n\t// aitest([3, 16, 29, 12, 25, 62, 62, 62]); //444KKLLL\n\t// aitest([62, 62, 62, 2, 3, 4, 5, 6]); //LLL34567\n\t// aitest([62, 62, 62, 2, 15, 4, 5, 6]); //LLL33456\n\t// aitest([62, 62, 62, 2, 15, 3, 16, 6]); //LLL33445\n\n\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 6, 19]); //4445556677\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 6, 20]); //4445556678\n\t// aitest([3, 16, 29, 4, 17, 7, 5, 18, 6, 19]); //4445586678\n\t// aitest([3, 16, 29, 42, 4, 17, 30, 5, 18, 6]); //4444555667\n\t// aitest([3, 16, 29, 42, 4, 17, 30, 43, 5, 18]); //4444555566\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 6, 62]); //444555667L\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 18, 6, 19]); //44455L6677\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 62, 62]); //44455566LL\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 62, 6, 62]); //4445556L7L\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 18, 6, 19]); //4445LL6677\n\t// aitest([3, 16, 29, 4, 62, 62, 7, 20, 10, 23]); //4445LL88JJ\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 7, 6, 19]); //4445LL6778\n\t// aitest([3, 16, 4, 17, 62, 62, 10, 23, 11, 24]); //4455LLJJQQ\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 62, 62, 62]); //4445556LLL\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 18, 62, 62]); //44455L66LL\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 62, 6, 62]); //44455L6L7L\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 18, 6, 62]); //4445LL667L\n\t// aitest([3, 16, 62, 4, 17, 62, 5, 18, 6, 62]); //44L55L667L\n\t// aitest([3, 16, 62, 4, 17, 62, 8, 21, 11, 62]); //44L55L99JL\n\t// aitest([2, 15, 62, 4, 17, 62, 5, 18, 6, 62]); //33L55L667L\n\t// aitest([62, 62, 62, 62, 2, 3, 4, 5, 6, 7]); //LLLL345678\n\t// aitest([62, 62, 62, 62, 2, 15, 4, 5, 6, 7]); //LLLL335678\n\t// aitest([62, 62, 62, 62, 2, 15, 4, 5, 18, 7]); //LLLL335668\n\t// aitest([62, 62, 62, 62, 2, 15, 3, 16, 6, 7]); //LLLL334478\n\t// aitest([62, 62, 62, 62, 2, 15, 3, 16, 4, 17]); //LLLL334455\n\t// aitest([62, 62, 62, 62, 2, 15, 4, 17, 6, 19]); //LLLL335577\n\t// aitest([62, 62, 62, 62, 2, 15, 10, 23, 11, 24]); //LLLL33JJQQ\n\t// aitest([62, 62, 62, 62, 2, 15, 28, 5, 6, 7]); //LLLL333678\n\t// aitest([62, 62, 62, 62, 2, 15, 28, 5, 18, 7]); //LLLL333667\n\t// aitest([62, 62, 62, 62, 2, 15, 28, 42, 6, 7]); //LLLL333478\t\t\n\t// aitest([62, 62, 62, 62, 2, 15, 28, 41, 6, 7]); //LLLL333378\t\n\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 7, 8]);\t//444555666789\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 32]);\t//444555666777\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 8]);\t//444555666779\n\t// aitest([3, 16, 29, 4, 17, 32, 5, 18, 31, 6, 7, 8]);\t\t//444557666789\n\t// aitest([2, 15, 28, 4, 17, 30, 5, 18, 31, 6, 7, 8]);\t\t//333555666789\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 7, 62]); \t//44455566678L\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 62, 62]);\t//4445556667LL\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 62, 62, 62]);  //444555666LLL (L=9)\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 60, 60, 60]);\t//444555666LLL(L = 7)\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 62, 6, 7, 8]);\t\t//44455566L789\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 62, 62, 6, 7, 8]); \t//44455556LL789\n\t// aitest([3, 16, 29, 4, 17, 30, 62, 62, 62, 6, 7, 8]);\t//444555LLL789\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 18, 62, 6, 7, 8]);\t//44455L66L789\n\t// aitest([3, 16, 62, 4, 17, 62, 5, 18, 62, 6, 7, 8]);\t//44L55L66L789\n\t// aitest([3, 16, 29, 4, 17, 30, 62, 62, 62, 62, 7, 8]); \t//LLLL44455589\n\t// aitest([62, 62, 62, 62, 3, 16, 4, 17, 5, 18, 6, 19]);\t//LLLL44556677\n\t// aitest([62, 62, 62, 62, 3, 16, 29, 42, 5, 18, 6, 19]);\t//LLLL44446677\n\t// aitest([62, 62, 62, 62, 3, 16, 29, 42, 5, 7, 6, 19]);\t//LLLL44446778   \n\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 7, 20, 8, 21]);\t//444555666778899\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 7, 20, 8, 10]);\t//44455566677889J\n\t// aitest([3, 16, 29, 4, 17, 30, 10, 23, 36, 6, 19, 7, 20, 8, 21]);\t//444555JJJ778899\n\t// aitest([3, 16, 29, 4, 17, 5, 18, 31, 6, 19, 7, 20, 8, 21, 10]);\t//44455666778899J\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 7, 20, 8, 62]);\t\t//44455566677889L\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 7, 20, 62, 62]);\t//4445556667788LL\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 19, 7, 62, 8, 62]);\t\t//444555666778L9L\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31, 6, 62, 7, 62, 8, 62]);\t\t//4445556667L8L9L\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 62, 6, 19, 7, 20, 8, 21]);\t\t//44455566L778899\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 18, 31, 6, 19, 7, 20, 8, 21]);\t\t//44455L666778899\n\t// aitest([3, 16, 29, 4, 62, 62, 5, 18, 31, 6, 19, 7, 20, 8, 21]);\t\t//4445LL666778899\n\t// aitest([3, 16, 29, 62, 62, 62, 5, 18, 31, 6, 19, 7, 20, 8, 21]);\t//444LLL666778899\n\t// aitest([62, 62, 62, 62, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 10]);\t\t//LLLL5566778899J\n\t// aitest([62, 62, 62, 62, 4, 17, 30, 5, 18, 6, 19, 7, 20, 8, 21]);\t//LLLL55566778899\n\t// aitest([62, 62, 62, 62, 4, 17, 30, 43, 6, 19, 7, 20, 8, 21, 10]);\t//LLLL5555778899J\n\n\t// aitest([3, 4, 5, 6]);\t//4567\n\t// aitest([3, 4, 5, 6, 7]);\t//45678\n\t// aitest([10, 11, 12, 0, 1]);\t//JQKA2\n\t// aitest([9, 10, 11, 12, 0]); \t//10JQKA\n\t// aitest([3, 4,  6, 7, 8]);\t//45789\n\t// aitest([3, 16, 4, 5, 6]);\t//44567\n\t// aitest([3, 4, 5, 6, 62]);\t//4567L （L= 9）\n\t// aitest([3, 4, 62, 6, 7]);\t//45L78\n\t// aitest([3, 4, 62, 62, 6]);\t//45LL7\n\t// aitest([3, 62, 62, 62, 5]);\t//46LLL\n\t// aitest([3, 62, 62, 62, 12]);\t//4LLLK\n\t// aitest([3, 62, 62, 62, 62]);\t//4LLLL\n\t// aitest([0, 62, 62, 62, 62]);\t//KLLLL\n\n\t// aitest([3, 16, 4, 17, 5, 18]);\t//445566\n\t// aitest([3, 16, 4, 17, 5]);\t\t//44556\n\t// aitest([3, 16, 6, 19, 5, 18]);\t//446677\n\t// aitest([12, 25, 0, 13, 1, 14]);\t//KKAA22\n\n\t// aitest([3, 16, 4, 17, 5, 62]);\t//44556L\n\t// aitest([3, 16, 4, 62, 5, 18]);\t//445L66\n\t// aitest([3, 16, 4, 62, 5, 62]);\t//445L6L\n\t// aitest([3, 62, 4, 17, 5, 62]);\t//3L445L\n\t// aitest([3, 16, 4, 17, 62, 62]);\t//3344LL\n\t// aitest([7, 20, 62, 62, 9, 22]);\t//88LL1010(需要癞子牌当原值使用)\n\t// aitest([9, 22, 10, 23, 62, 62]);\t//1010JJLL(癞子不能当原值使用)\n\t// aitest([3, 62, 4, 62, 5, 62]);\t//456LLL\n\t// aitest([62, 62, 62, 3, 16, 4]);\t//LLL445\n\t// aitest([62, 62, 62, 3, 16, 29]);\t//LLL444\n\t// aitest([62, 62, 62, 62, 3, 4]);\t\t//LLLL45\n\t// aitest([62, 62, 62, 62, 3, 16]);\t//LLLL44\n\n\t//aitest([3, 16, 29, 4, 17, 30]);\t\t//444555\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 31]);\t//444555666\n\t// aitest([0, 13, 26, 1, 14, 27]);\t\t//AAA222\n\t// aitest([3, 16, 29, 4, 17, 31]);\t\t//444556\n\t// aitest([3, 16, 29, 4, 17, 62]);\t\t//44455L\n\t// aitest([3, 16, 29, 4, 62, 62]);\t\t//4445LL\n\t// aitest([3, 16, 29, 62, 62, 62]);\t//444LLL\n\t// aitest([3, 16, 62, 4, 17, 62]);\t\t//44L55L\n\t// aitest([3, 16, 62, 4, 62, 62]);\t\t//44L5LL\n\t// aitest([3, 16, 62, 62, 62, 62]);\t//44LLLL\n\t// aitest([3, 4, 62, 62, 62, 62]);\t\t//45LLLL\n\t// aitest([3, 16, 29, 4, 17, 30, 5, 18, 62]);\t//44455566L\n\t// aitest([3, 16, 29, 4, 17, 62, 5, 18, 62]);\t//44455L66L\n\t// aitest([3, 16, 62, 4, 17, 62, 5, 18, 62]);\t//44L55L66L\n\t// aitest([3, 16, 29, 62, 62, 62, 5, 18, 31]);\t\t//444LLL555\n\t// aitest([3, 16, 62, 62, 62, 62, 5, 18, 31]);\t\t//44LLLL666\t\t\n\n\t//aitest([3, 16, 29, 4, 62, 5]);\t\t//44LLLL666\t\n\n   //[20140521][jinrifeng]添加test case\n   //getMinSingle\n   //minGetTest([1,3,4,8,12]); \t\t\t\t\t//(2459k)\t  \t找出最小的单牌，返回最小单牌\n   //minGetTest([56,56,4,4,8,21]); \t\t\t\t//(LL5599)    \t无单牌，拆分返回\n   // minGetTest([22,48,4,4,8,21]); \t\t\t//(10105599)  \t无单牌，无癞子,不拆分，返回空\n   //minGetTest([22,48,9,4,17,30]); \t\t\t//(10 10 5699)\t无单牌，无癞子,有拆分，拆分返回。\n    \n   //getMinDouble\n   //minGetTest([1,14,3,17,4,8,12]); \t\t\t//(224559K)   \t\t\t有双牌，找出最小的双牌，则返回最小双牌\n   //minGetTest([56,5,4,6,8,21]); \t\t\t\t//(L65799)    \t\t\t有双牌，有1个癞子，需要1对双牌，则返回一对双牌，\n   //minGetTest([56,5,4,6,8,21]); \t\t\t\t//(L65799)      \t\t有1个双牌，有1个癞子，需要2对双牌，则返回一对双牌+(癞子＋单牌)，\n   //minGetTest([56,56,5,4,6,8,22]);  \t\t\t//(LL6579 10)   \t\t有单，无双，有2个癞子，遍布单牌后拼凑癞子，则返回癞子＋单牌\n   //minGetTest([56,56,5,18,31,4,17,30,43]);    //(LL6665555)    \t\t无单牌，无双牌，有拆分，有癞子，则返回拆分牌\n   //minGetTest([9,22,35,4,17,30,8,21,34]); \t//(10 10 10 555999) \t无单,无双，有拆分，无癞子，需要1对双牌，则返回一个拆分牌\n   //minGetTest([56,56,9,22,35,48,8,21,34]); \t//(LL999 10 10 10 10)\t无单,无双，有拆分，有癞子,需要2对双牌，则返回癞子＋拆分\n   //minGetTest([56,9,8,21,34]); \t\t\t\t//(L10 999)  \t  \t\t有单,无双，有拆分，有1个癞子,需要2对双牌，则返回癞子＋拆分\n};\n\n// testJudge();\n// testPlayPassively();\n//testPlayActively();\n\n//飞机带俩对相关测试\nvar testPlanAndTwoDouble = function() {\n\tddz.LOGD(testTag, 'testPlanAndTwoDouble come in ');\n\tddz.testinjudger = new ddz.AIRobot();\n\tddz.testPassive = new ddz.AIRobot();\n\tddz.CardTable = new ddz._CardTable();\n\n\tvar type = aitest([7,20,33,6,19,32,43,3, 16, 30]); //777888\n\t// [{\"point\":1,\"count\":1,\"cards\":[3,16]}, 4\n\t// {\"point\":2,\"count\":1,\"cards\":[43,30]}, 5\n\t// {\"point\":4,\"count\":3,\"cards\":[6,19,32]}, 7\n\t// {\"point\":5,\"count\":3,\"cards\":[7,20,33]}] 8\n\tvar cards = [7,20,33,8,21,34,43,3,16,30,13,26];\n\tvar res = passTest(type, cards);\n\t// res = [[7,20,33,8,21,34,[13,26],[30,43]]] //飞机带对子返回的结果，错误：对子的格式不对;\n\t// 修改后的 [[7,20,33,8,21,34,13,26,30,43]]\n\n\t// [[13,26],[8,21]] 对子的返回结果[2,20]\n\t// [[7,20,33,8,21,34,3,16]] 飞机带俩单的返回结果\n\tddz.LOGD(testTag, 'find res = ' + JSON.stringify(res));\n\tvar resType = aitest(res);\n};\n// testPlanAndTwoDouble();\n"]}