{"version":3,"sources":["../../../../../../assets/Script/ComponentScript/component/assets/Script/ComponentScript/component/double_arrow.js"],"names":["cc","Class","extends","Component","properties","arrowSprite","default","type","Sprite","horizontalSpeed","verticalSpeed","direction","fromDirection","doAnimation","parentScene","serializable","onLoad","reSetArrowSprite","arrowSpriteFrame","spriteFrame","beginSendAnimation","from","node","rotation","Math","PI","double","GameWorld","arrowSpeed","sin","cos","polygonColliderApply","hitObject","manager","director","getCollisionManager","enabled","weaponType","receiveBullet","receiveArrow","enabledDebugDraw","onCollisionEnter","other","self","console","log","update","dt","x","y"],"mappings":"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","file":"double_arrow.js","sourceRoot":"../../../../../../assets/Script/ComponentScript/component","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\n\n// cc.Class({\n//     extends: cc.Component,\n//\n//     // 只在两个碰撞体开始接触时被调用一次\n//     onBeginContact: function (contact, selfCollider, otherCollider) {\n//     },\n//\n//     // 只在两个碰撞体结束接触时被调用一次\n//     onEndContact: function (contact, selfCollider, otherCollider) {\n//     },\n//\n//     // 每次将要处理碰撞体接触逻辑时被调用\n//     onPreSolve: function (contact, selfCollider, otherCollider) {\n//     },\n//\n//     // 每次处理完碰撞体接触逻辑时被调用\n//     onPostSolve: function (contact, selfCollider, otherCollider) {\n//     }\n// });\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        arrowSprite : {\n            default : null,\n            type : cc.Sprite\n        },\n\n        horizontalSpeed : 0,\n        verticalSpeed : 0,\n        direction : 0,\n\n        fromDirection : 0,\n\n        doAnimation : false,\n\n        parentScene: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    onLoad : function() {\n\n    },\n\n    reSetArrowSprite : function (arrowSpriteFrame) {\n        //TODO:确认射出箭头样式\n        this.arrowSprite.spriteFrame = arrowSpriteFrame;\n    },\n    beginSendAnimation : function (direction,from) {\n        this.node.rotation = (1-direction/(Math.PI*2))* 360;\n        this.direction = direction;\n        this.fromDirection = from;\n\n        this.verticalSpeed = double.GameWorld.arrowSpeed * Math.sin(direction);\n        this.horizontalSpeed = double.GameWorld.arrowSpeed * Math.cos(direction);\n\n        this.polygonColliderApply();\n        this.doAnimation = true;\n    },\n\n    hitObject : function () {\n        this.doAnimation = false;\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = false;\n\n        this.verticalSpeed = 0;\n        this.horizontalSpeed = 0;\n        if(double.GameWorld.weaponType == 0){\n            this.parentScene.receiveBullet(this.node,this.direction,this.fromDirection);\n        }else {\n            this.parentScene.receiveArrow(this.node,this.direction,this.fromDirection);\n        }\n    },\n\n    polygonColliderApply : function () {\n        var manager = cc.director.getCollisionManager();\n        //默认碰撞检测系统是禁用的，如果需要使用则需要以下方法开启碰撞检测系统\n        manager.enabled = true;\n        //默认碰撞检测系统的 debug 绘制是禁用的，如果需要使用则需要以下方法开启 debug 绘制：\n        // 开启后在运行时可显示 碰撞组件 的 碰撞检测范围\n        manager.enabledDebugDraw = true;\n        // 如果还希望显示碰撞组件的包围盒，那么可以通过以下接口来进行设置：\n        // manager.enabledDrawBoundingBox = true;\n    },\n    /**\n     * 当碰撞系统检测到有碰撞产生时，将会以回调的方式通知使用者，如果产生碰撞的碰撞组件依附的节点下挂的脚本中有实现以下函数，则会自动调用以下函数，并传入相关的参数。\n     * 当碰撞产生的时候调用\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionEnter: function (other, self) {\n        console.log('on collision enter');\n        if(!this.doAnimation){\n            return;\n        }\n        this.hitObject();\n        // // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\n        // var world = self.world;\n        // // 碰撞组件的 aabb 碰撞框\n        // var aabb = world.aabb;\n        // // 节点碰撞前上一帧 aabb 碰撞框的位置\n        // var preAabb = world.preAabb;\n        // // 碰撞框的世界矩阵\n        // var t = world.transform;\n        // // 以下属性为圆形碰撞组件特有属性\n        // var r = world.radius;\n        // var p = world.position;\n        // // 以下属性为 矩形 和 多边形 碰撞组件特有属性\n        // var ps = world.points;\n    },\n    // /**\n    //  * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\n    //  * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    //  * @param  {Collider} self  产生碰撞的自身的碰撞组件\n    //  */\n    // onCollisionStay: function (other, self) {\n    //     console.log('on collision stay');\n    // },\n    // /**\n    //  * 当碰撞结束后调用\n    //  * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    //  * @param  {Collider} self  产生碰撞的自身的碰撞组件\n    //  */\n    // onCollisionExit: function (other, self) {\n    //     console.log('on collision exit');\n    // },\n\n    update : function(dt) {\n        if(!this.doAnimation){\n            return;\n        }\n        this.node.x += this.horizontalSpeed*dt;\n        this.node.y += this.verticalSpeed*dt;\n    }\n});\n"]}