require = function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function(r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }
      return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}()({
  1: [ function(require, module, exports) {
    var asn1 = exports;
    asn1.bignum = require("bn.js");
    asn1.define = require("./asn1/api").define;
    asn1.base = require("./asn1/base");
    asn1.constants = require("./asn1/constants");
    asn1.decoders = require("./asn1/decoders");
    asn1.encoders = require("./asn1/encoders");
  }, {
    "./asn1/api": 2,
    "./asn1/base": 4,
    "./asn1/constants": 8,
    "./asn1/decoders": 10,
    "./asn1/encoders": 13,
    "bn.js": 16
  } ],
  2: [ function(require, module, exports) {
    var asn1 = require("../asn1");
    var inherits = require("inherits");
    var api = exports;
    api.define = function define(name, body) {
      return new Entity(name, body);
    };
    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(base) {
      var named;
      try {
        named = require("vm").runInThisContext("(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})");
      } catch (e) {
        named = function(entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base);
      named.prototype._initNamed = function initnamed(entity) {
        base.call(this, entity);
      };
      return new named(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      this.decoders.hasOwnProperty(enc) || (this.decoders[enc] = this._createNamed(asn1.decoders[enc]));
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      this.encoders.hasOwnProperty(enc) || (this.encoders[enc] = this._createNamed(asn1.encoders[enc]));
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode(data, enc, reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }, {
    "../asn1": 1,
    inherits: 101,
    vm: 155
  } ],
  3: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Reporter = require("../base").Reporter;
    var Buffer = require("buffer").Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
      };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          item instanceof EncoderBuffer || (item = new EncoderBuffer(item, reporter));
          this.length += item.length;
          return item;
        }, this);
      } else if ("number" === typeof value) {
        if (!(0 <= value && value <= 255)) return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if ("string" === typeof value) {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else {
        if (!Buffer.isBuffer(value)) return reporter.error("Unsupported type: " + typeof value);
        this.value = value;
        this.length = value.length;
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
      out || (out = new Buffer(this.length));
      offset || (offset = 0);
      if (0 === this.length) return out;
      if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      }); else {
        "number" === typeof this.value ? out[offset] = this.value : "string" === typeof this.value ? out.write(this.value, offset) : Buffer.isBuffer(this.value) && this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  }, {
    "../base": 4,
    buffer: 47,
    inherits: 101
  } ],
  4: [ function(require, module, exports) {
    var base = exports;
    base.Reporter = require("./reporter").Reporter;
    base.DecoderBuffer = require("./buffer").DecoderBuffer;
    base.EncoderBuffer = require("./buffer").EncoderBuffer;
    base.Node = require("./node");
  }, {
    "./buffer": 3,
    "./node": 5,
    "./reporter": 6
  } ],
  5: [ function(require, module, exports) {
    var Reporter = require("../base").Reporter;
    var EncoderBuffer = require("../base").EncoderBuffer;
    var DecoderBuffer = require("../base").DecoderBuffer;
    var assert = require("minimalistic-assert");
    var tags = [ "seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr" ];
    var methods = [ "key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains" ].concat(tags);
    var overrided = [ "_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool" ];
    function Node(enc, parent) {
      var state = {};
      this._baseState = state;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state["default"] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;
    var stateProps = [ "enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains" ];
    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      var state = this._baseState;
      assert(null === state.parent);
      body.call(this);
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState;
      var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (0 !== children.length) {
        assert(null === state.children);
        state.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (0 !== args.length) {
        assert(null === state.args);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if ("object" !== typeof arg || arg.constructor !== Object) return arg;
          var res = {};
          Object.keys(arg).forEach(function(key) {
            key == (0 | key) && (key |= 0);
            var value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(null === state.tag);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      var state = this._baseState;
      assert(null === state.use);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      var state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      var state = this._baseState;
      assert(null === state["default"]);
      state["default"] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;
      assert(null === state.explicit && null === state.implicit);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;
      assert(null === state.explicit && null === state.implicit);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state.obj = true;
      0 !== args.length && this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key(newKey) {
      var state = this._baseState;
      assert(null === state.key);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      var state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;
      assert(null === state.choice);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      var state = this._baseState;
      assert(null === state.use);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode(input, options) {
      var state = this._baseState;
      if (null === state.parent) return input.wrapResult(state.children[0]._decode(input, options));
      var result = state["default"];
      var present = true;
      var prevKey = null;
      null !== state.key && (prevKey = input.enterKey(state.key));
      if (state.optional) {
        var tag = null;
        null !== state.explicit ? tag = state.explicit : null !== state.implicit ? tag = state.implicit : null !== state.tag && (tag = state.tag);
        if (null !== tag || state.any) {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present)) return present;
        } else {
          var save = input.save();
          try {
            null === state.choice ? this._decodeGeneric(state.tag, input, options) : this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        }
      }
      var prevObj;
      state.obj && present && (prevObj = input.enterObject());
      if (present) {
        if (null !== state.explicit) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit)) return explicit;
          input = explicit;
        }
        var start = input.offset;
        if (null === state.use && null === state.choice) {
          if (state.any) var save = input.save();
          var body = this._decodeTag(input, null !== state.implicit ? state.implicit : state.tag, state.any);
          if (input.isError(body)) return body;
          state.any ? result = input.raw(save) : input = body;
        }
        options && options.track && null !== state.tag && options.track(input.path(), start, input.length, "tagged");
        options && options.track && null !== state.tag && options.track(input.path(), input.offset, input.length, "content");
        result = state.any ? result : null === state.choice ? this._decodeGeneric(state.tag, input, options) : this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        state.any || null !== state.choice || null === state.children || state.children.forEach(function decodeChildren(child) {
          child._decode(input, options);
        });
        if (state.contains && ("octstr" === state.tag || "bitstr" === state.tag)) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      state.obj && present && (result = input.leaveObject(prevObj));
      null === state.key || null === result && true !== present ? null !== prevKey && input.exitKey(prevKey) : input.leaveKey(prevKey, state.key, result);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;
      if ("seq" === tag || "set" === tag) return null;
      if ("seqof" === tag || "setof" === tag) return this._decodeList(input, tag, state.args[0], options);
      if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
      if ("objid" === tag && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
      if ("objid" === tag) return this._decodeObjid(input, null, null, options);
      if ("gentime" === tag || "utctime" === tag) return this._decodeTime(input, tag, options);
      if ("null_" === tag) return this._decodeNull(input, options);
      if ("bool" === tag) return this._decodeBool(input, options);
      if ("objDesc" === tag) return this._decodeStr(input, tag, options);
      if ("int" === tag || "enum" === tag) return this._decodeInt(input, state.args && state.args[0], options);
      return null !== state.use ? this._getUse(state.use, input._reporterState.obj)._decode(input, options) : input.error("unknown tag: " + tag);
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      var state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(null === state.useDecoder._baseState.parent);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state.choice).some(function(key) {
        var save = input.save();
        var node = state.choice[key];
        try {
          var value = node._decode(input, options);
          if (input.isError(value)) return false;
          result = {
            type: key,
            value: value
          };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match) return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode(data, reporter, parent) {
      var state = this._baseState;
      if (null !== state["default"] && state["default"] === data) return;
      var result = this._encodeValue(data, reporter, parent);
      if (void 0 === result) return;
      if (this._skipDefault(result, reporter, parent)) return;
      return result;
    };
    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      var state = this._baseState;
      if (null === state.parent) return state.children[0]._encode(data, reporter || new Reporter());
      var result = null;
      this.reporter = reporter;
      if (state.optional && void 0 === data) {
        if (null === state["default"]) return;
        data = state["default"];
      }
      var content = null;
      var primitive = false;
      if (state.any) result = this._createEncoderBuffer(data); else if (state.choice) result = this._encodeChoice(data, reporter); else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if ("null_" === child._baseState.tag) return child._encode(null, reporter, data);
          if (null === child._baseState.key) return reporter.error("Child should have a key");
          var prevKey = reporter.enterKey(child._baseState.key);
          if ("object" !== typeof data) return reporter.error("Child expected, but input is not object");
          var res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else if ("seqof" === state.tag || "setof" === state.tag) {
        if (!(state.args && 1 === state.args.length)) return reporter.error("Too many args for : " + state.tag);
        if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state = this._baseState;
          return this._getUse(state.args[0], data)._encode(item, reporter);
        }, child));
      } else if (null !== state.use) result = this._getUse(state.use, parent)._encode(data, reporter); else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
      var result;
      if (!state.any && null === state.choice) {
        var tag = null !== state.implicit ? state.implicit : state.tag;
        var cls = null === state.implicit ? "universal" : "context";
        null === tag ? null === state.use && reporter.error("Tag could be omitted only for .use()") : null === state.use && (result = this._encodeComposite(tag, primitive, cls, content));
      }
      null !== state.explicit && (result = this._encodeComposite(state.explicit, false, "context", result));
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      var state = this._baseState;
      var node = state.choice[data.type];
      node || assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
      return node._encode(data.value, reporter);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;
      if (/str$/.test(tag)) return this._encodeStr(data, tag);
      if ("objid" === tag && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      if ("objid" === tag) return this._encodeObjid(data, null, null);
      if ("gentime" === tag || "utctime" === tag) return this._encodeTime(data, tag);
      if ("null_" === tag) return this._encodeNull();
      if ("int" === tag || "enum" === tag) return this._encodeInt(data, state.args && state.reverseArgs[0]);
      if ("bool" === tag) return this._encodeBool(data);
      if ("objDesc" === tag) return this._encodeStr(data, tag);
      throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
    };
  }, {
    "../base": 4,
    "minimalistic-assert": 105
  } ],
  6: [ function(require, module, exports) {
    var inherits = require("inherits");
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      var state = this._reporterState;
      return {
        obj: state.obj,
        pathLen: state.path.length
      };
    };
    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      var state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      var state = this._reporterState;
      this.exitKey(index);
      null !== state.obj && (state.obj[key] = value);
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;
      var prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;
      var now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;
      var inherited = msg instanceof ReporterError;
      err = inherited ? msg : new ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
      }).join(""), msg.message || msg, msg.stack);
      if (!state.options.partial) throw err;
      inherited || state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial) return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      Error.captureStackTrace && Error.captureStackTrace(this, ReporterError);
      if (!this.stack) try {
        throw new Error(this.message);
      } catch (e) {
        this.stack = e.stack;
      }
      return this;
    };
  }, {
    inherits: 101
  } ],
  7: [ function(require, module, exports) {
    var constants = require("../constants");
    exports.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports.tagClassByName = constants._reverse(exports.tagClass);
    exports.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports.tagByName = constants._reverse(exports.tag);
  }, {
    "../constants": 8
  } ],
  8: [ function(require, module, exports) {
    var constants = exports;
    constants._reverse = function reverse(map) {
      var res = {};
      Object.keys(map).forEach(function(key) {
        (0 | key) == key && (key |= 0);
        var value = map[key];
        res[value] = key;
      });
      return res;
    };
    constants.der = require("./der");
  }, {
    "./der": 7
  } ],
  9: [ function(require, module, exports) {
    var inherits = require("inherits");
    var asn1 = require("../../asn1");
    var base = asn1.base;
    var bignum = asn1.bignum;
    var der = asn1.constants.der;
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
      data instanceof base.DecoderBuffer || (data = new base.DecoderBuffer(data, options));
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      base.Node.call(this, "der", parent);
    }
    inherits(DERNode, base.Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty()) return false;
      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;
      buffer.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;
      var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
      if (buffer.isError(len)) return len;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
      if (decodedTag.primitive || null !== len) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      var state = buffer.save();
      var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res)) return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      while (true) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        var res;
        res = tag.primitive || null !== len ? buffer.skip(len) : this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res)) return res;
        if ("end" === tag.tagStr) break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      var result = [];
      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd)) return possibleEnd;
        var res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if ("bitstr" === tag) {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
          unused: unused,
          data: buffer.raw()
        };
      }
      if ("bmpstr" === tag) {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
        var str = "";
        for (var i = 0; i < raw.length / 2; i++) str += String.fromCharCode(raw.readUInt16BE(2 * i));
        return str;
      }
      if ("numstr" === tag) {
        var numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
      }
      if ("octstr" === tag) return buffer.raw();
      if ("objDesc" === tag) return buffer.raw();
      if ("printstr" === tag) {
        var printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
      }
      return /str$/.test(tag) ? buffer.raw().toString() : buffer.error("Decoding of string type: " + tag + " unsupported");
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer.isEmpty()) {
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= 127 & subident;
        if (0 === (128 & subident)) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      128 & subident && identifiers.push(ident);
      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;
      result = relative ? identifiers : [ first, second ].concat(identifiers.slice(1));
      if (values) {
        var tmp = values[result.join(" ")];
        void 0 === tmp && (tmp = values[result.join(".")]);
        void 0 !== tmp && (result = tmp);
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      var str = buffer.raw().toString();
      if ("gentime" === tag) {
        var year = 0 | str.slice(0, 4);
        var mon = 0 | str.slice(4, 6);
        var day = 0 | str.slice(6, 8);
        var hour = 0 | str.slice(8, 10);
        var min = 0 | str.slice(10, 12);
        var sec = 0 | str.slice(12, 14);
      } else {
        if ("utctime" !== tag) return buffer.error("Decoding " + tag + " time is not supported yet");
        var year = 0 | str.slice(0, 2);
        var mon = 0 | str.slice(2, 4);
        var day = 0 | str.slice(4, 6);
        var hour = 0 | str.slice(6, 8);
        var min = 0 | str.slice(8, 10);
        var sec = 0 | str.slice(10, 12);
        year = year < 70 ? 2e3 + year : 1900 + year;
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull(buffer) {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      var res = buffer.readUInt8();
      return buffer.isError(res) ? res : 0 !== res;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      var raw = buffer.raw();
      var res = new bignum(raw);
      values && (res = values[res.toString(10)] || res);
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      "function" === typeof entity && (entity = entity(obj));
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag)) return tag;
      var cls = der.tagClass[tag >> 6];
      var primitive = 0 === (32 & tag);
      if (31 === (31 & tag)) {
        var oct = tag;
        tag = 0;
        while (128 === (128 & oct)) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) return oct;
          tag <<= 7;
          tag |= 127 & oct;
        }
      } else tag &= 31;
      var tagStr = der.tag[tag];
      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len)) return len;
      if (!primitive && 128 === len) return null;
      if (0 === (128 & len)) return len;
      var num = 127 & len;
      if (num > 4) return buf.error("length octect is too long");
      len = 0;
      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
      }
      return len;
    }
  }, {
    "../../asn1": 1,
    inherits: 101
  } ],
  10: [ function(require, module, exports) {
    var decoders = exports;
    decoders.der = require("./der");
    decoders.pem = require("./pem");
  }, {
    "./der": 9,
    "./pem": 11
  } ],
  11: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Buffer = require("buffer").Buffer;
    var DERDecoder = require("./der");
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (null === match) continue;
        if (match[2] !== label) continue;
        if (-1 !== start) {
          if ("END" !== match[1]) break;
          end = i;
          break;
        }
        if ("BEGIN" !== match[1]) break;
        start = i;
      }
      if (-1 === start || -1 === end) throw new Error("PEM section not found for: " + label);
      var base64 = lines.slice(start + 1, end).join("");
      base64.replace(/[^a-z0-9\+\/=]+/gi, "");
      var input = new Buffer(base64, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }, {
    "./der": 9,
    buffer: 47,
    inherits: 101
  } ],
  12: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Buffer = require("buffer").Buffer;
    var asn1 = require("../../asn1");
    var base = asn1.base;
    var der = asn1.constants.der;
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      base.Node.call(this, "der", parent);
    }
    inherits(DERNode, base.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([ header, content ]);
      }
      var lenOctets = 1;
      for (var i = content.length; i >= 256; i >>= 8) lenOctets++;
      var header = new Buffer(2 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) header[i] = 255 & j;
      return this._createEncoderBuffer([ header, content ]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if ("bitstr" === tag) return this._createEncoderBuffer([ 0 | str.unused, str.data ]);
      if ("bmpstr" === tag) {
        var buf = new Buffer(2 * str.length);
        for (var i = 0; i < str.length; i++) buf.writeUInt16BE(str.charCodeAt(i), 2 * i);
        return this._createEncoderBuffer(buf);
      }
      if ("numstr" === tag) {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
      }
      if ("printstr" === tag) {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
      }
      return /str$/.test(tag) ? this._createEncoderBuffer(str) : "objDesc" === tag ? this._createEncoderBuffer(str) : this.reporter.error("Encoding of string type: " + tag + " unsupported");
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if ("string" === typeof id) {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s\.]+/g);
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      }
      if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
      if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, 40 * id[0] + id[1]);
      }
      var size = 0;
      for (var i = 0; i < id.length; i++) {
        var ident = id[i];
        for (size++; ident >= 128; ident >>= 7) size++;
      }
      var objid = new Buffer(size);
      var offset = objid.length - 1;
      for (var i = id.length - 1; i >= 0; i--) {
        var ident = id[i];
        objid[offset--] = 127 & ident;
        while ((ident >>= 7) > 0) objid[offset--] = 128 | 127 & ident;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      return num < 10 ? "0" + num : num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);
      "gentime" === tag ? str = [ two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z" ].join("") : "utctime" === tag ? str = [ two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z" ].join("") : this.reporter.error("Encoding " + tag + " time is not supported yet");
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if ("string" === typeof num) {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        num = values[num];
      }
      if ("number" !== typeof num && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        !num.sign && 128 & numArray[0] && numArray.unshift(0);
        num = new Buffer(numArray);
      }
      if (Buffer.isBuffer(num)) {
        var size = num.length;
        0 === num.length && size++;
        var out = new Buffer(size);
        num.copy(out);
        0 === num.length && (out[0] = 0);
        return this._createEncoderBuffer(out);
      }
      if (num < 128) return this._createEncoderBuffer(num);
      if (num < 256) return this._createEncoderBuffer([ 0, num ]);
      var size = 1;
      for (var i = num; i >= 256; i >>= 8) size++;
      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = 255 & num;
        num >>= 8;
      }
      128 & out[0] && out.unshift(0);
      return this._createEncoderBuffer(new Buffer(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      "function" === typeof entity && (entity = entity(obj));
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (null === state["default"]) return false;
      var data = dataBuffer.join();
      void 0 === state.defaultBuffer && (state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join());
      if (data.length !== state.defaultBuffer.length) return false;
      for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      var res;
      "seqof" === tag ? tag = "seq" : "setof" === tag && (tag = "set");
      if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag]; else {
        if ("number" !== typeof tag || (0 | tag) !== tag) return reporter.error("Unknown tag: " + tag);
        res = tag;
      }
      if (res >= 31) return reporter.error("Multi-octet tag encoding unsupported");
      primitive || (res |= 32);
      res |= der.tagClassByName[cls || "universal"] << 6;
      return res;
    }
  }, {
    "../../asn1": 1,
    buffer: 47,
    inherits: 101
  } ],
  13: [ function(require, module, exports) {
    var encoders = exports;
    encoders.der = require("./der");
    encoders.pem = require("./pem");
  }, {
    "./der": 12,
    "./pem": 14
  } ],
  14: [ function(require, module, exports) {
    var inherits = require("inherits");
    var DEREncoder = require("./der");
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString("base64");
      var out = [ "-----BEGIN " + options.label + "-----" ];
      for (var i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
  }, {
    "./der": 12,
    inherits: 101
  } ],
  15: [ function(require, module, exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      var validLen = b64.indexOf("=");
      -1 === validLen && (validLen = len);
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [ validLen, placeHoldersLen ];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      for (var i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      if (2 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = 255 & tmp;
      }
      if (1 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (255 & uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      if (1 === extraBytes) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (2 === extraBytes) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }, {} ],
  16: [ function(require, module, exports) {
    (function(module, exports) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (null !== number) {
          if ("le" === base || "be" === base) {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      "object" === typeof module ? module.exports = BN : exports.BN = BN;
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        Buffer = require("buffer").Buffer;
      } catch (e) {}
      BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return null !== num && "object" === typeof num && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if ("number" === typeof number) return this._initNumber(number, base, endian);
        if ("object" === typeof number) return this._initArray(number, base, endian);
        "hex" === base && (base = 16);
        assert(base === (0 | base) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        "-" === number[0] && start++;
        16 === base ? this._parseHex(number, start) : this._parseBase(number, base, start);
        "-" === number[0] && (this.negative = 1);
        this.strip();
        if ("le" !== endian) return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [ 67108863 & number ];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [ 67108863 & number, number / 67108864 & 67108863 ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [ 67108863 & number, number / 67108864 & 67108863, 1 ];
          this.length = 3;
        }
        if ("le" !== endian) return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert("number" === typeof number.length);
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var j, w;
        var off = 0;
        if ("be" === endian) for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] = w >>> 26 - off & 67108863;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        } else if ("le" === endian) for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] = w >>> 26 - off & 67108863;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          r |= c >= 49 && c <= 54 ? c - 49 + 10 : c >= 17 && c <= 22 ? c - 17 + 10 : 15 & c;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          r += c >= 49 ? c - 49 + 10 : c >= 17 ? c - 17 + 10 : c;
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [ 0 ];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          this.words[0] + word < 67108864 ? this.words[0] += word : this._iaddn(word);
        }
        if (0 !== mod) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) pow *= base;
          this.imuln(pow);
          this.words[0] + word < 67108864 ? this.words[0] += word : this._iaddn(word);
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) this.words[this.length++] = 0;
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && 0 === this.words[this.length - 1]) this.length--;
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        1 === this.length && 0 === this.words[0] && (this.negative = 0);
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [ "", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000" ];
      var groupSizes = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var groupBases = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = 0 | padding || 1;
        var out;
        if (16 === base || "hex" === base) {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (16777215 & (w << off | carry)).toString(16);
            carry = w >>> 24 - off & 16777215;
            out = 0 !== carry || i !== this.length - 1 ? zeros[6 - word.length] + word + out : word + out;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          0 !== carry && (out = carry.toString(16) + out);
          while (out.length % padding !== 0) out = "0" + out;
          0 !== this.negative && (out = "-" + out);
          return out;
        }
        if (base === (0 | base) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            out = c.isZero() ? r + out : zeros[groupSize - r.length] + r + out;
          }
          this.isZero() && (out = "0" + out);
          while (out.length % padding !== 0) out = "0" + out;
          0 !== this.negative && (out = "-" + out);
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        2 === this.length ? ret += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? ret += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && assert(false, "Number can only safely store up to 53 bits");
        return 0 !== this.negative ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert("undefined" !== typeof Buffer);
        return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = "le" === endian;
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (littleEndian) {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (;i < reqLength; i++) res[i] = 0;
        } else {
          for (i = 0; i < reqLength - byteLength; i++) res[i] = 0;
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        }
        return res;
      };
      Math.clz32 ? BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      } : BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 64) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 2) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (0 === w) return 26;
        var t = w;
        var r = 0;
        if (0 === (8191 & t)) {
          r += 13;
          t >>>= 13;
        }
        if (0 === (127 & t)) {
          r += 7;
          t >>>= 7;
        }
        if (0 === (15 & t)) {
          r += 4;
          t >>>= 4;
        }
        if (0 === (3 & t)) {
          r += 2;
          t >>>= 2;
        }
        0 === (1 & t) && r++;
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return 26 * (this.length - 1) + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (26 !== b) break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (0 !== this.negative) return this.abs().inotn(width).iaddn(1);
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return 0 !== this.negative;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        this.isZero() || (this.negative ^= 1);
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) this.words[this.length++] = 0;
        for (var i = 0; i < num.length; i++) this.words[i] = this.words[i] | num.words[i];
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert(0 === (this.negative | num.negative));
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        b = this.length > num.length ? num : this;
        for (var i = 0; i < b.length; i++) this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert(0 === (this.negative | num.negative));
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for (;i < a.length; i++) this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert(0 === (this.negative | num.negative));
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert("number" === typeof width && width >= 0);
        var bytesNeeded = 0 | Math.ceil(width / 26);
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        bitsLeft > 0 && bytesNeeded--;
        for (var i = 0; i < bytesNeeded; i++) this.words[i] = 67108863 & ~this.words[i];
        bitsLeft > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft);
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert("number" === typeof bit && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        this.words[off] = val ? this.words[off] | 1 << wbit : this.words[off] & ~(1 << wbit);
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (0 !== this.negative && 0 === num.negative) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        }
        if (0 === this.negative && 0 !== num.negative) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (0 | a.words[i]) + (0 | b.words[i]) + carry;
          this.words[i] = 67108863 & r;
          carry = r >>> 26;
        }
        for (;0 !== carry && i < a.length; i++) {
          r = (0 | a.words[i]) + carry;
          this.words[i] = 67108863 & r;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (0 !== carry) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) for (;i < a.length; i++) this.words[i] = a.words[i];
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (0 !== num.negative && 0 === this.negative) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        }
        if (0 === num.negative && 0 !== this.negative) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (0 !== num.negative) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        }
        if (0 !== this.negative) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (0 === cmp) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (0 | a.words[i]) - (0 | b.words[i]) + carry;
          carry = r >> 26;
          this.words[i] = 67108863 & r;
        }
        for (;0 !== carry && i < a.length; i++) {
          r = (0 | a.words[i]) + carry;
          carry = r >> 26;
          this.words[i] = 67108863 & r;
        }
        if (0 === carry && i < a.length && a !== this) for (;i < a.length; i++) this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        a !== this && (this.negative = 1);
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = 0 | self.words[0];
        var b = 0 | num.words[0];
        var r = a * b;
        var lo = 67108863 & r;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = 67108863 & carry;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = 0 | self.words[i];
            b = 0 | num.words[j];
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = 67108863 & r;
          }
          out.words[k] = 0 | rword;
          carry = 0 | ncarry;
        }
        0 !== carry ? out.words[k] = 0 | carry : out.length--;
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = 0 | a[0];
        var al0 = 8191 & a0;
        var ah0 = a0 >>> 13;
        var a1 = 0 | a[1];
        var al1 = 8191 & a1;
        var ah1 = a1 >>> 13;
        var a2 = 0 | a[2];
        var al2 = 8191 & a2;
        var ah2 = a2 >>> 13;
        var a3 = 0 | a[3];
        var al3 = 8191 & a3;
        var ah3 = a3 >>> 13;
        var a4 = 0 | a[4];
        var al4 = 8191 & a4;
        var ah4 = a4 >>> 13;
        var a5 = 0 | a[5];
        var al5 = 8191 & a5;
        var ah5 = a5 >>> 13;
        var a6 = 0 | a[6];
        var al6 = 8191 & a6;
        var ah6 = a6 >>> 13;
        var a7 = 0 | a[7];
        var al7 = 8191 & a7;
        var ah7 = a7 >>> 13;
        var a8 = 0 | a[8];
        var al8 = 8191 & a8;
        var ah8 = a8 >>> 13;
        var a9 = 0 | a[9];
        var al9 = 8191 & a9;
        var ah9 = a9 >>> 13;
        var b0 = 0 | b[0];
        var bl0 = 8191 & b0;
        var bh0 = b0 >>> 13;
        var b1 = 0 | b[1];
        var bl1 = 8191 & b1;
        var bh1 = b1 >>> 13;
        var b2 = 0 | b[2];
        var bl2 = 8191 & b2;
        var bh2 = b2 >>> 13;
        var b3 = 0 | b[3];
        var bl3 = 8191 & b3;
        var bh3 = b3 >>> 13;
        var b4 = 0 | b[4];
        var bl4 = 8191 & b4;
        var bh4 = b4 >>> 13;
        var b5 = 0 | b[5];
        var bl5 = 8191 & b5;
        var bh5 = b5 >>> 13;
        var b6 = 0 | b[6];
        var bl6 = 8191 & b6;
        var bh6 = b6 >>> 13;
        var b7 = 0 | b[7];
        var bl7 = 8191 & b7;
        var bh7 = b7 >>> 13;
        var b8 = 0 | b[8];
        var bl8 = 8191 & b8;
        var bh8 = b8 >>> 13;
        var b9 = 0 | b[9];
        var bl9 = 8191 & b9;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((8191 & mid) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (0 !== c) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      Math.imul || (comb10MulTo = smallMulTo);
      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = 67108863 & carry;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = 0 | self.words[i];
            var b = 0 | num.words[j];
            var r = a * b;
            var lo = 67108863 & r;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = 67108863 & lo;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        0 !== carry ? out.words[k] = carry : out.length--;
        return out.strip();
      }
      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        res = 10 === this.length && 10 === num.length ? comb10MulTo(this, num, out) : len < 63 ? smallMulTo(this, num, out) : len < 1024 ? bigMulTo(this, num, out) : jumboMulTo(this, num, out);
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) t[i] = this.revBin(i, l, N);
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (0 === x || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (1 & x) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = 1 | Math.max(m, n);
        var odd = 1 & N;
        var i = 0;
        for (N = N / 2 | 0; N; N >>>= 1) i++;
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = 8192 * Math.round(ws[2 * i + 1] / N) + Math.round(ws[2 * i] / N) + carry;
          ws[i] = 67108863 & w;
          carry = w < 67108864 ? 0 : w / 67108864 | 0;
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry += 0 | ws[i];
          rws[2 * i] = 8191 & carry;
          carry >>>= 13;
          rws[2 * i + 1] = 8191 & carry;
          carry >>>= 13;
        }
        for (i = 2 * len; i < N; ++i) rws[i] = 0;
        assert(0 === carry);
        assert(0 === (-8192 & carry));
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) ph[i] = 0;
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert("number" === typeof num);
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (0 | this.words[i]) * num;
          var lo = (67108863 & w) + (67108863 & carry);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = 67108863 & lo;
        }
        if (0 !== carry) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (0 === w.length) return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) if (0 !== w[i]) break;
        if (++i < w.length) for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (0 === w[i]) continue;
          res = res.mul(q);
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert("number" === typeof bits && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (0 !== r) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (0 | this.words[i]) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (0 !== s) {
          for (i = this.length - 1; i >= 0; i--) this.words[i + s] = this.words[i];
          for (i = 0; i < s; i++) this.words[i] = 0;
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(0 === this.negative);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert("number" === typeof bits && bits >= 0);
        var h;
        h = hint ? (hint - hint % 26) / 26 : 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) maskedWords.words[i] = this.words[i];
          maskedWords.length = s;
        }
        if (0 === s) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) this.words[i] = this.words[i + s];
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (0 !== carry || i >= h); i--) {
          var word = 0 | this.words[i];
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        maskedWords && 0 !== carry && (maskedWords.words[maskedWords.length++] = carry);
        if (0 === this.length) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(0 === this.negative);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert("number" === typeof bit && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert("number" === typeof bits && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(0 === this.negative, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        0 !== r && s++;
        this.length = Math.min(s, this.length);
        if (0 !== r) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert("number" === typeof num);
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (0 !== this.negative) {
          if (1 === this.length && (0 | this.words[0]) < num) {
            this.words[0] = num - (0 | this.words[0]);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          i === this.length - 1 ? this.words[i + 1] = 1 : this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert("number" === typeof num);
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (0 !== this.negative) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (1 === this.length && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 67108864;
          this.words[i + 1] -= 1;
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (0 | this.words[i + shift]) + carry;
          var right = (0 | num.words[i]) * mul;
          w -= 67108863 & right;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = 67108863 & w;
        }
        for (;i < this.length - shift; i++) {
          w = (0 | this.words[i + shift]) + carry;
          carry = w >> 26;
          this.words[i + shift] = 67108863 & w;
        }
        if (0 === carry) return this.strip();
        assert(-1 === carry);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(0 | this.words[i]) + carry;
          carry = w >> 26;
          this.words[i] = 67108863 & w;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = 0 | b.words[b.length - 1];
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (0 !== shift) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = 0 | b.words[b.length - 1];
        }
        var m = a.length - b.length;
        var q;
        if ("mod" !== mode) {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (0 === diff.negative) {
          a = diff;
          q && (q.words[m] = 1);
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = 67108864 * (0 | a.words[b.length + j]) + (0 | a.words[b.length + j - 1]);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (0 !== a.negative) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            a.isZero() || (a.negative ^= 1);
          }
          q && (q.words[j] = qj);
        }
        q && q.strip();
        a.strip();
        "div" !== mode && 0 !== shift && a.iushrn(shift);
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
          div: new BN(0),
          mod: new BN(0)
        };
        var div, mod, res;
        if (0 !== this.negative && 0 === num.negative) {
          res = this.neg().divmod(num, mode);
          "mod" !== mode && (div = res.div.neg());
          if ("div" !== mode) {
            mod = res.mod.neg();
            positive && 0 !== mod.negative && mod.iadd(num);
          }
          return {
            div: div,
            mod: mod
          };
        }
        if (0 === this.negative && 0 !== num.negative) {
          res = this.divmod(num.neg(), mode);
          "mod" !== mode && (div = res.div.neg());
          return {
            div: div,
            mod: res.mod
          };
        }
        if (0 !== (this.negative & num.negative)) {
          res = this.neg().divmod(num.neg(), mode);
          if ("div" !== mode) {
            mod = res.mod.neg();
            positive && 0 !== mod.negative && mod.isub(num);
          }
          return {
            div: res.div,
            mod: mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) return {
          div: new BN(0),
          mod: this
        };
        if (1 === num.length) {
          if ("div" === mode) return {
            div: this.divn(num.words[0]),
            mod: null
          };
          if ("mod" === mode) return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = 0 !== dm.div.negative ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || 1 === r2 && 0 === cmp) return dm.div;
        return 0 !== dm.div.negative ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) acc = (p * acc + (0 | this.words[i])) % num;
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (0 | this.words[i]) + 67108864 * carry;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(0 === p.negative);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        x = 0 !== x.negative ? x.umod(p) : x.clone();
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; 0 === (x.words[0] & im) && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; 0 === (y.words[0] & jm) && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(0 === p.negative);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        a = 0 !== a.negative ? a.umod(p) : a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; 0 === (a.words[0] & im) && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              x1.isOdd() && x1.iadd(delta);
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; 0 === (b.words[0] & jm) && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              x2.isOdd() && x2.iadd(delta);
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        res = 0 === a.cmpn(1) ? x1 : x2;
        res.cmpn(0) < 0 && res.iadd(p);
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) a.iushrn(1);
          while (b.isEven()) b.iushrn(1);
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (0 === r || 0 === b.cmpn(1)) break;
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return 0 === (1 & this.words[0]);
      };
      BN.prototype.isOdd = function isOdd() {
        return 1 === (1 & this.words[0]);
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert("number" === typeof bit);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; 0 !== carry && i < this.length; i++) {
          var w = 0 | this.words[i];
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (0 !== carry) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return 1 === this.length && 0 === this.words[0];
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (0 !== this.negative && !negative) return -1;
        if (0 === this.negative && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1; else {
          negative && (num = -num);
          assert(num <= 67108863, "Number is too big");
          var w = 0 | this.words[0];
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (0 !== this.negative) return 0 | -res;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (0 !== this.negative && 0 === num.negative) return -1;
        if (0 === this.negative && 0 !== num.negative) return 1;
        var res = this.ucmp(num);
        if (0 !== this.negative) return 0 | -res;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = 0 | this.words[i];
          var b = 0 | num.words[i];
          if (a === b) continue;
          a < b ? res = -1 : a > b && (res = 1);
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return 1 === this.cmpn(num);
      };
      BN.prototype.gt = function gt(num) {
        return 1 === this.cmp(num);
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return -1 === this.cmpn(num);
      };
      BN.prototype.lt = function lt(num) {
        return -1 === this.cmp(num);
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return 0 === this.cmpn(num);
      };
      BN.prototype.eq = function eq(num) {
        return 0 === this.cmp(num);
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(0 === this.negative, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (0 === cmp) {
          r.words[0] = 0;
          r.length = 1;
        } else cmp > 0 ? r.isub(this.p) : r.strip();
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = 0 | input.words[i];
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        0 === prev && input.length > 10 ? input.length -= 10 : input.length -= 9;
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = 0 | num.words[i];
          lo += 977 * w;
          num.words[i] = 67108863 & lo;
          lo = 64 * w + (lo / 67108864 | 0);
        }
        if (0 === num.words[num.length - 1]) {
          num.length--;
          0 === num.words[num.length - 1] && num.length--;
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = 19 * (0 | num.words[i]) + carry;
          var lo = 67108863 & hi;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        0 !== carry && (num.words[num.length++] = carry);
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime;
        if ("k256" === name) prime = new K256(); else if ("p224" === name) prime = new P224(); else if ("p192" === name) prime = new P192(); else {
          if ("p25519" !== name) throw new Error("Unknown prime " + name);
          prime = new P25519();
        }
        primes[name] = prime;
        return prime;
      };
      function Red(m) {
        if ("string" === typeof m) {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(0 === a.negative, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert(0 === (a.negative | b.negative), "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        res.cmp(this.m) >= 0 && res.isub(this.m);
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        res.cmp(this.m) >= 0 && res.isub(this.m);
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        res.cmpn(0) < 0 && res.iadd(this.m);
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        res.cmpn(0) < 0 && res.iadd(this.m);
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (3 === mod3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && 0 === q.andln(1)) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (0 !== this.pow(z, lpow).cmp(nOne)) z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (0 !== t.cmp(one)) {
          var tmp = t;
          for (var i = 0; 0 !== tmp.cmp(one); i++) tmp = tmp.redSqr();
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (0 !== inv.negative) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        }
        return this.imod(inv);
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (0 === num.cmpn(1)) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        0 === start && (start = 26);
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            res !== wnd[0] && (res = this.sqr(res));
            if (0 === bit && 0 === current) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (0 !== i || 0 !== j)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26);
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        u.cmp(this.m) >= 0 ? res = u.isub(this.m) : u.cmpn(0) < 0 && (res = u.iadd(this.m));
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        u.cmp(this.m) >= 0 ? res = u.isub(this.m) : u.cmpn(0) < 0 && (res = u.iadd(this.m));
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })("undefined" === typeof module || module, this);
  }, {
    buffer: 18
  } ],
  17: [ function(require, module, exports) {
    var r;
    module.exports = function rand(len) {
      r || (r = new Rand(null));
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes) return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
      return res;
    };
    if ("object" === typeof self) self.crypto && self.crypto.getRandomValues ? Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    } : self.msCrypto && self.msCrypto.getRandomValues ? Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    } : "object" === typeof window && (Rand.prototype._rand = function() {
      throw new Error("Not implemented yet");
    }); else try {
      var crypto = require("crypto");
      if ("function" !== typeof crypto.randomBytes) throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {}
  }, {
    crypto: 18
  } ],
  18: [ function(require, module, exports) {}, {} ],
  19: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    function asUInt32Array(buf) {
      Buffer.isBuffer(buf) || (buf = Buffer.from(buf));
      var len = buf.length / 4 | 0;
      var out = new Array(len);
      for (var i = 0; i < len; i++) out[i] = buf.readUInt32BE(4 * i);
      return out;
    }
    function scrubVec(v) {
      for (var i = 0; i < v.length; v++) v[i] = 0;
    }
    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[255 & s3] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[255 & s0] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[255 & s1] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[255 & s2] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[255 & s3]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[255 & s0]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[255 & s1]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[255 & s2]) ^ keySchedule[ksRow++];
      t0 >>>= 0;
      t1 >>>= 0;
      t2 >>>= 0;
      t3 >>>= 0;
      return [ t0, t1, t2, t3 ];
    }
    var RCON = [ 0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54 ];
    var G = function() {
      var d = new Array(256);
      for (var j = 0; j < 256; j++) d[j] = j < 128 ? j << 1 : j << 1 ^ 283;
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [ [], [], [], [] ];
      var INV_SUB_MIX = [ [], [], [], [] ];
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; ++i) {
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ 255 & sx ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        var t = 257 * d[sx] ^ 16843008 * sx;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        t = 16843009 * x8 ^ 65537 * x4 ^ 257 * x2 ^ 16843008 * x;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (0 === x) x = xi = 1; else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      };
    }();
    function AES(key) {
      this._key = asUInt32Array(key);
      this._reset();
    }
    AES.blockSize = 16;
    AES.keySize = 32;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function() {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = 4 * (nRounds + 1);
      var keySchedule = [];
      for (var k = 0; k < keySize; k++) keySchedule[k] = keyWords[k];
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
          t = t << 8 | t >>> 24;
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[255 & t];
          t ^= RCON[k / keySize | 0] << 24;
        } else keySize > 6 && k % keySize === 4 && (t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[255 & t]);
        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        invKeySchedule[ik] = ik < 4 || ksR <= 4 ? tt : G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[255 & tt]];
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };
    AES.prototype.encryptBlockRaw = function(M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
    };
    AES.prototype.encryptBlock = function(M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M) {
      M = asUInt32Array(M);
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };
    module.exports.AES = AES;
  }, {
    "safe-buffer": 143
  } ],
  20: [ function(require, module, exports) {
    var aes = require("./aes");
    var Buffer = require("safe-buffer").Buffer;
    var Transform = require("cipher-base");
    var inherits = require("inherits");
    var GHASH = require("./ghash");
    var xor = require("buffer-xor");
    var incr32 = require("./incr32");
    function xorTest(a, b) {
      var out = 0;
      a.length !== b.length && out++;
      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; ++i) out += a[i] ^ b[i];
      return out;
    }
    function calcIv(self, iv, ck) {
      if (12 === iv.length) {
        self._finID = Buffer.concat([ iv, Buffer.from([ 0, 0, 0, 1 ]) ]);
        return Buffer.concat([ iv, Buffer.from([ 0, 0, 0, 2 ]) ]);
      }
      var ghash = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
      }
      ghash.update(Buffer.alloc(8, 0));
      var ivBits = 8 * len;
      var tail = Buffer.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash.update(tail);
      self._finID = ghash.state;
      var out = Buffer.from(self._finID);
      incr32(out);
      return out;
    }
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      var h = Buffer.alloc(4, 0);
      this._cipher = new aes.AES(key);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      this._decrypt ? this._ghash.update(chunk) : this._ghash.update(out);
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
      var tag = xor(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = tag;
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = tag;
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(buf);
      this._alen += buf.length;
    };
    module.exports = StreamCipher;
  }, {
    "./aes": 19,
    "./ghash": 24,
    "./incr32": 25,
    "buffer-xor": 46,
    "cipher-base": 49,
    inherits: 101,
    "safe-buffer": 143
  } ],
  21: [ function(require, module, exports) {
    var ciphers = require("./encrypter");
    var deciphers = require("./decrypter");
    var modes = require("./modes/list.json");
    function getCiphers() {
      return Object.keys(modes);
    }
    exports.createCipher = exports.Cipher = ciphers.createCipher;
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
    exports.createDecipher = exports.Decipher = deciphers.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, {
    "./decrypter": 22,
    "./encrypter": 23,
    "./modes/list.json": 33
  } ],
  22: [ function(require, module, exports) {
    var AuthCipher = require("./authCipher");
    var Buffer = require("safe-buffer").Buffer;
    var MODES = require("./modes");
    var StreamCipher = require("./streamCipher");
    var Transform = require("cipher-base");
    var aes = require("./aes");
    var ebtk = require("evp_bytestokey");
    var inherits = require("inherits");
    function Decipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Decipher, Transform);
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
      if (chunk) throw new Error("data not multiple of block length");
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer.concat([ this.cache, data ]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length) return this.cache;
    };
    function unpad(last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
      var i = -1;
      while (++i < padded) if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
      if (16 === padded) return;
      return last.slice(0, 16 - padded);
    }
    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      "string" === typeof iv && (iv = Buffer.from(iv));
      if ("GCM" !== config.mode && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      "string" === typeof password && (password = Buffer.from(password));
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      if ("stream" === config.type) return new StreamCipher(config.module, password, iv, true);
      if ("auth" === config.type) return new AuthCipher(config.module, password, iv, true);
      return new Decipher(config.module, password, iv);
    }
    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    exports.createDecipher = createDecipher;
    exports.createDecipheriv = createDecipheriv;
  }, {
    "./aes": 19,
    "./authCipher": 20,
    "./modes": 32,
    "./streamCipher": 35,
    "cipher-base": 49,
    evp_bytestokey: 84,
    inherits: 101,
    "safe-buffer": 143
  } ],
  23: [ function(require, module, exports) {
    var MODES = require("./modes");
    var AuthCipher = require("./authCipher");
    var Buffer = require("safe-buffer").Buffer;
    var StreamCipher = require("./streamCipher");
    var Transform = require("cipher-base");
    var aes = require("./aes");
    var ebtk = require("evp_bytestokey");
    var inherits = require("inherits");
    function Cipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Cipher, Transform);
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer.concat(out);
    };
    var PADDING = Buffer.alloc(16, 16);
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer.concat([ this.cache, data ]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len = 16 - this.cache.length;
      var padBuff = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) padBuff.writeUInt8(len, i);
      return Buffer.concat([ this.cache, padBuff ]);
    };
    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      "string" === typeof password && (password = Buffer.from(password));
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      "string" === typeof iv && (iv = Buffer.from(iv));
      if ("GCM" !== config.mode && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      if ("stream" === config.type) return new StreamCipher(config.module, password, iv);
      if ("auth" === config.type) return new AuthCipher(config.module, password, iv);
      return new Cipher(config.module, password, iv);
    }
    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    exports.createCipheriv = createCipheriv;
    exports.createCipher = createCipher;
  }, {
    "./aes": 19,
    "./authCipher": 20,
    "./modes": 32,
    "./streamCipher": 35,
    "cipher-base": 49,
    evp_bytestokey: 84,
    inherits: 101,
    "safe-buffer": 143
  } ],
  24: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    var ZEROES = Buffer.alloc(16, 0);
    function toArray(buf) {
      return [ buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12) ];
    }
    function fromArray(out) {
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }
    function GHASH(key) {
      this.h = key;
      this.state = Buffer.alloc(16, 0);
      this.cache = Buffer.allocUnsafe(0);
    }
    GHASH.prototype.ghash = function(block) {
      var i = -1;
      while (++i < block.length) this.state[i] ^= block[i];
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi = toArray(this.h);
      var Zi = [ 0, 0, 0, 0 ];
      var j, xi, lsbVi;
      var i = -1;
      while (++i < 128) {
        xi = 0 !== (this.state[~~(i / 8)] & 1 << 7 - i % 8);
        if (xi) {
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }
        lsbVi = 0 !== (1 & Vi[3]);
        for (j = 3; j > 0; j--) Vi[j] = Vi[j] >>> 1 | (1 & Vi[j - 1]) << 31;
        Vi[0] = Vi[0] >>> 1;
        lsbVi && (Vi[0] = Vi[0] ^ 225 << 24);
      }
      this.state = fromArray(Zi);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer.concat([ this.cache, buf ]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      this.cache.length && this.ghash(Buffer.concat([ this.cache, ZEROES ], 16));
      this.ghash(fromArray([ 0, abl, 0, bl ]));
      return this.state;
    };
    module.exports = GHASH;
  }, {
    "safe-buffer": 143
  } ],
  25: [ function(require, module, exports) {
    function incr32(iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (255 !== item) {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
        iv.writeUInt8(0, len);
      }
    }
    module.exports = incr32;
  }, {} ],
  26: [ function(require, module, exports) {
    var xor = require("buffer-xor");
    exports.encrypt = function(self, block) {
      var data = xor(block, self._prev);
      self._prev = self._cipher.encryptBlock(data);
      return self._prev;
    };
    exports.decrypt = function(self, block) {
      var pad = self._prev;
      self._prev = block;
      var out = self._cipher.decryptBlock(block);
      return xor(out, pad);
    };
  }, {
    "buffer-xor": 46
  } ],
  27: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    var xor = require("buffer-xor");
    function encryptStart(self, data, decrypt) {
      var len = data.length;
      var out = xor(data, self._cache);
      self._cache = self._cache.slice(len);
      self._prev = Buffer.concat([ self._prev, decrypt ? data : out ]);
      return out;
    }
    exports.encrypt = function(self, data, decrypt) {
      var out = Buffer.allocUnsafe(0);
      var len;
      while (data.length) {
        if (0 === self._cache.length) {
          self._cache = self._cipher.encryptBlock(self._prev);
          self._prev = Buffer.allocUnsafe(0);
        }
        if (!(self._cache.length <= data.length)) {
          out = Buffer.concat([ out, encryptStart(self, data, decrypt) ]);
          break;
        }
        len = self._cache.length;
        out = Buffer.concat([ out, encryptStart(self, data.slice(0, len), decrypt) ]);
        data = data.slice(len);
      }
      return out;
    };
  }, {
    "buffer-xor": 46,
    "safe-buffer": 143
  } ],
  28: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    function encryptByte(self, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (128 & value) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
      }
      return out;
    }
    function shiftIn(buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = Buffer.allocUnsafe(buffer.length);
      buffer = Buffer.concat([ buffer, Buffer.from([ value ]) ]);
      while (++i < len) out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
      return out;
    }
    exports.encrypt = function(self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) out[i] = encryptByte(self, chunk[i], decrypt);
      return out;
    };
  }, {
    "safe-buffer": 143
  } ],
  29: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    function encryptByte(self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev);
      var out = pad[0] ^ byteParam;
      self._prev = Buffer.concat([ self._prev.slice(1), Buffer.from([ decrypt ? byteParam : out ]) ]);
      return out;
    }
    exports.encrypt = function(self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) out[i] = encryptByte(self, chunk[i], decrypt);
      return out;
    };
  }, {
    "safe-buffer": 143
  } ],
  30: [ function(require, module, exports) {
    var xor = require("buffer-xor");
    var Buffer = require("safe-buffer").Buffer;
    var incr32 = require("../incr32");
    function getBlock(self) {
      var out = self._cipher.encryptBlockRaw(self._prev);
      incr32(self._prev);
      return out;
    }
    var blockSize = 16;
    exports.encrypt = function(self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self._cache.length;
      self._cache = Buffer.concat([ self._cache, Buffer.allocUnsafe(chunkNum * blockSize) ]);
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }, {
    "../incr32": 25,
    "buffer-xor": 46,
    "safe-buffer": 143
  } ],
  31: [ function(require, module, exports) {
    exports.encrypt = function(self, block) {
      return self._cipher.encryptBlock(block);
    };
    exports.decrypt = function(self, block) {
      return self._cipher.decryptBlock(block);
    };
  }, {} ],
  32: [ function(require, module, exports) {
    var modeModules = {
      ECB: require("./ecb"),
      CBC: require("./cbc"),
      CFB: require("./cfb"),
      CFB8: require("./cfb8"),
      CFB1: require("./cfb1"),
      OFB: require("./ofb"),
      CTR: require("./ctr"),
      GCM: require("./ctr")
    };
    var modes = require("./list.json");
    for (var key in modes) modes[key].module = modeModules[modes[key].mode];
    module.exports = modes;
  }, {
    "./cbc": 26,
    "./cfb": 27,
    "./cfb1": 28,
    "./cfb8": 29,
    "./ctr": 30,
    "./ecb": 31,
    "./list.json": 33,
    "./ofb": 34
  } ],
  33: [ function(require, module, exports) {
    module.exports = {
      "aes-128-ecb": {
        cipher: "AES",
        key: 128,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-192-ecb": {
        cipher: "AES",
        key: 192,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-256-ecb": {
        cipher: "AES",
        key: 256,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-128-cbc": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-192-cbc": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-256-cbc": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes128: {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes192: {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes256: {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-128-cfb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-192-cfb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-256-cfb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-128-cfb8": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-192-cfb8": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-256-cfb8": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-128-cfb1": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-192-cfb1": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-256-cfb1": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-128-ofb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-192-ofb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-256-ofb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-128-ctr": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-192-ctr": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-256-ctr": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-128-gcm": {
        cipher: "AES",
        key: 128,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-192-gcm": {
        cipher: "AES",
        key: 192,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-256-gcm": {
        cipher: "AES",
        key: 256,
        iv: 12,
        mode: "GCM",
        type: "auth"
      }
    };
  }, {} ],
  34: [ function(require, module, exports) {
    (function(Buffer) {
      var xor = require("buffer-xor");
      function getBlock(self) {
        self._prev = self._cipher.encryptBlock(self._prev);
        return self._prev;
      }
      exports.encrypt = function(self, chunk) {
        while (self._cache.length < chunk.length) self._cache = Buffer.concat([ self._cache, getBlock(self) ]);
        var pad = self._cache.slice(0, chunk.length);
        self._cache = self._cache.slice(chunk.length);
        return xor(chunk, pad);
      };
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47,
    "buffer-xor": 46
  } ],
  35: [ function(require, module, exports) {
    var aes = require("./aes");
    var Buffer = require("safe-buffer").Buffer;
    var Transform = require("cipher-base");
    var inherits = require("inherits");
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
    module.exports = StreamCipher;
  }, {
    "./aes": 19,
    "cipher-base": 49,
    inherits: 101,
    "safe-buffer": 143
  } ],
  36: [ function(require, module, exports) {
    var DES = require("browserify-des");
    var aes = require("browserify-aes/browser");
    var aesModes = require("browserify-aes/modes");
    var desModes = require("browserify-des/modes");
    var ebtk = require("evp_bytestokey");
    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else {
        if (!desModes[suite]) throw new TypeError("invalid suite type");
        keyLen = 8 * desModes[suite].key;
        ivLen = desModes[suite].iv;
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else {
        if (!desModes[suite]) throw new TypeError("invalid suite type");
        keyLen = 8 * desModes[suite].key;
        ivLen = desModes[suite].iv;
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
      });
      throw new TypeError("invalid suite type");
    }
    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
      });
      throw new TypeError("invalid suite type");
    }
    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers());
    }
    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, {
    "browserify-aes/browser": 21,
    "browserify-aes/modes": 32,
    "browserify-des": 37,
    "browserify-des/modes": 38,
    evp_bytestokey: 84
  } ],
  37: [ function(require, module, exports) {
    (function(Buffer) {
      var CipherBase = require("cipher-base");
      var des = require("des.js");
      var inherits = require("inherits");
      var modes = {
        "des-ede3-cbc": des.CBC.instantiate(des.EDE),
        "des-ede3": des.EDE,
        "des-ede-cbc": des.CBC.instantiate(des.EDE),
        "des-ede": des.EDE,
        "des-cbc": des.CBC.instantiate(des.DES),
        "des-ecb": des.DES
      };
      modes.des = modes["des-cbc"];
      modes.des3 = modes["des-ede3-cbc"];
      module.exports = DES;
      inherits(DES, CipherBase);
      function DES(opts) {
        CipherBase.call(this);
        var modeName = opts.mode.toLowerCase();
        var mode = modes[modeName];
        var type;
        type = opts.decrypt ? "decrypt" : "encrypt";
        var key = opts.key;
        "des-ede" !== modeName && "des-ede-cbc" !== modeName || (key = Buffer.concat([ key, key.slice(0, 8) ]));
        var iv = opts.iv;
        this._des = mode.create({
          key: key,
          iv: iv,
          type: type
        });
      }
      DES.prototype._update = function(data) {
        return new Buffer(this._des.update(data));
      };
      DES.prototype._final = function() {
        return new Buffer(this._des.final());
      };
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47,
    "cipher-base": 49,
    "des.js": 57,
    inherits: 101
  } ],
  38: [ function(require, module, exports) {
    exports["des-ecb"] = {
      key: 8,
      iv: 0
    };
    exports["des-cbc"] = exports.des = {
      key: 8,
      iv: 8
    };
    exports["des-ede3-cbc"] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports["des-ede3"] = {
      key: 24,
      iv: 0
    };
    exports["des-ede-cbc"] = {
      key: 16,
      iv: 8
    };
    exports["des-ede"] = {
      key: 16,
      iv: 0
    };
  }, {} ],
  39: [ function(require, module, exports) {
    (function(Buffer) {
      var bn = require("bn.js");
      var randomBytes = require("randombytes");
      module.exports = crt;
      function blind(priv) {
        var r = getr(priv);
        var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
        return {
          blinder: blinder,
          unblinder: r.invm(priv.modulus)
        };
      }
      function crt(msg, priv) {
        var blinds = blind(priv);
        var len = priv.modulus.byteLength();
        var mod = bn.mont(priv.modulus);
        var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
        var c1 = blinded.toRed(bn.mont(priv.prime1));
        var c2 = blinded.toRed(bn.mont(priv.prime2));
        var qinv = priv.coefficient;
        var p = priv.prime1;
        var q = priv.prime2;
        var m1 = c1.redPow(priv.exponent1);
        var m2 = c2.redPow(priv.exponent2);
        m1 = m1.fromRed();
        m2 = m2.fromRed();
        var h = m1.isub(m2).imul(qinv).umod(p);
        h.imul(q);
        m2.iadd(h);
        return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
      }
      crt.getr = getr;
      function getr(priv) {
        var len = priv.modulus.byteLength();
        var r = new bn(randomBytes(len));
        while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) r = new bn(randomBytes(len));
        return r;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "bn.js": 16,
    buffer: 47,
    randombytes: 125
  } ],
  40: [ function(require, module, exports) {
    module.exports = require("./browser/algorithms.json");
  }, {
    "./browser/algorithms.json": 41
  } ],
  41: [ function(require, module, exports) {
    module.exports = {
      sha224WithRSAEncryption: {
        sign: "rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        sign: "ecdsa/rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      sha256WithRSAEncryption: {
        sign: "rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        sign: "ecdsa/rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      sha384WithRSAEncryption: {
        sign: "rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        sign: "ecdsa/rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      sha512WithRSAEncryption: {
        sign: "rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        sign: "ecdsa/rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        sign: "rsa",
        hash: "sha1",
        id: "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        sign: "ecdsa",
        hash: "sha1",
        id: ""
      },
      sha256: {
        sign: "ecdsa",
        hash: "sha256",
        id: ""
      },
      sha224: {
        sign: "ecdsa",
        hash: "sha224",
        id: ""
      },
      sha384: {
        sign: "ecdsa",
        hash: "sha384",
        id: ""
      },
      sha512: {
        sign: "ecdsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-SHA1": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      DSA: {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-WITH-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-WITH-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-WITH-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-WITH-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-RIPEMD160": {
        sign: "dsa",
        hash: "rmd160",
        id: ""
      },
      ripemd160WithRSA: {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      md5WithRSAEncryption: {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      }
    };
  }, {} ],
  42: [ function(require, module, exports) {
    module.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
  }, {} ],
  43: [ function(require, module, exports) {
    (function(Buffer) {
      var createHash = require("create-hash");
      var stream = require("stream");
      var inherits = require("inherits");
      var sign = require("./sign");
      var verify = require("./verify");
      var algorithms = require("./algorithms.json");
      Object.keys(algorithms).forEach(function(key) {
        algorithms[key].id = new Buffer(algorithms[key].id, "hex");
        algorithms[key.toLowerCase()] = algorithms[key];
      });
      function Sign(algorithm) {
        stream.Writable.call(this);
        var data = algorithms[algorithm];
        if (!data) throw new Error("Unknown message digest");
        this._hashType = data.hash;
        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
      }
      inherits(Sign, stream.Writable);
      Sign.prototype._write = function _write(data, _, done) {
        this._hash.update(data);
        done();
      };
      Sign.prototype.update = function update(data, enc) {
        "string" === typeof data && (data = new Buffer(data, enc));
        this._hash.update(data);
        return this;
      };
      Sign.prototype.sign = function signMethod(key, enc) {
        this.end();
        var hash = this._hash.digest();
        var sig = sign(hash, key, this._hashType, this._signType, this._tag);
        return enc ? sig.toString(enc) : sig;
      };
      function Verify(algorithm) {
        stream.Writable.call(this);
        var data = algorithms[algorithm];
        if (!data) throw new Error("Unknown message digest");
        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
      }
      inherits(Verify, stream.Writable);
      Verify.prototype._write = function _write(data, _, done) {
        this._hash.update(data);
        done();
      };
      Verify.prototype.update = function update(data, enc) {
        "string" === typeof data && (data = new Buffer(data, enc));
        this._hash.update(data);
        return this;
      };
      Verify.prototype.verify = function verifyMethod(key, sig, enc) {
        "string" === typeof sig && (sig = new Buffer(sig, enc));
        this.end();
        var hash = this._hash.digest();
        return verify(sig, hash, key, this._signType, this._tag);
      };
      function createSign(algorithm) {
        return new Sign(algorithm);
      }
      function createVerify(algorithm) {
        return new Verify(algorithm);
      }
      module.exports = {
        Sign: createSign,
        Verify: createVerify,
        createSign: createSign,
        createVerify: createVerify
      };
    }).call(this, require("buffer").Buffer);
  }, {
    "./algorithms.json": 41,
    "./sign": 44,
    "./verify": 45,
    buffer: 47,
    "create-hash": 52,
    inherits: 101,
    stream: 152
  } ],
  44: [ function(require, module, exports) {
    (function(Buffer) {
      var createHmac = require("create-hmac");
      var crt = require("browserify-rsa");
      var EC = require("elliptic").ec;
      var BN = require("bn.js");
      var parseKeys = require("parse-asn1");
      var curves = require("./curves.json");
      function sign(hash, key, hashType, signType, tag) {
        var priv = parseKeys(key);
        if (priv.curve) {
          if ("ecdsa" !== signType && "ecdsa/rsa" !== signType) throw new Error("wrong private key type");
          return ecSign(hash, priv);
        }
        if ("dsa" === priv.type) {
          if ("dsa" !== signType) throw new Error("wrong private key type");
          return dsaSign(hash, priv, hashType);
        }
        if ("rsa" !== signType && "ecdsa/rsa" !== signType) throw new Error("wrong private key type");
        hash = Buffer.concat([ tag, hash ]);
        var len = priv.modulus.byteLength();
        var pad = [ 0, 1 ];
        while (hash.length + pad.length + 1 < len) pad.push(255);
        pad.push(0);
        var i = -1;
        while (++i < hash.length) pad.push(hash[i]);
        var out = crt(pad, priv);
        return out;
      }
      function ecSign(hash, priv) {
        var curveId = curves[priv.curve.join(".")];
        if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
        var curve = new EC(curveId);
        var key = curve.keyFromPrivate(priv.privateKey);
        var out = key.sign(hash);
        return new Buffer(out.toDER());
      }
      function dsaSign(hash, priv, algo) {
        var x = priv.params.priv_key;
        var p = priv.params.p;
        var q = priv.params.q;
        var g = priv.params.g;
        var r = new BN(0);
        var k;
        var H = bits2int(hash, q).mod(q);
        var s = false;
        var kv = getKey(x, q, hash, algo);
        while (false === s) {
          k = makeKey(q, kv, algo);
          r = makeR(g, k, p, q);
          s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
          if (0 === s.cmpn(0)) {
            s = false;
            r = new BN(0);
          }
        }
        return toDER(r, s);
      }
      function toDER(r, s) {
        r = r.toArray();
        s = s.toArray();
        128 & r[0] && (r = [ 0 ].concat(r));
        128 & s[0] && (s = [ 0 ].concat(s));
        var total = r.length + s.length + 4;
        var res = [ 48, total, 2, r.length ];
        res = res.concat(r, [ 2, s.length ], s);
        return new Buffer(res);
      }
      function getKey(x, q, hash, algo) {
        x = new Buffer(x.toArray());
        if (x.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - x.length);
          zeros.fill(0);
          x = Buffer.concat([ zeros, x ]);
        }
        var hlen = hash.length;
        var hbits = bits2octets(hash, q);
        var v = new Buffer(hlen);
        v.fill(1);
        var k = new Buffer(hlen);
        k.fill(0);
        k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
        k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
        return {
          k: k,
          v: v
        };
      }
      function bits2int(obits, q) {
        var bits = new BN(obits);
        var shift = (obits.length << 3) - q.bitLength();
        shift > 0 && bits.ishrn(shift);
        return bits;
      }
      function bits2octets(bits, q) {
        bits = bits2int(bits, q);
        bits = bits.mod(q);
        var out = new Buffer(bits.toArray());
        if (out.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - out.length);
          zeros.fill(0);
          out = Buffer.concat([ zeros, out ]);
        }
        return out;
      }
      function makeKey(q, kv, algo) {
        var t;
        var k;
        do {
          t = new Buffer(0);
          while (8 * t.length < q.bitLength()) {
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([ t, kv.v ]);
          }
          k = bits2int(t, q);
          kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest();
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
        } while (-1 !== k.cmp(q));
        return k;
      }
      function makeR(g, k, p, q) {
        return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
      }
      module.exports = sign;
      module.exports.getKey = getKey;
      module.exports.makeKey = makeKey;
    }).call(this, require("buffer").Buffer);
  }, {
    "./curves.json": 42,
    "bn.js": 16,
    "browserify-rsa": 39,
    buffer: 47,
    "create-hmac": 54,
    elliptic: 67,
    "parse-asn1": 111
  } ],
  45: [ function(require, module, exports) {
    (function(Buffer) {
      var BN = require("bn.js");
      var EC = require("elliptic").ec;
      var parseKeys = require("parse-asn1");
      var curves = require("./curves.json");
      function verify(sig, hash, key, signType, tag) {
        var pub = parseKeys(key);
        if ("ec" === pub.type) {
          if ("ecdsa" !== signType && "ecdsa/rsa" !== signType) throw new Error("wrong public key type");
          return ecVerify(sig, hash, pub);
        }
        if ("dsa" === pub.type) {
          if ("dsa" !== signType) throw new Error("wrong public key type");
          return dsaVerify(sig, hash, pub);
        }
        if ("rsa" !== signType && "ecdsa/rsa" !== signType) throw new Error("wrong public key type");
        hash = Buffer.concat([ tag, hash ]);
        var len = pub.modulus.byteLength();
        var pad = [ 1 ];
        var padNum = 0;
        while (hash.length + pad.length + 2 < len) {
          pad.push(255);
          padNum++;
        }
        pad.push(0);
        var i = -1;
        while (++i < hash.length) pad.push(hash[i]);
        pad = new Buffer(pad);
        var red = BN.mont(pub.modulus);
        sig = new BN(sig).toRed(red);
        sig = sig.redPow(new BN(pub.publicExponent));
        sig = new Buffer(sig.fromRed().toArray());
        var out = padNum < 8 ? 1 : 0;
        len = Math.min(sig.length, pad.length);
        sig.length !== pad.length && (out = 1);
        i = -1;
        while (++i < len) out |= sig[i] ^ pad[i];
        return 0 === out;
      }
      function ecVerify(sig, hash, pub) {
        var curveId = curves[pub.data.algorithm.curve.join(".")];
        if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
        var curve = new EC(curveId);
        var pubkey = pub.data.subjectPrivateKey.data;
        return curve.verify(hash, sig, pubkey);
      }
      function dsaVerify(sig, hash, pub) {
        var p = pub.data.p;
        var q = pub.data.q;
        var g = pub.data.g;
        var y = pub.data.pub_key;
        var unpacked = parseKeys.signature.decode(sig, "der");
        var s = unpacked.s;
        var r = unpacked.r;
        checkValue(s, q);
        checkValue(r, q);
        var montp = BN.mont(p);
        var w = s.invm(q);
        var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
        return 0 === v.cmp(r);
      }
      function checkValue(b, q) {
        if (b.cmpn(0) <= 0) throw new Error("invalid sig");
        if (b.cmp(q) >= q) throw new Error("invalid sig");
      }
      module.exports = verify;
    }).call(this, require("buffer").Buffer);
  }, {
    "./curves.json": 42,
    "bn.js": 16,
    buffer: 47,
    elliptic: 67,
    "parse-asn1": 111
  } ],
  46: [ function(require, module, exports) {
    (function(Buffer) {
      module.exports = function xor(a, b) {
        var length = Math.min(a.length, b.length);
        var buffer = new Buffer(length);
        for (var i = 0; i < length; ++i) buffer[i] = a[i] ^ b[i];
        return buffer;
      };
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47
  } ],
  47: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      var base64 = require("base64-js");
      var ieee754 = require("ieee754");
      var isArray = require("isarray");
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global.TYPED_ARRAY_SUPPORT ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
      exports.kMaxLength = kMaxLength();
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
              return 42;
            }
          };
          return 42 === arr.foo() && "function" === typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
        } catch (e) {
          return false;
        }
      }
      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          null === that && (that = new Buffer(length));
          that.length = length;
        }
        return that;
      }
      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
        if ("number" === typeof arg) {
          if ("string" === typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }
      Buffer.poolSize = 8192;
      Buffer._augment = function(arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };
      function from(that, value, encodingOrOffset, length) {
        if ("number" === typeof value) throw new TypeError('"value" argument must not be a number');
        if ("undefined" !== typeof ArrayBuffer && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
        if ("string" === typeof value) return fromString(that, value, encodingOrOffset);
        return fromObject(that, value);
      }
      Buffer.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        "undefined" !== typeof Symbol && Symbol.species && Buffer[Symbol.species] === Buffer && Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
      function assertSize(size) {
        if ("number" !== typeof size) throw new TypeError('"size" argument must be a number');
        if (size < 0) throw new RangeError('"size" argument must not be negative');
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) return createBuffer(that, size);
        if (void 0 !== fill) return "string" === typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        return createBuffer(that, size);
      }
      Buffer.alloc = function(size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };
      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : 0 | checked(size));
        if (!Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
        return that;
      }
      Buffer.allocUnsafe = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size);
      };
      function fromString(that, string, encoding) {
        "string" === typeof encoding && "" !== encoding || (encoding = "utf8");
        if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
        var length = 0 | byteLength(string, encoding);
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);
        actual !== length && (that = that.slice(0, actual));
        return that;
      }
      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : 0 | checked(array.length);
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
        return that;
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength;
        if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
        if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
        array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = array;
          that.__proto__ = Buffer.prototype;
        } else that = fromArrayLike(that, array);
        return that;
      }
      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = 0 | checked(obj.length);
          that = createBuffer(that, len);
          if (0 === that.length) return that;
          obj.copy(that, 0, 0, len);
          return that;
        }
        if (obj) {
          if ("undefined" !== typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if ("number" !== typeof obj.length || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
          }
          if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
        }
        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
      }
      function checked(length) {
        if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
        return 0 | length;
      }
      function SlowBuffer(length) {
        +length != length && (length = 0);
        return Buffer.alloc(+length);
      }
      Buffer.isBuffer = function isBuffer(b) {
        return !!(null != b && b._isBuffer);
      };
      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
         case "hex":
         case "utf8":
         case "utf-8":
         case "ascii":
         case "latin1":
         case "binary":
         case "base64":
         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return true;

         default:
          return false;
        }
      };
      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === list.length) return Buffer.alloc(0);
        var i;
        if (void 0 === length) {
          length = 0;
          for (i = 0; i < list.length; ++i) length += list[i].length;
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) return string.length;
        if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
        "string" !== typeof string && (string = "" + string);
        var len = string.length;
        if (0 === len) return 0;
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "ascii":
         case "latin1":
         case "binary":
          return len;

         case "utf8":
         case "utf-8":
         case void 0:
          return utf8ToBytes(string).length;

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return 2 * len;

         case "hex":
          return len >>> 1;

         case "base64":
          return base64ToBytes(string).length;

         default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        (void 0 === start || start < 0) && (start = 0);
        if (start > this.length) return "";
        (void 0 === end || end > this.length) && (end = this.length);
        if (end <= 0) return "";
        end >>>= 0;
        start >>>= 0;
        if (end <= start) return "";
        encoding || (encoding = "utf8");
        while (true) switch (encoding) {
         case "hex":
          return hexSlice(this, start, end);

         case "utf8":
         case "utf-8":
          return utf8Slice(this, start, end);

         case "ascii":
          return asciiSlice(this, start, end);

         case "latin1":
         case "binary":
          return latin1Slice(this, start, end);

         case "base64":
          return base64Slice(this, start, end);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return utf16leSlice(this, start, end);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
        return this;
      };
      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer.prototype.toString = function toString() {
        var length = 0 | this.length;
        if (0 === length) return "";
        if (0 === arguments.length) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return 0 === Buffer.compare(this, b);
      };
      Buffer.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
          this.length > max && (str += " ... ");
        }
        return "<Buffer " + str + ">";
      };
      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
        void 0 === start && (start = 0);
        void 0 === end && (end = target ? target.length : 0);
        void 0 === thisStart && (thisStart = 0);
        void 0 === thisEnd && (thisEnd = this.length);
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
        if (thisStart >= thisEnd && start >= end) return 0;
        if (thisStart >= thisEnd) return -1;
        if (start >= end) return 1;
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (0 === buffer.length) return -1;
        if ("string" === typeof byteOffset) {
          encoding = byteOffset;
          byteOffset = 0;
        } else byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648);
        byteOffset = +byteOffset;
        isNaN(byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1);
        byteOffset < 0 && (byteOffset = buffer.length + byteOffset);
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (!dir) return -1;
          byteOffset = 0;
        }
        "string" === typeof val && (val = Buffer.from(val, encoding));
        if (Buffer.isBuffer(val)) {
          if (0 === val.length) return -1;
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        }
        if ("number" === typeof val) {
          val &= 255;
          if (Buffer.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf) return dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (void 0 !== encoding) {
          encoding = String(encoding).toLowerCase();
          if ("ucs2" === encoding || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding) {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i) {
          return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
            -1 === foundIndex && (foundIndex = i);
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            -1 !== foundIndex && (i -= i - foundIndex);
            foundIndex = -1;
          }
        } else {
          byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength);
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return -1 !== this.indexOf(val, byteOffset, encoding);
      };
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (length) {
          length = Number(length);
          length > remaining && (length = remaining);
        } else length = remaining;
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
        length > strLen / 2 && (length = strLen / 2);
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(2 * i, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer.prototype.write = function write(string, offset, length, encoding) {
        if (void 0 === offset) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (void 0 === length && "string" === typeof offset) {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else {
          if (!isFinite(offset)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          offset |= 0;
          if (isFinite(length)) {
            length |= 0;
            void 0 === encoding && (encoding = "utf8");
          } else {
            encoding = length;
            length = void 0;
          }
        }
        var remaining = this.length - offset;
        (void 0 === length || length > remaining) && (length = remaining);
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        encoding || (encoding = "utf8");
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "hex":
          return hexWrite(this, string, offset, length);

         case "utf8":
         case "utf-8":
          return utf8Write(this, string, offset, length);

         case "ascii":
          return asciiWrite(this, string, offset, length);

         case "latin1":
         case "binary":
          return latin1Write(this, string, offset, length);

         case "base64":
          return base64Write(this, string, offset, length);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return ucs2Write(this, string, offset, length);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      };
      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
             case 1:
              firstByte < 128 && (codePoint = firstByte);
              break;

             case 2:
              secondByte = buf[i + 1];
              if (128 === (192 & secondByte)) {
                tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte;
                tempCodePoint > 127 && (codePoint = tempCodePoint);
              }
              break;

             case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte)) {
                tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte;
                tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343) && (codePoint = tempCodePoint);
              }
              break;

             case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte) && 128 === (192 & fourthByte)) {
                tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte;
                tempCodePoint > 65535 && tempCodePoint < 1114112 && (codePoint = tempCodePoint);
              }
            }
          }
          if (null === codePoint) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | 1023 & codePoint;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
        var res = "";
        var i = 0;
        while (i < len) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        (!start || start < 0) && (start = 0);
        (!end || end < 0 || end > len) && (end = len);
        var out = "";
        for (var i = start; i < end; ++i) out += toHex(buf[i]);
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        for (var i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
        return res;
      }
      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = void 0 === end ? len : ~~end;
        if (start < 0) {
          start += len;
          start < 0 && (start = 0);
        } else start > len && (start = len);
        if (end < 0) {
          end += len;
          end < 0 && (end = 0);
        } else end > len && (end = len);
        end < start && (end = start);
        var newBuf;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
        }
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        return val;
      };
      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 256)) val += this[offset + --byteLength] * mul;
        return val;
      };
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
      };
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) val += this[offset + --i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        if (!(128 & this[offset])) return this[offset];
        return -1 * (255 - this[offset] + 1);
      };
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 255, 0);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        this[offset] = 255 & value;
        return offset + 1;
      };
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        value < 0 && (value = 65535 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
      }
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        value < 0 && (value = 4294967295 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
      }
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = 255 & value;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 127, -128);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        value < 0 && (value = 255 + value + 1);
        this[offset] = 255 & value;
        return offset + 1;
      };
      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        value < 0 && (value = 4294967295 + value + 1);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        start || (start = 0);
        end || 0 === end || (end = this.length);
        targetStart >= target.length && (targetStart = target.length);
        targetStart || (targetStart = 0);
        end > 0 && end < start && (end = start);
        if (end === start) return 0;
        if (0 === target.length || 0 === this.length) return 0;
        if (targetStart < 0) throw new RangeError("targetStart out of bounds");
        if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        end > this.length && (end = this.length);
        target.length - targetStart < end - start && (end = target.length - targetStart + start);
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        return len;
      };
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        if ("string" === typeof val) {
          if ("string" === typeof start) {
            encoding = start;
            start = 0;
            end = this.length;
          } else if ("string" === typeof end) {
            encoding = end;
            end = this.length;
          }
          if (1 === val.length) {
            var code = val.charCodeAt(0);
            code < 256 && (val = code);
          }
          if (void 0 !== encoding && "string" !== typeof encoding) throw new TypeError("encoding must be a string");
          if ("string" === typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        } else "number" === typeof val && (val &= 255);
        if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
        if (end <= start) return this;
        start >>>= 0;
        end = void 0 === end ? this.length : end >>> 0;
        val || (val = 0);
        var i;
        if ("number" === typeof val) for (i = start; i < end; ++i) this[i] = val; else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) str += "=";
        return str;
      }
      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, "");
      }
      function toHex(n) {
        if (n < 16) return "0" + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              if (i + 1 === length) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              (units -= 3) > -1 && bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = 65536 + (leadSurrogate - 55296 << 10 | codePoint - 56320);
          } else leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          } else {
            if (!(codePoint < 1114112)) throw new Error("Invalid code point");
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) byteArray.push(255 & str.charCodeAt(i));
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isnan(val) {
        return val !== val;
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "base64-js": 15,
    ieee754: 99,
    isarray: 48
  } ],
  48: [ function(require, module, exports) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return "[object Array]" == toString.call(arr);
    };
  }, {} ],
  49: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    var Transform = require("stream").Transform;
    var StringDecoder = require("string_decoder").StringDecoder;
    var inherits = require("inherits");
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = "string" === typeof hashMode;
      this.hashMode ? this[hashMode] = this._finalOrDigest : this.final = this._finalOrDigest;
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits(CipherBase, Transform);
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      "string" === typeof data && (data = Buffer.from(data, inputEnc));
      var outData = this._update(data);
      if (this.hashMode) return this;
      outputEnc && (outData = this._toString(outData, outputEnc));
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {};
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        this.hashMode ? this._update(data) : this.push(this._update(data));
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer.alloc(0);
      outputEnc && (outData = this._toString(outData, outputEnc, true));
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) throw new Error("can't switch encodings");
      var out = this._decoder.write(value);
      fin && (out += this._decoder.end());
      return out;
    };
    module.exports = CipherBase;
  }, {
    inherits: 101,
    "safe-buffer": 143,
    stream: 152,
    string_decoder: 153
  } ],
  50: [ function(require, module, exports) {
    (function(Buffer) {
      function isArray(arg) {
        if (Array.isArray) return Array.isArray(arg);
        return "[object Array]" === objectToString(arg);
      }
      exports.isArray = isArray;
      function isBoolean(arg) {
        return "boolean" === typeof arg;
      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
        return null === arg;
      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
        return null == arg;
      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
        return "number" === typeof arg;
      }
      exports.isNumber = isNumber;
      function isString(arg) {
        return "string" === typeof arg;
      }
      exports.isString = isString;
      function isSymbol(arg) {
        return "symbol" === typeof arg;
      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
        return void 0 === arg;
      }
      exports.isUndefined = isUndefined;
      function isRegExp(re) {
        return "[object RegExp]" === objectToString(re);
      }
      exports.isRegExp = isRegExp;
      function isObject(arg) {
        return "object" === typeof arg && null !== arg;
      }
      exports.isObject = isObject;
      function isDate(d) {
        return "[object Date]" === objectToString(d);
      }
      exports.isDate = isDate;
      function isError(e) {
        return "[object Error]" === objectToString(e) || e instanceof Error;
      }
      exports.isError = isError;
      function isFunction(arg) {
        return "function" === typeof arg;
      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
        return null === arg || "boolean" === typeof arg || "number" === typeof arg || "string" === typeof arg || "symbol" === typeof arg || "undefined" === typeof arg;
      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = Buffer.isBuffer;
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
    }).call(this, {
      isBuffer: require("../../is-buffer/index.js")
    });
  }, {
    "../../is-buffer/index.js": 102
  } ],
  51: [ function(require, module, exports) {
    (function(Buffer) {
      var elliptic = require("elliptic");
      var BN = require("bn.js");
      module.exports = function createECDH(curve) {
        return new ECDH(curve);
      };
      var aliases = {
        secp256k1: {
          name: "secp256k1",
          byteLength: 32
        },
        secp224r1: {
          name: "p224",
          byteLength: 28
        },
        prime256v1: {
          name: "p256",
          byteLength: 32
        },
        prime192v1: {
          name: "p192",
          byteLength: 24
        },
        ed25519: {
          name: "ed25519",
          byteLength: 32
        },
        secp384r1: {
          name: "p384",
          byteLength: 48
        },
        secp521r1: {
          name: "p521",
          byteLength: 66
        }
      };
      aliases.p224 = aliases.secp224r1;
      aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
      aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
      aliases.p384 = aliases.secp384r1;
      aliases.p521 = aliases.secp521r1;
      function ECDH(curve) {
        this.curveType = aliases[curve];
        this.curveType || (this.curveType = {
          name: curve
        });
        this.curve = new elliptic.ec(this.curveType.name);
        this.keys = void 0;
      }
      ECDH.prototype.generateKeys = function(enc, format) {
        this.keys = this.curve.genKeyPair();
        return this.getPublicKey(enc, format);
      };
      ECDH.prototype.computeSecret = function(other, inenc, enc) {
        inenc = inenc || "utf8";
        Buffer.isBuffer(other) || (other = new Buffer(other, inenc));
        var otherPub = this.curve.keyFromPublic(other).getPublic();
        var out = otherPub.mul(this.keys.getPrivate()).getX();
        return formatReturnValue(out, enc, this.curveType.byteLength);
      };
      ECDH.prototype.getPublicKey = function(enc, format) {
        var key = this.keys.getPublic("compressed" === format, true);
        "hybrid" === format && (key[key.length - 1] % 2 ? key[0] = 7 : key[0] = 6);
        return formatReturnValue(key, enc);
      };
      ECDH.prototype.getPrivateKey = function(enc) {
        return formatReturnValue(this.keys.getPrivate(), enc);
      };
      ECDH.prototype.setPublicKey = function(pub, enc) {
        enc = enc || "utf8";
        Buffer.isBuffer(pub) || (pub = new Buffer(pub, enc));
        this.keys._importPublic(pub);
        return this;
      };
      ECDH.prototype.setPrivateKey = function(priv, enc) {
        enc = enc || "utf8";
        Buffer.isBuffer(priv) || (priv = new Buffer(priv, enc));
        var _priv = new BN(priv);
        _priv = _priv.toString(16);
        this.keys = this.curve.genKeyPair();
        this.keys._importPrivate(_priv);
        return this;
      };
      function formatReturnValue(bn, enc, len) {
        Array.isArray(bn) || (bn = bn.toArray());
        var buf = new Buffer(bn);
        if (len && buf.length < len) {
          var zeros = new Buffer(len - buf.length);
          zeros.fill(0);
          buf = Buffer.concat([ zeros, buf ]);
        }
        return enc ? buf.toString(enc) : buf;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "bn.js": 16,
    buffer: 47,
    elliptic: 67
  } ],
  52: [ function(require, module, exports) {
    "use strict";
    var inherits = require("inherits");
    var MD5 = require("md5.js");
    var RIPEMD160 = require("ripemd160");
    var sha = require("sha.js");
    var Base = require("cipher-base");
    function Hash(hash) {
      Base.call(this, "digest");
      this._hash = hash;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if ("md5" === alg) return new MD5();
      if ("rmd160" === alg || "ripemd160" === alg) return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }, {
    "cipher-base": 49,
    inherits: 101,
    "md5.js": 103,
    ripemd160: 142,
    "sha.js": 145
  } ],
  53: [ function(require, module, exports) {
    var MD5 = require("md5.js");
    module.exports = function(buffer) {
      return new MD5().update(buffer).digest();
    };
  }, {
    "md5.js": 103
  } ],
  54: [ function(require, module, exports) {
    "use strict";
    var inherits = require("inherits");
    var Legacy = require("./legacy");
    var Base = require("cipher-base");
    var Buffer = require("safe-buffer").Buffer;
    var md5 = require("create-hash/md5");
    var RIPEMD160 = require("ripemd160");
    var sha = require("sha.js");
    var ZEROS = Buffer.alloc(128);
    function Hmac(alg, key) {
      Base.call(this, "digest");
      "string" === typeof key && (key = Buffer.from(key));
      var blocksize = "sha512" === alg || "sha384" === alg ? 128 : 64;
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash = "rmd160" === alg ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
      } else key.length < blocksize && (key = Buffer.concat([ key, ZEROS ], blocksize));
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = 54 ^ key[i];
        opad[i] = 92 ^ key[i];
      }
      this._hash = "rmd160" === alg ? new RIPEMD160() : sha(alg);
      this._hash.update(ipad);
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hmac.prototype._final = function() {
      var h = this._hash.digest();
      var hash = "rmd160" === this._alg ? new RIPEMD160() : sha(this._alg);
      return hash.update(this._opad).update(h).digest();
    };
    module.exports = function createHmac(alg, key) {
      alg = alg.toLowerCase();
      if ("rmd160" === alg || "ripemd160" === alg) return new Hmac("rmd160", key);
      if ("md5" === alg) return new Legacy(md5, key);
      return new Hmac(alg, key);
    };
  }, {
    "./legacy": 55,
    "cipher-base": 49,
    "create-hash/md5": 53,
    inherits: 101,
    ripemd160: 142,
    "safe-buffer": 143,
    "sha.js": 145
  } ],
  55: [ function(require, module, exports) {
    "use strict";
    var inherits = require("inherits");
    var Buffer = require("safe-buffer").Buffer;
    var Base = require("cipher-base");
    var ZEROS = Buffer.alloc(128);
    var blocksize = 64;
    function Hmac(alg, key) {
      Base.call(this, "digest");
      "string" === typeof key && (key = Buffer.from(key));
      this._alg = alg;
      this._key = key;
      key.length > blocksize ? key = alg(key) : key.length < blocksize && (key = Buffer.concat([ key, ZEROS ], blocksize));
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = 54 ^ key[i];
        opad[i] = 92 ^ key[i];
      }
      this._hash = [ ipad ];
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.push(data);
    };
    Hmac.prototype._final = function() {
      var h = this._alg(Buffer.concat(this._hash));
      return this._alg(Buffer.concat([ this._opad, h ]));
    };
    module.exports = Hmac;
  }, {
    "cipher-base": 49,
    inherits: 101,
    "safe-buffer": 143
  } ],
  56: [ function(require, module, exports) {
    "use strict";
    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("randombytes");
    exports.createHash = exports.Hash = require("create-hash");
    exports.createHmac = exports.Hmac = require("create-hmac");
    var algos = require("browserify-sign/algos");
    var algoKeys = Object.keys(algos);
    var hashes = [ "sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160" ].concat(algoKeys);
    exports.getHashes = function() {
      return hashes;
    };
    var p = require("pbkdf2");
    exports.pbkdf2 = p.pbkdf2;
    exports.pbkdf2Sync = p.pbkdf2Sync;
    var aes = require("browserify-cipher");
    exports.Cipher = aes.Cipher;
    exports.createCipher = aes.createCipher;
    exports.Cipheriv = aes.Cipheriv;
    exports.createCipheriv = aes.createCipheriv;
    exports.Decipher = aes.Decipher;
    exports.createDecipher = aes.createDecipher;
    exports.Decipheriv = aes.Decipheriv;
    exports.createDecipheriv = aes.createDecipheriv;
    exports.getCiphers = aes.getCiphers;
    exports.listCiphers = aes.listCiphers;
    var dh = require("diffie-hellman");
    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
    exports.getDiffieHellman = dh.getDiffieHellman;
    exports.createDiffieHellman = dh.createDiffieHellman;
    exports.DiffieHellman = dh.DiffieHellman;
    var sign = require("browserify-sign");
    exports.createSign = sign.createSign;
    exports.Sign = sign.Sign;
    exports.createVerify = sign.createVerify;
    exports.Verify = sign.Verify;
    exports.createECDH = require("create-ecdh");
    var publicEncrypt = require("public-encrypt");
    exports.publicEncrypt = publicEncrypt.publicEncrypt;
    exports.privateEncrypt = publicEncrypt.privateEncrypt;
    exports.publicDecrypt = publicEncrypt.publicDecrypt;
    exports.privateDecrypt = publicEncrypt.privateDecrypt;
    var rf = require("randomfill");
    exports.randomFill = rf.randomFill;
    exports.randomFillSync = rf.randomFillSync;
    exports.createCredentials = function() {
      throw new Error([ "sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify" ].join("\n"));
    };
    exports.constants = {
      DH_CHECK_P_NOT_SAFE_PRIME: 2,
      DH_CHECK_P_NOT_PRIME: 1,
      DH_UNABLE_TO_CHECK_GENERATOR: 4,
      DH_NOT_SUITABLE_GENERATOR: 8,
      NPN_ENABLED: 1,
      ALPN_ENABLED: 1,
      RSA_PKCS1_PADDING: 1,
      RSA_SSLV23_PADDING: 2,
      RSA_NO_PADDING: 3,
      RSA_PKCS1_OAEP_PADDING: 4,
      RSA_X931_PADDING: 5,
      RSA_PKCS1_PSS_PADDING: 6,
      POINT_CONVERSION_COMPRESSED: 2,
      POINT_CONVERSION_UNCOMPRESSED: 4,
      POINT_CONVERSION_HYBRID: 6
    };
  }, {
    "browserify-cipher": 36,
    "browserify-sign": 43,
    "browserify-sign/algos": 40,
    "create-ecdh": 51,
    "create-hash": 52,
    "create-hmac": 54,
    "diffie-hellman": 63,
    pbkdf2: 112,
    "public-encrypt": 119,
    randombytes: 125,
    randomfill: 126
  } ],
  57: [ function(require, module, exports) {
    "use strict";
    exports.utils = require("./des/utils");
    exports.Cipher = require("./des/cipher");
    exports.DES = require("./des/des");
    exports.CBC = require("./des/cbc");
    exports.EDE = require("./des/ede");
  }, {
    "./des/cbc": 58,
    "./des/cipher": 59,
    "./des/des": 60,
    "./des/ede": 61,
    "./des/utils": 62
  } ],
  58: [ function(require, module, exports) {
    "use strict";
    var assert = require("minimalistic-assert");
    var inherits = require("inherits");
    var proto = {};
    function CBCState(iv) {
      assert.equal(iv.length, 8, "Invalid IV length");
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++) this.iv[i] = iv[i];
    }
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
      CBC.create = function create(options) {
        return new CBC(options);
      };
      return CBC;
    }
    exports.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;
      if ("encrypt" === this.type) {
        for (var i = 0; i < this.blockSize; i++) iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i = 0; i < this.blockSize; i++) iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i = 0; i < this.blockSize; i++) out[outOff + i] ^= iv[i];
        for (var i = 0; i < this.blockSize; i++) iv[i] = inp[inOff + i];
      }
    };
  }, {
    inherits: 101,
    "minimalistic-assert": 105
  } ],
  59: [ function(require, module, exports) {
    "use strict";
    var assert = require("minimalistic-assert");
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;
    Cipher.prototype._init = function _init() {};
    Cipher.prototype.update = function update(data) {
      if (0 === data.length) return [];
      return "decrypt" === this.type ? this._updateDecrypt(data) : this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++) this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
      return min;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (0 !== this.bufferOff) {
        inputOff += this._buffer(data, inputOff);
        this.bufferOff === this.buffer.length && (outputOff += this._flushBuffer(out, outputOff));
      }
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (;inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (;inputOff < data.length; inputOff++, this.bufferOff++) this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (;count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer) {
      var first;
      buffer && (first = this.update(buffer));
      var last;
      last = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt();
      return first ? first.concat(last) : last;
    };
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (0 === off) return false;
      while (off < buffer.length) buffer[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff)) return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
  }, {
    "minimalistic-assert": 105
  } ],
  60: [ function(require, module, exports) {
    "use strict";
    var assert = require("minimalistic-assert");
    var inherits = require("inherits");
    var des = require("../des");
    var utils = des.utils;
    var Cipher = des.Cipher;
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    function DES(options) {
      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module.exports = DES;
    DES.create = function create(options) {
      return new DES(options);
    };
    var shiftTable = [ 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 ];
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(32);
      assert.equal(key.length, this.blockSize, "Invalid key length");
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      "encrypt" === this.type ? this._encrypt(state, l, r, state.tmp, 0) : this._decrypt(state, l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };
    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++) buffer[i] = value;
      return true;
    };
    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++) assert.equal(buffer[i], pad);
      return buffer.slice(0, buffer.length - pad);
    };
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }
      utils.rip(r, l, out, off);
    };
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }
      utils.rip(l, r, out, off);
    };
  }, {
    "../des": 57,
    inherits: 101,
    "minimalistic-assert": 105
  } ],
  61: [ function(require, module, exports) {
    "use strict";
    var assert = require("minimalistic-assert");
    var inherits = require("inherits");
    var des = require("../des");
    var Cipher = des.Cipher;
    var DES = des.DES;
    function EDEState(type, key) {
      assert.equal(key.length, 24, "Invalid key length");
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
      this.ciphers = "encrypt" === type ? [ DES.create({
        type: "encrypt",
        key: k1
      }), DES.create({
        type: "decrypt",
        key: k2
      }), DES.create({
        type: "encrypt",
        key: k3
      }) ] : [ DES.create({
        type: "decrypt",
        key: k3
      }), DES.create({
        type: "encrypt",
        key: k2
      }), DES.create({
        type: "decrypt",
        key: k1
      }) ];
    }
    function EDE(options) {
      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);
    module.exports = EDE;
    EDE.create = function create(options) {
      return new EDE(options);
    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
  }, {
    "../des": 57,
    inherits: 101,
    "minimalistic-assert": 105
  } ],
  62: [ function(require, module, exports) {
    "use strict";
    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };
    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 255;
      bytes[2 + off] = value >>> 8 & 255;
      bytes[3 + off] = 255 & value;
    };
    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 0; i < 4; i++) for (var j = 24; j >= 0; j -= 8) {
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
      }
      for (var i = 4; i < 8; i++) for (var j = 24; j >= 0; j -= 8) {
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      }
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.r28shl = function r28shl(num, shift) {
      return num << shift & 268435455 | num >>> 28 - shift;
    };
    var pc2table = [ 14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24 ];
    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (1 & r) << 5 | r >>> 27;
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r >>> i & 63;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= r >>> i & 63;
        outR <<= 6;
      }
      outR |= (31 & r) << 1 | r >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    var sTable = [ 14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11 ];
    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - 6 * i & 63;
        var sb = sTable[64 * i + b];
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - 6 * i & 63;
        var sb = sTable[256 + 64 * i + b];
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    var permuteTable = [ 16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7 ];
    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
      }
      return out >>> 0;
    };
    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size) str = "0" + str;
      var out = [];
      for (var i = 0; i < size; i += group) out.push(str.slice(i, i + group));
      return out.join(" ");
    };
  }, {} ],
  63: [ function(require, module, exports) {
    (function(Buffer) {
      var generatePrime = require("./lib/generatePrime");
      var primes = require("./lib/primes.json");
      var DH = require("./lib/dh");
      function getDiffieHellman(mod) {
        var prime = new Buffer(primes[mod].prime, "hex");
        var gen = new Buffer(primes[mod].gen, "hex");
        return new DH(prime, gen);
      }
      var ENCODINGS = {
        binary: true,
        hex: true,
        base64: true
      };
      function createDiffieHellman(prime, enc, generator, genc) {
        if (Buffer.isBuffer(enc) || void 0 === ENCODINGS[enc]) return createDiffieHellman(prime, "binary", enc, generator);
        enc = enc || "binary";
        genc = genc || "binary";
        generator = generator || new Buffer([ 2 ]);
        Buffer.isBuffer(generator) || (generator = new Buffer(generator, genc));
        if ("number" === typeof prime) return new DH(generatePrime(prime, generator), generator, true);
        Buffer.isBuffer(prime) || (prime = new Buffer(prime, enc));
        return new DH(prime, generator, true);
      }
      exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
      exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
    }).call(this, require("buffer").Buffer);
  }, {
    "./lib/dh": 64,
    "./lib/generatePrime": 65,
    "./lib/primes.json": 66,
    buffer: 47
  } ],
  64: [ function(require, module, exports) {
    (function(Buffer) {
      var BN = require("bn.js");
      var MillerRabin = require("miller-rabin");
      var millerRabin = new MillerRabin();
      var TWENTYFOUR = new BN(24);
      var ELEVEN = new BN(11);
      var TEN = new BN(10);
      var THREE = new BN(3);
      var SEVEN = new BN(7);
      var primes = require("./generatePrime");
      var randomBytes = require("randombytes");
      module.exports = DH;
      function setPublicKey(pub, enc) {
        enc = enc || "utf8";
        Buffer.isBuffer(pub) || (pub = new Buffer(pub, enc));
        this._pub = new BN(pub);
        return this;
      }
      function setPrivateKey(priv, enc) {
        enc = enc || "utf8";
        Buffer.isBuffer(priv) || (priv = new Buffer(priv, enc));
        this._priv = new BN(priv);
        return this;
      }
      var primeCache = {};
      function checkPrime(prime, generator) {
        var gen = generator.toString("hex");
        var hex = [ gen, prime.toString(16) ].join("_");
        if (hex in primeCache) return primeCache[hex];
        var error = 0;
        if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
          error += 1;
          error += "02" === gen || "05" === gen ? 8 : 4;
          primeCache[hex] = error;
          return error;
        }
        millerRabin.test(prime.shrn(1)) || (error += 2);
        var rem;
        switch (gen) {
         case "02":
          prime.mod(TWENTYFOUR).cmp(ELEVEN) && (error += 8);
          break;

         case "05":
          rem = prime.mod(TEN);
          rem.cmp(THREE) && rem.cmp(SEVEN) && (error += 8);
          break;

         default:
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      function DH(prime, generator, malleable) {
        this.setGenerator(generator);
        this.__prime = new BN(prime);
        this._prime = BN.mont(this.__prime);
        this._primeLen = prime.length;
        this._pub = void 0;
        this._priv = void 0;
        this._primeCode = void 0;
        if (malleable) {
          this.setPublicKey = setPublicKey;
          this.setPrivateKey = setPrivateKey;
        } else this._primeCode = 8;
      }
      Object.defineProperty(DH.prototype, "verifyError", {
        enumerable: true,
        get: function() {
          "number" !== typeof this._primeCode && (this._primeCode = checkPrime(this.__prime, this.__gen));
          return this._primeCode;
        }
      });
      DH.prototype.generateKeys = function() {
        this._priv || (this._priv = new BN(randomBytes(this._primeLen)));
        this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
        return this.getPublicKey();
      };
      DH.prototype.computeSecret = function(other) {
        other = new BN(other);
        other = other.toRed(this._prime);
        var secret = other.redPow(this._priv).fromRed();
        var out = new Buffer(secret.toArray());
        var prime = this.getPrime();
        if (out.length < prime.length) {
          var front = new Buffer(prime.length - out.length);
          front.fill(0);
          out = Buffer.concat([ front, out ]);
        }
        return out;
      };
      DH.prototype.getPublicKey = function getPublicKey(enc) {
        return formatReturnValue(this._pub, enc);
      };
      DH.prototype.getPrivateKey = function getPrivateKey(enc) {
        return formatReturnValue(this._priv, enc);
      };
      DH.prototype.getPrime = function(enc) {
        return formatReturnValue(this.__prime, enc);
      };
      DH.prototype.getGenerator = function(enc) {
        return formatReturnValue(this._gen, enc);
      };
      DH.prototype.setGenerator = function(gen, enc) {
        enc = enc || "utf8";
        Buffer.isBuffer(gen) || (gen = new Buffer(gen, enc));
        this.__gen = gen;
        this._gen = new BN(gen);
        return this;
      };
      function formatReturnValue(bn, enc) {
        var buf = new Buffer(bn.toArray());
        return enc ? buf.toString(enc) : buf;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "./generatePrime": 65,
    "bn.js": 16,
    buffer: 47,
    "miller-rabin": 104,
    randombytes: 125
  } ],
  65: [ function(require, module, exports) {
    var randomBytes = require("randombytes");
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require("bn.js");
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require("miller-rabin");
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;
    function _getPrimes() {
      if (null !== primes) return primes;
      var limit = 1048576;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++) if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
      }
      primes = res;
      return res;
    }
    function simpleSieve(p) {
      var primes = _getPrimes();
      for (var i = 0; i < primes.length; i++) if (0 === p.modn(primes[i])) return 0 === p.cmpn(primes[i]);
      return true;
    }
    function fermatTest(p) {
      var red = BN.mont(p);
      return 0 === TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1);
    }
    function findPrime(bits, gen) {
      if (bits < 16) return new BN(2 === gen || 5 === gen ? [ 140, 123 ] : [ 140, 39 ]);
      gen = new BN(gen);
      var num, n2;
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) num.ishrn(1);
        num.isEven() && num.iadd(ONE);
        num.testn(1) || num.iadd(TWO);
        if (gen.cmp(TWO)) {
          if (!gen.cmp(FIVE)) while (num.mod(TEN).cmp(THREE)) num.iadd(FOUR);
        } else while (num.mod(TWENTYFOUR).cmp(ELEVEN)) num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
      }
    }
  }, {
    "bn.js": 16,
    "miller-rabin": 104,
    randombytes: 125
  } ],
  66: [ function(require, module, exports) {
    module.exports = {
      modp1: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      modp2: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      modp5: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      modp14: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      modp15: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      modp16: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      modp17: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      modp18: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
  }, {} ],
  67: [ function(require, module, exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = require("../package.json").version;
    elliptic.utils = require("./elliptic/utils");
    elliptic.rand = require("brorand");
    elliptic.curve = require("./elliptic/curve");
    elliptic.curves = require("./elliptic/curves");
    elliptic.ec = require("./elliptic/ec");
    elliptic.eddsa = require("./elliptic/eddsa");
  }, {
    "../package.json": 82,
    "./elliptic/curve": 70,
    "./elliptic/curves": 73,
    "./elliptic/ec": 74,
    "./elliptic/eddsa": 77,
    "./elliptic/utils": 81,
    brorand: 17
  } ],
  68: [ function(require, module, exports) {
    "use strict";
    var BN = require("bn.js");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null; else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          nafW === i ? b = b.mixedAdd(doubles.points[j]) : nafW === -i && (b = b.mixedAdd(doubles.points[j].neg()));
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var k = 0; i >= 0 && 0 === naf[i]; i--) k++;
        i >= 0 && k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        var z = naf[i];
        assert(0 !== z);
        acc = "affine" === p.type ? z > 0 ? acc.mixedAdd(wnd[z - 1 >> 1]) : acc.mixedAdd(wnd[-z - 1 >> 1].neg()) : z > 0 ? acc.add(wnd[z - 1 >> 1]) : acc.add(wnd[-z - 1 >> 1].neg());
      }
      return "affine" === p.type ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (1 !== wndWidth[a] || 1 !== wndWidth[b]) {
          naf[a] = getNAF(coeffs[a], wndWidth[a]);
          naf[b] = getNAF(coeffs[b], wndWidth[b]);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [ points[a], null, null, points[b] ];
        if (0 === points[a].y.cmp(points[b].y)) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (0 === points[a].y.cmp(points[b].y.redNeg())) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
          var ja = 0 | jsf[0][j];
          var jb = 0 | jsf[1][j];
          naf[a][j] = index[3 * (ja + 1) + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (var i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (var j = 0; j < len; j++) {
            tmp[j] = 0 | naf[j][i];
            0 !== tmp[j] && (zero = false);
          }
          if (!zero) break;
          k++;
          i--;
        }
        i >= 0 && k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (0 === z) continue;
          z > 0 ? p = wnd[j][z - 1 >> 1] : z < 0 && (p = wnd[j][-z - 1 >> 1].neg());
          acc = "affine" === p.type ? acc.mixedAdd(p) : acc.add(p);
        }
      }
      for (var i = 0; i < len; i++) wnd[i] = null;
      return jacobianResult ? acc : acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((4 === bytes[0] || 6 === bytes[0] || 7 === bytes[0]) && bytes.length - 1 === 2 * len) {
        6 === bytes[0] ? assert(bytes[bytes.length - 1] % 2 === 0) : 7 === bytes[0] && assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      }
      if ((2 === bytes[0] || 3 === bytes[0]) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), 3 === bytes[0]);
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact) return [ this.getY().isEven() ? 2 : 3 ].concat(x);
      return [ 4 ].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed) return false;
      var doubles = this.precomputed.doubles;
      if (!doubles) return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = 1 === max ? null : this.dbl();
      for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++) r = r.dbl();
      return r;
    };
  }, {
    "../../elliptic": 67,
    "bn.js": 16
  } ],
  69: [ function(require, module, exports) {
    "use strict";
    var curve = require("../curve");
    var elliptic = require("../../elliptic");
    var BN = require("bn.js");
    var inherits = require("inherits");
    var Base = curve.base;
    var assert = elliptic.utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = 1 !== (0 | conf.a);
      this.mOneA = this.twisted && -1 === (0 | conf.a);
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || 0 === this.c.fromRed().cmpn(1));
      this.oneC = 1 === (0 | conf.c);
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      return this.mOneA ? num.redNeg() : this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      return this.oneC ? num : this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      x.red || (x = x.toRed(this.red));
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (0 !== y.redSqr().redSub(y2).cmp(this.zero)) throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      (odd && !isOdd || !odd && isOdd) && (y = y.redNeg());
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      y.red || (y = y.toRed(this.red));
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.one);
      var rhs = y2.redMul(this.d).redAdd(this.one);
      var x2 = lhs.redMul(rhs.redInvm());
      if (0 === x2.cmp(this.zero)) {
        if (odd) throw new Error("invalid point");
        return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (0 !== x.redSqr().redSub(x2).cmp(this.zero)) throw new Error("invalid point");
      x.isOdd() !== odd && (x = x.redNeg());
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity()) return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return 0 === lhs.cmp(rhs);
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (null === x && null === y && null === z) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        this.x.red || (this.x = this.x.toRed(this.curve.red));
        this.y.red || (this.y = this.y.toRed(this.curve.red));
        this.z.red || (this.z = this.z.toRed(this.curve.red));
        this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red));
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          this.zOne || (this.t = this.t.redMul(this.z.redInvm()));
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return 0 === this.x.cmpn(0) && 0 === this.y.cmp(this.z);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      if (this.curve.twisted) {
        var e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          var h = this.z.redSqr();
          var j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        var e = c.redAdd(d);
        var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
        var j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      return this.curve.extended ? this._extDbl() : this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;
      return this.curve.extended ? this._extAdd(p) : this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      return this._hasDoubles(k) ? this.curve._fixedNafMul(this, k) : this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne) return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      this.t && (this.t = this.t.redMul(zi));
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || 0 === this.getX().cmp(other.getX()) && 0 === this.getY().cmp(other.getY());
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (0 === this.x.cmp(rx)) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (0 === this.x.cmp(rx)) return true;
      }
      return false;
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }, {
    "../../elliptic": 67,
    "../curve": 70,
    "bn.js": 16,
    inherits: 101
  } ],
  70: [ function(require, module, exports) {
    "use strict";
    var curve = exports;
    curve.base = require("./base");
    curve.short = require("./short");
    curve.mont = require("./mont");
    curve.edwards = require("./edwards");
  }, {
    "./base": 68,
    "./edwards": 69,
    "./mont": 71,
    "./short": 72
  } ],
  71: [ function(require, module, exports) {
    "use strict";
    var curve = require("../curve");
    var BN = require("bn.js");
    var inherits = require("inherits");
    var Base = curve.base;
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return 0 === y.redSqr().cmp(rhs);
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (null === x && null === z) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        this.x.red || (this.x = this.x.toRed(this.curve.red));
        this.z.red || (this.z = this.z.toRed(this.curve.red));
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {};
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return 0 === this.z.cmpn(0);
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; 0 !== t.cmpn(0); t.iushrn(1)) bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) if (0 === bits[i]) {
        a = a.diffAdd(b, c);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c);
        a = a.dbl();
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return 0 === this.getX().cmp(other.getX());
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }, {
    "../../elliptic": 67,
    "../curve": 70,
    "bn.js": 16,
    inherits: 101
  } ],
  72: [ function(require, module, exports) {
    "use strict";
    var curve = require("../curve");
    var elliptic = require("../../elliptic");
    var BN = require("bn.js");
    var inherits = require("inherits");
    var Base = curve.base;
    var assert = elliptic.utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = 0 === this.a.fromRed().cmpn(0);
      this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3);
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || 1 !== this.p.modn(3)) return;
      var beta;
      var lambda;
      if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red); else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) lambda = new BN(conf.lambda, 16); else {
        var lambdas = this._getEndoRoots(this.n);
        if (0 === this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta))) lambda = lambdas[0]; else {
          lambda = lambdas[1];
          assert(0 === this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)));
        }
      }
      var basis;
      basis = conf.basis ? conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      }) : this._getEndoBasis(lambda);
      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (0 !== u.cmpn(0)) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && 2 === ++i) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [ {
        a: a1,
        b: b1
      }, {
        a: a2,
        b: b2
      } ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return {
        k1: k1,
        k2: k2
      };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      x.red || (x = x.toRed(this.red));
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (0 !== y.redSqr().redSub(y2).cmp(this.zero)) throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      (odd && !isOdd || !odd && isOdd) && (y = y.redNeg());
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf) return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return 0 === y.redSqr().redISub(rhs).cmpn(0);
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[2 * i] = p;
        npoints[2 * i + 1] = beta;
        ncoeffs[2 * i] = split.k1;
        ncoeffs[2 * i + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, 2 * i, jacobianResult);
      for (var j = 0; j < 2 * i; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (null === x && null === y) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        this.x.red || (this.x = this.x.toRed(this.curve.red));
        this.y.red || (this.y = this.y.toRed(this.curve.red));
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;
      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed) return [ this.x, this.y ];
      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      } ];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      "string" === typeof obj && (obj = JSON.parse(obj));
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) return res;
      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf) return p;
      if (p.inf) return this;
      if (this.eq(p)) return this.dbl();
      if (this.neg().eq(p)) return this.curve.point(null, null);
      if (0 === this.x.cmp(p.x)) return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      0 !== c.cmpn(0) && (c = c.redMul(this.x.redSub(p.x).redInvm()));
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf) return this;
      var ys1 = this.y.redAdd(this.y);
      if (0 === ys1.cmpn(0)) return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      return this._hasDoubles(k) ? this.curve._fixedNafMul(this, k) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ k ]) : this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      return this.curve.endo ? this.curve._endoWnafMulAdd(points, coeffs) : this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      return this.curve.endo ? this.curve._endoWnafMulAdd(points, coeffs, true) : this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || 0 === this.x.cmp(p.x) && 0 === this.y.cmp(p.y));
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (null === x && null === y && null === z) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      this.x.red || (this.x = this.x.toRed(this.curve.red));
      this.y.red || (this.y = this.y.toRed(this.curve.red));
      this.z.red || (this.z = this.z.toRed(this.curve.red));
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (0 === h.cmpn(0)) return 0 !== r.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity()) return p.toJ();
      if (p.isInfinity()) return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (0 === h.cmpn(0)) return 0 !== r.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (0 === pow) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++) r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        i + 1 < pow && (jz4 = jz4.redMul(jyd4));
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      return this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if ("affine" === p.type) return this.eq(p.toJ());
      if (this === p) return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (0 !== this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0)) return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return 0 === this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0);
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (0 === this.x.cmp(rx)) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (0 === this.x.cmp(rx)) return true;
      }
      return false;
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return 0 === this.z.cmpn(0);
    };
  }, {
    "../../elliptic": 67,
    "../curve": 70,
    "bn.js": 16,
    inherits: 101
  } ],
  73: [ function(require, module, exports) {
    "use strict";
    var curves = exports;
    var hash = require("hash.js");
    var elliptic = require("../elliptic");
    var assert = elliptic.utils.assert;
    function PresetCurve(options) {
      "short" === options.type ? this.curve = new elliptic.curve.short(options) : "edwards" === options.type ? this.curve = new elliptic.curve.edwards(options) : this.curve = new elliptic.curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
          return curve;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash.sha256,
      gRed: false,
      g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash.sha256,
      gRed: false,
      g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash.sha256,
      gRed: false,
      g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash.sha384,
      gRed: false,
      g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash.sha512,
      gRed: false,
      g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [ "9" ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
    });
    var pre;
    try {
      pre = require("./precomputed/secp256k1");
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash.sha256,
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [ {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      }, {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      } ],
      gRed: false,
      g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre ]
    });
  }, {
    "../elliptic": 67,
    "./precomputed/secp256k1": 80,
    "hash.js": 86
  } ],
  74: [ function(require, module, exports) {
    "use strict";
    var BN = require("bn.js");
    var HmacDRBG = require("hmac-drbg");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    var KeyPair = require("./key");
    var Signature = require("./signature");
    function EC(options) {
      if (!(this instanceof EC)) return new EC(options);
      if ("string" === typeof options) {
        assert(elliptic.curves.hasOwnProperty(options), "Unknown curve " + options);
        options = elliptic.curves[options];
      }
      options instanceof elliptic.curves.PresetCurve && (options = {
        curve: options
      });
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      options || (options = {});
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      } while (true);
    };
    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
      var delta = 8 * msg.byteLength() - this.n.bitLength();
      delta > 0 && (msg = msg.ushrn(delta));
      return !truncOnly && msg.cmp(this.n) >= 0 ? msg.sub(this.n) : msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if ("object" === typeof enc) {
        options = enc;
        enc = null;
      }
      options || (options = {});
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; true; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (0 === r.cmpn(0)) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (0 === s.cmpn(0)) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (0 !== kpX.cmp(r) ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({
          r: r,
          s: s,
          recoveryParam: recoveryParam
        });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return 0 === p.getX().umod(this.n).cmp(r);
      }
      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = 1 & j;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
      r = isSecondKey ? this.curve.pointFromX(r.add(this.curve.n), isYOdd) : this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (null !== signature.recoveryParam) return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }
        if (Qprime.eq(Q)) return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }, {
    "../../elliptic": 67,
    "./key": 75,
    "./signature": 76,
    "bn.js": 16,
    "hmac-drbg": 98
  } ],
  75: [ function(require, module, exports) {
    "use strict";
    var BN = require("bn.js");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      options.priv && this._importPrivate(options.priv, options.privEnc);
      options.pub && this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair) return priv;
      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
      };
      if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
      };
      if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
      };
      return {
        result: true,
        reason: null
      };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if ("string" === typeof compact) {
        enc = compact;
        compact = null;
      }
      this.pub || (this.pub = this.ec.g.mul(this.priv));
      if (!enc) return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      return "hex" === enc ? this.priv.toString(16, 2) : this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        "mont" === this.ec.curve.type ? assert(key.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }, {
    "../../elliptic": 67,
    "bn.js": 16
  } ],
  76: [ function(require, module, exports) {
    "use strict";
    var BN = require("bn.js");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature) return options;
      if (this._importDER(options, enc)) return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      void 0 === options.recoveryParam ? this.recoveryParam = null : this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(128 & initial)) return initial;
      var octetLen = 15 & initial;
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(128 & buf[i + 1]) && i < len) i++;
      if (0 === i) return buf;
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (48 !== data[p.place++]) return false;
      var len = getLength(data, p);
      if (len + p.place !== data.length) return false;
      if (2 !== data[p.place++]) return false;
      var rlen = getLength(data, p);
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (2 !== data[p.place++]) return false;
      var slen = getLength(data, p);
      if (data.length !== slen + p.place) return false;
      var s = data.slice(p.place, slen + p.place);
      0 === r[0] && 128 & r[1] && (r = r.slice(1));
      0 === s[0] && 128 & s[1] && (s = s.slice(1));
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(128 | octets);
      while (--octets) arr.push(len >>> (octets << 3) & 255);
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      128 & r[0] && (r = [ 0 ].concat(r));
      128 & s[0] && (s = [ 0 ].concat(s));
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(128 & s[1])) s = s.slice(1);
      var arr = [ 2 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 48 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }, {
    "../../elliptic": 67,
    "bn.js": 16
  } ],
  77: [ function(require, module, exports) {
    "use strict";
    var hash = require("hash.js");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require("./key");
    var Signature = require("./signature");
    function EDDSA(curve) {
      assert("ed25519" === curve, "only tested with ed25519 so far");
      if (!(this instanceof EDDSA)) return new EDDSA(curve);
      var curve = elliptic.curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
      });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature) return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(-129 & bytes[lastIx]);
      var xIsOdd = 0 !== (128 & bytes[lastIx]);
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }, {
    "../../elliptic": 67,
    "./key": 78,
    "./signature": 79,
    "hash.js": 86
  } ],
  78: [ function(require, module, exports) {
    "use strict";
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      eddsa.isPoint(params.pub) ? this._pub = params.pub : this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(eddsa, {
        pub: pub
      });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair) return secret;
      return new KeyPair(eddsa, {
        secret: secret
      });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair;
  }, {
    "../../elliptic": 67
  } ],
  79: [ function(require, module, exports) {
    "use strict";
    var BN = require("bn.js");
    var elliptic = require("../../elliptic");
    var utils = elliptic.utils;
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      "object" !== typeof sig && (sig = parseBytes(sig));
      Array.isArray(sig) && (sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      });
      assert(sig.R && sig.S, "Signature without R or S");
      eddsa.isPoint(sig.R) && (this._R = sig.R);
      sig.S instanceof BN && (this._S = sig.S);
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature;
  }, {
    "../../elliptic": 67,
    "bn.js": 16
  } ],
  80: [ function(require, module, exports) {
    module.exports = {
      doubles: {
        step: 4,
        points: [ [ "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821" ], [ "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf" ], [ "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695" ], [ "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9" ], [ "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36" ], [ "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f" ], [ "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999" ], [ "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09" ], [ "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d" ], [ "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088" ], [ "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d" ], [ "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8" ], [ "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a" ], [ "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453" ], [ "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160" ], [ "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0" ], [ "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6" ], [ "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589" ], [ "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17" ], [ "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda" ], [ "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd" ], [ "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2" ], [ "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6" ], [ "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f" ], [ "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01" ], [ "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3" ], [ "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f" ], [ "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7" ], [ "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78" ], [ "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1" ], [ "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150" ], [ "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82" ], [ "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc" ], [ "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b" ], [ "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51" ], [ "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45" ], [ "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120" ], [ "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84" ], [ "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d" ], [ "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d" ], [ "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8" ], [ "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8" ], [ "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac" ], [ "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f" ], [ "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962" ], [ "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907" ], [ "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec" ], [ "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d" ], [ "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414" ], [ "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd" ], [ "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0" ], [ "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811" ], [ "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1" ], [ "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c" ], [ "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73" ], [ "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd" ], [ "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405" ], [ "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589" ], [ "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e" ], [ "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27" ], [ "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1" ], [ "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482" ], [ "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945" ], [ "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573" ], [ "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82" ] ]
      },
      naf: {
        wnd: 7,
        points: [ [ "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672" ], [ "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6" ], [ "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da" ], [ "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37" ], [ "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b" ], [ "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81" ], [ "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58" ], [ "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77" ], [ "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a" ], [ "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c" ], [ "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67" ], [ "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402" ], [ "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55" ], [ "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482" ], [ "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82" ], [ "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396" ], [ "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49" ], [ "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf" ], [ "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a" ], [ "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7" ], [ "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933" ], [ "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a" ], [ "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6" ], [ "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37" ], [ "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e" ], [ "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6" ], [ "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476" ], [ "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40" ], [ "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61" ], [ "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683" ], [ "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5" ], [ "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b" ], [ "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417" ], [ "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868" ], [ "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a" ], [ "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6" ], [ "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996" ], [ "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e" ], [ "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d" ], [ "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2" ], [ "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e" ], [ "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437" ], [ "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311" ], [ "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4" ], [ "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575" ], [ "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d" ], [ "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d" ], [ "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629" ], [ "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06" ], [ "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374" ], [ "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee" ], [ "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1" ], [ "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b" ], [ "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661" ], [ "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6" ], [ "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e" ], [ "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d" ], [ "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc" ], [ "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4" ], [ "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c" ], [ "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b" ], [ "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913" ], [ "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154" ], [ "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865" ], [ "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc" ], [ "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224" ], [ "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e" ], [ "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6" ], [ "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511" ], [ "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b" ], [ "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2" ], [ "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c" ], [ "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3" ], [ "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d" ], [ "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700" ], [ "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4" ], [ "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196" ], [ "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4" ], [ "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257" ], [ "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13" ], [ "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096" ], [ "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38" ], [ "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f" ], [ "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448" ], [ "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a" ], [ "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4" ], [ "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437" ], [ "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7" ], [ "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d" ], [ "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a" ], [ "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54" ], [ "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77" ], [ "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517" ], [ "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10" ], [ "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125" ], [ "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e" ], [ "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1" ], [ "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2" ], [ "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423" ], [ "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8" ], [ "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758" ], [ "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375" ], [ "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d" ], [ "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec" ], [ "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0" ], [ "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c" ], [ "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4" ], [ "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f" ], [ "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649" ], [ "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826" ], [ "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5" ], [ "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87" ], [ "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b" ], [ "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc" ], [ "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c" ], [ "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f" ], [ "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a" ], [ "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46" ], [ "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f" ], [ "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03" ], [ "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08" ], [ "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8" ], [ "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373" ], [ "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3" ], [ "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8" ], [ "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1" ], [ "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9" ] ]
      }
    };
  }, {} ],
  81: [ function(require, module, exports) {
    "use strict";
    var utils = exports;
    var BN = require("bn.js");
    var minAssert = require("minimalistic-assert");
    var minUtils = require("minimalistic-crypto-utils");
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w) {
      var naf = [];
      var ws = 1 << w + 1;
      var k = num.clone();
      while (k.cmpn(1) >= 0) {
        var z;
        if (k.isOdd()) {
          var mod = k.andln(ws - 1);
          z = mod > (ws >> 1) - 1 ? (ws >> 1) - mod : mod;
          k.isubn(z);
        } else z = 0;
        naf.push(z);
        var shift = 0 !== k.cmpn(0) && 0 === k.andln(ws - 1) ? w + 1 : 1;
        for (var i = 1; i < shift; i++) naf.push(0);
        k.iushrn(shift);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [ [], [] ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        3 === m14 && (m14 = -1);
        3 === m24 && (m24 = -1);
        var u1;
        if (0 === (1 & m14)) u1 = 0; else {
          var m8 = k1.andln(7) + d1 & 7;
          u1 = 3 !== m8 && 5 !== m8 || 2 !== m24 ? m14 : -m14;
        }
        jsf[0].push(u1);
        var u2;
        if (0 === (1 & m24)) u2 = 0; else {
          var m8 = k2.andln(7) + d2 & 7;
          u2 = 3 !== m8 && 5 !== m8 || 2 !== m14 ? m24 : -m24;
        }
        jsf[1].push(u2);
        2 * d1 === u1 + 1 && (d1 = 1 - d1);
        2 * d2 === u2 + 1 && (d2 = 1 - d2);
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty() {
        return void 0 !== this[key] ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return "string" === typeof bytes ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }, {
    "bn.js": 16,
    "minimalistic-assert": 105,
    "minimalistic-crypto-utils": 106
  } ],
  82: [ function(require, module, exports) {
    module.exports = {
      _args: [ [ {
        raw: "elliptic@^6.0.0",
        scope: null,
        escapedName: "elliptic",
        name: "elliptic",
        rawSpec: "^6.0.0",
        spec: ">=6.0.0 <7.0.0",
        type: "range"
      }, "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/browserify-sign" ] ],
      _cnpm_publish_time: 1487798867116,
      _from: "elliptic@^6.0.0",
      _hasShrinkwrap: false,
      _id: "elliptic@6.4.0",
      _location: "/elliptic",
      _nodeVersion: "7.0.0",
      _npmOperationalInternal: {
        host: "packages-18-east.internal.npmjs.com",
        tmp: "tmp/elliptic-6.4.0.tgz_1487798866428_0.30510620190761983"
      },
      _npmUser: {
        name: "indutny",
        email: "fedor@indutny.com"
      },
      _npmVersion: "3.10.8",
      _phantomChildren: {},
      _requested: {
        raw: "elliptic@^6.0.0",
        scope: null,
        escapedName: "elliptic",
        name: "elliptic",
        rawSpec: "^6.0.0",
        spec: ">=6.0.0 <7.0.0",
        type: "range"
      },
      _requiredBy: [ "/browserify-sign", "/create-ecdh" ],
      _resolved: "http://registry.npm.taobao.org/elliptic/download/elliptic-6.4.0.tgz",
      _shasum: "cac9af8762c85836187003c8dfe193e5e2eae5df",
      _shrinkwrap: null,
      _spec: "elliptic@^6.0.0",
      _where: "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/browserify-sign",
      author: {
        name: "Fedor Indutny",
        email: "fedor@indutny.com"
      },
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      dependencies: {
        "bn.js": "^4.4.0",
        brorand: "^1.0.1",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.0",
        inherits: "^2.0.1",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.0"
      },
      description: "EC cryptography",
      devDependencies: {
        brfs: "^1.4.3",
        coveralls: "^2.11.3",
        grunt: "^0.4.5",
        "grunt-browserify": "^5.0.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-connect": "^1.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^1.0.1",
        "grunt-mocha-istanbul": "^3.0.1",
        "grunt-saucelabs": "^8.6.2",
        istanbul: "^0.4.2",
        jscs: "^2.9.0",
        jshint: "^2.6.0",
        mocha: "^2.1.0"
      },
      directories: {},
      dist: {
        shasum: "cac9af8762c85836187003c8dfe193e5e2eae5df",
        size: 41164,
        noattachment: false,
        tarball: "http://registry.npm.taobao.org/elliptic/download/elliptic-6.4.0.tgz"
      },
      files: [ "lib" ],
      gitHead: "6b0d2b76caae91471649c8e21f0b1d3ba0f96090",
      homepage: "https://github.com/indutny/elliptic",
      keywords: [ "EC", "Elliptic", "curve", "Cryptography" ],
      license: "MIT",
      main: "lib/elliptic.js",
      maintainers: [ {
        name: "indutny",
        email: "fedor@indutny.com"
      } ],
      name: "elliptic",
      optionalDependencies: {},
      publish_time: 1487798867116,
      readme: "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic) [![Coverage Status](https://coveralls.io/repos/indutny/elliptic/badge.svg?branch=master&service=github)](https://coveralls.io/github/indutny/elliptic?branch=master) [![Code Climate](https://codeclimate.com/github/indutny/elliptic/badges/gpa.svg)](https://codeclimate.com/github/indutny/elliptic)\n\n[![Saucelabs Test Status](https://saucelabs.com/browser-matrix/gh-indutny-elliptic.svg)](https://saucelabs.com/u/gh-indutny-elliptic)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec ±0.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec ±0.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec ±0.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msg, derSign));\n\n// CHECK WITH NO PRIVATE KEY\n\n// Public key as '04 + x + y'\nvar pub = '04bb1fa3...';\n\n// Signature MUST be either:\n// 1) hex-string of DER-encoded signature; or\n// 2) DER-encoded signature as buffer; or\n// 3) object with two hex-string properties (r and s)\n\nvar signature = 'b102ac...'; // case 1\nvar signature = new Buffer('...'); // case 2\nvar signature = { r: 'b1fc...', s: '9c42...' }; // case 3\n\n// Import public key\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Verify signature\nconsole.log(key.verify(msg, signature));\n```\n\n### EdDSA\n\n```javascript\nvar EdDSA = require('elliptic').eddsa;\n\n// Create and initialize EdDSA context\n// (better do it once and reuse it)\nvar ec = new EdDSA('ed25519');\n\n// Create key pair from secret\nvar key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg).toHex();\n\n// Verify signature\nconsole.log(key.verify(msg, signature));\n\n// CHECK WITH NO PRIVATE KEY\n\n// Import public key\nvar pub = '0a1af638...';\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Verify signature\nvar signature = '70bed1...';\nconsole.log(key.verify(msg, signature));\n```\n\n### ECDH\n\n```javascript\nvar EC = require('elliptic').ec;\nvar ec = new EC('curve25519');\n\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nthree and more members:\n```javascript\nvar EC = require('elliptic').ec;\nvar ec = new EC('curve25519');\n\nvar A = ec.genKeyPair();\nvar B = ec.genKeyPair();\nvar C = ec.genKeyPair();\n\nvar AB = A.getPublic().mul(B.getPrivate())\nvar BC = B.getPublic().mul(C.getPrivate())\nvar CA = C.getPublic().mul(A.getPrivate())\n\nvar ABC = AB.mul(C.getPrivate())\nvar BCA = BC.mul(A.getPrivate())\nvar CAB = CA.mul(B.getPrivate())\n\nconsole.log(ABC.getX().toString(16))\nconsole.log(BCA.getX().toString(16))\nconsole.log(CAB.getX().toString(16))\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `p384`\n* `p521`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n### Related projects\n\n* [eccrypto][3]: isomorphic implementation of ECDSA, ECDH and ECIES for both\n  browserify and node (uses `elliptic` for browser and [secp256k1-node][4] for\n  node)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n[3]: https://github.com/bitchan/eccrypto\n[4]: https://github.com/wanderer/secp256k1-node\n",
      readmeFilename: "README.md",
      repository: {
        type: "git",
        url: "git+ssh://git@github.com/indutny/elliptic.git"
      },
      scripts: {
        jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        lint: "npm run jscs && npm run jshint",
        test: "npm run lint && npm run unit",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        version: "grunt dist && git add dist/"
      },
      version: "6.4.0"
    };
  }, {} ],
  83: [ function(require, module, exports) {
    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || void 0;
    }
    module.exports = EventEmitter;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._maxListeners = void 0;
    EventEmitter.defaultMaxListeners = 10;
    EventEmitter.prototype.setMaxListeners = function(n) {
      if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
      this._maxListeners = n;
      return this;
    };
    EventEmitter.prototype.emit = function(type) {
      var er, handler, len, args, i, listeners;
      this._events || (this._events = {});
      if ("error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) throw er;
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
        err.context = er;
        throw err;
      }
      handler = this._events[type];
      if (isUndefined(handler)) return false;
      if (isFunction(handler)) switch (arguments.length) {
       case 1:
        handler.call(this);
        break;

       case 2:
        handler.call(this, arguments[1]);
        break;

       case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;

       default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i = 0; i < len; i++) listeners[i].apply(this, args);
      }
      return true;
    };
    EventEmitter.prototype.addListener = function(type, listener) {
      var m;
      if (!isFunction(listener)) throw TypeError("listener must be a function");
      this._events || (this._events = {});
      this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
      this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [ this._events[type], listener ] : this._events[type] = listener;
      if (isObject(this._events[type]) && !this._events[type].warned) {
        m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners;
        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
          "function" === typeof console.trace && console.trace();
        }
      }
      return this;
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.once = function(type, listener) {
      if (!isFunction(listener)) throw TypeError("listener must be a function");
      var fired = false;
      function g() {
        this.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }
      g.listener = listener;
      this.on(type, g);
      return this;
    };
    EventEmitter.prototype.removeListener = function(type, listener) {
      var list, position, length, i;
      if (!isFunction(listener)) throw TypeError("listener must be a function");
      if (!this._events || !this._events[type]) return this;
      list = this._events[type];
      length = list.length;
      position = -1;
      if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];
        this._events.removeListener && this.emit("removeListener", type, listener);
      } else if (isObject(list)) {
        for (i = length; i-- > 0; ) if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          position = i;
          break;
        }
        if (position < 0) return this;
        if (1 === list.length) {
          list.length = 0;
          delete this._events[type];
        } else list.splice(position, 1);
        this._events.removeListener && this.emit("removeListener", type, listener);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function(type) {
      var key, listeners;
      if (!this._events) return this;
      if (!this._events.removeListener) {
        0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type];
        return this;
      }
      if (0 === arguments.length) {
        for (key in this._events) {
          if ("removeListener" === key) continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = {};
        return this;
      }
      listeners = this._events[type];
      if (isFunction(listeners)) this.removeListener(type, listeners); else if (listeners) while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
      delete this._events[type];
      return this;
    };
    EventEmitter.prototype.listeners = function(type) {
      var ret;
      ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [ this._events[type] ] : this._events[type].slice() : [];
      return ret;
    };
    EventEmitter.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type];
        if (isFunction(evlistener)) return 1;
        if (evlistener) return evlistener.length;
      }
      return 0;
    };
    EventEmitter.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type);
    };
    function isFunction(arg) {
      return "function" === typeof arg;
    }
    function isNumber(arg) {
      return "number" === typeof arg;
    }
    function isObject(arg) {
      return "object" === typeof arg && null !== arg;
    }
    function isUndefined(arg) {
      return void 0 === arg;
    }
  }, {} ],
  84: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    var MD5 = require("md5.js");
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      Buffer.isBuffer(password) || (password = Buffer.from(password, "binary"));
      if (salt) {
        Buffer.isBuffer(salt) || (salt = Buffer.from(salt, "binary"));
        if (8 !== salt.length) throw new RangeError("salt should be Buffer with 8 byte length");
      }
      var keyLen = keyBits / 8;
      var key = Buffer.alloc(keyLen);
      var iv = Buffer.alloc(ivLen || 0);
      var tmp = Buffer.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        salt && hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }
      tmp.fill(0);
      return {
        key: key,
        iv: iv
      };
    }
    module.exports = EVP_BytesToKey;
  }, {
    "md5.js": 103,
    "safe-buffer": 143
  } ],
  85: [ function(require, module, exports) {
    "use strict";
    var Buffer = require("safe-buffer").Buffer;
    var Transform = require("stream").Transform;
    var inherits = require("inherits");
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer.isBuffer(val) && "string" !== typeof val) throw new TypeError(prefix + " must be a string or a buffer");
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [ 0, 0, 0, 0 ];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      Buffer.isBuffer(data) || (data = Buffer.from(data, encoding));
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = 8 * data.length; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        carry > 0 && (this._length[j] -= 4294967296 * carry);
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      void 0 !== encoding && (digest = digest.toString(encoding));
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }, {
    inherits: 101,
    "safe-buffer": 143,
    stream: 152
  } ],
  86: [ function(require, module, exports) {
    var hash = exports;
    hash.utils = require("./hash/utils");
    hash.common = require("./hash/common");
    hash.sha = require("./hash/sha");
    hash.ripemd = require("./hash/ripemd");
    hash.hmac = require("./hash/hmac");
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }, {
    "./hash/common": 87,
    "./hash/hmac": 88,
    "./hash/ripemd": 89,
    "./hash/sha": 90,
    "./hash/utils": 97
  } ],
  87: [ function(require, module, exports) {
    "use strict";
    var utils = require("./utils");
    var assert = require("minimalistic-assert");
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      this.pending ? this.pending = this.pending.concat(msg) : this.pending = msg;
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        0 === this.pending.length && (this.pending = null);
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(null === this.pending);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++) res[i] = 0;
      len <<= 3;
      if ("big" === this.endian) {
        for (var t = 8; t < this.padLength; t++) res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = 255 & len;
      } else {
        res[i++] = 255 & len;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++) res[i++] = 0;
      }
      return res;
    };
  }, {
    "./utils": 97,
    "minimalistic-assert": 105
  } ],
  88: [ function(require, module, exports) {
    "use strict";
    var utils = require("./utils");
    var assert = require("minimalistic-assert");
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      key.length > this.blockSize && (key = new this.Hash().update(key).digest());
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++) key.push(0);
      for (i = 0; i < key.length; i++) key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++) key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }, {
    "./utils": 97,
    "minimalistic-assert": 105
  } ],
  89: [ function(require, module, exports) {
    "use strict";
    var utils = require("./utils");
    var common = require("./common");
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();
      BlockHash.call(this);
      this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h, "little") : utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      return j <= 15 ? x ^ y ^ z : j <= 31 ? x & y | ~x & z : j <= 47 ? (x | ~y) ^ z : j <= 63 ? x & z | y & ~z : x ^ (y | ~z);
    }
    function K(j) {
      return j <= 15 ? 0 : j <= 31 ? 1518500249 : j <= 47 ? 1859775393 : j <= 63 ? 2400959708 : 2840853838;
    }
    function Kh(j) {
      return j <= 15 ? 1352829926 : j <= 31 ? 1548603684 : j <= 47 ? 1836072691 : j <= 63 ? 2053994217 : 0;
    }
    var r = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ];
    var rh = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ];
    var s = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ];
    var sh = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
  }, {
    "./common": 87,
    "./utils": 97
  } ],
  90: [ function(require, module, exports) {
    "use strict";
    exports.sha1 = require("./sha/1");
    exports.sha224 = require("./sha/224");
    exports.sha256 = require("./sha/256");
    exports.sha384 = require("./sha/384");
    exports.sha512 = require("./sha/512");
  }, {
    "./sha/1": 91,
    "./sha/224": 92,
    "./sha/256": 93,
    "./sha/384": 94,
    "./sha/512": 95
  } ],
  91: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var common = require("../common");
    var shaCommon = require("./common");
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [ 1518500249, 1859775393, 2400959708, 3395469782 ];
    function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();
      BlockHash.call(this);
      this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (;i < W.length; i++) W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h, "big") : utils.split32(this.h, "big");
    };
  }, {
    "../common": 87,
    "../utils": 97,
    "./common": 96
  } ],
  92: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var SHA256 = require("./256");
    function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();
      SHA256.call(this);
      this.h = [ 3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428 ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h.slice(0, 7), "big") : utils.split32(this.h.slice(0, 7), "big");
    };
  }, {
    "../utils": 97,
    "./256": 93
  } ],
  93: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var common = require("../common");
    var shaCommon = require("./common");
    var assert = require("minimalistic-assert");
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
    function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();
      BlockHash.call(this);
      this.h = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (;i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h, "big") : utils.split32(this.h, "big");
    };
  }, {
    "../common": 87,
    "../utils": 97,
    "./common": 96,
    "minimalistic-assert": 105
  } ],
  94: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var SHA512 = require("./512");
    function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();
      SHA512.call(this);
      this.h = [ 3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428 ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h.slice(0, 12), "big") : utils.split32(this.h.slice(0, 12), "big");
    };
  }, {
    "../utils": 97,
    "./512": 95
  } ],
  95: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var common = require("../common");
    var assert = require("minimalistic-assert");
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
    function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();
      BlockHash.call(this);
      this.h = [ 1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++) W[i] = msg[start + i];
      for (;i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      return "hex" === enc ? utils.toHex32(this.h, "big") : utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      r < 0 && (r += 4294967296);
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      r < 0 && (r += 4294967296);
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      r < 0 && (r += 4294967296);
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      r < 0 && (r += 4294967296);
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      r < 0 && (r += 4294967296);
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      r < 0 && (r += 4294967296);
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      r < 0 && (r += 4294967296);
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      r < 0 && (r += 4294967296);
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      r < 0 && (r += 4294967296);
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      r < 0 && (r += 4294967296);
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      r < 0 && (r += 4294967296);
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      r < 0 && (r += 4294967296);
      return r;
    }
  }, {
    "../common": 87,
    "../utils": 97,
    "minimalistic-assert": 105
  } ],
  96: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (0 === s) return ch32(x, y, z);
      if (1 === s || 3 === s) return p32(x, y, z);
      if (2 === s) return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }, {
    "../utils": 97
  } ],
  97: [ function(require, module, exports) {
    "use strict";
    var assert = require("minimalistic-assert");
    var inherits = require("inherits");
    exports.inherits = inherits;
    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if ("string" === typeof msg) if (enc) {
        if ("hex" === enc) {
          msg = msg.replace(/[^a-z0-9]+/gi, "");
          msg.length % 2 !== 0 && (msg = "0" + msg);
          for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = 255 & c;
        hi ? res.push(hi, lo) : res.push(lo);
      } else for (i = 0; i < msg.length; i++) res[i] = 0 | msg[i];
      return res;
    }
    exports.toArray = toArray;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (255 & w) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        "little" === endian && (w = htonl(w));
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      return 1 === word.length ? "0" + word : word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      return 7 === word.length ? "0" + word : 6 === word.length ? "00" + word : 5 === word.length ? "000" + word : 4 === word.length ? "0000" + word : 3 === word.length ? "00000" + word : 2 === word.length ? "000000" + word : 1 === word.length ? "0000000" + word : word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        w = "big" === endian ? msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3] : msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(4 * msg.length);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if ("big" === endian) {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = 255 & m;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = 255 & m;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }, {
    inherits: 101,
    "minimalistic-assert": 105
  } ],
  98: [ function(require, module, exports) {
    "use strict";
    var hash = require("hash.js");
    var utils = require("minimalistic-crypto-utils");
    var assert = require("minimalistic-assert");
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([ 0 ]);
      seed && (kmac = kmac.update(seed));
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;
      this.K = this._hmac().update(this.V).update([ 1 ]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if ("string" !== typeof entropyEnc) {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
      if ("string" !== typeof enc) {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }, {
    "hash.js": 86,
    "minimalistic-assert": 105,
    "minimalistic-crypto-utils": 106
  } ],
  99: [ function(require, module, exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
      if (0 === e) e = 1 - eBias; else {
        if (e === eMax) return m ? NaN : Infinity * (s ? -1 : 1);
        m += Math.pow(2, mLen);
        e -= eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || Infinity === value) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e += eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
      e = e << mLen | m;
      eLen += mLen;
      for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
      buffer[offset + i - d] |= 128 * s;
    };
  }, {} ],
  100: [ function(require, module, exports) {
    var indexOf = [].indexOf;
    module.exports = function(arr, obj) {
      if (indexOf) return arr.indexOf(obj);
      for (var i = 0; i < arr.length; ++i) if (arr[i] === obj) return i;
      return -1;
    };
  }, {} ],
  101: [ function(require, module, exports) {
    "function" === typeof Object.create ? module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    } : module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }, {} ],
  102: [ function(require, module, exports) {
    module.exports = function(obj) {
      return null != obj && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && "function" === typeof obj.constructor.isBuffer && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return "function" === typeof obj.readFloatLE && "function" === typeof obj.slice && isBuffer(obj.slice(0, 0));
    }
  }, {} ],
  103: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      var inherits = require("inherits");
      var HashBase = require("hash-base");
      var ARRAY16 = new Array(16);
      function MD5() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
      }
      inherits(MD5, HashBase);
      MD5.prototype._update = function() {
        var M = ARRAY16;
        for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(4 * i);
        var a = this._a;
        var b = this._b;
        var c = this._c;
        var d = this._d;
        a = fnF(a, b, c, d, M[0], 3614090360, 7);
        d = fnF(d, a, b, c, M[1], 3905402710, 12);
        c = fnF(c, d, a, b, M[2], 606105819, 17);
        b = fnF(b, c, d, a, M[3], 3250441966, 22);
        a = fnF(a, b, c, d, M[4], 4118548399, 7);
        d = fnF(d, a, b, c, M[5], 1200080426, 12);
        c = fnF(c, d, a, b, M[6], 2821735955, 17);
        b = fnF(b, c, d, a, M[7], 4249261313, 22);
        a = fnF(a, b, c, d, M[8], 1770035416, 7);
        d = fnF(d, a, b, c, M[9], 2336552879, 12);
        c = fnF(c, d, a, b, M[10], 4294925233, 17);
        b = fnF(b, c, d, a, M[11], 2304563134, 22);
        a = fnF(a, b, c, d, M[12], 1804603682, 7);
        d = fnF(d, a, b, c, M[13], 4254626195, 12);
        c = fnF(c, d, a, b, M[14], 2792965006, 17);
        b = fnF(b, c, d, a, M[15], 1236535329, 22);
        a = fnG(a, b, c, d, M[1], 4129170786, 5);
        d = fnG(d, a, b, c, M[6], 3225465664, 9);
        c = fnG(c, d, a, b, M[11], 643717713, 14);
        b = fnG(b, c, d, a, M[0], 3921069994, 20);
        a = fnG(a, b, c, d, M[5], 3593408605, 5);
        d = fnG(d, a, b, c, M[10], 38016083, 9);
        c = fnG(c, d, a, b, M[15], 3634488961, 14);
        b = fnG(b, c, d, a, M[4], 3889429448, 20);
        a = fnG(a, b, c, d, M[9], 568446438, 5);
        d = fnG(d, a, b, c, M[14], 3275163606, 9);
        c = fnG(c, d, a, b, M[3], 4107603335, 14);
        b = fnG(b, c, d, a, M[8], 1163531501, 20);
        a = fnG(a, b, c, d, M[13], 2850285829, 5);
        d = fnG(d, a, b, c, M[2], 4243563512, 9);
        c = fnG(c, d, a, b, M[7], 1735328473, 14);
        b = fnG(b, c, d, a, M[12], 2368359562, 20);
        a = fnH(a, b, c, d, M[5], 4294588738, 4);
        d = fnH(d, a, b, c, M[8], 2272392833, 11);
        c = fnH(c, d, a, b, M[11], 1839030562, 16);
        b = fnH(b, c, d, a, M[14], 4259657740, 23);
        a = fnH(a, b, c, d, M[1], 2763975236, 4);
        d = fnH(d, a, b, c, M[4], 1272893353, 11);
        c = fnH(c, d, a, b, M[7], 4139469664, 16);
        b = fnH(b, c, d, a, M[10], 3200236656, 23);
        a = fnH(a, b, c, d, M[13], 681279174, 4);
        d = fnH(d, a, b, c, M[0], 3936430074, 11);
        c = fnH(c, d, a, b, M[3], 3572445317, 16);
        b = fnH(b, c, d, a, M[6], 76029189, 23);
        a = fnH(a, b, c, d, M[9], 3654602809, 4);
        d = fnH(d, a, b, c, M[12], 3873151461, 11);
        c = fnH(c, d, a, b, M[15], 530742520, 16);
        b = fnH(b, c, d, a, M[2], 3299628645, 23);
        a = fnI(a, b, c, d, M[0], 4096336452, 6);
        d = fnI(d, a, b, c, M[7], 1126891415, 10);
        c = fnI(c, d, a, b, M[14], 2878612391, 15);
        b = fnI(b, c, d, a, M[5], 4237533241, 21);
        a = fnI(a, b, c, d, M[12], 1700485571, 6);
        d = fnI(d, a, b, c, M[3], 2399980690, 10);
        c = fnI(c, d, a, b, M[10], 4293915773, 15);
        b = fnI(b, c, d, a, M[1], 2240044497, 21);
        a = fnI(a, b, c, d, M[8], 1873313359, 6);
        d = fnI(d, a, b, c, M[15], 4264355552, 10);
        c = fnI(c, d, a, b, M[6], 2734768916, 15);
        b = fnI(b, c, d, a, M[13], 1309151649, 21);
        a = fnI(a, b, c, d, M[4], 4149444226, 6);
        d = fnI(d, a, b, c, M[11], 3174756917, 10);
        c = fnI(c, d, a, b, M[2], 718787259, 15);
        b = fnI(b, c, d, a, M[9], 3951481745, 21);
        this._a = this._a + a | 0;
        this._b = this._b + b | 0;
        this._c = this._c + c | 0;
        this._d = this._d + d | 0;
      };
      MD5.prototype._digest = function() {
        this._block[this._blockOffset++] = 128;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = new Buffer(16);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        return buffer;
      };
      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }
      function fnF(a, b, c, d, m, k, s) {
        return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
      }
      function fnG(a, b, c, d, m, k, s) {
        return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
      }
      function fnH(a, b, c, d, m, k, s) {
        return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
      }
      function fnI(a, b, c, d, m, k, s) {
        return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
      }
      module.exports = MD5;
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47,
    "hash-base": 85,
    inherits: 101
  } ],
  104: [ function(require, module, exports) {
    var bn = require("bn.js");
    var brorand = require("brorand");
    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
      do {
        var a = new bn(this.rand.generate(min_bytes));
      } while (a.cmp(n) >= 0);
      return a;
    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      k || (k = Math.max(1, len / 48 | 0));
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) ;
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (;k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        cb && cb(a);
        var x = a.toRed(red).redPow(d);
        if (0 === x.cmp(rone) || 0 === x.cmp(rn1)) continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (0 === x.cmp(rone)) return false;
          if (0 === x.cmp(rn1)) break;
        }
        if (i === s) return false;
      }
      return prime;
    };
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      k || (k = Math.max(1, len / 48 | 0));
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) ;
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      for (;k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (0 !== g.cmpn(1)) return g;
        var x = a.toRed(red).redPow(d);
        if (0 === x.cmp(rone) || 0 === x.cmp(rn1)) continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (0 === x.cmp(rone)) return x.fromRed().subn(1).gcd(n);
          if (0 === x.cmp(rn1)) break;
        }
        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
      return false;
    };
  }, {
    "bn.js": 16,
    brorand: 17
  } ],
  105: [ function(require, module, exports) {
    module.exports = assert;
    function assert(val, msg) {
      if (!val) throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }, {} ],
  106: [ function(require, module, exports) {
    "use strict";
    var utils = exports;
    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if ("string" !== typeof msg) {
        for (var i = 0; i < msg.length; i++) res[i] = 0 | msg[i];
        return res;
      }
      if ("hex" === enc) {
        msg = msg.replace(/[^a-z0-9]+/gi, "");
        msg.length % 2 !== 0 && (msg = "0" + msg);
        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = 255 & c;
        hi ? res.push(hi, lo) : res.push(lo);
      }
      return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
      return 1 === word.length ? "0" + word : word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode(arr, enc) {
      return "hex" === enc ? toHex(arr) : arr;
    };
  }, {} ],
  107: [ function(require, module, exports) {
    module.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
  }, {} ],
  108: [ function(require, module, exports) {
    "use strict";
    var asn1 = require("asn1.js");
    exports.certificate = require("./certificate");
    var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    exports.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn1.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    exports.RSAPublicKey = RSAPublicKey;
    var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
    });
    exports.PublicKey = PublicKey;
    var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    });
    var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
    });
    exports.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    exports.DSAPrivateKey = DSAPrivateKey;
    exports.DSAparam = asn1.define("DSAparam", function() {
      this.int();
    });
    var ECPrivateKey = asn1.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
    });
    exports.ECPrivateKey = ECPrivateKey;
    var ECParameters = asn1.define("ECParameters", function() {
      this.choice({
        namedCurve: this.objid()
      });
    });
    exports.signature = asn1.define("signature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    });
  }, {
    "./certificate": 109,
    "asn1.js": 1
  } ],
  109: [ function(require, module, exports) {
    "use strict";
    var asn = require("asn1.js");
    var Time = asn.define("Time", function() {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    });
    var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional());
    });
    var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
    });
    var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define("RDNSequence", function() {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define("Name", function() {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
    });
    var Extension = asn.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    });
    var TBSCertificate = asn.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0).int(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
    });
    var X509Certificate = asn.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
    });
    module.exports = X509Certificate;
  }, {
    "asn1.js": 1
  } ],
  110: [ function(require, module, exports) {
    (function(Buffer) {
      var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
      var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m;
      var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;
      var evp = require("evp_bytestokey");
      var ciphers = require("browserify-aes");
      module.exports = function(okey, password) {
        var key = okey.toString();
        var match = key.match(findProc);
        var decrypted;
        if (match) {
          var suite = "aes" + match[1];
          var iv = new Buffer(match[2], "hex");
          var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ""), "base64");
          var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
          var out = [];
          var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
          out.push(cipher.update(cipherText));
          out.push(cipher.final());
          decrypted = Buffer.concat(out);
        } else {
          var match2 = key.match(fullRegex);
          decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ""), "base64");
        }
        var tag = key.match(startRegex)[1];
        return {
          tag: tag,
          data: decrypted
        };
      };
    }).call(this, require("buffer").Buffer);
  }, {
    "browserify-aes": 21,
    buffer: 47,
    evp_bytestokey: 84
  } ],
  111: [ function(require, module, exports) {
    (function(Buffer) {
      var asn1 = require("./asn1");
      var aesid = require("./aesid.json");
      var fixProc = require("./fixProc");
      var ciphers = require("browserify-aes");
      var compat = require("pbkdf2");
      module.exports = parseKeys;
      function parseKeys(buffer) {
        var password;
        if ("object" === typeof buffer && !Buffer.isBuffer(buffer)) {
          password = buffer.passphrase;
          buffer = buffer.key;
        }
        "string" === typeof buffer && (buffer = new Buffer(buffer));
        var stripped = fixProc(buffer, password);
        var type = stripped.tag;
        var data = stripped.data;
        var subtype, ndata;
        switch (type) {
         case "CERTIFICATE":
          ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;

         case "PUBLIC KEY":
          ndata || (ndata = asn1.PublicKey.decode(data, "der"));
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
           case "1.2.840.113549.1.1.1":
            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");

           case "1.2.840.10045.2.1":
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: "ec",
              data: ndata
            };

           case "1.2.840.10040.4.1":
            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
            return {
              type: "dsa",
              data: ndata.algorithm.params
            };

           default:
            throw new Error("unknown key id " + subtype);
          }
          throw new Error("unknown key type " + type);

         case "ENCRYPTED PRIVATE KEY":
          data = asn1.EncryptedPrivateKey.decode(data, "der");
          data = decrypt(data, password);

         case "PRIVATE KEY":
          ndata = asn1.PrivateKey.decode(data, "der");
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
           case "1.2.840.113549.1.1.1":
            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");

           case "1.2.840.10045.2.1":
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
            };

           case "1.2.840.10040.4.1":
            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
            return {
              type: "dsa",
              params: ndata.algorithm.params
            };

           default:
            throw new Error("unknown key id " + subtype);
          }
          throw new Error("unknown key type " + type);

         case "RSA PUBLIC KEY":
          return asn1.RSAPublicKey.decode(data, "der");

         case "RSA PRIVATE KEY":
          return asn1.RSAPrivateKey.decode(data, "der");

         case "DSA PRIVATE KEY":
          return {
            type: "dsa",
            params: asn1.DSAPrivateKey.decode(data, "der")
          };

         case "EC PRIVATE KEY":
          data = asn1.ECPrivateKey.decode(data, "der");
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };

         default:
          throw new Error("unknown key type " + type);
        }
      }
      parseKeys.signature = asn1.signature;
      function decrypt(data, password) {
        var salt = data.algorithm.decrypt.kde.kdeparams.salt;
        var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
        var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
        var iv = data.algorithm.decrypt.cipher.iv;
        var cipherText = data.subjectPrivateKey;
        var keylen = parseInt(algo.split("-")[1], 10) / 8;
        var key = compat.pbkdf2Sync(password, salt, iters, keylen);
        var cipher = ciphers.createDecipheriv(algo, key, iv);
        var out = [];
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        return Buffer.concat(out);
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "./aesid.json": 107,
    "./asn1": 108,
    "./fixProc": 110,
    "browserify-aes": 21,
    buffer: 47,
    pbkdf2: 112
  } ],
  112: [ function(require, module, exports) {
    exports.pbkdf2 = require("./lib/async");
    exports.pbkdf2Sync = require("./lib/sync");
  }, {
    "./lib/async": 113,
    "./lib/sync": 116
  } ],
  113: [ function(require, module, exports) {
    (function(process, global) {
      var checkParameters = require("./precondition");
      var defaultEncoding = require("./default-encoding");
      var sync = require("./sync");
      var Buffer = require("safe-buffer").Buffer;
      var ZERO_BUF;
      var subtle = global.crypto && global.crypto.subtle;
      var toBrowser = {
        sha: "SHA-1",
        "sha-1": "SHA-1",
        sha1: "SHA-1",
        sha256: "SHA-256",
        "sha-256": "SHA-256",
        sha384: "SHA-384",
        "sha-384": "SHA-384",
        "sha-512": "SHA-512",
        sha512: "SHA-512"
      };
      var checks = [];
      function checkNative(algo) {
        if (global.process && !global.process.browser) return Promise.resolve(false);
        if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
        if (void 0 !== checks[algo]) return checks[algo];
        ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
        var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
          return true;
        }).catch(function() {
          return false;
        });
        checks[algo] = prom;
        return prom;
      }
      function browserPbkdf2(password, salt, iterations, length, algo) {
        return subtle.importKey("raw", password, {
          name: "PBKDF2"
        }, false, [ "deriveBits" ]).then(function(key) {
          return subtle.deriveBits({
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: {
              name: algo
            }
          }, key, length << 3);
        }).then(function(res) {
          return Buffer.from(res);
        });
      }
      function resolvePromise(promise, callback) {
        promise.then(function(out) {
          process.nextTick(function() {
            callback(null, out);
          });
        }, function(e) {
          process.nextTick(function() {
            callback(e);
          });
        });
      }
      module.exports = function(password, salt, iterations, keylen, digest, callback) {
        if ("function" === typeof digest) {
          callback = digest;
          digest = void 0;
        }
        digest = digest || "sha1";
        var algo = toBrowser[digest.toLowerCase()];
        if (!algo || "function" !== typeof global.Promise) return process.nextTick(function() {
          var out;
          try {
            out = sync(password, salt, iterations, keylen, digest);
          } catch (e) {
            return callback(e);
          }
          callback(null, out);
        });
        checkParameters(password, salt, iterations, keylen);
        if ("function" !== typeof callback) throw new Error("No callback provided to pbkdf2");
        Buffer.isBuffer(password) || (password = Buffer.from(password, defaultEncoding));
        Buffer.isBuffer(salt) || (salt = Buffer.from(salt, defaultEncoding));
        resolvePromise(checkNative(algo).then(function(resp) {
          if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
          return sync(password, salt, iterations, keylen, digest);
        }), callback);
      };
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "./default-encoding": 114,
    "./precondition": 115,
    "./sync": 116,
    _process: 118,
    "safe-buffer": 143
  } ],
  114: [ function(require, module, exports) {
    (function(process) {
      var defaultEncoding;
      if (process.browser) defaultEncoding = "utf-8"; else {
        var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
        defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
      }
      module.exports = defaultEncoding;
    }).call(this, require("_process"));
  }, {
    _process: 118
  } ],
  115: [ function(require, module, exports) {
    (function(Buffer) {
      var MAX_ALLOC = Math.pow(2, 30) - 1;
      function checkBuffer(buf, name) {
        if ("string" !== typeof buf && !Buffer.isBuffer(buf)) throw new TypeError(name + " must be a buffer or string");
      }
      module.exports = function(password, salt, iterations, keylen) {
        checkBuffer(password, "Password");
        checkBuffer(salt, "Salt");
        if ("number" !== typeof iterations) throw new TypeError("Iterations not a number");
        if (iterations < 0) throw new TypeError("Bad iterations");
        if ("number" !== typeof keylen) throw new TypeError("Key length not a number");
        if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError("Bad key length");
      };
    }).call(this, {
      isBuffer: require("../../is-buffer/index.js")
    });
  }, {
    "../../is-buffer/index.js": 102
  } ],
  116: [ function(require, module, exports) {
    var md5 = require("create-hash/md5");
    var rmd160 = require("ripemd160");
    var sha = require("sha.js");
    var checkParameters = require("./precondition");
    var defaultEncoding = require("./default-encoding");
    var Buffer = require("safe-buffer").Buffer;
    var ZEROS = Buffer.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac(alg, key, saltLen) {
      var hash = getDigest(alg);
      var blocksize = "sha512" === alg || "sha384" === alg ? 128 : 64;
      key.length > blocksize ? key = hash(key) : key.length < blocksize && (key = Buffer.concat([ key, ZEROS ], blocksize));
      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = 54 ^ key[i];
        opad[i] = 92 ^ key[i];
      }
      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
    }
    Hmac.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest();
      }
      if ("rmd160" === alg || "ripemd160" === alg) return rmd160;
      if ("md5" === alg) return md5;
      return shaFunc;
    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(password, salt, iterations, keylen);
      Buffer.isBuffer(password) || (password = Buffer.from(password, defaultEncoding));
      Buffer.isBuffer(salt) || (salt = Buffer.from(salt, defaultEncoding));
      digest = digest || "sha1";
      var hmac = new Hmac(digest, password, salt.length);
      var DK = Buffer.allocUnsafe(keylen);
      var block1 = Buffer.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++) T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    module.exports = pbkdf2;
  }, {
    "./default-encoding": 114,
    "./precondition": 115,
    "create-hash/md5": 53,
    ripemd160: 142,
    "safe-buffer": 143,
    "sha.js": 145
  } ],
  117: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      !process.version || 0 === process.version.indexOf("v0.") || 0 === process.version.indexOf("v1.") && 0 !== process.version.indexOf("v1.8.") ? module.exports = {
        nextTick: nextTick
      } : module.exports = process;
      function nextTick(fn, arg1, arg2, arg3) {
        if ("function" !== typeof fn) throw new TypeError('"callback" argument must be a function');
        var len = arguments.length;
        var args, i;
        switch (len) {
         case 0:
         case 1:
          return process.nextTick(fn);

         case 2:
          return process.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });

         case 3:
          return process.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });

         case 4:
          return process.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });

         default:
          args = new Array(len - 1);
          i = 0;
          while (i < args.length) args[i++] = arguments[i];
          return process.nextTick(function afterTick() {
            fn.apply(null, args);
          });
        }
      }
    }).call(this, require("_process"));
  }, {
    _process: 118
  } ],
  118: [ function(require, module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        cachedSetTimeout = "function" === typeof setTimeout ? setTimeout : defaultSetTimout;
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        cachedClearTimeout = "function" === typeof clearTimeout ? clearTimeout : defaultClearTimeout;
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) return;
      draining = false;
      currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1;
      queue.length && drainQueue();
    }
    function drainQueue() {
      if (draining) return;
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) currentQueue && currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
      queue.push(new Item(fun, args));
      1 !== queue.length || draining || runTimeout(drainQueue);
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
      return [];
    };
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process.umask = function() {
      return 0;
    };
  }, {} ],
  119: [ function(require, module, exports) {
    exports.publicEncrypt = require("./publicEncrypt");
    exports.privateDecrypt = require("./privateDecrypt");
    exports.privateEncrypt = function privateEncrypt(key, buf) {
      return exports.publicEncrypt(key, buf, true);
    };
    exports.publicDecrypt = function publicDecrypt(key, buf) {
      return exports.privateDecrypt(key, buf, true);
    };
  }, {
    "./privateDecrypt": 121,
    "./publicEncrypt": 122
  } ],
  120: [ function(require, module, exports) {
    (function(Buffer) {
      var createHash = require("create-hash");
      module.exports = function(seed, len) {
        var t = new Buffer("");
        var i = 0, c;
        while (t.length < len) {
          c = i2ops(i++);
          t = Buffer.concat([ t, createHash("sha1").update(seed).update(c).digest() ]);
        }
        return t.slice(0, len);
      };
      function i2ops(c) {
        var out = new Buffer(4);
        out.writeUInt32BE(c, 0);
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47,
    "create-hash": 52
  } ],
  121: [ function(require, module, exports) {
    (function(Buffer) {
      var parseKeys = require("parse-asn1");
      var mgf = require("./mgf");
      var xor = require("./xor");
      var bn = require("bn.js");
      var crt = require("browserify-rsa");
      var createHash = require("create-hash");
      var withPublic = require("./withPublic");
      module.exports = function privateDecrypt(private_key, enc, reverse) {
        var padding;
        padding = private_key.padding ? private_key.padding : reverse ? 1 : 4;
        var key = parseKeys(private_key);
        var k = key.modulus.byteLength();
        if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
        var msg;
        msg = reverse ? withPublic(new bn(enc), key) : crt(enc, key);
        var zBuffer = new Buffer(k - msg.length);
        zBuffer.fill(0);
        msg = Buffer.concat([ zBuffer, msg ], k);
        if (4 === padding) return oaep(key, msg);
        if (1 === padding) return pkcs1(key, msg, reverse);
        if (3 === padding) return msg;
        throw new Error("unknown padding");
      };
      function oaep(key, msg) {
        var n = key.modulus;
        var k = key.modulus.byteLength();
        var mLen = msg.length;
        var iHash = createHash("sha1").update(new Buffer("")).digest();
        var hLen = iHash.length;
        var hLen2 = 2 * hLen;
        if (0 !== msg[0]) throw new Error("decryption error");
        var maskedSeed = msg.slice(1, hLen + 1);
        var maskedDb = msg.slice(hLen + 1);
        var seed = xor(maskedSeed, mgf(maskedDb, hLen));
        var db = xor(maskedDb, mgf(seed, k - hLen - 1));
        if (compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
        var i = hLen;
        while (0 === db[i]) i++;
        if (1 !== db[i++]) throw new Error("decryption error");
        return db.slice(i);
      }
      function pkcs1(key, msg, reverse) {
        var p1 = msg.slice(0, 2);
        var i = 2;
        var status = 0;
        while (0 !== msg[i++]) if (i >= msg.length) {
          status++;
          break;
        }
        var ps = msg.slice(2, i - 1);
        var p2 = msg.slice(i - 1, i);
        ("0002" !== p1.toString("hex") && !reverse || "0001" !== p1.toString("hex") && reverse) && status++;
        ps.length < 8 && status++;
        if (status) throw new Error("decryption error");
        return msg.slice(i);
      }
      function compare(a, b) {
        a = new Buffer(a);
        b = new Buffer(b);
        var dif = 0;
        var len = a.length;
        if (a.length !== b.length) {
          dif++;
          len = Math.min(a.length, b.length);
        }
        var i = -1;
        while (++i < len) dif += a[i] ^ b[i];
        return dif;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "./mgf": 120,
    "./withPublic": 123,
    "./xor": 124,
    "bn.js": 16,
    "browserify-rsa": 39,
    buffer: 47,
    "create-hash": 52,
    "parse-asn1": 111
  } ],
  122: [ function(require, module, exports) {
    (function(Buffer) {
      var parseKeys = require("parse-asn1");
      var randomBytes = require("randombytes");
      var createHash = require("create-hash");
      var mgf = require("./mgf");
      var xor = require("./xor");
      var bn = require("bn.js");
      var withPublic = require("./withPublic");
      var crt = require("browserify-rsa");
      var constants = {
        RSA_PKCS1_OAEP_PADDING: 4,
        RSA_PKCS1_PADDIN: 1,
        RSA_NO_PADDING: 3
      };
      module.exports = function publicEncrypt(public_key, msg, reverse) {
        var padding;
        padding = public_key.padding ? public_key.padding : reverse ? 1 : 4;
        var key = parseKeys(public_key);
        var paddedMsg;
        if (4 === padding) paddedMsg = oaep(key, msg); else if (1 === padding) paddedMsg = pkcs1(key, msg, reverse); else {
          if (3 !== padding) throw new Error("unknown padding");
          paddedMsg = new bn(msg);
          if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
        }
        return reverse ? crt(paddedMsg, key) : withPublic(paddedMsg, key);
      };
      function oaep(key, msg) {
        var k = key.modulus.byteLength();
        var mLen = msg.length;
        var iHash = createHash("sha1").update(new Buffer("")).digest();
        var hLen = iHash.length;
        var hLen2 = 2 * hLen;
        if (mLen > k - hLen2 - 2) throw new Error("message too long");
        var ps = new Buffer(k - mLen - hLen2 - 2);
        ps.fill(0);
        var dblen = k - hLen - 1;
        var seed = randomBytes(hLen);
        var maskedDb = xor(Buffer.concat([ iHash, ps, new Buffer([ 1 ]), msg ], dblen), mgf(seed, dblen));
        var maskedSeed = xor(seed, mgf(maskedDb, hLen));
        return new bn(Buffer.concat([ new Buffer([ 0 ]), maskedSeed, maskedDb ], k));
      }
      function pkcs1(key, msg, reverse) {
        var mLen = msg.length;
        var k = key.modulus.byteLength();
        if (mLen > k - 11) throw new Error("message too long");
        var ps;
        if (reverse) {
          ps = new Buffer(k - mLen - 3);
          ps.fill(255);
        } else ps = nonZero(k - mLen - 3);
        return new bn(Buffer.concat([ new Buffer([ 0, reverse ? 1 : 2 ]), ps, new Buffer([ 0 ]), msg ], k));
      }
      function nonZero(len, crypto) {
        var out = new Buffer(len);
        var i = 0;
        var cache = randomBytes(2 * len);
        var cur = 0;
        var num;
        while (i < len) {
          if (cur === cache.length) {
            cache = randomBytes(2 * len);
            cur = 0;
          }
          num = cache[cur++];
          num && (out[i++] = num);
        }
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, {
    "./mgf": 120,
    "./withPublic": 123,
    "./xor": 124,
    "bn.js": 16,
    "browserify-rsa": 39,
    buffer: 47,
    "create-hash": 52,
    "parse-asn1": 111,
    randombytes: 125
  } ],
  123: [ function(require, module, exports) {
    (function(Buffer) {
      var bn = require("bn.js");
      function withPublic(paddedMsg, key) {
        return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
      }
      module.exports = withPublic;
    }).call(this, require("buffer").Buffer);
  }, {
    "bn.js": 16,
    buffer: 47
  } ],
  124: [ function(require, module, exports) {
    module.exports = function xor(a, b) {
      var len = a.length;
      var i = -1;
      while (++i < len) a[i] ^= b[i];
      return a;
    };
  }, {} ],
  125: [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      function oldBrowser() {
        throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
      }
      var Buffer = require("safe-buffer").Buffer;
      var crypto = global.crypto || global.msCrypto;
      crypto && crypto.getRandomValues ? module.exports = randomBytes : module.exports = oldBrowser;
      function randomBytes(size, cb) {
        if (size > 65536) throw new Error("requested too many random bytes");
        var rawBytes = new global.Uint8Array(size);
        size > 0 && crypto.getRandomValues(rawBytes);
        var bytes = Buffer.from(rawBytes.buffer);
        if ("function" === typeof cb) return process.nextTick(function() {
          cb(null, bytes);
        });
        return bytes;
      }
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 118,
    "safe-buffer": 143
  } ],
  126: [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      function oldBrowser() {
        throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
      }
      var safeBuffer = require("safe-buffer");
      var randombytes = require("randombytes");
      var Buffer = safeBuffer.Buffer;
      var kBufferMaxLength = safeBuffer.kMaxLength;
      var crypto = global.crypto || global.msCrypto;
      var kMaxUint32 = Math.pow(2, 32) - 1;
      function assertOffset(offset, length) {
        if ("number" !== typeof offset || offset !== offset) throw new TypeError("offset must be a number");
        if (offset > kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
        if (offset > kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
      }
      function assertSize(size, offset, length) {
        if ("number" !== typeof size || size !== size) throw new TypeError("size must be a number");
        if (size > kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
        if (size + offset > length || size > kBufferMaxLength) throw new RangeError("buffer too small");
      }
      if (crypto && crypto.getRandomValues || !process.browser) {
        exports.randomFill = randomFill;
        exports.randomFillSync = randomFillSync;
      } else {
        exports.randomFill = oldBrowser;
        exports.randomFillSync = oldBrowser;
      }
      function randomFill(buf, offset, size, cb) {
        if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        if ("function" === typeof offset) {
          cb = offset;
          offset = 0;
          size = buf.length;
        } else if ("function" === typeof size) {
          cb = size;
          size = buf.length - offset;
        } else if ("function" !== typeof cb) throw new TypeError('"cb" argument must be a function');
        assertOffset(offset, buf.length);
        assertSize(size, offset, buf.length);
        return actualFill(buf, offset, size, cb);
      }
      function actualFill(buf, offset, size, cb) {
        if (process.browser) {
          var ourBuf = buf.buffer;
          var uint = new Uint8Array(ourBuf, offset, size);
          crypto.getRandomValues(uint);
          if (cb) {
            process.nextTick(function() {
              cb(null, buf);
            });
            return;
          }
          return buf;
        }
        if (cb) {
          randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
          });
          return;
        }
        var bytes = randombytes(size);
        bytes.copy(buf, offset);
        return buf;
      }
      function randomFillSync(buf, offset, size) {
        "undefined" === typeof offset && (offset = 0);
        if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        assertOffset(offset, buf.length);
        void 0 === size && (size = buf.length - offset);
        assertSize(size, offset, buf.length);
        return actualFill(buf, offset, size);
      }
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 118,
    randombytes: 125,
    "safe-buffer": 143
  } ],
  127: [ function(require, module, exports) {
    module.exports = require("./lib/_stream_duplex.js");
  }, {
    "./lib/_stream_duplex.js": 128
  } ],
  128: [ function(require, module, exports) {
    "use strict";
    var pna = require("process-nextick-args");
    var objectKeys = Object.keys || function(obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    };
    module.exports = Duplex;
    var util = require("core-util-is");
    util.inherits = require("inherits");
    var Readable = require("./_stream_readable");
    var Writable = require("./_stream_writable");
    util.inherits(Duplex, Readable);
    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      Duplex.prototype[method] || (Duplex.prototype[method] = Writable.prototype[method]);
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      options && false === options.readable && (this.readable = false);
      options && false === options.writable && (this.writable = false);
      this.allowHalfOpen = true;
      options && false === options.allowHalfOpen && (this.allowHalfOpen = false);
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self) {
      self.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (void 0 === this._readableState || void 0 === this._writableState) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (void 0 === this._readableState || void 0 === this._writableState) return;
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }, {
    "./_stream_readable": 130,
    "./_stream_writable": 132,
    "core-util-is": 50,
    inherits: 101,
    "process-nextick-args": 117
  } ],
  129: [ function(require, module, exports) {
    "use strict";
    module.exports = PassThrough;
    var Transform = require("./_stream_transform");
    var util = require("core-util-is");
    util.inherits = require("inherits");
    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, {
    "./_stream_transform": 131,
    "core-util-is": 50,
    inherits: 101
  } ],
  130: [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      var pna = require("process-nextick-args");
      module.exports = Readable;
      var isArray = require("isarray");
      var Duplex;
      Readable.ReadableState = ReadableState;
      var EE = require("events").EventEmitter;
      var EElistenerCount = function(emitter, type) {
        return emitter.listeners(type).length;
      };
      var Stream = require("./internal/streams/stream");
      var Buffer = require("safe-buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function() {};
      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var util = require("core-util-is");
      util.inherits = require("inherits");
      var debugUtil = require("util");
      var debug = void 0;
      debug = debugUtil && debugUtil.debuglog ? debugUtil.debuglog("stream") : function() {};
      var BufferList = require("./internal/streams/BufferList");
      var destroyImpl = require("./internal/streams/destroy");
      var StringDecoder;
      util.inherits(Readable, Stream);
      var kProxyEvents = [ "error", "close", "destroy", "pause", "resume" ];
      function prependListener(emitter, event, fn) {
        if ("function" === typeof emitter.prependListener) return emitter.prependListener(event, fn);
        emitter._events && emitter._events[event] ? isArray(emitter._events[event]) ? emitter._events[event].unshift(fn) : emitter._events[event] = [ fn, emitter._events[event] ] : emitter.on(event, fn);
      }
      function ReadableState(options, stream) {
        Duplex = Duplex || require("./_stream_duplex");
        options = options || {};
        var isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        isDuplex && (this.objectMode = this.objectMode || !!options.readableObjectMode);
        var hwm = options.highWaterMark;
        var readableHwm = options.readableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16384;
        this.highWaterMark = hwm || 0 === hwm ? hwm : isDuplex && (readableHwm || 0 === readableHwm) ? readableHwm : defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          StringDecoder || (StringDecoder = require("string_decoder/").StringDecoder);
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable(options) {
        Duplex = Duplex || require("./_stream_duplex");
        if (!(this instanceof Readable)) return new Readable(options);
        this._readableState = new ReadableState(options, this);
        this.readable = true;
        if (options) {
          "function" === typeof options.read && (this._read = options.read);
          "function" === typeof options.destroy && (this._destroy = options.destroy);
        }
        Stream.call(this);
      }
      Object.defineProperty(Readable.prototype, "destroyed", {
        get: function() {
          if (void 0 === this._readableState) return false;
          return this._readableState.destroyed;
        },
        set: function(value) {
          if (!this._readableState) return;
          this._readableState.destroyed = value;
        }
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function(err, cb) {
        this.push(null);
        cb(err);
      };
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (state.objectMode) skipChunkCheck = true; else if ("string" === typeof chunk) {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        var state = stream._readableState;
        if (null === chunk) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          skipChunkCheck || (er = chunkInvalid(state, chunk));
          if (er) stream.emit("error", er); else if (state.objectMode || chunk && chunk.length > 0) {
            "string" === typeof chunk || state.objectMode || Object.getPrototypeOf(chunk) === Buffer.prototype || (chunk = _uint8ArrayToBuffer(chunk));
            if (addToFront) state.endEmitted ? stream.emit("error", new Error("stream.unshift() after end event")) : addChunk(stream, state, chunk, true); else if (state.ended) stream.emit("error", new Error("stream.push() after EOF")); else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                state.objectMode || 0 !== chunk.length ? addChunk(stream, state, chunk, false) : maybeReadMore(stream, state);
              } else addChunk(stream, state, chunk, false);
            }
          } else addToFront || (state.reading = false);
        }
        return needMoreData(state);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && 0 === state.length && !state.sync) {
          stream.emit("data", chunk);
          stream.read(0);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          addToFront ? state.buffer.unshift(chunk) : state.buffer.push(chunk);
          state.needReadable && emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      function chunkInvalid(state, chunk) {
        var er;
        _isUint8Array(chunk) || "string" === typeof chunk || void 0 === chunk || state.objectMode || (er = new TypeError("Invalid non-string/buffer chunk"));
        return er;
      }
      function needMoreData(state) {
        return !state.ended && (state.needReadable || state.length < state.highWaterMark || 0 === state.length);
      }
      Readable.prototype.isPaused = function() {
        return false === this._readableState.flowing;
      };
      Readable.prototype.setEncoding = function(enc) {
        StringDecoder || (StringDecoder = require("string_decoder/").StringDecoder);
        this._readableState.decoder = new StringDecoder(enc);
        this._readableState.encoding = enc;
        return this;
      };
      var MAX_HWM = 8388608;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) n = MAX_HWM; else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || 0 === state.length && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) return state.flowing && state.length ? state.buffer.head.data.length : state.length;
        n > state.highWaterMark && (state.highWaterMark = computeNewHighWaterMark(n));
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable.prototype.read = function(n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        0 !== n && (state.emittedReadable = false);
        if (0 === n && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          0 === state.length && state.ended ? endReadable(this) : emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (0 === n && state.ended) {
          0 === state.length && endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (0 === state.length || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          0 === state.length && (state.needReadable = true);
          this._read(state.highWaterMark);
          state.sync = false;
          state.reading || (n = howMuchToRead(nOrig, state));
        }
        var ret;
        ret = n > 0 ? fromList(n, state) : null;
        if (null === ret) {
          state.needReadable = true;
          n = 0;
        } else state.length -= n;
        if (0 === state.length) {
          state.ended || (state.needReadable = true);
          nOrig !== n && state.ended && endReadable(this);
        }
        null !== ret && this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        emitReadable(stream);
      }
      function emitReadable(stream) {
        var state = stream._readableState;
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          state.sync ? pna.nextTick(emitReadable_, stream) : emitReadable_(stream);
        }
      }
      function emitReadable_(stream) {
        debug("emit readable");
        stream.emit("readable");
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          pna.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        var len = state.length;
        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length) break;
          len = state.length;
        }
        state.readingMore = false;
      }
      Readable.prototype._read = function(n) {
        this.emit("error", new Error("_read() is not implemented"));
      };
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
         case 0:
          state.pipes = dest;
          break;

         case 1:
          state.pipes = [ state.pipes, dest ];
          break;

         default:
          state.pipes.push(dest);
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || false !== pipeOpts.end) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        state.endEmitted ? pna.nextTick(endFn) : src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src && unpipeInfo && false === unpipeInfo.hasUnpiped) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
        function onend() {
          debug("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          !state.awaitDrain || dest._writableState && !dest._writableState.needDrain || ondrain();
        }
        var increasedAwaitDrain = false;
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          increasedAwaitDrain = false;
          var ret = dest.write(chunk);
          if (false === ret && !increasedAwaitDrain) {
            if ((1 === state.pipesCount && state.pipes === dest || state.pipesCount > 1 && -1 !== indexOf(state.pipes, dest)) && !cleanedUp) {
              debug("false write response, pause", src._readableState.awaitDrain);
              src._readableState.awaitDrain++;
              increasedAwaitDrain = true;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          0 === EElistenerCount(dest, "error") && dest.emit("error", er);
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return function() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          state.awaitDrain && state.awaitDrain--;
          if (0 === state.awaitDrain && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (0 === state.pipesCount) return this;
        if (1 === state.pipesCount) {
          if (dest && dest !== state.pipes) return this;
          dest || (dest = state.pipes);
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          dest && dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, unpipeInfo);
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (-1 === index) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        1 === state.pipesCount && (state.pipes = state.pipes[0]);
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        if ("data" === ev) false !== this._readableState.flowing && this.resume(); else if ("readable" === ev) {
          var state = this._readableState;
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            state.reading ? state.length && emitReadable(this) : pna.nextTick(nReadingNextTick, this);
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      function nReadingNextTick(self) {
        debug("readable nexttick read 0");
        self.read(0);
      }
      Readable.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = true;
          resume(this, state);
        }
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          pna.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        if (!state.reading) {
          debug("resume read 0");
          stream.read(0);
        }
        state.resumeScheduled = false;
        state.awaitDrain = 0;
        stream.emit("resume");
        flow(stream);
        state.flowing && !state.reading && stream.read(0);
      }
      Readable.prototype.pause = function() {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (false !== this._readableState.flowing) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && null !== stream.read()) ;
      }
      Readable.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            chunk && chunk.length && _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug("wrapped data");
          state.decoder && (chunk = state.decoder.write(chunk));
          if (state.objectMode && (null === chunk || void 0 === chunk)) return;
          if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) void 0 === this[i] && "function" === typeof stream[i] && (this[i] = function(method) {
          return function() {
            return stream[method].apply(stream, arguments);
          };
        }(i));
        for (var n = 0; n < kProxyEvents.length; n++) stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        this._read = function(n) {
          debug("wrapped _read", n);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        enumerable: false,
        get: function() {
          return this._readableState.highWaterMark;
        }
      });
      Readable._fromList = fromList;
      function fromList(n, state) {
        if (0 === state.length) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
          ret = state.decoder ? state.buffer.join("") : 1 === state.buffer.length ? state.buffer.head.data : state.buffer.concat(state.length);
          state.buffer.clear();
        } else ret = fromListPartial(n, state.buffer, state.decoder);
        return ret;
      }
      function fromListPartial(n, list, hasStrings) {
        var ret;
        if (n < list.head.data.length) {
          ret = list.head.data.slice(0, n);
          list.head.data = list.head.data.slice(n);
        } else ret = n === list.head.data.length ? list.shift() : hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
        return ret;
      }
      function copyFromBufferString(n, list) {
        var p = list.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          nb === str.length ? ret += str : ret += str.slice(0, n);
          n -= nb;
          if (0 === n) {
            if (nb === str.length) {
              ++c;
              p.next ? list.head = p.next : list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }
      function copyFromBuffer(n, list) {
        var ret = Buffer.allocUnsafe(n);
        var p = list.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (0 === n) {
            if (nb === buf.length) {
              ++c;
              p.next ? list.head = p.next : list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }
      function endReadable(stream) {
        var state = stream._readableState;
        if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
        if (!state.endEmitted) {
          state.ended = true;
          pna.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        if (!state.endEmitted && 0 === state.length) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
        }
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) if (xs[i] === x) return i;
        return -1;
      }
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "./_stream_duplex": 128,
    "./internal/streams/BufferList": 133,
    "./internal/streams/destroy": 134,
    "./internal/streams/stream": 135,
    _process: 118,
    "core-util-is": 50,
    events: 83,
    inherits: 101,
    isarray: 136,
    "process-nextick-args": 117,
    "safe-buffer": 143,
    "string_decoder/": 137,
    util: 18
  } ],
  131: [ function(require, module, exports) {
    "use strict";
    module.exports = Transform;
    var Duplex = require("./_stream_duplex");
    var util = require("core-util-is");
    util.inherits = require("inherits");
    util.inherits(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) return this.emit("error", new Error("write callback called multiple times"));
      ts.writechunk = null;
      ts.writecb = null;
      null != data && this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      (rs.needReadable || rs.length < rs.highWaterMark) && this._read(rs.highWaterMark);
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        "function" === typeof options.transform && (this._transform = options.transform);
        "function" === typeof options.flush && (this._flush = options.flush);
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      "function" === typeof this._flush ? this._flush(function(er, data) {
        done(_this, er, data);
      }) : done(this, null, null);
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) && this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (null !== ts.writechunk && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else ts.needTransform = true;
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      null != data && stream.push(data);
      if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return stream.push(null);
    }
  }, {
    "./_stream_duplex": 128,
    "core-util-is": 50,
    inherits: 101
  } ],
  132: [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      var pna = require("process-nextick-args");
      module.exports = Writable;
      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk;
        this.encoding = encoding;
        this.callback = cb;
        this.next = null;
      }
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var asyncWrite = !process.browser && [ "v0.10", "v0.9." ].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
      var Duplex;
      Writable.WritableState = WritableState;
      var util = require("core-util-is");
      util.inherits = require("inherits");
      var internalUtil = {
        deprecate: require("util-deprecate")
      };
      var Stream = require("./internal/streams/stream");
      var Buffer = require("safe-buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function() {};
      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require("./internal/streams/destroy");
      util.inherits(Writable, Stream);
      function nop() {}
      function WritableState(options, stream) {
        Duplex = Duplex || require("./_stream_duplex");
        options = options || {};
        var isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        isDuplex && (this.objectMode = this.objectMode || !!options.writableObjectMode);
        var hwm = options.highWaterMark;
        var writableHwm = options.writableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16384;
        this.highWaterMark = hwm || 0 === hwm ? hwm : isDuplex && (writableHwm || 0 === writableHwm) ? writableHwm : defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = false === options.decodeStrings;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {}
      })();
      var realHasInstance;
      if ("function" === typeof Symbol && Symbol.hasInstance && "function" === typeof Function.prototype[Symbol.hasInstance]) {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
          }
        });
      } else realHasInstance = function(object) {
        return object instanceof this;
      };
      function Writable(options) {
        Duplex = Duplex || require("./_stream_duplex");
        if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) return new Writable(options);
        this._writableState = new WritableState(options, this);
        this.writable = true;
        if (options) {
          "function" === typeof options.write && (this._write = options.write);
          "function" === typeof options.writev && (this._writev = options.writev);
          "function" === typeof options.destroy && (this._destroy = options.destroy);
          "function" === typeof options.final && (this._final = options.final);
        }
        Stream.call(this);
      }
      Writable.prototype.pipe = function() {
        this.emit("error", new Error("Cannot pipe, not readable"));
      };
      function writeAfterEnd(stream, cb) {
        var er = new Error("write after end");
        stream.emit("error", er);
        pna.nextTick(cb, er);
      }
      function validChunk(stream, state, chunk, cb) {
        var valid = true;
        var er = false;
        null === chunk ? er = new TypeError("May not write null values to stream") : "string" === typeof chunk || void 0 === chunk || state.objectMode || (er = new TypeError("Invalid non-string/buffer chunk"));
        if (er) {
          stream.emit("error", er);
          pna.nextTick(cb, er);
          valid = false;
        }
        return valid;
      }
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        isBuf && !Buffer.isBuffer(chunk) && (chunk = _uint8ArrayToBuffer(chunk));
        if ("function" === typeof encoding) {
          cb = encoding;
          encoding = null;
        }
        isBuf ? encoding = "buffer" : encoding || (encoding = state.defaultEncoding);
        "function" !== typeof cb && (cb = nop);
        if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function() {
        var state = this._writableState;
        state.corked++;
      };
      Writable.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          state.writing || state.corked || state.finished || state.bufferProcessing || !state.bufferedRequest || clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        "string" === typeof encoding && (encoding = encoding.toLowerCase());
        if (!([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      function decodeChunk(state, chunk, encoding) {
        state.objectMode || false === state.decodeStrings || "string" !== typeof chunk || (chunk = Buffer.from(chunk, encoding));
        return chunk;
      }
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        ret || (state.needDrain = true);
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
          };
          last ? last.next = state.lastBufferedRequest : state.bufferedRequest = state.lastBufferedRequest;
          state.bufferedRequestCount += 1;
        } else doWrite(stream, state, false, len, chunk, encoding, cb);
        return ret;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        writev ? stream._writev(chunk, state.onwrite) : stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          pna.nextTick(cb, er);
          pna.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          stream.emit("error", er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          stream.emit("error", er);
          finishMaybe(stream, state);
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        onwriteStateUpdate(state);
        if (er) onwriteError(stream, state, sync, er, cb); else {
          var finished = needFinish(state);
          finished || state.corked || state.bufferProcessing || !state.bufferedRequest || clearBuffer(stream, state);
          sync ? asyncWrite(afterWrite, stream, state, finished, cb) : afterWrite(stream, state, finished, cb);
        }
      }
      function afterWrite(stream, state, finished, cb) {
        finished || onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      function onwriteDrain(stream, state) {
        if (0 === state.length && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            entry.isBuf || (allBuffers = false);
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else state.corkedRequestsFree = new CorkedRequest(state);
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) break;
          }
          null === entry && (state.lastBufferedRequest = null);
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new Error("_write() is not implemented"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if ("function" === typeof chunk) {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if ("function" === typeof encoding) {
          cb = encoding;
          encoding = null;
        }
        null !== chunk && void 0 !== chunk && this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        state.ending || state.finished || endWritable(this, state, cb);
      };
      function needFinish(state) {
        return state.ending && 0 === state.length && null === state.bufferedRequest && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--;
          err && stream.emit("error", err);
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) if ("function" === typeof stream._final) {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (0 === state.pendingcb) {
            state.finished = true;
            stream.emit("finish");
          }
        }
        return need;
      }
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        cb && (state.finished ? pna.nextTick(cb) : stream.once("finish", cb));
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree ? state.corkedRequestsFree.next = corkReq : state.corkedRequestsFree = corkReq;
      }
      Object.defineProperty(Writable.prototype, "destroyed", {
        get: function() {
          if (void 0 === this._writableState) return false;
          return this._writableState.destroyed;
        },
        set: function(value) {
          if (!this._writableState) return;
          this._writableState.destroyed = value;
        }
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function(err, cb) {
        this.end();
        cb(err);
      };
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "./_stream_duplex": 128,
    "./internal/streams/destroy": 134,
    "./internal/streams/stream": 135,
    _process: 118,
    "core-util-is": 50,
    inherits: 101,
    "process-nextick-args": 117,
    "safe-buffer": 143,
    "util-deprecate": 154
  } ],
  133: [ function(require, module, exports) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var Buffer = require("safe-buffer").Buffer;
    var util = require("util");
    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }
    module.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList.prototype.push = function push(v) {
        var entry = {
          data: v,
          next: null
        };
        this.length > 0 ? this.tail.next = entry : this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList.prototype.unshift = function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        0 === this.length && (this.tail = entry);
        this.head = entry;
        ++this.length;
      };
      BufferList.prototype.shift = function shift() {
        if (0 === this.length) return;
        var ret = this.head.data;
        1 === this.length ? this.head = this.tail = null : this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList.prototype.join = function join(s) {
        if (0 === this.length) return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) ret += s + p.data;
        return ret;
      };
      BufferList.prototype.concat = function concat(n) {
        if (0 === this.length) return Buffer.alloc(0);
        if (1 === this.length) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
      return BufferList;
    }();
    util && util.inspect && util.inspect.custom && (module.exports.prototype[util.inspect.custom] = function() {
      var obj = util.inspect({
        length: this.length
      });
      return this.constructor.name + " " + obj;
    });
  }, {
    "safe-buffer": 143,
    util: 18
  } ],
  134: [ function(require, module, exports) {
    "use strict";
    var pna = require("process-nextick-args");
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        cb ? cb(err) : !err || this._writableState && this._writableState.errorEmitted || pna.nextTick(emitErrorNT, this, err);
        return this;
      }
      this._readableState && (this._readableState.destroyed = true);
      this._writableState && (this._writableState.destroyed = true);
      this._destroy(err || null, function(err) {
        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);
          _this._writableState && (_this._writableState.errorEmitted = true);
        } else cb && cb(err);
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self, err) {
      self.emit("error", err);
    }
    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };
  }, {
    "process-nextick-args": 117
  } ],
  135: [ function(require, module, exports) {
    module.exports = require("events").EventEmitter;
  }, {
    events: 83
  } ],
  136: [ function(require, module, exports) {
    arguments[4][48][0].apply(exports, arguments);
  }, {
    dup: 48
  } ],
  137: [ function(require, module, exports) {
    "use strict";
    var Buffer = require("safe-buffer").Buffer;
    var isEncoding = Buffer.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
       case "hex":
       case "utf8":
       case "utf-8":
       case "ascii":
       case "binary":
       case "base64":
       case "ucs2":
       case "ucs-2":
       case "utf16le":
       case "utf-16le":
       case "raw":
        return true;

       default:
        return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return "utf8";
      var retried;
      while (true) switch (enc) {
       case "utf8":
       case "utf-8":
        return "utf8";

       case "ucs2":
       case "ucs-2":
       case "utf16le":
       case "utf-16le":
        return "utf16le";

       case "latin1":
       case "binary":
        return "latin1";

       case "base64":
       case "ascii":
       case "hex":
        return enc;

       default:
        if (retried) return;
        enc = ("" + enc).toLowerCase();
        retried = true;
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if ("string" !== typeof nenc && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
       case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;

       case "utf8":
        this.fillLast = utf8FillLast;
        nb = 4;
        break;

       case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;

       default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (0 === buf.length) return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (void 0 === r) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else i = 0;
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127) return 0;
      if (byte >> 5 === 6) return 2;
      if (byte >> 4 === 14) return 3;
      if (byte >> 3 === 30) return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        nb > 0 && (self.lastNeed = nb - 1);
        return nb;
      }
      if (--j < i || -2 === nb) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        nb > 0 && (self.lastNeed = nb - 2);
        return nb;
      }
      if (--j < i || -2 === nb) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        nb > 0 && (2 === nb ? nb = 0 : self.lastNeed = nb - 3);
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self, buf, p) {
      if (128 !== (192 & buf[0])) {
        self.lastNeed = 0;
        return "�";
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if (128 !== (192 & buf[1])) {
          self.lastNeed = 1;
          return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2 && 128 !== (192 & buf[2])) {
          self.lastNeed = 2;
          return "�";
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (void 0 !== r) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + "�";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (0 === n) return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (1 === n) this.lastChar[0] = buf[buf.length - 1]; else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }, {
    "safe-buffer": 143
  } ],
  138: [ function(require, module, exports) {
    module.exports = require("./readable").PassThrough;
  }, {
    "./readable": 139
  } ],
  139: [ function(require, module, exports) {
    exports = module.exports = require("./lib/_stream_readable.js");
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require("./lib/_stream_writable.js");
    exports.Duplex = require("./lib/_stream_duplex.js");
    exports.Transform = require("./lib/_stream_transform.js");
    exports.PassThrough = require("./lib/_stream_passthrough.js");
  }, {
    "./lib/_stream_duplex.js": 128,
    "./lib/_stream_passthrough.js": 129,
    "./lib/_stream_readable.js": 130,
    "./lib/_stream_transform.js": 131,
    "./lib/_stream_writable.js": 132
  } ],
  140: [ function(require, module, exports) {
    module.exports = require("./readable").Transform;
  }, {
    "./readable": 139
  } ],
  141: [ function(require, module, exports) {
    module.exports = require("./lib/_stream_writable.js");
  }, {
    "./lib/_stream_writable.js": 132
  } ],
  142: [ function(require, module, exports) {
    "use strict";
    var Buffer = require("buffer").Buffer;
    var inherits = require("inherits");
    var HashBase = require("hash-base");
    var ARRAY16 = new Array(16);
    var zl = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ];
    var zr = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ];
    var sl = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ];
    var sr = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
    var hl = [ 0, 1518500249, 1859775393, 2400959708, 2840853838 ];
    var hr = [ 1352829926, 1548603684, 1836072691, 2053994217, 0 ];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(4 * j);
      var al = 0 | this._a;
      var bl = 0 | this._b;
      var cl = 0 | this._c;
      var dl = 0 | this._d;
      var el = 0 | this._e;
      var ar = 0 | this._a;
      var br = 0 | this._b;
      var cr = 0 | this._c;
      var dr = 0 | this._d;
      var er = 0 | this._e;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module.exports = RIPEMD160;
  }, {
    buffer: 47,
    "hash-base": 85,
    inherits: 101
  } ],
  143: [ function(require, module, exports) {
    var buffer = require("buffer");
    var Buffer = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) dst[key] = src[key];
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer; else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if ("number" === typeof arg) throw new TypeError("Argument must not be a number");
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if ("number" !== typeof size) throw new TypeError("Argument must be a number");
      var buf = Buffer(size);
      void 0 !== fill ? "string" === typeof encoding ? buf.fill(fill, encoding) : buf.fill(fill) : buf.fill(0);
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if ("number" !== typeof size) throw new TypeError("Argument must be a number");
      return Buffer(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if ("number" !== typeof size) throw new TypeError("Argument must be a number");
      return buffer.SlowBuffer(size);
    };
  }, {
    buffer: 47
  } ],
  144: [ function(require, module, exports) {
    var Buffer = require("safe-buffer").Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if ("string" === typeof data) {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i = 0; i < remainder; i++) block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        accum % blockSize === 0 && this._update(block);
      }
      this._len += length;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = 8 * this._len;
      if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4); else {
        var lowBits = (4294967295 & bits) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash = this._hash();
      return enc ? hash.toString(enc) : hash;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    module.exports = Hash;
  }, {
    "safe-buffer": 143
  } ],
  145: [ function(require, module, exports) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports.sha = require("./sha");
    exports.sha1 = require("./sha1");
    exports.sha224 = require("./sha224");
    exports.sha256 = require("./sha256");
    exports.sha384 = require("./sha384");
    exports.sha512 = require("./sha512");
  }, {
    "./sha": 146,
    "./sha1": 147,
    "./sha224": 148,
    "./sha256": 149,
    "./sha384": 150,
    "./sha512": 151
  } ],
  146: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var K = [ 1518500249, 1859775393, -1894007588, -899497514 ];
    var W = new Array(80);
    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (0 === s) return b & c | ~b & d;
      if (2 === s) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha.prototype._update = function(M) {
      var W = this._w;
      var a = 0 | this._a;
      var b = 0 | this._b;
      var c = 0 | this._c;
      var d = 0 | this._d;
      var e = 0 | this._e;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(4 * i);
      for (;i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(0 | this._a, 0);
      H.writeInt32BE(0 | this._b, 4);
      H.writeInt32BE(0 | this._c, 8);
      H.writeInt32BE(0 | this._d, 12);
      H.writeInt32BE(0 | this._e, 16);
      return H;
    };
    module.exports = Sha;
  }, {
    "./hash": 144,
    inherits: 101,
    "safe-buffer": 143
  } ],
  147: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var K = [ 1518500249, 1859775393, -1894007588, -899497514 ];
    var W = new Array(80);
    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (0 === s) return b & c | ~b & d;
      if (2 === s) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha1.prototype._update = function(M) {
      var W = this._w;
      var a = 0 | this._a;
      var b = 0 | this._b;
      var c = 0 | this._c;
      var d = 0 | this._d;
      var e = 0 | this._e;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(4 * i);
      for (;i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(0 | this._a, 0);
      H.writeInt32BE(0 | this._b, 4);
      H.writeInt32BE(0 | this._c, 8);
      H.writeInt32BE(0 | this._d, 12);
      H.writeInt32BE(0 | this._e, 16);
      return H;
    };
    module.exports = Sha1;
  }, {
    "./hash": 144,
    inherits: 101,
    "safe-buffer": 143
  } ],
  148: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Sha256 = require("./sha256");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var W = new Array(64);
    function Sha224() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = Buffer.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    module.exports = Sha224;
  }, {
    "./hash": 144,
    "./sha256": 149,
    inherits: 101,
    "safe-buffer": 143
  } ],
  149: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var K = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
    var W = new Array(64);
    function Sha256() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }
    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }
    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
    }
    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
    }
    Sha256.prototype._update = function(M) {
      var W = this._w;
      var a = 0 | this._a;
      var b = 0 | this._b;
      var c = 0 | this._c;
      var d = 0 | this._d;
      var e = 0 | this._e;
      var f = 0 | this._f;
      var g = 0 | this._g;
      var h = 0 | this._h;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(4 * i);
      for (;i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H = Buffer.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    module.exports = Sha256;
  }, {
    "./hash": 144,
    inherits: 101,
    "safe-buffer": 143
  } ],
  150: [ function(require, module, exports) {
    var inherits = require("inherits");
    var SHA512 = require("./sha512");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var W = new Array(160);
    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = Buffer.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };
    module.exports = Sha384;
  }, {
    "./hash": 144,
    "./sha512": 151,
    inherits: 101,
    "safe-buffer": 143
  } ],
  151: [ function(require, module, exports) {
    var inherits = require("inherits");
    var Hash = require("./hash");
    var Buffer = require("safe-buffer").Buffer;
    var K = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
    var W = new Array(160);
    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }
    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }
    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
    }
    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }
    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
    }
    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }
    function getCarry(a, b) {
      return a >>> 0 < b >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M) {
      var W = this._w;
      var ah = 0 | this._ah;
      var bh = 0 | this._bh;
      var ch = 0 | this._ch;
      var dh = 0 | this._dh;
      var eh = 0 | this._eh;
      var fh = 0 | this._fh;
      var gh = 0 | this._gh;
      var hh = 0 | this._hh;
      var al = 0 | this._al;
      var bl = 0 | this._bl;
      var cl = 0 | this._cl;
      var dl = 0 | this._dl;
      var el = 0 | this._el;
      var fl = 0 | this._fl;
      var gl = 0 | this._gl;
      var hl = 0 | this._hl;
      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(4 * i);
        W[i + 1] = M.readInt32BE(4 * i + 4);
      }
      for (;i < 160; i += 2) {
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
      }
      for (var j = 0; j < 160; j += 2) {
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = Buffer.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };
    module.exports = Sha512;
  }, {
    "./hash": 144,
    inherits: 101,
    "safe-buffer": 143
  } ],
  152: [ function(require, module, exports) {
    module.exports = Stream;
    var EE = require("events").EventEmitter;
    var inherits = require("inherits");
    inherits(Stream, EE);
    Stream.Readable = require("readable-stream/readable.js");
    Stream.Writable = require("readable-stream/writable.js");
    Stream.Duplex = require("readable-stream/duplex.js");
    Stream.Transform = require("readable-stream/transform.js");
    Stream.PassThrough = require("readable-stream/passthrough.js");
    Stream.Stream = Stream;
    function Stream() {
      EE.call(this);
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        dest.writable && false === dest.write(chunk) && source.pause && source.pause();
      }
      source.on("data", ondata);
      function ondrain() {
        source.readable && source.resume && source.resume();
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || false !== options.end)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        "function" === typeof dest.destroy && dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (0 === EE.listenerCount(this, "error")) throw er;
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
  }, {
    events: 83,
    inherits: 101,
    "readable-stream/duplex.js": 127,
    "readable-stream/passthrough.js": 138,
    "readable-stream/readable.js": 139,
    "readable-stream/transform.js": 140,
    "readable-stream/writable.js": 141
  } ],
  153: [ function(require, module, exports) {
    var Buffer = require("buffer").Buffer;
    var isBufferEncoding = Buffer.isEncoding || function(encoding) {
      switch (encoding && encoding.toLowerCase()) {
       case "hex":
       case "utf8":
       case "utf-8":
       case "ascii":
       case "binary":
       case "base64":
       case "ucs2":
       case "ucs-2":
       case "utf16le":
       case "utf-16le":
       case "raw":
        return true;

       default:
        return false;
      }
    };
    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) throw new Error("Unknown encoding: " + encoding);
    }
    var StringDecoder = exports.StringDecoder = function(encoding) {
      this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
      assertEncoding(encoding);
      switch (this.encoding) {
       case "utf8":
        this.surrogateSize = 3;
        break;

       case "ucs2":
       case "utf16le":
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;

       case "base64":
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;

       default:
        this.write = passThroughWrite;
        return;
      }
      this.charBuffer = new Buffer(6);
      this.charReceived = 0;
      this.charLength = 0;
    };
    StringDecoder.prototype.write = function(buffer) {
      var charStr = "";
      while (this.charLength) {
        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;
        if (this.charReceived < this.charLength) return "";
        buffer = buffer.slice(available, buffer.length);
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 55296 && charCode <= 56319) {
          this.charLength += this.surrogateSize;
          charStr = "";
          continue;
        }
        this.charReceived = this.charLength = 0;
        if (0 === buffer.length) return charStr;
        break;
      }
      this.detectIncompleteChar(buffer);
      var end = buffer.length;
      if (this.charLength) {
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }
      charStr += buffer.toString(this.encoding, 0, end);
      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      if (charCode >= 55296 && charCode <= 56319) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }
      return charStr;
    };
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      var i = buffer.length >= 3 ? 3 : buffer.length;
      for (;i > 0; i--) {
        var c = buffer[buffer.length - i];
        if (1 == i && c >> 5 == 6) {
          this.charLength = 2;
          break;
        }
        if (i <= 2 && c >> 4 == 14) {
          this.charLength = 3;
          break;
        }
        if (i <= 3 && c >> 3 == 30) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };
    StringDecoder.prototype.end = function(buffer) {
      var res = "";
      buffer && buffer.length && (res = this.write(buffer));
      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }
      return res;
    };
    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }
    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }
    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }
  }, {
    buffer: 47
  } ],
  154: [ function(require, module, exports) {
    (function(global) {
      module.exports = deprecate;
      function deprecate(fn, msg) {
        if (config("noDeprecation")) return fn;
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            config("traceDeprecation") ? console.trace(msg) : console.warn(msg);
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      }
      function config(name) {
        try {
          if (!global.localStorage) return false;
        } catch (_) {
          return false;
        }
        var val = global.localStorage[name];
        if (null == val) return false;
        return "true" === String(val).toLowerCase();
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {} ],
  155: [ function(require, module, exports) {
    var indexOf = require("indexof");
    var Object_keys = function(obj) {
      if (Object.keys) return Object.keys(obj);
      var res = [];
      for (var key in obj) res.push(key);
      return res;
    };
    var forEach = function(xs, fn) {
      if (xs.forEach) return xs.forEach(fn);
      for (var i = 0; i < xs.length; i++) fn(xs[i], i, xs);
    };
    var defineProp = function() {
      try {
        Object.defineProperty({}, "_", {});
        return function(obj, name, value) {
          Object.defineProperty(obj, name, {
            writable: true,
            enumerable: false,
            configurable: true,
            value: value
          });
        };
      } catch (e) {
        return function(obj, name, value) {
          obj[name] = value;
        };
      }
    }();
    var globals = [ "Array", "Boolean", "Date", "Error", "EvalError", "Function", "Infinity", "JSON", "Math", "NaN", "Number", "Object", "RangeError", "ReferenceError", "RegExp", "String", "SyntaxError", "TypeError", "URIError", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "undefined", "unescape" ];
    function Context() {}
    Context.prototype = {};
    var Script = exports.Script = function NodeScript(code) {
      if (!(this instanceof Script)) return new Script(code);
      this.code = code;
    };
    Script.prototype.runInContext = function(context) {
      if (!(context instanceof Context)) throw new TypeError("needs a 'context' argument.");
      var iframe = document.createElement("iframe");
      iframe.style || (iframe.style = {});
      iframe.style.display = "none";
      document.body.appendChild(iframe);
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
      if (!wEval && wExecScript) {
        wExecScript.call(win, "null");
        wEval = win.eval;
      }
      forEach(Object_keys(context), function(key) {
        win[key] = context[key];
      });
      forEach(globals, function(key) {
        context[key] && (win[key] = context[key]);
      });
      var winKeys = Object_keys(win);
      var res = wEval.call(win, this.code);
      forEach(Object_keys(win), function(key) {
        (key in context || -1 === indexOf(winKeys, key)) && (context[key] = win[key]);
      });
      forEach(globals, function(key) {
        key in context || defineProp(context, key, win[key]);
      });
      document.body.removeChild(iframe);
      return res;
    };
    Script.prototype.runInThisContext = function() {
      return eval(this.code);
    };
    Script.prototype.runInNewContext = function(context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
      forEach(Object_keys(ctx), function(key) {
        context[key] = ctx[key];
      });
      return res;
    };
    forEach(Object_keys(Script.prototype), function(name) {
      exports[name] = Script[name] = function(code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
      };
    });
    exports.createScript = function(code) {
      return exports.Script(code);
    };
    exports.createContext = Script.createContext = function(context) {
      var copy = new Context();
      "object" === typeof context && forEach(Object_keys(context), function(key) {
        copy[key] = context[key];
      });
      return copy;
    };
  }, {
    indexof: 100
  } ],
  AILongestType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9deeD1/OlL9K1djcGTdy1u", "AILongestType");
    "use strict";
    ddz.AILongestType = cc.Class({
      getOneLongestCardType: function getOneLongestCardType(cards) {
        ddz.LOGD(null, "getLongestType");
        var availableCards = [];
        var types = ddz.RobotGlobal.judgeType(cards, false);
        if (types.length > 0) return cards.slice(0);
        var pc = ddz.RobotGlobal.getPCArrayByPoint(cards);
        pc.sort(ddz.GlobalFuncs._sortByPoint);
        var newarr = [];
        for (var index = 0; index < 15; index++) {
          var aObj = {
            point: index,
            count: 0,
            cards: []
          };
          for (var oldIndex = 0; oldIndex < pc.length; oldIndex++) {
            var oldObj = pc[oldIndex];
            if (oldObj.point == aObj.point) {
              aObj = oldObj;
              break;
            }
          }
          var cardsInfo = [];
          for (var cardsInfoIndex = 0; cardsInfoIndex < aObj.cards.length; cardsInfoIndex++) cardsInfo.push(aObj["cards"][cardsInfoIndex]);
          newarr.push({
            point: aObj.point,
            count: aObj.count,
            cards: cardsInfo
          });
        }
        var lz_obj = ddz.RobotGlobal.getLaiziObject(pc);
        var reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        var return_arr = ddz.RobotGlobal.findAvailableContinousDevide(newarr, 1, lz_obj).cards;
        return_arr.length > 0 && availableCards.push({
          count: return_arr.length,
          cards: return_arr
        });
        reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        return_arr = ddz.RobotGlobal.findAvailableContinousDevide(newarr, 2, lz_obj).cards;
        return_arr.length > 0 && availableCards.push({
          count: return_arr.length,
          cards: return_arr
        });
        reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        if (2 == availableCards.length) return 2 * availableCards[0].count <= availableCards[1].count ? availableCards[1]["cards"] : availableCards[0]["cards"];
        if (!(availableCards.length > 0)) return cards;
        availableCards.sort(this._sortByCount);
        if (availableCards[0]["cards"].length > 0) return availableCards[0]["cards"];
      },
      _sortByCount: function _sortByCount(o1, o2) {
        return o2.count - o1.count;
      }
    });
    cc._RF.pop();
  }, {} ],
  AIRobot: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "65186F3FftMdLsdrhEpsImL", "AIRobot");
    "use strict";
    require("AILongestType");
    ddz.AIRobot = cc.Class({
      ctor: function ctor() {
        ddz.LOGD(null, " in ctor new ddz.AIRobot");
        this._isGrab = false;
        this.playerCards = [];
        this.called = [];
        this.cards = [];
        this.cardNum = 54;
        this.dizhuPos = 0;
        this.currentPlayPos = 0;
        this.lastPlayPos = 0;
        this.playerNum = 3;
        this.dipai = [];
        this.topCards = [];
        this.callMulti = 1;
        this.bombCount = 0;
        this.chuntian = 1;
        this.bcmulti = 1;
        this.showmulti = 1;
        this.seatPlayCardCount = [ 0, 0, 0 ];
        this.winStreakNum = 0;
        this._longestType = new ddz.AILongestType(this);
      },
      addBombCount: function addBombCount() {
        this.bombCount++;
      },
      setIsGrab: function setIsGrab(bIsGrab) {
        this._isGrab = bIsGrab;
      },
      reset: function reset() {
        ddz.LOGD(null, "reset in AI.................");
        this.playerCards = [];
        this.called = [];
        this.cards = [];
        this.dizhuPos = 0;
        this.currentPlayPos = 0;
        this.lastPlayPos = 0;
        this.dipai = [];
        this.topCards = [];
        this.callMulti = 1;
        this.bombCount = 0;
        this.chuntian = 1;
        this.bcmulti = 1;
        this.showmulti = 1;
      },
      shuffle: function shuffle() {
        var deck = this.cards;
        var i = 0;
        for (i = 0; i < this.cardNum; i++) deck[i] = i;
        for (i = this.cardNum - 1; i > 0; i--) {
          var r = Math.floor(Math.random() * (i + 1));
          var tmp;
          tmp = deck[i];
          deck[i] = deck[r];
          deck[r] = tmp;
        }
      },
      fapai: function fapai(argument) {
        for (var i = 0; i < this.playerNum; i++) this.playerCards[i] = this.cards.slice(17 * i, 17 * (i + 1));
        this.dipai = this.cards.slice(51, 54);
      },
      setCall: function setCall(call, seatIndex) {
        if (seatIndex < 1 || seatIndex > 3) {
          ddz.LOGD(null, "error seat index in set call!!! return");
          return;
        }
        this.called[seatIndex - 1] = call;
        this._isGrab || 3 != call || (this.dizhuPos = 1);
        if (this._isGrab && this.called.length > 1) if (1 == call) {
          this.dizhuPos = 1;
          this.callMulti *= 2;
        } else this.dizhuPos = 1 == this.called[2] ? 3 : 2;
      },
      getCall: function getCall(seatIndex) {
        if (seatIndex < 1 || seatIndex > 3) {
          ddz.LOGD(null, "error seat index in set call!!! return");
          return;
        }
        if (this.called.length >= seatIndex) {
          ddz.LOGD(null, "this seatindex called, error ,return");
          return;
        }
        var call;
        if (this._isGrab) {
          if (2 == seatIndex) {
            call = Math.floor(2 * Math.random());
            call > 0 && (this.callMulti *= 2);
            this.called[1] = call;
          } else if (3 == seatIndex) {
            if (0 == this.called[0] && 0 == this.called[1]) call = 1; else {
              call = Math.floor(2 * Math.random());
              call > 0 && (this.callMulti *= 2);
            }
            this.called[2] = call;
          } else call = this.called[0];
          0 == this.called[0] ? this.dizhuPos = 1 == this.called[2] ? 3 : 2 : 3 == this.called.length && 0 == this.called[1] && 0 == this.called[2] && (this.dizhuPos = 1);
        } else {
          if (1 == seatIndex) call = this.called[0]; else if (2 == seatIndex) {
            do {
              call = Math.floor(4 * Math.random());
            } while (0 != call && call <= this.called[0]);
            this.called[1] = call;
            call > 0 && (this.callMulti = call);
          } else {
            call = 3;
            this.callMulti = 3;
            this.called[2] = call;
          }
          3 == call && (this.dizhuPos = seatIndex);
        }
        return call;
      },
      onDestroy: function onDestroy() {
        ddz.LOGD(null, " onDestroy ----\x3eddz.AIRobot");
      },
      playAGame: function playAGame() {
        this.initGame();
      },
      initGame: function initGame() {
        ddz.LOGD(null, "init game in AI");
        this.shuffle();
        this.fapai();
      },
      playCards: function playCards(seatIndex, cards) {
        this.currentPlayPos = ddz.GlobalFuncs.GetNextIndex(this.currentPlayPos);
        if (0 == cards.length) return;
        this.seatPlayCardCount[seatIndex - 1] += 1;
        this.lastPlayPos = seatIndex;
        this.topCards = cards;
        ddz.LOGD(null, "this.topCards = " + this.topCards);
      },
      genOneStep: function genOneStep() {
        var cards;
        if (0 == this.lastPlayPos || this.lastPlayPos == this.currentPlayPos) {
          ddz.LOGD(null, "play cards actively......");
          cards = this.playActively(this.currentPlayPos);
        } else cards = this._passivityCards();
        this.playCards(this.currentPlayPos, cards);
        return cards;
      },
      _passivityCards: function _passivityCards() {
        var types = ddz.RobotGlobal.judgeType(this.topCards, false);
        if (0 == types.length) {
          ddz.LOGD(null, "error!!! top cards illegal...");
          hall.GlobalFuncs.PrintArray(this.topCards);
        }
        if (!this._isIntervene(types[0])) {
          ddz.LOGD(null, "not isIntervene, this.currentPlayPos = " + this.currentPlayPos);
          return [];
        }
        var win_cards = this.findWinCardsFromArray(types[0], this.playerCards[this.currentPlayPos - 1]);
        !this._isDizhu(this.currentPlayPos) && !this._isDizhu(this.lastPlayPos) && win_cards.length > 0 && (win_cards = this._filterFollowCards(win_cards));
        return win_cards.length > 0 ? win_cards[0] : [];
      },
      _isIntervene: function _isIntervene(cardType) {
        if (this.dizhuPos == this.currentPlayPos) return true;
        if (this.dizhuPos == this.lastPlayPos) return true;
        return this._isIntervenePartner(cardType);
      },
      _isIntervenePartner: function _isIntervenePartner(cardType) {
        if (this.dizhuPos == this.lastPlayPos) {
          ddz.LOGD(null, "Error，not my partner !!!!");
          return true;
        }
        if (1 == this._getCardsCnt(this.currentPlayPos)) return true;
        if (this._getCardsCnt(this.lastPlayPos) <= 1) return false;
        if (this._getCardsCnt(this.currentPlayPos) <= 2) return true;
        return this._isFollowUpPartner(cardType);
      },
      _isFollowUpPartner: function _isFollowUpPartner(cardType) {
        if (this._isDizhu(this.lastPlayPos)) return true;
        if (this._isDizhu(ddz.GlobalFuncs.getPreIndex(this.currentPlayPos))) return false;
        if (cardType.getType() > ddz.Enums.PaixingType.DOUBLE_CARD) return false;
        if (cardType.getType() == ddz.Enums.PaixingType.SINGLE_CARD) {
          if (cardType.getPoint() < 11) return true;
          return false;
        }
        if (cardType.getPoint() < 10) return true;
        return false;
      },
      _filterFollowCards: function _filterFollowCards(srcCards) {
        if (srcCards.length <= 0) return srcCards;
        var types = ddz.RobotGlobal.judgeType(srcCards[0], false);
        if (types.length < 0) return srcCards;
        if (types[0].getPoint() >= 12) return [];
        return srcCards;
      },
      _getCardsCnt: function _getCardsCnt(playerPos) {
        return this.playerCards[playerPos - 1].length;
      },
      _isDizhu: function _isDizhu(pos) {
        return this.dizhuPos == pos;
      },
      checkGameOver: function checkGameOver() {
        for (var i = 0; i < 3; i++) if (0 == this.playerCards[i].length) return {
          dizhuwin: i + 1 == this.dizhuPos
        };
        return null;
      },
      startGame: function startGame() {
        ddz.LOGD(null, "start game, set current playpos " + this.dizhuPos);
        this.currentPlayPos = this.dizhuPos;
      },
      _dumpResultArr: function _dumpResultArr(strDescribe, arr) {},
      _findLongestFromSelectedCards: function _findLongestFromSelectedCards(arr) {
        return this._longestType.getOneLongestCardType(arr);
      },
      playActively: function playActively(seatIndex) {
        if (1 == seatIndex) {
          ddz.LOGD(null, "error!!! seatindex == 1 in playActively");
          return [];
        }
        var cards = this.playerCards[seatIndex - 1];
        var types = ddz.RobotGlobal.judgeType(cards, false);
        if (types.length > 0) return cards.slice(0);
        if (this._rocketWin(cards)) return [ 52, 53 ];
        var pc = this._getPCArrayByPoint(cards);
        pc.sort(this._sortByPoint);
        var newarr = [];
        for (index = 0; index < 15; index++) {
          var aObj = {
            point: index,
            count: 0,
            cards: []
          };
          for (var oldIndex = 0; oldIndex < pc.length; oldIndex++) {
            var oldObj = pc[oldIndex];
            if (oldObj.point == aObj.point) {
              aObj = oldObj;
              break;
            }
          }
          var cardsInfo = [];
          for (var cardsInfoIndex = 0; cardsInfoIndex < aObj.cards.length; cardsInfoIndex++) cardsInfo.push(aObj["cards"][cardsInfoIndex]);
          newarr.push({
            point: aObj.point,
            count: aObj.count,
            cards: cardsInfo
          });
        }
        var i = 0, tmp, str;
        ddz.LOGD(null, "dump _fillDicarr in play actively..........");
        for (i = 0; i < newarr.length; i++) {
          tmp = newarr[i];
          ddz.LOGD(null, "point : " + tmp.point + " count: " + tmp.count);
          str = "";
          for (var j = 0; j < tmp.count; j++) {
            var point = ddz.GlobalFuncs.numberToPoint(tmp.cards[j]);
            str = str + "[" + point + "]";
          }
          ddz.LOGD(null, str);
        }
        ddz.LOGD(null, "dump _fillDicarr in play actively.......... end");
        var lz_obj = this._getLaiziObject(newarr);
        ddz.LOGD(null, "laizi count " + lz_obj.count + "; laizi are ");
        for (i = 0; i < lz_obj.cards.length; i++) ddz.LOGD(null, lz_obj.cards[i]);
        var reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        var return_arr = this._findAvailableAircraft(newarr, lz_obj);
        if (return_arr.length > 0) {
          this._dumpResultArr("found aircraft", return_arr);
          return return_arr;
        }
        lz_obj.count = reportLaiziCount;
        return_arr = this._findAvailableAircraft(newarr, lz_obj);
        if (return_arr.length > 0) {
          this._dumpResultArr("found aircraft", return_arr);
          return return_arr;
        }
        reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        return_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards;
        if (return_arr.length > 0) {
          this._dumpResultArr("found liandui", return_arr);
          return return_arr;
        }
        lz_obj.count = reportLaiziCount;
        return_arr = this._findAvailableContinous(newarr, 2, lz_obj).cards;
        if (return_arr.length > 0) {
          this._dumpResultArr("found liandui", return_arr);
          return return_arr;
        }
        reportLaiziCount = lz_obj.count;
        lz_obj.count = 0;
        return_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards;
        if (return_arr.length > 0) {
          this._dumpResultArr("found shunzi", return_arr);
          return return_arr;
        }
        lz_obj.count = reportLaiziCount;
        return_arr = this._findAvailableContinous(newarr, 1, lz_obj).cards;
        if (return_arr.length > 0) {
          this._dumpResultArr("found shunzi", return_arr);
          return return_arr;
        }
        return_arr = this._findAvailableThree(newarr, lz_obj);
        if (return_arr.length > 0) {
          this._dumpResultArr("found three", return_arr);
          return return_arr;
        }
        var enemyIndex;
        var preIndex = ddz.GlobalFuncs.getPreIndex(this.currentPlayPos);
        enemyIndex = this.dizhuPos == preIndex ? preIndex : ddz.GlobalFuncs.GetNextIndex(this.currentPlayPos);
        var enemyCardsLen = this.playerCards[enemyIndex - 1].length;
        var pairs, singles;
        if (enemyCardsLen > 4) {
          pairs = this._findMinDouble(lz_obj, pc, 1, [], false);
          if (pairs.length > 0) {
            ddz.LOGD(null, "find min double in find available aircraft....");
            this._dumpResultArr("found min double", pairs[0]);
            return pairs[0];
          }
          singles = this._findMinSingle(lz_obj, pc, 1, [], false);
          0 == singles.length && ddz.LOGD(null, "assert!!!! error in play actively!!");
          this._dumpResultArr("found min single", singles);
          return singles;
        }
        this.dizhuPos != preIndex && pc.reverse();
        if (enemyCardsLen % 2 == 1) {
          pairs = this._findMinDouble(lz_obj, pc, 1, [], false);
          if (pairs.length > 0) {
            ddz.LOGD(null, "find min double in find available aircraft....");
            this._dumpResultArr("found min double", pairs[0]);
            return pairs[0];
          }
          singles = this._findMinSingle(lz_obj, pc, 1, [], false);
          this._dumpResultArr("found min single", singles);
          return singles;
        }
        singles = this._findMinSingle(lz_obj, pc, 1, [], false);
        if (singles.length > 0) {
          ddz.LOGD(null, "find min double in find available aircraft....");
          this._dumpResultArr("found min single", singles);
          return singles;
        }
        pairs = this._findMinDouble(lz_obj, pc, 1, [], false);
        0 == pairs.length && ddz.LOGD(null, "assert!!!! error in play actively!!");
        this._dumpResultArr("found min double", pairs[0]);
        return pairs[0];
      },
      sordPlayCards: function sordPlayCards(cardNums) {
        var cards = cardNums;
        var rtnCards = [];
        var tmpCardNums = [];
        var tmpPoint = -1;
        var sortFunc = function sortFunc(a, b) {
          return a > 53 || b > 53 ? a - b : b - a;
        };
        for (var i = 0; i < cards.length; i++) {
          var num = cards[i];
          var point = ddz.GlobalFuncs.numberToPoint(num);
          if (point != tmpPoint) {
            if (tmpCardNums.length > 0) {
              tmpCardNums.sort(sortFunc);
              rtnCards = rtnCards.concat(tmpCardNums);
            }
            tmpCardNums = [ num ];
            tmpPoint = point;
          } else tmpCardNums.push(num);
        }
        if (tmpCardNums.length > 0) {
          tmpCardNums.sort(sortFunc);
          rtnCards = rtnCards.concat(tmpCardNums);
        }
        return rtnCards;
      }
    });
    cc._RF.pop();
  }, {
    AILongestType: "AILongestType"
  } ],
  AITypeJudger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "14acbHddVNJuamfT3BaQMkI", "AITypeJudger");
    "use strict";
    var _is1 = function _is1(dicarr, lz_obj, types) {
      var pos = dicarr[0].point;
      var cards = dicarr[0].cards;
      dicarr[0].count < 1 && (cards = cards.concat(lz_obj.cards));
      types.push(new ddz.CardType(ddz.Enums.PaixingType.SINGLE_CARD, pos, 1, cards));
    };
    var _is2 = function _is2(dicarr, lz_obj, types) {
      for (var i = 0; i < dicarr.length; i++) {
        var tmp = dicarr[i];
        if (tmp.point > 12) continue;
        var need = 2 - tmp.count;
        if (need <= lz_obj.count) {
          var cards = [].concat(tmp.cards);
          for (var j = 0; j < need; j++) cards.push(ddz.GlobalFuncs.getLaiziNumByValue(tmp.point));
          var cardType = new ddz.CardType(ddz.Enums.PaixingType.DOUBLE_CARD, tmp.point, 2, cards);
          types.push(cardType);
        }
      }
    };
    var _isRocket = function _isRocket(arr, types) {
      (52 == arr[0] && 53 == arr[1] || 53 == arr[0] && 52 == arr[1]) && types.push(new ddz.CardType(ddz.Enums.PaixingType.ROCKET, 13, 2, [ 52, 53 ]));
    };
    var _is3 = function _is3(dicarr, lz_obj, types) {
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (tmp.point > 12) continue;
        var need = 3 - tmp.count;
        if (need == lz_obj.count) {
          var cards = tmp.cards.slice(0);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var i = 0; i < need; i++) cards.push(n);
          }
          types.push(new ddz.CardType(ddz.Enums.PaixingType.THREE_CARD, tmp.point, 3, cards));
          break;
        }
      }
    };
    var _is31 = function _is31(dicarr, lz_obj, types) {
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (tmp.point > 12) continue;
        var need = 3 - tmp.count;
        need < 0 && (need = 0);
        if (need <= lz_obj.count) {
          var cards = [].concat(tmp.cards);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var i = 0; i < need; i++) cards.push(n);
          }
          var left = lz_obj.count - need;
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var j = 0; j < left; j++) cards.push(lz_card);
          }
          for (var j = 0; j < dicarr.length; j++) j != index && (cards = cards.concat(dicarr[j].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.THREE_ONE_CARD, tmp.point, 4, cards));
          break;
        }
      }
    };
    var _checkDoubles = function _checkDoubles(dicarr, count, lz_obj) {
      var c = 0;
      var lz_need = 0;
      var cards = [];
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (0 == tmp.count || tmp.point > 12) continue;
        var need = 2 - tmp.count;
        if (need < 0) {
          c += 2;
          need = -2 == need ? 0 : 1;
        } else c += 1;
        lz_need += need;
        if (!(lz_need <= lz_obj.count)) return null;
        cards = cards.concat(tmp.cards);
        if (need > 0) {
          var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
          for (var j = 0; j < need; j++) cards.push(n);
        }
      }
      var num = lz_obj.count - lz_need;
      if (2 * c + num == 2 * count) {
        var n = lz_obj.cards[0];
        for (var j = 0; j < num; j++) cards.push(n);
        return cards;
      }
      return null;
    };
    var _is32 = function _is32(dicarr, lz_obj, types) {
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (tmp.point > 12) continue;
        var need = 3 - tmp.count;
        if (need < 0) continue;
        if (need <= lz_obj.count) {
          var cards = tmp.cards.slice(0);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var i = 0; i < need; i++) cards.push(n);
          }
          var newarr = hall.GlobalFuncs.GetSubArrayExceptIndex(dicarr, [ index ]);
          var result = _checkDoubles(newarr, 1, {
            point: lz_obj.point,
            count: lz_obj.count - need,
            cards: lz_obj.cards
          });
          if (result) {
            cards = cards.concat(result);
            types.push(new ddz.CardType(ddz.Enums.PaixingType.THREE_TWO_CARD, tmp.point, 5, cards));
            break;
          }
        }
      }
    };
    var _isBomb = function _isBomb(dicarr, lz_obj, types, laiZiCnt) {
      for (var i = 0; i < dicarr.length; i++) {
        var tmp = dicarr[i];
        if (tmp.point > 12) continue;
        var need = 4 - tmp.count;
        if (need == lz_obj.count) {
          var cards = [].concat(tmp.cards);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var j = 0; j < need; j++) cards.push(n);
          }
          types.push(new ddz.CardType(ddz.Enums.PaixingType.BOMB_CARD, tmp.point, 4, cards, laiZiCnt));
        }
      }
    };
    var _is411 = function _is411(dicarr, lz_obj, types) {
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (tmp.point > 12) continue;
        var need = 4 - tmp.count;
        if (need <= lz_obj.count) {
          var cards = [].concat(tmp.cards);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var i = 0; i < need; i++) cards.push(n);
          }
          var left = lz_obj.count - need;
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var j = 0; j < left; j++) cards.push(lz_card);
          }
          for (var j = 0; j < dicarr.length; j++) j != index && (cards = cards.concat(dicarr[j].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.BOMB_TWO_CARD, tmp.point, 6, cards));
          break;
        }
      }
    };
    var _is422 = function _is422(dicarr, lz_obj, types) {
      for (var index = 0; index < dicarr.length; index++) {
        var tmp = dicarr[index];
        if (tmp.point > 12) continue;
        var need = 4 - tmp.count;
        if (need <= lz_obj.count) {
          var cards = tmp.cards.slice(0);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
            for (var i = 0; i < need; i++) cards.push(n);
          }
          var newarr = hall.GlobalFuncs.GetSubArrayExceptIndex(dicarr, [ index ]);
          var result = _checkDoubles(newarr, 2, {
            point: lz_obj.point,
            count: lz_obj.count - need,
            cards: lz_obj.cards
          });
          if (result) {
            cards = cards.concat(result);
            types.push(new ddz.CardType(ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD, tmp.point, 8, cards));
            break;
          }
        }
      }
    };
    var _is3311 = function _is3311(newarr, lz_obj, types) {
      ddz.LOGD(null, "[_is3311][in]");
      for (var index = 3; index < newarr.length - 1; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        var left = lz_obj.count - need1 - need2;
        if (left >= 0) {
          var cards1 = tmp1.cards.slice(0);
          var cards2 = tmp2.cards.slice(0);
          if (need1 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
            for (var i = 0; i < need1; i++) cards1.push(n);
          }
          if (need2 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
            for (var i = 0; i < need2; i++) cards2.push(n);
          }
          var cards = cards1.concat(cards2);
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var i = 0; i < left; i++) cards.push(lz_card);
          }
          for (var i = 0; i < newarr.length; i++) i != index && i != index + 1 && (cards = cards.concat(newarr[i].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD, tmp2.point, 8, cards));
          break;
        }
      }
    };
    var _is3322 = function _is3322(newarr, lz_obj, types) {
      for (var index = 3; index < newarr.length - 1; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        var left = lz_obj.count - need1 - need2;
        if (left >= 0) {
          var subarr = hall.GlobalFuncs.GetSubArrayExceptIndex(newarr, [ index, index + 1 ]);
          var result = _checkDoubles(subarr, 2, {
            point: lz_obj.point,
            count: left,
            cards: lz_obj.cards
          });
          if (result) {
            var cards1 = tmp1.cards.slice(0);
            var cards2 = tmp2.cards.slice(0);
            if (need1 > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
              for (var i = 0; i < need1; i++) cards1.push(n);
            }
            if (need2 > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
              for (var i = 0; i < need2; i++) cards2.push(n);
            }
            var cards = cards1.concat(cards2);
            cards = cards.concat(result);
            var cardType = new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD, tmp2.point, 10, cards);
            types.push(cardType);
            break;
          }
        }
      }
    };
    var _is333111 = function _is333111(newarr, lz_obj, types) {
      for (var index = 3; index < newarr.length - 2; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var tmp3 = newarr[index + 2];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        var need3 = 3 - tmp3.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        need3 < 0 && (need3 = 0);
        var left = lz_obj.count - need1 - need2 - need3;
        if (left >= 0) {
          var cards = tmp1.cards.concat([]);
          if (need1 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
            for (var i = 0; i < need1; i++) cards.push(n);
          }
          cards = cards.concat(tmp2.cards);
          if (need2 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
            for (var i = 0; i < need2; i++) cards.push(n);
          }
          cards = cards.concat(tmp3.cards);
          if (need3 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp3.point);
            for (var i = 0; i < need3; i++) cards.push(n);
          }
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var i = 0; i < left; i++) cards.push(lz_card);
          }
          for (var i = 0; i < newarr.length; i++) i != index && i != index + 1 && i != index + 2 && (cards = cards.concat(newarr[i].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD, tmp3.point, 12, cards));
          break;
        }
      }
    };
    var _is333222 = function _is333222(newarr, lz_obj, types) {
      for (var index = 3; index < newarr.length - 2; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var tmp3 = newarr[index + 2];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        var need3 = 3 - tmp3.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        need3 < 0 && (need3 = 0);
        var left = lz_obj.count - need1 - need2 - need3;
        if (left >= 0) {
          var subarr = hall.GlobalFuncs.GetSubArrayExceptIndex(newarr, [ index, index + 1, index + 2 ]);
          var result = _checkDoubles(subarr, 3, {
            point: lz_obj.point,
            count: left,
            cards: lz_obj.cards
          });
          if (result) {
            var cards = tmp1.cards.concat([]);
            if (need1 > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
              for (var i = 0; i < need1; i++) cards.push(n);
            }
            cards = cards.concat(tmp2.cards);
            if (need2 > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
              for (var i = 0; i < need2; i++) cards.push(n);
            }
            cards = cards.concat(tmp3.cards);
            if (need3 > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp3.point);
              for (var i = 0; i < need3; i++) cards.push(n);
            }
            cards = cards.concat(result);
            types.push(new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD, tmp3.point, 15, cards));
            break;
          }
        }
      }
    };
    var _is33331111 = function _is33331111(newarr, lz_obj, types) {
      for (var index = 3; index < newarr.length - 3; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var tmp3 = newarr[index + 2];
        var tmp4 = newarr[index + 3];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        var need3 = 3 - tmp3.count;
        var need4 = 3 - tmp4.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        need3 < 0 && (need3 = 0);
        need4 < 0 && (need4 = 0);
        var left = lz_obj.count - need1 - need2 - need3 - need4;
        if (left >= 0) {
          var cards = tmp1.cards.concat([]);
          if (need1 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
            for (var i = 0; i < need1; i++) cards.push(n);
          }
          cards = cards.concat(tmp2.cards);
          if (need2 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
            for (var i = 0; i < need2; i++) cards.push(n);
          }
          cards = cards.concat(tmp3.cards);
          if (need3 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp3.point);
            for (var i = 0; i < need3; i++) cards.push(n);
          }
          cards = cards.concat(tmp4.cards);
          if (need4 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp4.point);
            for (var i = 0; i < need4; i++) cards.push(n);
          }
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var i = 0; i < left; i++) cards.push(lz_card);
          }
          for (var i = 0; i < newarr.length; i++) i != index && i != index + 1 && i != index + 2 && i != index + 3 && (cards = cards.concat(newarr[i].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD, tmp4.point, 16, cards));
          break;
        }
      }
    };
    var _is3333311111 = function _is3333311111(newarr, lz_obj, types) {
      for (var index = 3; index < newarr.length - 4; index++) {
        var tmp1 = newarr[index];
        var tmp2 = newarr[index + 1];
        var tmp3 = newarr[index + 2];
        var tmp4 = newarr[index + 3];
        var tmp5 = newarr[index + 4];
        var need1 = 3 - tmp1.count;
        var need2 = 3 - tmp2.count;
        var need3 = 3 - tmp3.count;
        var need4 = 3 - tmp4.count;
        var need5 = 3 - tmp5.count;
        need1 < 0 && (need1 = 0);
        need2 < 0 && (need2 = 0);
        need3 < 0 && (need3 = 0);
        need4 < 0 && (need4 = 0);
        need5 < 0 && (need5 = 0);
        var left = lz_obj.count - need1 - need2 - need3 - need4 - need5;
        if (left >= 0) {
          var cards = tmp1.cards.concat([]);
          if (need1 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp1.point);
            for (var i = 0; i < need1; i++) cards.push(n);
          }
          cards = cards.concat(tmp2.cards);
          if (need2 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp2.point);
            for (var i = 0; i < need2; i++) cards.push(n);
          }
          cards = cards.concat(tmp3.cards);
          if (need3 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp3.point);
            for (var i = 0; i < need3; i++) cards.push(n);
          }
          cards = cards.concat(tmp4.cards);
          if (need4 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp4.point);
            for (var i = 0; i < need4; i++) cards.push(n);
          }
          cards = cards.concat(tmp5.cards);
          if (need5 > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp5.point);
            for (var i = 0; i < need5; i++) cards.push(n);
          }
          if (left > 0) {
            var lz_card = lz_obj.cards[0];
            for (var i = 0; i < left; i++) cards.push(lz_card);
          }
          for (var i = 0; i < newarr.length; i++) i != index && i != index + 1 && i != index + 2 && i != index + 3 && i != index + 4 && (cards = cards.concat(newarr[i].cards));
          types.push(new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD, tmp5.point, 20, cards));
          break;
        }
      }
    };
    var _isContinuous = function _isContinuous(newarr, lz_obj, total_count, types, cell_count) {
      if (newarr[0].count > 0 || newarr[1].count > 0 || newarr[2].count > 0) return;
      for (var index = 3; index < newarr.length; index++) {
        var lz_use = 0;
        var i = 0;
        var cards = [];
        var point = -1;
        var card_use = 0;
        while (i <= newarr.length - index - 1) {
          var sub_index = index + i;
          var tmp = newarr[sub_index];
          var need = cell_count - tmp.count;
          if (need < 0) {
            cards = [];
            break;
          }
          if (lz_use > lz_obj.count - need) break;
          lz_use += need;
          point = tmp.point;
          cards = cards.concat(tmp.cards);
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(point);
            for (var j = 0; j < need; j++) cards.push(n);
          }
          card_use += tmp.count;
          i++;
        }
        var clen = cards.length;
        if (clen >= 5 && lz_obj.count == lz_use && card_use + lz_use == total_count) {
          var cardType;
          switch (cell_count) {
           case 1:
            cardType = new ddz.CardType(ddz.Enums.PaixingType.SHUNZI_CARD, point, clen, cards);
            types.push(cardType);
            break;

           case 2:
            cardType = new ddz.CardType(ddz.Enums.PaixingType.LIANDUI_CARD, point, clen, cards);
            types.push(cardType);
            break;

           case 3:
            cardType = new ddz.CardType(ddz.Enums.PaixingType.AIRCRAFT_CARD, point, clen, cards);
            types.push(cardType);
          }
          break;
        }
      }
    };
    ddz.AITypeJudger = function(arr, dicarr, newarr, lz_obj, laiZiCnt) {
      ddz.LOGD(null, "in judge type in robot ai....");
      ddz.LOGD(null, "laiZiCnt=" + laiZiCnt);
      var types = [];
      var len = arr.length;
      ddz.LOGD(null, "[judgeType] len = " + len);
      switch (len) {
       case 1:
        _is1(dicarr, lz_obj, types);
        break;

       case 2:
        _isRocket(arr, types);
        _is2(dicarr, lz_obj, types);
        break;

       case 3:
        _is3(dicarr, lz_obj, types);
        break;

       case 4:
        _isBomb(dicarr, lz_obj, types, laiZiCnt);
        _is31(dicarr, lz_obj, types);
        break;

       case 5:
        _is32(dicarr, lz_obj, types);
        break;

       case 6:
        _is411(dicarr, lz_obj, types);
        break;

       case 8:
        _is422(dicarr, lz_obj, types);
        _is3311(newarr, lz_obj, types);
        break;

       case 10:
        _is3322(newarr, lz_obj, types);
        break;

       case 12:
        _is333111(newarr, lz_obj, types);
        break;

       case 15:
        _is333222(newarr, lz_obj, types);
        break;

       case 16:
        _is33331111(newarr, lz_obj, types);
        break;

       case 20:
        _is3333311111(newarr, lz_obj, types);
      }
      if (len > 4) {
        _isContinuous(newarr, lz_obj, len, types, 1);
        _isContinuous(newarr, lz_obj, len, types, 2);
        _isContinuous(newarr, lz_obj, len, types, 3);
      }
      return types;
    };
    cc._RF.pop();
  }, {} ],
  AdManager_tywx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbcc4ezTNxBr7xpqIB5gTHU", "AdManager_tywx");
    "use strict";
    hall.AdManagerTYWX = {
      retryCrossTimes: 3,
      retryBannerTimes: 3,
      AnimType: {
        STATIC: 1,
        SHAKE: 2,
        FRAME: 3
      },
      adNodeList: [],
      bannerNodeList: [],
      allAdInfoList: [],
      allBannerInfoList: [],
      rawAdInfoList: [],
      rawBannerInfoList: [],
      showAd: function showAd(position, tag) {
        var _adnode = new hall.AdManagerTYWX.adNodeClass();
        _adnode.adInfoList = JSON.parse(JSON.stringify(hall.AdManagerTYWX.allAdInfoList));
        _adnode.adType = 1;
        _adnode.adTag = tag;
        _adnode.createAdNode(position);
        hall.AdManagerTYWX.adNodeList.push(_adnode);
      },
      showBanner: function showBanner(position, tag) {
        var _adnode = new hall.AdManagerTYWX.adNodeClass();
        _adnode.adInfoList = JSON.parse(JSON.stringify(hall.AdManagerTYWX.allBannerInfoList));
        _adnode.adType = 2;
        _adnode.adTag = tag;
        _adnode.createAdNode(position);
        hall.AdManagerTYWX.bannerNodeList.push(_adnode);
      },
      getAdNodeList: function getAdNodeList() {
        return this.adNodeList;
      },
      getAdNodeByTag: function getAdNodeByTag(tag) {
        if (!tag) return null;
        for (var n in this.adNodeList) if (this.adNodeList[n].adTag.toString() == tag.toString()) return this.adNodeList[n];
        return null;
      },
      getBannerNodeList: function getBannerNodeList() {
        return this.bannerNodeList;
      },
      getBannerNodeByTag: function getBannerNodeByTag(tag) {
        if (!tag) return null;
        for (var n in this.bannerNodeList) if (this.bannerNodeList[n].adTag.toString() == tag.toString()) return this.bannerNodeList[n];
        return null;
      },
      getAdInfoList: function getAdInfoList() {
        return this.allAdInfoList;
      },
      getBannerInfoList: function getBannerInfoList() {
        return this.allBannerInfoList;
      },
      adNodeClass: function adNodeClass() {
        this.adType = 0;
        this.adIconBtn = null;
        this.currentAdInfo = null;
        this.currentWebPage = null;
        this.adInfoList = [];
        this.adTag = "";
      },
      adNodeObj: {
        createAdNode: function createAdNode(pos) {
          this.genRandomFirstAdInfo();
          if (!this.currentAdInfo) return;
          if (this.adIconBtn) this.adIconBtn.active = true; else {
            var that = this;
            cc.loader.loadRes("prefabs/adNode", function(err, prefab) {
              var preFabNode = cc.instantiate(prefab);
              preFabNode.setLocalZOrder(888888);
              var _pos = pos || {
                x: 0,
                y: 0
              };
              preFabNode.position = cc.p(_pos.x, _pos.y);
              that.adIconBtn = preFabNode;
              cc.game.addPersistRootNode(preFabNode);
              that.adIconNode();
              var adButton = that.adIconBtn.getChildByName("adButton");
              adButton.on("click", function() {
                that.onClickAdIconBtn();
              });
            });
          }
        },
        genRandomFirstAdInfo: function genRandomFirstAdInfo() {
          var that = this;
          if (0 == this.adInfoList.length) return;
          var weight_list = [ {
            weight: 0,
            id: "000"
          } ];
          for (var i in this.adInfoList) {
            var _randomObj = {
              weight: parseInt(that.adInfoList[i].icon_weight),
              id: that.adInfoList[i].icon_id
            };
            weight_list.push(_randomObj);
          }
          weight_list.sort(function(a, b) {
            return a.weight > b.weight;
          });
          var _total = 0;
          weight_list.forEach(function(element) {
            _total += element.weight;
          });
          var _randomIndex = parseInt(1e4 * Math.random()) % (_total + 1);
          var _tTotal = 0;
          var _selectIndex = 0;
          for (var i = 0; i < weight_list.length - 1; i++) {
            _tTotal += weight_list[i].weight;
            if (_tTotal < _randomIndex && _tTotal + weight_list[i + 1].weight >= _randomIndex) {
              _selectIndex = i + 1;
              break;
            }
          }
          var _selectObj = weight_list[_selectIndex];
          this.adInfoList.forEach(function(element) {
            element.icon_id == _selectObj.id && (that.currentAdInfo = element);
          });
        },
        genRandomSecondAdInfo: function genRandomSecondAdInfo() {
          var that = this;
          var _webPages = this.currentAdInfo.webpages;
          if ("undefined" === typeof _webPages || 0 == _webPages.length) return;
          var weight_list = [ {
            weight: 0,
            id: "000"
          } ];
          for (var i in _webPages) {
            var _randomObj = {
              weight: parseInt(_webPages[i].webpage_weight),
              id: _webPages[i].config_id
            };
            weight_list.push(_randomObj);
          }
          weight_list.sort(function(a, b) {
            return a.weight > b.weight;
          });
          var _total = 0;
          weight_list.forEach(function(element) {
            _total += element.weight;
          });
          var _randomIndex = parseInt(1e4 * Math.random()) % (_total + 1);
          var _tTotal = 0;
          var _selectIndex = 0;
          for (var i = 0; i < weight_list.length - 1; i++) {
            _tTotal += weight_list[i].weight;
            if (_tTotal < _randomIndex && _tTotal + weight_list[i + 1].weight >= _randomIndex) {
              _selectIndex = i + 1;
              break;
            }
          }
          var _selectObj = weight_list[_selectIndex];
          _webPages.forEach(function(element) {
            element.config_id == _selectObj.id && (that.currentWebPage = element);
          });
        },
        adIconNode: function adIconNode() {
          if (!this.currentAdInfo || !this.adIconBtn) return;
          var _animaType = this.currentAdInfo.icon_type;
          var that = this;
          var spriteIco = this.adIconBtn.getChildByName("adIcon");
          var adButton = this.adIconBtn.getChildByName("adButton");
          spriteIco.stopAllActions();
          spriteIco.removeComponent(cc.Animation);
          spriteIco.setRotation(0);
          switch (_animaType) {
           case hall.AdManagerTYWX.AnimType.STATIC:
            cc.loader.load({
              url: that.currentAdInfo.icon_url[0]
            }, function(err, texture) {
              if (!err) {
                spriteIco.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
                if (texture && texture.width && texture.height) {
                  spriteIco.setContentSize(cc.size(texture.width, texture.height));
                  adButton.setContentSize(cc.size(texture.width, texture.height));
                }
              }
            });
            break;

           case hall.AdManagerTYWX.AnimType.SHAKE:
            cc.loader.load({
              url: that.currentAdInfo.icon_url[0]
            }, function(error, texture) {
              spriteIco.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
              if (texture && texture.width && texture.height) {
                spriteIco.setContentSize(cc.size(texture.width, texture.height));
                adButton.setContentSize(cc.size(texture.width, texture.height));
              }
              spriteIco.anchorX = .5;
              spriteIco.anchorY = .5;
              var _act1 = cc.rotateBy(.06, -20);
              var _act2 = cc.rotateBy(.12, 40);
              var _act3 = cc.rotateBy(.12, -40);
              var _act4 = cc.rotateBy(.06, 20);
              var _delay = cc.delayTime(1);
              spriteIco.runAction(cc.repeatForever(cc.sequence(_act1, cc.repeat(cc.sequence(_act2, _act3), 4), _act4, _delay)));
            });
            break;

           case hall.AdManagerTYWX.AnimType.FRAME:
            var allFrames = [];
            var playFrameAction = function playFrameAction() {
              spriteIco.stopAllActions();
              spriteIco.removeComponent(cc.Animation);
              var _firstFrameIcon = allFrames[0].getTexture();
              if (_firstFrameIcon && _firstFrameIcon.width && _firstFrameIcon.height) {
                spriteIco.setContentSize(cc.size(_firstFrameIcon.width, _firstFrameIcon.height));
                adButton.setContentSize(cc.size(_firstFrameIcon.width, _firstFrameIcon.height));
              }
              var _time_interval = that.currentAdInfo.time_interval;
              var _frameRate = _time_interval && _time_interval > 0 ? 1e3 / _time_interval : 10;
              var animation = spriteIco.addComponent(cc.Animation);
              var clip = cc.AnimationClip.createWithSpriteFrames(allFrames, _frameRate);
              clip.name = "anim_frame";
              clip.wrapMode = cc.WrapMode.Loop;
              animation.addClip(clip);
              animation.play("anim_frame");
            };
            cc.loader.load(that.currentAdInfo.icon_url, function(err, results) {
              if (err) for (var i = 0; i < err.length; i++) cc.log("Error url [" + err[i] + "]: " + results.getError(err[i]));
              for (var i = 0; i < that.currentAdInfo.icon_url.length; i++) if (results.getContent(that.currentAdInfo.icon_url[i])) {
                var _frame = new cc.SpriteFrame(results.getContent(that.currentAdInfo.icon_url[i]));
                allFrames.push(_frame);
              }
              playFrameAction();
            });
          }
        },
        onClickAdIconBtn: function onClickAdIconBtn() {
          try {
            this.genRandomSecondAdInfo();
            var skip_type = this.currentAdInfo.icon_skip_type;
            var toappid = this.currentAdInfo.toappid;
            var togame = this.currentAdInfo.togame;
            var topath = this.currentAdInfo.path;
            var second_toappid = this.currentAdInfo.second_toappid;
            console.log("topath ====>" + topath);
            var that = this;
            var icon_id = this.currentAdInfo.icon_id;
            var config_id = "0";
            var webpage_url = "";
            var webpage_id = "0";
            if (this.currentWebPage && 1 == this.adType) {
              webpage_url = this.currentWebPage.webpage_url;
              config_id = this.currentWebPage.config_id;
              webpage_id = this.currentWebPage.webpage_id;
            }
            var bi_paramlist = [ icon_id, config_id, webpage_url, toappid, togame, webpage_id, that.adType ];
            console.log("bi_paramlist ====> " + JSON.stringify(bi_paramlist));
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickAdBtn, bi_paramlist);
            if (wx && wx.navigateToMiniProgram) {
              if (1 == skip_type) {
                wx.navigateToMiniProgram({
                  appId: toappid,
                  path: topath || "?from=adcross",
                  envVersion: "release",
                  extraData: {
                    from: topath || "?from=adcross"
                  },
                  success: function success(res) {
                    ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameSuccess, bi_paramlist);
                    console.log("wx.navigateToMiniProgram success");
                    console.log(res);
                  },
                  fail: function fail(res) {
                    ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameFail, bi_paramlist);
                    console.log("wx.navigateToMiniProgram fail");
                    console.log(res);
                  },
                  complete: function complete(res) {
                    console.log("navigateToMiniProgram ==== complete");
                    that.resetBtnIcon();
                  }
                });
                return;
              }
              2 == skip_type ? wx.navigateToMiniProgram({
                appId: second_toappid,
                path: topath || "?from=adcross",
                envVersion: "release",
                extraData: {
                  from: topath || "?from=adcross"
                },
                success: function success(res) {
                  ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameSuccess, bi_paramlist);
                  console.log("wx.navigateToMiniProgram success");
                  console.log(res);
                },
                fail: function fail(res) {
                  ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameFail, bi_paramlist);
                  console.log("wx.navigateToMiniProgram fail");
                  console.log(res);
                },
                complete: function complete(res) {
                  that.resetBtnIcon();
                  console.log("navigateToMiniProgram ==== complete");
                }
              }) : console.error("Unsupported skip type! Please Check!");
              return;
            }
            if (!that.currentWebPage || !that.currentWebPage.webpage_url) {
              that.resetBtnIcon();
              return;
            }
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickShowQRCode, bi_paramlist);
            hall.IsWechatPlatform() && wx.previewImage({
              current: [ that.currentWebPage.webpage_url ],
              urls: [ that.currentWebPage.webpage_url ],
              success: function success(res) {
                hall.LOGD(null, "预览图片成功！");
              },
              fail: function fail(res) {
                hall.LOGD(null, "预览图片失败！");
              },
              complete: function complete(res) {
                console.log("预览图片完成");
                that.resetBtnIcon();
              }
            });
          } catch (err) {
            console.log("error:", "hall.AdManagerTYWX.onClickAdIconBtn——" + JSON.stringify(err));
          }
        },
        resetBtnIcon: function resetBtnIcon() {
          if (!this.adIconBtn) return;
          this.genRandomFirstAdInfo();
          this.adIconNode();
        },
        onForeGround: function onForeGround() {
          this.adIconNode();
        },
        showAdNode: function showAdNode() {
          this.adIconBtn && this.adIconBtn && (this.adIconBtn.active = true);
        },
        hideAdNode: function hideAdNode() {
          this.adIconBtn && this.adIconBtn && (this.adIconBtn.active = false);
        }
      },
      freshAdIconByTime: function freshAdIconByTime() {
        hall.AdManagerTYWX.adNodeList.forEach(function(_adNode) {
          _adNode && _adNode.resetBtnIcon && _adNode.resetBtnIcon();
        });
      },
      freshAdBannerByTime: function freshAdBannerByTime() {
        hall.AdManagerTYWX.bannerNodeList.forEach(function(_adNode) {
          _adNode && _adNode.resetBtnIcon && _adNode.resetBtnIcon();
        });
      },
      startFreshAdIcon: function startFreshAdIcon() {
        var icon_interval = 10;
        for (var i = 0; i < this.allAdInfoList.length; i++) {
          var _icon_interval = this.allAdInfoList[i].icon_interval;
          if (_icon_interval) {
            icon_interval = parseInt(_icon_interval) > 0 ? parseInt(_icon_interval) : icon_interval;
            break;
          }
        }
        ty.Timer.cancelTimer(cc.director, hall.AdManagerTYWX.freshAdIconByTime);
        ty.Timer.setTimer(cc.director, hall.AdManagerTYWX.freshAdIconByTime, icon_interval, cc.macro.REPEAT_FOREVER, icon_interval);
        var banner_interval = 10;
        for (var i = 0; i < this.allBannerInfoList.length; i++) {
          var _icon_interval = this.allBannerInfoList[i].icon_interval;
          if (_icon_interval) {
            banner_interval = parseInt(_icon_interval) > 0 ? parseInt(_icon_interval) : banner_interval;
            break;
          }
        }
        ty.Timer.cancelTimer(cc.director, hall.AdManagerTYWX.freshAdBannerByTime);
        ty.Timer.setTimer(cc.director, hall.AdManagerTYWX.freshAdBannerByTime, banner_interval, cc.macro.REPEAT_FOREVER, banner_interval);
      },
      onForeGround: function onForeGround() {
        this.freshAdIconByTime();
        this.freshAdBannerByTime();
        this.startFreshAdIcon();
      },
      getConfigSignStr: function getConfigSignStr(reqObj) {
        var sortedKeys = Object.keys(reqObj).sort();
        var signStr = "";
        for (var i = 0; i < sortedKeys.length; i++) {
          var key = sortedKeys[i];
          if ("act" == key || "sign" == key) continue;
          signStr += key + "=" + reqObj[key];
        }
        var finalSign = hall.hex_md5("market.tuyoo.com-api-" + signStr + "-market.tuyoo-api") || "";
        return finalSign;
      },
      requestADInfo: function requestADInfo() {
        try {
          if (!hall.IsWechatPlatform()) return;
          this.retryCrossTimes--;
          var reqObj = {};
          var timeStamp = new Date().getTime();
          reqObj.act = "api.getCrossConfig";
          reqObj.time = timeStamp;
          reqObj.game_mark = ty.SystemInfo.cloudid + "-" + ty.SystemInfo.gameId;
          var signStr = this.getConfigSignStr(reqObj);
          var paramStrList = [];
          for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
          paramStrList.push("sign=" + signStr);
          var finalUrl = ty.SystemInfo.shareManagerUrl + "?" + paramStrList.join("&");
          var that = this;
          wx.request({
            url: finalUrl,
            method: "GET",
            success: function success(res) {
              if (200 == res.statusCode) {
                var ret = res.data;
                that.allAdInfoList = [];
                if (ret.retmsg) {
                  that.rawAdInfoList = ret.retmsg;
                  that.processRawConfigInfo();
                  ty.NotificationCenter.trigger(ty.EventType.GET_ADMANAGER_ICON_INFO_SUCCESS);
                }
                that.retryCrossTimes = 3;
              } else that.retryCrossTimes > 0 ? that.requestADInfo() : that.retryCrossTimes = 3;
            },
            fail: function fail(res) {
              that.retryCrossTimes > 0 ? that.requestADInfo() : that.retryCrossTimes = 3;
            }
          });
        } catch (err) {
          hall.LOGE("error:", "ty.AdManagerTYWX.requestADInfo——" + JSON.stringify(err));
        }
      },
      requestBannerInfo: function requestBannerInfo() {
        try {
          if (!hall.IsWechatPlatform()) return;
          this.retryBannerTimes--;
          var reqObj = {};
          var timeStamp = new Date().getTime();
          reqObj.act = "api.getBannerConfig";
          reqObj.time = timeStamp;
          reqObj.game_mark = ty.SystemInfo.cloudid + "-" + ty.SystemInfo.gameId;
          var signStr = this.getConfigSignStr(reqObj);
          var paramStrList = [];
          for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
          paramStrList.push("sign=" + signStr);
          var finalUrl = ty.SystemInfo.shareManagerUrl + "?" + paramStrList.join("&");
          var that = this;
          wx.request({
            url: finalUrl,
            method: "GET",
            success: function success(res) {
              if (200 == res.statusCode) {
                var ret = res.data;
                that.allBannerInfoList = [];
                if (ret.retmsg) {
                  that.rawBannerInfoList = ret.retmsg;
                  that.processRawConfigInfo();
                  ty.NotificationCenter.trigger(ty.EventType.GET_ADMANAGER_BANNER_INFO_SUCCESS);
                }
                that.retryBannerTimes = 3;
              } else that.retryBannerTimes > 0 ? that.requestBannerInfo() : that.retryBannerTimes = 3;
            },
            fail: function fail(res) {
              that.retryBannerTimes > 0 ? that.requestBannerInfo() : that.retryBannerTimes = 3;
            }
          });
        } catch (err) {
          hall.LOGE("error:", "hall.AdManagerTYWX.requestADInfo——" + JSON.stringify(err));
        }
      },
      requestLocalIPInfo: function requestLocalIPInfo() {
        var that = this;
        var _url = "https://iploc.ywdier.com/api/iploc5/search/city";
        wx.request({
          url: _url,
          success: function success(res) {
            if (200 == res.statusCode) {
              res.data && res.data.loc && (that.ipLocInfo = res.data);
              that.processRawConfigInfo();
            }
            console.error("requestLocalIPInfo ==>" + JSON.stringify(res));
          },
          fail: function fail(res) {}
        });
      },
      processRawConfigInfo: function processRawConfigInfo() {
        var that = this;
        this.allBannerInfoList = [];
        this.allAdInfoList = [];
        if (this.ipLocInfo && this.ipLocInfo.loc && this.ipLocInfo.loc[1]) {
          var _locProvince = this.ipLocInfo.loc[1];
          this.rawAdInfoList.forEach(function(v) {
            (void 0 == v.icon_weight || Math.floor(v.icon_weight) <= .1) && (v.icon_weight = 0);
            v.icon_weight = 10;
            var isForbidden = true;
            if (v.province && v.province instanceof Array) if (0 == v.province.length) isForbidden = false; else for (var i in v.province) {
              var _iProvince = v.province[i];
              if (_iProvince.indexOf(_locProvince) > -1) {
                isForbidden = false;
                break;
              }
            } else isForbidden = false;
            isForbidden || that.allAdInfoList.push(v);
          });
          this.rawBannerInfoList.forEach(function(v) {
            (void 0 == v.icon_weight || Math.floor(v.icon_weight) <= .1) && (v.icon_weight = 0);
            v.icon_weight = 10;
            var isForbidden = true;
            if (v.province && v.province instanceof Array) if (0 == v.province.length) isForbidden = false; else for (var i in v.province) {
              var _iProvince = v.province[i];
              if (_iProvince.indexOf(_locProvince) > -1) {
                isForbidden = false;
                break;
              }
            } else isForbidden = false;
            isForbidden || that.allBannerInfoList.push(v);
          });
        } else {
          this.rawAdInfoList.forEach(function(v) {
            (void 0 == v.icon_weight || Math.floor(v.icon_weight) <= .1) && (v.icon_weight = 0);
            (!v.province || v.province instanceof Array && 0 == v.province.length) && that.allAdInfoList.push(v);
          });
          this.rawBannerInfoList.forEach(function(v) {
            (void 0 == v.icon_weight || Math.floor(v.icon_weight) <= .1) && (v.icon_weight = 0);
            (!v.province || v.province instanceof Array && 0 == v.province.length) && that.allBannerInfoList.push(v);
          });
        }
      },
      init: function init() {
        this.requestLocalIPInfo();
        this.requestADInfo();
        this.requestBannerInfo();
      }
    };
    hall.AdManagerTYWX.adNodeClass.prototype = hall.AdManagerTYWX.adNodeObj;
    cc._RF.pop();
  }, {} ],
  AdManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a9ffmNW05JIr2l9TLjaBij", "AdManager");
    "use strict";
    hall.adManager = {
      icoBtn: null,
      videoAdId: "adunit-18726a0b6953b0d2",
      checkVideoTime: 3e5,
      canShowTableBanner: false,
      canShowTableTopBanner: false,
      canShowListSceneBanner: false,
      sysInfo: null,
      adIconBtn: null,
      adInfoList: [],
      currentAdInfo: null,
      currentWebPage: null,
      retryTimes: 3,
      AnimType: {
        STATIC: 1,
        SHAKE: 2,
        FRAME: 3
      },
      showAdIco: function showAdIco() {},
      showBigAd: function showBigAd() {
        var adPath = "https://richqn.nalrer.cn/dizhu/other_game_ico/fish/ad_big_fish.jpg";
        wx.previewImage({
          current: adPath,
          urls: [ adPath ],
          success: function success(res) {
            ddz.LOGD(null, "预览图片成功！");
          },
          fail: function fail(res) {
            ddz.LOGD(null, "预览图片失败！");
          }
        });
      },
      hideAdIco: function hideAdIco() {
        this.icoBtn && (this.icoBtn.active = false);
      },
      getSysInfo: function getSysInfo() {
        this.sysInfo || (this.sysInfo = wx.getSystemInfoSync());
        return this.sysInfo;
      },
      showRewardedVideo: function showRewardedVideo(adId, type) {
        if (!wx.hasOwnProperty("createRewardedVideoAd")) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWatchVideo, [ "not support", type ]);
          hall.LOGW(null, "玩家基础库,不支持激励广告视频!");
          hall.MsgBoxManager.showToast({
            title: "您的微信版本过低,请升级至6.6.6以上"
          });
          return;
        }
        this.destroyWidthBannerAd();
        var onvVdClose = function onvVdClose(res) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWatchVideo, [ "success", type ]);
          hall.LOGW(null, "广告播放完毕!" + JSON.stringify(res));
          var playEnded = !res || res && res.isEnded;
          ty.NotificationCenter.trigger(ddz.EventType.REWARD_VIDEO_COMPLETE, playEnded);
          hall.adManager.videoAdManager.offClose(onvVdClose);
          hall.adManager.canPlay = false;
          hall.adManager.checkVideoAd();
        };
        if (hall.adManager.canPlay) {
          this.canShowTableBanner = false;
          this.canShowTableTopBanner = false;
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWatchVideo, [ "begin", type ]);
          hall.adManager.videoAdManager.show();
          this.destroyWidthBannerAd();
          hall.adManager.videoAdManager.onClose(onvVdClose);
        } else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWatchVideo, [ "fail", type ]);
          ty.NotificationCenter.trigger(ddz.EventType.REWARD_VIDEO_COMPLETE, true);
        }
      },
      checkVideoAd: function checkVideoAd() {
        if (!wx.hasOwnProperty("createRewardedVideoAd")) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWatchVideo, [ "not support" ]);
          hall.LOGW(null, "玩家基础库,不支持激励广告视频!");
          return;
        }
        this.videoAdManager || (this.videoAdManager = wx.createRewardedVideoAd({
          adUnitId: hall.adManager.videoAdId
        }));
        this.videoAdManager.load().then(function() {
          hall.LOGW("====== 成功获取广告");
          hall.adManager.canPlay = true;
        }).catch(function(err) {
          hall.LOGW("====== 获取广告失败,继续获取", JSON.stringify(err));
          hall.adManager.canPlay = false;
          setTimeout(function() {
            hall.adManager.checkVideoAd();
          }, hall.adManager.checkVideoTime);
        });
      },
      canShowBanner: function canShowBanner() {
        return wx.hasOwnProperty("createBannerAd");
      },
      showBannerAd: function showBannerAd(adid) {
        if (!this.canShowBanner()) {
          hall.LOGW(null, "玩家基础库,不支持banner!");
          return;
        }
        var sysInfo = this.getSysInfo();
        var screenWidth = sysInfo.screenWidth;
        var screenHeight = sysInfo.screenHeight;
        var winSize = cc.director.getWinSize();
        this.destroyWidthBannerAd();
        hall.LOGW("showBannerAd", "当前屏幕宽度:" + screenWidth + "; screenHeight:" + screenHeight);
        var left_x = 0;
        screenWidth && screenWidth < 350 && (left_x = -30);
        ddz.curAllWidthBannerAd || (ddz.curAllWidthBannerAd = wx.createBannerAd({
          adUnitId: adid,
          style: {
            left: left_x,
            top: 0,
            width: 300
          }
        }));
        ddz.haveBanner = true;
        ddz.curAllWidthBannerAd.onResize(function(res) {
          hall.LOGW("showBannerAd", "当前banner,width:" + res.width + "; height:" + res.height);
          if (ddz.curAllWidthBannerAd) {
            ddz.curAllWidthBannerAd.style.left = left_x;
            ddz.curAllWidthBannerAd.style.top = screenHeight - res.height + 10;
          }
        });
        ddz.curAllWidthBannerAd.show();
      },
      showTopBannerAd: function showTopBannerAd(adid) {
        if (!this.canShowBanner()) {
          hall.LOGW(null, "玩家基础库,不支持banner!");
          return;
        }
        var sysInfo = this.getSysInfo();
        var screenWidth = sysInfo.screenWidth;
        var screenHeight = sysInfo.screenHeight;
        this.destroyWidthBannerAd();
        hall.LOGW("showTopBannerAd", "当前屏幕宽度:" + screenWidth + "; screenHeight:" + screenHeight);
        ddz.curTpoBannerAd = wx.createBannerAd({
          adUnitId: adid,
          style: {
            left: 0,
            top: -10,
            width: 300
          }
        });
        ddz.haveBanner = true;
        ddz.curTpoBannerAd.onResize(function(res) {
          hall.LOGW("showTopBannerAd", "当前banner,width:" + res.width + "; height:" + res.height);
          if (ddz.curTpoBannerAd) {
            ddz.curTpoBannerAd.style.left = (screenWidth - res.width) / 2;
            ddz.curTpoBannerAd.style.top = -10;
          }
        });
        ddz.curTpoBannerAd.show();
      },
      showAllWidthBannerAd: function showAllWidthBannerAd(adid) {
        if (!this.canShowBanner()) {
          hall.LOGW(null, "玩家基础库,不支持banner!");
          return;
        }
        var sysInfo = this.getSysInfo();
        var screenWidth = sysInfo.screenWidth;
        var screenHeight = sysInfo.screenHeight;
        this.destroyWidthBannerAd();
        hall.LOGW("showTopBannerAd", "当前屏幕宽度:" + screenWidth + "; screenHeight:" + screenHeight);
        ddz.curAllWidthBannerAd || (ddz.curAllWidthBannerAd = wx.createBannerAd({
          adUnitId: adid,
          style: {
            left: 0,
            top: 0,
            width: screenWidth
          }
        }));
        ddz.haveBanner = true;
        var interval = ddz.GlobalFuncs.getBannerIntervalY() || 0;
        ddz.curAllWidthBannerAd.onResize(function(res) {
          hall.LOGW("showAllWidthBannerAd", "当前banner,width:" + res.width + "; height:" + res.height);
          if (ddz.curAllWidthBannerAd) {
            ddz.curAllWidthBannerAd.style.left = (screenWidth - res.width) / 2;
            ddz.curAllWidthBannerAd.style.top = screenHeight - res.height - interval;
          }
        });
        ddz.curAllWidthBannerAd.onError(function(msg) {
          hall.LOGW("showAllWidthBannerAd", "onError,msg :" + JSON.stringify(msg));
          hall.AdManagerTYWX && hall.AdManagerTYWX.getBannerNodeByTag("tyBanner") ? hall.AdManagerTYWX.getBannerNodeByTag("tyBanner").showAdNode() : hall.AdManagerTYWX.showBanner(cc.p(cc.winSize.width / 2, 83), "tyBanner");
        });
        ddz.curAllWidthBannerAd.show();
        console.log("file = [..........   ......]", ddz.curAllWidthBannerAd);
        hall.AdManagerTYWX && hall.AdManagerTYWX.getBannerNodeByTag("tyBanner") && hall.AdManagerTYWX.getBannerNodeByTag("tyBanner").showAdNode();
      },
      showResurgenceBannerAd: function showResurgenceBannerAd(adid) {
        if (!this.canShowBanner()) {
          hall.LOGW(null, "玩家基础库,不支持banner!");
          return;
        }
        var sysInfo = this.getSysInfo();
        var screenWidth = sysInfo.screenWidth;
        var screenHeight = sysInfo.screenHeight;
        this.destroyWidthBannerAd();
        hall.LOGW("showTopBannerAd", "当前屏幕宽度:" + screenWidth + "; screenHeight:" + screenHeight);
        ddz.curAllWidthBannerAd || (ddz.curAllWidthBannerAd = wx.createBannerAd({
          adUnitId: adid,
          style: {
            left: 0,
            top: 0,
            width: screenWidth
          }
        }));
        ddz.haveBanner = true;
        ddz.curAllWidthBannerAd.onResize(function(res) {
          hall.LOGW("showResurgenceBannerAd", "当前banner,width:" + res.width + "; height:" + res.height);
          if (ddz.curAllWidthBannerAd) {
            ddz.curAllWidthBannerAd.style.left = (screenWidth - res.width) / 2;
            ddz.curAllWidthBannerAd.style.top = screenHeight / 2 - res.height;
          }
        });
        ddz.curAllWidthBannerAd.show();
      },
      hideBannerAd: function hideBannerAd() {
        ddz.curBannerAd && ddz.curBannerAd.hide();
        ddz.curTpoBannerAd && ddz.curTpoBannerAd.hide();
        ddz.curAllWidthBannerAd && ddz.curAllWidthBannerAd.hide();
        ddz.haveBanner = false;
      },
      destroyBannerAd: function destroyBannerAd() {
        ddz.haveBanner = false;
        if (ddz.curBannerAd) {
          ddz.curBannerAd.destroy && ddz.curBannerAd.destroy();
          ddz.curBannerAd = null;
        }
        if (ddz.curTpoBannerAd) {
          ddz.curTpoBannerAd.destroy && ddz.curTpoBannerAd.destroy();
          ddz.curTpoBannerAd = null;
        }
      },
      destroyWidthBannerAd: function destroyWidthBannerAd() {
        ddz.haveBanner = false;
        ddz.curAllWidthBannerAd && ddz.curAllWidthBannerAd.hide();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getBannerNodeByTag("tyBanner") && hall.AdManagerTYWX.getBannerNodeByTag("tyBanner").hideAdNode();
      },
      destroyResurgenceBannerAd: function destroyResurgenceBannerAd() {
        ddz.haveBanner = false;
        if (ddz.resurgenceBannerAd) {
          ddz.resurgenceBannerAd.destroy && ddz.resurgenceBannerAd.destroy();
          ddz.resurgenceBannerAd = null;
        }
      },
      requestADInfo: function requestADInfo() {
        this.retryTimes--;
        var reqObj = {};
        var timeStamp = new Date().getTime();
        reqObj.act = "api.getCrossConfig";
        reqObj.time = timeStamp;
        reqObj.game_mark = ty.SystemInfo.cloudid + "-" + ty.SystemInfo.gameId;
        var signStr = this.getConfigSignStr(reqObj);
        var paramStrList = [];
        for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
        paramStrList.push("sign=" + signStr);
        var finalUrl = ty.SystemInfo.shareManagerUrl + "?" + paramStrList.join("&");
        var that = this;
        wx.request({
          url: finalUrl,
          method: "GET",
          success: function success(res) {
            if (200 == res.statusCode) {
              var ret = res.data;
              hall.LOGD("hall.ad", "RET:" + JSON.stringify(ret));
              that.adInfoList = [];
              if (ret.retmsg) for (var index in ret.retmsg) that.adInfoList.push(ret.retmsg[index]);
              ty.NotificationCenter.trigger(ty.EventType.GET_AD_MSG_SUCCESS);
              that.retryTimes = 3;
            }
          },
          fail: function fail(res) {
            that.retryTimes > 0 || (that.retryTimes = 0);
          }
        });
      },
      getAdNode: function getAdNode() {
        return this.adIconBtn;
      },
      showAd: function showAd(position) {
        this.genRandomFirstAdInfo();
        if (!this.currentAdInfo) return;
        if (this.adIconBtn) this.adIconBtn.active = true; else {
          var that = this;
          cc.loader.loadRes("prefabs/adNode", function(err, prefab) {
            var preFabNode = cc.instantiate(prefab);
            preFabNode.position = cc.p(position.x, position.y);
            that.adIconBtn = preFabNode;
            cc.game.addPersistRootNode(preFabNode);
            that.adIconNode();
            var adButton = that.adIconBtn.getChildByName("adButton");
            adButton.on("click", function() {
              that.onClickAdIconBtn();
            });
          });
        }
      },
      genRandomFirstAdInfo: function genRandomFirstAdInfo() {
        if (0 == this.adInfoList.length) return;
        var weight_list = [ {
          weight: 0,
          id: "000"
        } ];
        var that = this;
        for (var i in this.adInfoList) {
          var _randomObj = {
            weight: parseInt(that.adInfoList[i].icon_weight),
            id: that.adInfoList[i].icon_id
          };
          weight_list.push(_randomObj);
        }
        weight_list.sort(function(a, b) {
          return a.weight > b.weight;
        });
        var _total = 0;
        for (var i = 0; i < weight_list.length; i++) _total += weight_list[i].weight;
        var _randomIndex = parseInt(1e4 * Math.random()) % (_total + 1);
        var _tTotal = 0;
        var _selectIndex = 0;
        for (var i = 0; i < weight_list.length - 1; i++) {
          _tTotal += weight_list[i].weight;
          if (_tTotal < _randomIndex && _tTotal + weight_list[i + 1].weight >= _randomIndex) {
            _selectIndex = i + 1;
            break;
          }
        }
        var _selectObj = weight_list[_selectIndex];
        for (var i = 0; i < this.adInfoList.length; i++) this.adInfoList[i].icon_id == _selectObj.id && (this.currentAdInfo = this.adInfoList[i]);
      },
      genRandomSecondAdInfo: function genRandomSecondAdInfo() {
        var _webPages = this.currentAdInfo.webpages;
        if (0 == _webPages.length) return;
        var weight_list = [ {
          weight: 0,
          id: "000"
        } ];
        for (var i in _webPages) {
          var _randomObj = {
            weight: parseInt(_webPages[i].webpage_weight),
            id: _webPages[i].config_id
          };
          weight_list.push(_randomObj);
        }
        weight_list.sort(function(a, b) {
          return a.weight > b.weight;
        });
        var _total = 0;
        for (var i = 0; i < weight_list.length; i++) _total += weight_list[i].weight;
        var _randomIndex = parseInt(1e4 * Math.random()) % (_total + 1);
        var _tTotal = 0;
        var _selectIndex = 0;
        for (var i = 0; i < weight_list.length - 1; i++) {
          _tTotal += weight_list[i].weight;
          if (_tTotal < _randomIndex && _tTotal + weight_list[i + 1].weight >= _randomIndex) {
            _selectIndex = i + 1;
            break;
          }
        }
        var _selectObj = weight_list[_selectIndex];
        for (var i = 0; i < _webPages.length; i++) _webPages[i].config_id == _selectObj.id && (this.currentWebPage = _webPages[i]);
      },
      adIconNode: function adIconNode() {
        if (!this.currentAdInfo || !this.adIconBtn) return;
        var _animaType = this.currentAdInfo.icon_type;
        var that = this;
        var spriteIco = this.adIconBtn.getChildByName("adIcon");
        var adButton = this.adIconBtn.getChildByName("adButton");
        spriteIco.stopAllActions();
        spriteIco.getComponent(cc.Animation) && spriteIco.removeComponent(cc.Animation);
        spriteIco.setRotation(0);
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowAdBtn, [ that.currentAdInfo.icon_id, that.currentAdInfo.icon_type, that.currentAdInfo.icon_skip_type, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
        switch (_animaType) {
         case this.AnimType.STATIC:
          cc.loader.load({
            url: that.currentAdInfo.icon_url[0]
          }, function(err, texture) {
            err || (spriteIco.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
          });
          break;

         case this.AnimType.SHAKE:
          cc.loader.load({
            url: that.currentAdInfo.icon_url[0]
          }, function(error, texture) {
            spriteIco.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            spriteIco.anchorX = .5;
            spriteIco.anchorY = .5;
            var _act1 = cc.rotateBy(.06, -20);
            var _act2 = cc.rotateBy(.12, 40);
            var _act3 = cc.rotateBy(.12, -40);
            var _act4 = cc.rotateBy(.06, 20);
            var _delay = cc.delayTime(1);
            spriteIco.runAction(cc.repeatForever(cc.sequence(_act1, cc.repeat(cc.sequence(_act2, _act3), 4), _act4, _delay)));
          });
          break;

         case this.AnimType.FRAME:
          var allFrames = [];
          var playFrameAction = function playFrameAction() {
            if (!spriteIco.getComponent(cc.Animation)) {
              var animation = spriteIco.addComponent(cc.Animation);
              var clip = cc.AnimationClip.createWithSpriteFrames(allFrames, 10);
              clip.name = "anim_frame";
              clip.wrapMode = cc.WrapMode.Loop;
              animation.addClip(clip);
              animation.play("anim_frame");
            }
          };
          for (var i = 0; i < that.currentAdInfo.icon_url.length; i++) cc.loader.load(that.currentAdInfo.icon_url, function(err, results) {
            if (err) for (var i = 0; i < err.length; i++) cc.log("Error url [" + err[i] + "]: " + results.getError(err[i]));
            for (var i = 0; i < that.currentAdInfo.icon_url.length; i++) {
              var _frame = new cc.SpriteFrame(results.getContent(that.currentAdInfo.icon_url[i]));
              allFrames.push(_frame);
            }
            playFrameAction();
          });
        }
      },
      hideAd: function hideAd() {
        this.adIconBtn && (this.adIconBtn.active = false);
      },
      onClickAdIconBtn: function onClickAdIconBtn() {
        this.genRandomSecondAdInfo();
        var skip_type = this.currentAdInfo.icon_skip_type;
        var toappid = this.currentAdInfo.toappid;
        var togame = this.currentAdInfo.togame;
        var topath = this.currentAdInfo.path;
        var second_toappid = this.currentAdInfo.second_toappid;
        console.log("topath ====>" + topath);
        var that = this;
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickAdBtn, [ that.currentAdInfo.icon_id, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
        if (wx && wx.navigateToMiniProgram) {
          if (1 == skip_type) {
            wx.navigateToMiniProgram({
              appId: toappid,
              path: topath || "?from=adcross",
              envVersion: "release",
              extraData: {
                from: topath || "?from=adcross"
              },
              success: function success(res) {
                ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameSuccess, [ that.currentAdInfo.icon_id, that.currentWebPage.config_id, that.currentWebPage.webpage_url, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
                console.log("wx.navigateToMiniProgram success");
                console.log(res);
              },
              fail: function fail(res) {
                console.log("wx.navigateToMiniProgram fail");
                console.log(res);
                ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameFail, [ that.currentAdInfo.icon_id, that.currentWebPage.config_id, that.currentWebPage.webpage_url, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
              },
              complete: function complete(res) {
                console.log("navigateToMiniProgram ==== complete");
                that.resetBtnIcon();
              }
            });
            return;
          }
          2 == skip_type ? wx.navigateToMiniProgram({
            appId: second_toappid,
            path: topath || "?from=adcross",
            envVersion: "release",
            extraData: {
              from: topath || "?from=adcross"
            },
            success: function success(res) {
              console.log("wx.navigateToMiniProgram success");
              console.log(res);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameSuccess, [ that.currentAdInfo.icon_id, that.currentWebPage.config_id, that.currentWebPage.webpage_url, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
            },
            fail: function fail(res) {
              console.log("wx.navigateToMiniProgram fail");
              console.log(res);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameFail, [ that.currentAdInfo.icon_id, that.currentWebPage.config_id, that.currentWebPage.webpage_url, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
            },
            complete: function complete(res) {
              console.log("navigateToMiniProgram ==== complete");
              that.resetBtnIcon();
            }
          }) : console.error("Unsupported skip type! Please Check!");
          return;
        }
        if (!this.currentWebPage) return;
        var that = this;
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickShowQRCode, [ that.currentAdInfo.icon_id, that.currentWebPage.config_id, that.currentWebPage.webpage_url, that.currentAdInfo.toappid, that.currentAdInfo.togame ]);
        wx.previewImage({
          current: [ that.currentWebPage.webpage_url ],
          urls: [ that.currentWebPage.webpage_url ],
          success: function success(res) {
            hall.LOGD(null, "预览图片成功！");
          },
          fail: function fail(res) {
            hall.LOGD(null, "预览图片失败！");
          },
          complete: function complete(res) {
            hall.LOGD("预览图片完成");
            that.resetBtnIcon();
          }
        });
        this.resetBtnIcon();
      },
      resetBtnIcon: function resetBtnIcon() {
        if (!this.adIconBtn) return;
        this.genRandomFirstAdInfo();
        this.adIconNode();
      },
      getConfigSignStr: function getConfigSignStr(reqObj) {
        var sortedKeys = Object.keys(reqObj).sort();
        var signStr = "";
        for (var i = 0; i < sortedKeys.length; i++) {
          var key = sortedKeys[i];
          if ("act" == key || "sign" == key) continue;
          signStr += key + "=" + reqObj[key];
        }
        var finalSign = hall.hex_md5("market.tuyoo.com-api-" + signStr + "-market.tuyoo-api") || "";
        return finalSign;
      }
    };
    cc._RF.pop();
  }, {} ],
  AlmsWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78090tFrOFPx7ZU87B+zMfL", "AlmsWindow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        txtTitle: cc.Label,
        txtDesc: cc.RichText,
        txtOkBtn: cc.RichText,
        btnOk: cc.Button,
        txtCancel: cc.RichText
      },
      initWithPar: function initWithPar(par) {
        this.condition = par.resurgenceCondition;
        this.txtTitle.string = par.title;
        this.txtDesc.string = par.content;
        this.txtOkBtn.string = par.buttonText1;
        this.txtCancel.string = par.buttonText2;
        var that = this;
        this.scheduleOnce(function() {
          var ani = that.node.getComponent(cc.Animation);
          ani.play("btnTick");
        }, 1);
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.removeLoopAni, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.onAdComplete, this);
      },
      onAdComplete: function onAdComplete(isEnded) {
        isEnded && this.getReward();
        this.shut();
      },
      getReward: function getReward() {
        ddz.gameModel.shareToGetreward(this.condition.sharePointId);
      },
      removeLoopAni: function removeLoopAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.stop();
      },
      onClose: function onClose() {
        this.shut();
      },
      onCancel: function onCancel() {
        this.shut();
      },
      onOk: function onOk() {
        if ("ad" == this.condition.conditionType) {
          var aidx;
          aidx = 1 == this.condition.adIds.length ? 0 : Math.floor(this.condition.adIds.length * Math.random());
          var adid = this.condition.adIds[aidx];
          hall.adManager.showRewardedVideo(adid, "alms");
        } else {
          ddz.Share.shareWithType(this.condition["shareConfigId"]);
          this.shut();
        }
      },
      shut: function shut() {
        ddz.almsWindow = null;
        this.removeLoopAni();
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ArenaMatchModule: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6a56FjsLpHaYYqrEBUcAYR", "ArenaMatchModule");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnBack: cc.Button,
        jifenNode: cc.Node,
        jifenLeftNode: cc.Node,
        jifenRightNode: cc.Node,
        bigBtnNode: cc.Node,
        bottomNode: cc.Node,
        lblDiFen: cc.Label,
        lblRank: cc.Label,
        lblNum: cc.Label,
        bigLabel: cc.Label,
        smallLabel: cc.Label
      },
      ctor: function ctor() {},
      setTableScene: function setTableScene(val) {
        this._tableScene = val;
        this.refresh();
      },
      refresh: function refresh() {
        this.disableChatBtn();
      },
      updateMultiple: function updateMultiple(baseScore, multiple) {
        this.lblDiFen.string = baseScore + "分 x " + multiple + "倍";
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.RECIVE_TABLE_INFO, this.showStage, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_READY, this.hideStage, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_CHALLENGE, this.hideAll, this);
        ty.NotificationCenter.listen(ddz.EventType.MACH_RANK_CHANGE, this.onRankChange, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_MATCHING, this.resetScore, this);
        this.showStage();
        this.btnBack.node.active = false;
        if (ty.UserInfo.systemType == ty.UserInfo.SYSTEMTYPE.iPhoneXType) {
          var widL = this.jifenLeftNode.getComponent(cc.Widget);
          widL.top = 160;
          var widR = this.jifenRightNode.getComponent(cc.Widget);
          widR.top = 160;
        }
      },
      onRankChange: function onRankChange() {
        this.lblRank.string = hall.ME.matchInfo.curMatchAddition ? hall.ME.matchInfo.curMatchAddition.rankName : "-/-";
      },
      hideAll: function hideAll() {
        this._tableScene.myAvatar.active = false;
        this.bigBtnNode.active = false;
        this.jifenNode.active = false;
        this.jifenLeftNode.active = false;
        this.jifenRightNode.active = false;
        this.lblDiFen.node.active = false;
      },
      showStage: function showStage(tableInfo) {
        this.switchStage(this._tableScene._isOnReady);
      },
      hideStage: function hideStage() {
        this.switchStage(true);
      },
      disableChatBtn: function disableChatBtn() {},
      switchStage: function switchStage(state) {
        this._tableScene.myAvatar.active = true;
        this.disableChatBtn();
        this.bigBtnNode.active = !state;
        this.jifenNode.active = state;
        this.jifenLeftNode.active = state;
        this.jifenRightNode.active = state;
        this.lblDiFen.node.active = state;
        this.bottomNode.active = state;
        this.onRankChange();
        this.bigLabel.string = hall.ME.matchInfo.getMatchStageDes();
        this.updateAllScore();
      },
      refreshShow: function refreshShow() {
        this.updateAllScore();
      },
      _onRemoveAni: function _onRemoveAni() {
        this.leftMsgAni.removeFromParent();
        this.rightMsgAni.removeFromParent();
      },
      _onStartPlayTableChat: function _onStartPlayTableChat(seatId) {},
      resetScore: function resetScore() {
        this.setScore("my", "--");
        this.setScore("left", "--");
        this.setScore("right", "--");
      },
      initScore: function initScore() {},
      updateAllScore: function updateAllScore(result) {
        var myIndex = this._tableScene._mySeatIndex;
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var seatsInfo = null;
        if (result) {
          var mySeatInfo = result["seat" + myIndex];
          var leftInfo = result["seat" + leftindex];
          var rightInfo = result["seat" + rightindex];
          this.upDataScore("my", mySeatInfo[1], mySeatInfo[0]);
          this.upDataScore("left", leftInfo[1], leftInfo[0]);
          this.upDataScore("right", rightInfo[1], rightInfo[0]);
        } else {
          seatsInfo = this._tableScene.tableInfo().seats;
          var score = seatsInfo[myIndex - 1].mscore;
          var delta = null;
          this.upDataScore("my", score, delta);
          score = seatsInfo[leftindex - 1].mscore;
          this.upDataScore("left", score, delta);
          score = seatsInfo[rightindex - 1].mscore;
          this.upDataScore("right", score, delta);
        }
      },
      upDataScore: function upDataScore(pos, scroe, delta) {
        var lblScoreChange, lblName;
        var deltaStr = "";
        if (null == delta) {
          deltaStr = "";
          lblName = "lblJiFenChange";
        } else if (delta >= 0) {
          deltaStr = "+" + delta;
          lblName = "lblJiFenChangeAdd";
        } else {
          deltaStr = "" + delta;
          lblName = "lblJiFenChange";
        }
        switch (pos) {
         case "my":
          lblScoreChange = this.getScoreLabel(this.jifenNode, lblName);
          break;

         case "left":
          lblScoreChange = this.getScoreLabel(this.jifenLeftNode, lblName);
          break;

         case "right":
          lblScoreChange = this.getScoreLabel(this.jifenRightNode, lblName);
        }
        lblScoreChange.string = deltaStr;
        var that = this;
        var callBack = cc.callFunc(function() {
          that.setScore(pos, scroe);
          lblScoreChange.node.opacity = 255;
          lblScoreChange.string = "";
        });
        var flyAni = cc.sequence(cc.delayTime(2), cc.fadeOut(.2), callBack);
        lblScoreChange.node.runAction(flyAni);
      },
      reSetAddScore: function reSetAddScore() {
        this.getScoreLabel(this.jifenNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChange").string = "";
      },
      setScore: function setScore(pos, scroe) {
        var lblScore;
        switch (pos) {
         case "my":
          lblScore = this.getScoreLabel(this.jifenNode, "lblJiFen");
          break;

         case "left":
          lblScore = this.getScoreLabel(this.jifenLeftNode, "lblJiFen");
          break;

         case "right":
          lblScore = this.getScoreLabel(this.jifenRightNode, "lblJiFen");
        }
        lblScore.string = scroe + "";
      },
      reset: function reset() {
        this._tableScene._leftPlayerController.setChatButtonActive(false);
        this._tableScene._rightPlayerController.setChatButtonActive(false);
        this._tableScene._operateController.setChatButtonActive(false);
        this.initStat = true;
        this.lblDiFen.string = "";
        this.jifenLeftNode.active = false;
        this.jifenRightNode.active = false;
        this.bottomNode.active = false;
        var lblScoreChange;
        lblScoreChange = this.getScoreLabel(this.jifenNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenLeftNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenLeftNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenRightNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenRightNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
      },
      getScoreLabel: function getScoreLabel(scoreNode, lblName) {
        return scoreNode.getChildByName(lblName).getComponent(cc.Label);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this.disbindsWindow && this.disbindsWindow.removeFromParent();
        this.disbindsWindow = null;
        this._tableScene = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  Avatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5ae9ilN2FBlLY6YEVvxoEn", "Avatar");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "Avatar";
      },
      properties: {
        avatarWidth: 102,
        avatarHeight: 102,
        avatar: cc.Sprite,
        avatarShadow: cc.Sprite,
        defaultSpriteFramte: cc.SpriteFrame,
        lblName: cc.Label
      },
      onLoad: function onLoad() {},
      setPlayerName: function setPlayerName(val) {
        cc.isValid(this.lblName) && (this.lblName.string = val || " ");
      },
      setAvatarUrl: function setAvatarUrl(url) {
        if (url) {
          ty.SystemInfo.getImageWithURL(url, this.avatar);
          this.showNameDisplay();
        } else {
          this.avatar.spriteFrame = this.defaultSpriteFramte;
          this.hideNameDisplay();
        }
        this.avatar.node.setContentSize(this.avatarWidth, this.avatarHeight);
      },
      resetAvatar: function resetAvatar() {
        this.setAvatarUrl();
      },
      hideNameDisplay: function hideNameDisplay() {
        this.lblName.visible = false;
        this.avatarShadow.node.active = false;
      },
      showNameDisplay: function showNameDisplay() {
        this.lblName.visible = true;
        this.avatarShadow.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  BiLog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50e5b2P/vZGi7AGxjzd/Q57", "BiLog");
    "use strict";
    ty.BiLog = {
      uploadLogTimely: function uploadLogTimely(logtxt) {
        if (!hall.netIsConnected) {
          hall.LOGD("ty.BiLog", "net error!");
          return;
        }
        if (logtxt) {
          var header = [ "Content-Type:text/plain" ];
          var postData = {
            cloud_id: ty.SystemInfo.cloudid,
            time: hall.GlobalTimer.getCurTime(),
            client_id: ty.SystemInfo.clientId,
            user_id: ty.UserInfo.userId,
            sys_version: ty.SystemInfo.deviceInfo.system,
            mobile_models: ty.SystemInfo.deviceInfo.brand + " " + ty.SystemInfo.deviceInfo.model,
            baseVersion: ty.SystemInfo.deviceInfo.SDKVersion,
            wxVersion: ty.SystemInfo.deviceInfo.version,
            clientVersion: ty.SystemInfo.version,
            Nettype: hall.networkType,
            errMsg: logtxt,
            ip: ty.UserInfo.ip
          };
          var configObj = {
            url: "https://clienterr.touch4.me/api/bilog5/text/error",
            header: header,
            postData: postData,
            callback: null
          };
          ty.HttpUtil.httpPost(configObj, "POST");
        }
      },
      getSystemInfo: function getSystemInfo() {
        this.cloud_id = ty.SystemInfo.cloudid;
        this.rec_type = "1";
        this.rec_id = "0";
        this.receive_time = "0";
        this.user_id = ty.UserInfo.userId;
        this.game_id = ty.SystemInfo.gameId;
        this.client_id = ty.SystemInfo.clientId;
        this.device_id = hall.GlobalFuncs.getLocalUuid();
        this.ip_addr = "#IP";
        this.nettype = "0";
        this.phone_maker = "0";
        this.phone_model = ty.UserInfo.model;
        this.phone_carrier = "0";
        this.reserved = "0";
      },
      uploadClickStatLogTimely: function uploadClickStatLogTimely(logtxt) {
        var callbackObj = this;
        if (void 0 != logtxt && "" != logtxt) {
          var header = [ "Content-Type:text/plain" ];
          var configObj = {
            url: ty.SystemInfo.m_server_ip,
            headers: header,
            postData: logtxt,
            obj: callbackObj,
            tag: null,
            callback: null
          };
        }
        ty.HttpUtil.httpPost(configObj, "POST");
      },
      clickStat: function clickStat(eventId, ParamsList) {
        if (debugMode) return;
        null == ParamsList && (ParamsList = []);
        var dyeparams = [];
        if (ParamsList.length < 10) for (var i = 0; i < 9; i++) i < ParamsList.length ? dyeparams.push(ParamsList[i]) : dyeparams.push(0); else dyeparams = ParamsList;
        hall.LOGD("实时日志", "eventid= " + eventId + " 描述 = " + JSON.stringify(dyeparams));
        var bilog = this.assemblelog(eventId, dyeparams);
        this.uploadClickStatLogTimely(bilog + "\n");
      },
      assemblelog: function assemblelog(eventid, paramsarr) {
        var time = new Date().getTime();
        if (time - this._timetag > 6e4) {
          this._timetag = time;
          this.nettype = 0;
        }
        var paramstr = paramsarr.join("\t");
        this.getSystemInfo();
        var logStr = this.cloud_id + "\t" + this.rec_type + "\t" + time + "\t" + this.rec_id + "\t" + this.receive_time + "\t" + eventid + "\t" + this.user_id + "\t" + this.game_id + "\t" + this.client_id + "\t" + this.device_id + "\t" + this.ip_addr + "\t" + this.nettype + "\t" + this.phone_maker + "\t" + this.phone_model + "\t" + this.phone_carrier + "\t" + paramstr + "\t" + this.reserved;
        var str = this.trimTab0(logStr);
        return str;
      },
      trimTab0: function trimTab0(str) {
        if (null == str || void 0 == str) return "";
        var txt = str.replace(/(\t0)*$/, "");
        return txt;
      }
    };
    cc._RF.pop();
  }, {} ],
  BuyCenter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0176alBEN1HCa/drM3HqxDg", "BuyCenter");
    "use strict";
    cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.BuyCenter";
        hall.LOGD(this._TAG, " in ctor");
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_PAY_FAIL, this.onBuyFailed, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_PAY_SUCCESS, this.onBuySuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_PAY_CANCEL, this.onBuyCancel, this);
      },
      destroy: function destroy() {
        hall.LOGD(this._TAG, " destroy");
        ty.NotificationCenter.ignore(ddz.EventType.UPDATE_PAY_FAIL, this.onBuyFailed, this);
        ty.NotificationCenter.ignore(ddz.EventType.UPDATE_PAY_SUCCESS, this.onBuySuccess, this);
        ty.NotificationCenter.ignore(ddz.EventType.UPDATE_PAY_CANCEL, this.onBuyCancel, this);
      },
      _onBuyCoinFailed: function _onBuyCoinFailed() {
        hall.LOGW(this._TAG, "buy coin failed from server........");
        this.onBuyFailed();
      },
      _onBuyCoinSuccess: function _onBuyCoinSuccess() {
        hall.LOGD(this._TAG, "buy coin success from server........");
      },
      onBuySuccess: function onBuySuccess(params) {
        var result = params["result"];
        hall.LOGW("", "file = [ByCenter] fun = [onBuySuccess] result = " + JSON.stringify(result));
        ty.NotificationCenter.trigger(ddz.EventType.CONVERSION_SUCCESS, result["prodName"]);
        var tips = "兑换成功";
        var str = "<img src='ddz_coin_white'/><color=#FFFFFF> " + result["prodName"] + "</c>";
        ddz.GlobalFuncs.playShareZuanShi(result["prodName"], tips, str);
      },
      onBuyFailed: function onBuyFailed(param) {
        ty.NotificationCenter.trigger(ddz.EventType.BUY_MSG_BACK);
      },
      onBuyCancel: function onBuyCancel(param) {
        h5.globalFunc.removeLoadingLayer();
        h5.ToastLayer.create("取消支付");
        ty.NotificationCenter.trigger(ddz.EventType.BUY_MSG_BACK);
      },
      runPayOrder: function runPayOrder(productId, productName, count, price, buyType) {
        hall.LOGD(this._TAG, " run runPayOrder-----------------------ID:" + productId + "--ProductName:" + productName + "price = " + price + " buytype = " + buyType);
        "charge" == buyType ? h5.MainInterface.payDiamond(productId, count, productName, price, ddz.GameId, false) : "consume" == buyType ? h5.MainInterface.consumeDiamond(productId, productName, count, price, ddz.GameId) : "direct" == buyType && h5.MainInterface.buyCoinDirect(productId, productName, count, price, ddz.GameId);
      },
      runPayOrderByParam: function runPayOrderByParam(param) {
        "undefined" != typeof param["productId"] && null != param["productId"] && "undefined" != typeof param["productName"] && null != param["productName"] && "undefined" != typeof param["count"] && null != param["count"] && "undefined" != typeof param["price"] && null != param["price"] && "undefined" != typeof param["buyType"] && null != param["buyType"] && this.runPayOrder(param["productId"], param["productName"], param["count"], param["price_diamond"], param["buyType"]);
      }
    });
    cc._RF.pop();
  }, {} ],
  CardInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7bd9M1HtVK+a5TcSvvjt3r", "CardInfo");
    "use strict";
    ddz.CardInfo = cc.Class({
      ctor: function ctor() {
        this._TAG = "ddz.CardInfo";
        this._color = ddz.Enums.CardColor.CARD_COLOR_HONGTAO;
        this._type = ddz.Enums.CardType.CARD_TYPE_NORMAL;
        this._point = 0;
        this._value = -1;
        this._number = -1;
        this._tag = ddz.CardInfoTag;
        ddz.CardInfoTag++;
      },
      refreshInfoFromNum: function refreshInfoFromNum(num) {
        this._number = num;
        this._color = Math.floor(num / 13) + 1;
        this._point = ddz.GlobalFuncs.numberToPoint(num);
        this._value = ddz.GlobalFuncs.numberToValue(num);
        this._type = ddz.Enums.CardType.CARD_TYPE_NORMAL;
        52 != num && 53 != num || (this._type = ddz.Enums.CardType.CARD_TYPE_KING);
        num > 53 && (this._type = ddz.Enums.CardType.CARD_TYPE_LAIZI);
      },
      dump: function dump() {
        ddz.LOGD(this._TAG, "color : " + this._color);
        ddz.LOGD(this._TAG, "type : " + this._type);
        ddz.LOGD(this._TAG, "point: " + this._point);
        ddz.LOGD(this._TAG, "value : " + this._value);
        ddz.LOGD(this._TAG, "number : " + this._number);
      }
    });
    cc._RF.pop();
  }, {} ],
  CardType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb06eHmaKZBRJrnaXuNRYda", "CardType");
    "use strict";
    ddz.CardType = cc.Class({
      ctor: function ctor() {
        this._type = arguments[0];
        this._point = arguments[1];
        this._count = arguments[2];
        this._cards = arguments[3];
        this._laiZiCnt = arguments[4];
      },
      setType: function setType(type) {
        this._type = type;
      },
      setPoint: function setPoint(point) {
        this._point = point;
      },
      setCount: function setCount(count) {
        this._count = count;
      },
      getType: function getType() {
        return this._type;
      },
      getPoint: function getPoint() {
        return this._point;
      },
      getCount: function getCount() {
        return this._count;
      },
      getCards: function getCards() {
        return this._cards;
      },
      setLaiziCnt: function setLaiziCnt(cnt) {
        this._laiZiCnt = cnt;
      },
      getLaiziCnt: function getLaiziCnt() {
        return this._laiZiCnt;
      },
      dump: function dump() {
        ddz.LOGD(null, "card type " + this._type + " point : " + this._point + " count : " + this._count);
        for (var i = 0; i < this._cards.length; i++) ddz.LOGD(null, this._cards[i]);
      },
      _getBombType: function _getBombType() {
        if (4 != this._cards.length) return "notBomb";
        var t_type = this.getType();
        if (t_type != ddz.Enums.PaixingType.BOMB_CARD) return "notBomb";
        var lzCnt = 0;
        for (var nIndex = 0; nIndex < 4; nIndex++) this._cards[nIndex] > 53 && lzCnt++;
        lzCnt < this._laiZiCnt && (lzCnt = this._laiZiCnt);
        if (0 == lzCnt) return "normalBomb";
        if (4 == lzCnt) return "pureLzBomb";
        if (lzCnt > 0 && lzCnt < 4) return "softBomb";
      },
      isLargerThan: function isLargerThan(ct) {
        var type1 = ct.getType();
        this._type != ddz.Enums.PaixingType.ERROR_CARD && type1 != ddz.Enums.PaixingType.ERROR_CARD || ddz.LOGD(null, "error!!!!!!!! error card type in isLargerThan in cardtype.js");
        if (this._type == ddz.Enums.PaixingType.ROCKET) return true;
        if (type1 == ddz.Enums.PaixingType.ROCKET) return false;
        if (this._type == type1) {
          if (type1 == ddz.Enums.PaixingType.BOMB_CARD) {
            var bombType = this._getBombType();
            ddz.LOGD(null, "this._type bombType=" + bombType);
            if ("pureLzBomb" == bombType) return true;
            var ctBombType = ct._getBombType();
            ddz.LOGD(null, "compareType bombType=" + ctBombType);
            if ("pureLzBomb" == ctBombType) return false;
            if ("normalBomb" == bombType && "softBomb" == ctBombType) return true;
            if ("softBomb" == bombType && "normalBomb" == ctBombType) return false;
          }
          return this._count == ct.getCount() && this._point > ct.getPoint();
        }
        if (this._type == ddz.Enums.PaixingType.BOMB_CARD) return true;
        return false;
      }
    });
    cc._RF.pop();
  }, {} ],
  Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "43603eR6gRGr7+6D/f4B/jM", "Card");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._info = new ddz.CardInfo();
        this._redNumTypes = [ ddz.Enums.CardColor.CARD_COLOR_HONGTAO, ddz.Enums.CardColor.CARD_COLOR_FANGPIAN ];
        this._oldP = null;
        this._moveTime = .05;
      },
      properties: {
        tagSprites: [ cc.SpriteFrame ],
        numBlackSprites: [ cc.SpriteFrame ],
        numRedSprites: [ cc.SpriteFrame ],
        numGoldenSprites: [ cc.SpriteFrame ],
        numJokSprites: [ cc.SpriteFrame ],
        laiziSmallTag: cc.SpriteFrame,
        foreBack: {
          default: null,
          type: cc.Sprite
        },
        cardNum: {
          default: null,
          type: cc.Sprite
        },
        cardNumJok: {
          default: null,
          type: cc.Sprite
        },
        tagSmall: {
          default: null,
          type: cc.Sprite
        },
        tagBig: {
          default: null,
          type: cc.Sprite
        },
        dizhuTag: {
          default: null,
          type: cc.Sprite
        },
        cardMask: {
          default: null,
          type: cc.Sprite
        },
        cardType: 1
      },
      setDiZhuTag: function setDiZhuTag(value) {
        this.cardType == ddz.Enums.CardSize.CARD_SIZE_BIG && this.dizhuTag.setVisible(value);
      },
      resetWithNum: function resetWithNum(num) {
        this._info.refreshInfoFromNum(num);
        var numArr = this._redNumTypes.indexOf(this._info._color) > -1 ? this.numRedSprites : this.numBlackSprites;
        if (this._info._type == ddz.Enums.CardType.CARD_TYPE_NORMAL) {
          this.cardNum.setVisible(true);
          this.tagSmall.setVisible(true);
          this.cardNumJok.setVisible(false);
          this.cardNum.spriteFrame = numArr[this._info._point];
        } else if (this._info._type == ddz.Enums.CardType.CARD_TYPE_KING) {
          this.cardNum.setVisible(false);
          this.tagSmall.setVisible(false);
          this.cardNumJok.setVisible(true);
          this.cardNumJok.spriteFrame = 13 == this._info._point ? this.numJokSprites[1] : this.numJokSprites[0];
        } else if (this._info._type == ddz.Enums.CardType.CARD_TYPE_LAIZI) {
          this.cardNum.setVisible(true);
          this.tagSmall.setVisible(true);
          this.cardNumJok.setVisible(false);
          this.cardNum.spriteFrame = this.numGoldenSprites[this._info._point];
        }
        var tagSpriteFrame, smallSpriteFrame;
        if (this._info._type == ddz.Enums.CardType.CARD_TYPE_NORMAL) {
          tagSpriteFrame = this.tagSprites[this._info._color - 1];
          smallSpriteFrame = tagSpriteFrame;
        } else if (this._info._type == ddz.Enums.CardType.CARD_TYPE_KING) {
          tagSpriteFrame = 13 == this._info._point ? this.tagSprites[5] : this.tagSprites[4];
          smallSpriteFrame = tagSpriteFrame;
        } else if (this._info._type == ddz.Enums.CardType.CARD_TYPE_LAIZI) {
          tagSpriteFrame = this.tagSprites[6];
          smallSpriteFrame = this.laiziSmallTag;
        }
        this.tagSmall.spriteFrame = smallSpriteFrame;
        this.cardType == ddz.Enums.CardSize.CARD_SIZE_BIG && this.tagBig && (this.tagBig.spriteFrame = tagSpriteFrame);
      },
      up: function up() {
        if (!this._oldP) return;
        var toY = this._oldP.y + .1 * this.node.height;
        var toX = this.node.x;
        var acMove = cc.moveTo(this._moveTime, cc.p(toX, toY));
        this.node.stopAllActions();
        this.node.runAction(acMove);
      },
      down: function down(withOutAni) {
        0 == arguments.length && (withOutAni = false);
        this.node.stopAllActions();
        if (!this._oldP) return;
        if (withOutAni) this.node.y = this._oldP.y; else {
          var acMove = cc.moveTo(this._moveTime, cc.p(this.node.x, this._oldP.y));
          this.node.runAction(acMove);
        }
      },
      setPosition: function setPosition(value) {
        this.setOldPosition(value);
        this.node.setPosition(value);
      },
      setOldPosition: function setOldPosition(value) {
        this._oldP = value;
      },
      setZIndex: function setZIndex(value) {
        this.node.zIndex = value;
      },
      _isking: function _isking(num) {
        return 52 == num || 53 == num;
      },
      _isLaizi: function _isLaizi(num) {
        return num > 53;
      },
      showMask: function showMask(bVisible) {
        this.cardType == ddz.Enums.CardSize.CARD_SIZE_BIG && this.cardMask.setVisible(bVisible);
      },
      showTag: function showTag(value) {
        this.tagBig.setVisible(value);
      },
      dump: function dump() {
        this._info.dump();
      },
      onLoad: function onLoad() {},
      start: function start() {},
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {} ],
  ColorBg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "736aafGCZ1CO6q03zaGDJpc", "ColorBg");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this.colorsCfgs = [ [ {
          duration: 2,
          red: 21,
          green: 173,
          blue: 163
        }, {
          duration: 2,
          red: 183,
          green: 220,
          blue: 181
        } ], [ {
          duration: 2,
          red: 61,
          green: 130,
          blue: 199
        }, {
          duration: 2,
          red: 100,
          green: 216,
          blue: 224
        } ], [ {
          duration: 2,
          red: 134,
          green: 150,
          blue: 166
        }, {
          duration: 2,
          red: 193,
          green: 203,
          blue: 215
        } ] ];
        this.bgIndex = -1;
        this._curBg = null;
      },
      properties: {
        bgNode: cc.Node,
        bgs: [ cc.Sprite ]
      },
      onLoad: function onLoad() {
        var winSize = cc.director.getWinSize();
        this.bgNode.width = winSize.width;
        this.bgNode.height = winSize.height;
        ddz.LOGD(this._TAG, "窗口大小: width:" + winSize.width + "; height: " + winSize.height);
        for (var i = 0; i < this.bgs.length; i++) this.fitBg(i);
      },
      fitBg: function fitBg(bgIndex) {
        this.bgs[bgIndex].node.setContentSize(this.bgNode.width, this.bgNode.height);
      },
      changeBgColor: function changeBgColor(index) {
        if (index == this.bgIndex) return;
        if (-1 == this.bgIndex) {
          this.showCurBg(index);
          this.bgIndex = index;
        } else {
          this._curBg.runAction(cc.fadeOut(2));
          this.bgIndex = index;
          this._curBg = this.bgs[this.bgIndex].node;
          this._curBg.opacity = 0;
          this._curBg.runAction(cc.fadeIn(2));
        }
      },
      showCurBg: function showCurBg(index) {
        var isCur = false;
        for (var i = 0; i < this.bgs.length; i++) {
          isCur = i == index;
          if (isCur) {
            this._curBg = this.bgs[i].node;
            this.bgs[i].node.opacity = 255;
          } else this.bgs[i].node.opacity = 0;
        }
      },
      setBgColor: function setBgColor(index) {
        if (index == this.bgIndex) return;
        this.bgs[-1 == this.bgIndex ? 0 : this.bgIndex].setVisible(false);
        this.bgIndex = index;
        this.bgs[this.bgIndex].setVisible(true);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  ConfigRoomSession: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c904dKR1tdB54L3rvM25tKR", "ConfigRoomSession");
    "use strict";
    ddz.ConfigRoomSession = cc.Class({
      ctor: function ctor() {
        var info = arguments[0];
        this.session = "";
        this.description = "";
        this.match = 0;
        this.fruit = 0;
        this.m_rooms = [];
        this.m_type = ddz.Enums.PlayType.PLAY_TYPE_JINGDIAN;
        this.m_existNewMatch = 0;
        info && this.parse(info);
      },
      parse: function parse(json) {
        this.session = json["session"];
        this.match = json["match"];
        this.fruit = json["fruit"];
        var myrooms = [];
        var rooms = json["rooms"];
        for (var i = 0, len = rooms.length; i < len; i++) myrooms.push(new ddz.NormalRoomInfo(rooms[i]));
        this.m_rooms = myrooms;
        switch (this.session) {
         case "经典场":
          this.m_type = ddz.Enums.PlayType.PLAY_TYPE_JINGDIAN;
          break;

         case "欢乐场":
          this.m_type = ddz.Enums.PlayType.PLAY_TYPE_HUANLE;
          break;

         case "比赛场":
          this.m_type = ddz.Enums.PlayType.PLAY_TYPE_MATCH;
          this.m_existNewMatch = json["new"];
          break;

         case "癞子场":
          this.m_type = ddz.Enums.PlayType.PLAY_TYPE_LAIZI;
          break;

         case "二斗场":
          this.m_type = ddz.Enums.PlayType.PLAY_TYPE_ERREN;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ControlPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5025aoF0vdNbJDrJAos8qlY", "ControlPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "ddz.ControlPanel";
      },
      properties: {
        callNode: cc.Node,
        callNodeHuanle: cc.Node,
        playNode: cc.Node,
        btnNoCall: cc.Button,
        btnCall1: cc.Button,
        btnCall2: cc.Button,
        btnCall3: cc.Button,
        btnNoCallHuanle: cc.Button,
        btnCallHuanle: cc.Button,
        btnNoPlay: cc.Button,
        btnTip: cc.Button,
        btnPlay: cc.Button,
        lblMsg: cc.Label,
        lblTimer: cc.Label,
        nodeTimer: cc.Node,
        chatButton: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        this.btnNoPlay.node.on("click", this._playBuchu, this);
        this.btnTip.node.on("click", this._playTip, this);
        this.btnPlay.node.on("click", this._playPlay, this);
        this.btnNoCall.node.on("click", this._classicBujiao, this);
        this.btnCall1.node.on("click", this._classic1fen, this);
        this.btnCall2.node.on("click", this._classic2fen, this);
        this.btnCall3.node.on("click", this._classic3fen, this);
        this.btnNoCallHuanle.node.on("click", this._grabBujiao, this);
        this.btnCallHuanle.node.on("click", this._grabCall, this);
        this.chatButton.node.on("click", this.onChatButton, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.onGameHide, this);
      },
      onGameHide: function onGameHide() {
        this.setClockVisible(false);
        this._reset();
      },
      _grabBujiao: function _grabBujiao() {
        this._playcontroller.happyJiaodz(0);
      },
      _grabCall: function _grabCall() {
        this._playcontroller.happyJiaodz(1);
      },
      getCallNode: function getCallNode() {
        if (1 == this._playcontroller.tableInfo().config.m_grab) {
          this._playcontroller._mDizhuCalled ? this.setCallBtnText("不抢", "抢地主") : this.setCallBtnText("不叫", "叫地主");
          return this.callNodeHuanle;
        }
        return this.callNode;
      },
      setCallBtnText: function setCallBtnText(noCallText, callText) {
        var lbl = this.btnNoCallHuanle.node.getChildByName("Label");
        lbl.getComponent(cc.Label).string = noCallText;
        lbl = this.btnCallHuanle.node.getChildByName("Label");
        lbl.getComponent(cc.Label).string = callText;
      },
      showCallNode: function showCallNode(val) {
        this.getCallNode().active = val;
      },
      showPlayNode: function showPlayNode(val) {
        this.playNode.active = val;
      },
      init: function init(playcontrol) {
        this._playcontroller = playcontrol;
        this._bActiveBuChu = false;
        this._clockLeftTime = -1;
        this._reset();
      },
      _reset: function _reset() {
        this._bActiveBuChu = false;
        this._clockLeftTime = -1;
        this.hideAll();
      },
      setLblMsg: function setLblMsg(val) {
        if (val) {
          this.lblMsg.node.active = true;
          this.lblMsg.string = val;
        } else this.lblMsg.node.active = false;
      },
      showBuchuSprite: function showBuchuSprite() {
        this.hideAll();
        this.setLblMsg("不出");
      },
      showPrepare: function showPrepare(bReady) {
        this.hideAll();
        bReady && this.setLblMsg("已准备");
      },
      _playBuchu: function _playBuchu() {
        this._playcontroller._clearSelectedCards();
        this._playcontroller._playCards();
      },
      hideAll: function hideAll() {
        this.playNode.active = false;
        this.callNode.active = false;
        this.callNodeHuanle.active = false;
        this.setLblMsg("");
        this.setClockVisible(false);
        this.setChatButtonActive(false);
      },
      showJiaodz: function showJiaodz(call) {
        this.hideAll();
        this.getCallNode().active = true;
        for (var i = 1; i < 4; i++) this["btnCall" + i].interactable = call < i;
      },
      showPlay: function showPlay(bNoCard) {
        this.hideAll();
        this.playNode.active = true;
        var ts = this._playcontroller._tableState;
        hall.LOGD(this._TAG, "in show play ,top seat : " + ts.normalInfo.m_topseat);
        if (0 == ts.normalInfo.m_topseat || ts.normalInfo.m_topseat == this._playcontroller._mySeatIndex) {
          this.btnNoPlay.node.active = false;
          this.btnTip.node.active = false;
          this.btnPlay.node.active = true;
          this.btnPlay.node.x = 0;
        } else {
          this.btnNoPlay.node.active = true;
          if (bNoCard) {
            this.btnNoPlay.node.x = 0;
            this.btnTip.node.active = false;
            this.btnPlay.node.active = false;
          } else {
            this.btnNoPlay.node.x = -209;
            this.btnTip.node.active = true;
            this.btnPlay.node.active = true;
          }
          this.btnPlay.node.x = 215;
        }
        this._playcontroller._selectedCards.length > 0;
      },
      _classicBujiao: function _classicBujiao() {
        this._playcontroller._classicJiaodz(0);
      },
      _classic1fen: function _classic1fen() {
        this._playcontroller._classicJiaodz(1);
      },
      _classic2fen: function _classic2fen() {
        this._playcontroller._classicJiaodz(2);
      },
      _classic3fen: function _classic3fen() {
        this._playcontroller._classicJiaodz(3);
      },
      setChatButtonActive: function setChatButtonActive(isAvtive) {},
      onChatButton: function onChatButton() {
        this._playcontroller.clickChatButton(ddz.LOCATION_SIGN.SELF);
      },
      _playRechoose: function _playRechoose() {
        this._playcontroller._clearSelectedCards();
      },
      _playTip: function _playTip() {
        ddz.LOGD(null, "-----------------------_playTip-----------------------------");
        this._playcontroller.playTip();
      },
      _playPlay: function _playPlay() {
        ddz.LOGD(null, "-----------------------_playPlay-----------------------------");
        if (0 == this._playcontroller._selectedCards.length) {
          this._playcontroller._setCardsTipVisible(true, ddz.Enums.PlayCardsTip.PLAYCARDSTIP_PLAY);
          return;
        }
        this._playcontroller._playCards();
      },
      _timeOutTip: function _timeOutTip() {
        ty.Timer.cancelTimer(this, this._timeOutTip);
        var str = this._playcontroller._tableInfo.config.m_optimedis;
        hall.LOGD(this._TAG, "时间到了啊" + str);
        hall.MsgBoxManager.showToast({
          title: str
        });
      },
      getIsFriend: function getIsFriend() {
        return this._playcontroller.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND;
      },
      getIsGold: function getIsGold() {
        return this._playcontroller.tableInfo().getSceneType() == ddz.Enums.SceneType.NORMAL;
      },
      _scheduleClock: function _scheduleClock() {
        this._clockLeftTime -= 1;
        this.lblTimer.string = "" + this._clockLeftTime;
        if (this._clockLeftTime <= 0) {
          ty.Timer.cancelTimer(this, this._scheduleClock);
          if (this.getIsFriend()) return;
          if (true == this._bActiveBuChu) {
            var state = this._playcontroller._tableState.normalInfo.m_state;
            if (state == ddz.Enums.TableState.TABLEDSTAT_CALLING) this.showCallNode(false); else {
              this._playBuchu();
              this._bActiveBuChu = false;
            }
          }
          this.setClockVisible(false);
        }
      },
      setClockVisible: function setClockVisible(bVisible, time) {
        ty.Timer.cancelTimer(this, this._scheduleClock);
        this.nodeTimer.active = bVisible;
        if (bVisible) {
          time >= 5 && time < 30 && (this._bActiveBuChu = true);
          this._clockLeftTime = time;
          ty.Timer.setTimer(this, this._scheduleClock, 1);
          this.lblTimer.string = "" + this._clockLeftTime;
        }
      },
      hideClock: function hideClock() {
        this.nodeTimer.opacity = 0;
      },
      showClock: function showClock() {
        this.nodeTimer.opacity = 255;
      },
      onDestroy: function onDestroy() {
        ty.Timer.cancelTimer(this, this._scheduleClock);
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  CustomRoomInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a9baH7UT1FBJ/S6RTGkmwc", "CustomRoomInfo");
    "use strict";
    cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.CustomRoomInfo";
        this.tableName = "我的牌局";
        this.customTableId = 0;
        this.customMulti = 0;
        this.inviteCode = "";
        this.customBuyinChip = 0;
        this.tableId = 0;
        this.players = [];
        this.status = 0;
        this.roomOwner = 0;
        this.limitTime = 0;
        this.leftTime = 0;
        this.result = null;
        this.ownerName = "";
        this.maxMulti = 0;
        this.sitdownPlayer = [];
        var param = arguments[0];
        param && this.parseRoomInfo(param);
        hall.LOGD(this._TAG, "ctor");
      },
      _getOwnerName: function _getOwnerName() {
        var uid = this.roomOwner;
        var player = h5.globalFunc.findInArray(this.players, function(element) {
          return element["uid"] == uid;
        });
        return player ? player["name"] : "玩家" + uid;
      },
      parseRoomInfo: function parseRoomInfo(data) {
        hall.LOGD(this._TAG, "parseRoomInfo");
        this.customTableId = data["customTableId"];
        this.tableName = data["name"];
        this.inviteCode = data["inviteCode"];
        this.customMulti = data["customMulti"];
        this.customBuyinChip = data["customBuyinChip"];
        this.tableId = data["tableId"];
        this.players = data["players"];
        this.status = data["status"];
        this.maxMulti = data["maxMulti"];
        this.roomOwner = data["owner"];
        this.limitTime = data["time"];
        this.leftTime = data["left_time"];
        this.ownerName = this._getOwnerName();
        this.sitdownPlayer = this.players.filter(function(item) {
          return 0 != item["status"];
        });
      },
      parseAsResult: function parseAsResult(data) {
        this.customTableId = data["customTableId"];
        var baseInfo = data["base_info"];
        this.tableName = baseInfo["name"];
        this.roomOwner = baseInfo["owner"];
        this.limitTime = baseInfo["time"];
        this.customMulti = baseInfo["customMulti"];
        this.customBuyinChip = baseInfo["customBuyinChip"];
        this.result = data["datas"];
      }
    });
    cc._RF.pop();
  }, {} ],
  CustomRoomResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2da70srUddK15Q4JKdthWp0", "CustomRoomResult");
    "use strict";
    cc.Class({
      ctor: function ctor() {
        var param = arguments[0];
        this.name = "我的牌局";
        this.customTableId = 0;
        this.customMulti = 0;
        this.customBuyinChip = 0;
        this.limitTime = 0;
        this.endTime = 0;
        this.startTime = 0;
        this.winchip = 0;
        this.avatar = "";
        param && this.parseRoomInfo(param);
      },
      parseRoomInfo: function parseRoomInfo(data) {
        this.customTableId = data["customTableId"];
        this.name = data["name"];
        this.customMulti = data["customMulti"];
        this.customBuyinChip = data["customBuyinChip"];
        this.limitTime = data["time"];
        this.startTime = data["createTime"];
        this.endTime = data["endTime"];
        this.winchip = data["winchip"];
        this.avatar = data["owner_avatar"];
      }
    });
    cc._RF.pop();
  }, {} ],
  DdzAudioHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff287WLAstI+rrFGSkmCwqV", "DdzAudioHelper");
    "use strict";
    ddz.AudioHelper = {
      getMusicPlayManager: function getMusicPlayManager() {
        this.stopMusic();
        this.musicPlayManager = wx.createInnerAudioContext();
        this.musicPlayManager.obeyMuteSwitch = true;
        return this.musicPlayManager;
      },
      playMusic: function playMusic(file, isloop, volume) {
        if (this._curMusicFile && this._curMusicFile == file) return;
        this._curMusicFile = file;
        var playManager = this.getMusicPlayManager();
        3 == arguments.length && (playManager.volume = volume);
        playManager.autoplay = true;
        playManager.loop = isloop;
        playManager.src = ty.SystemInfo.cdnPath + cc.url.raw(file);
      },
      rePlayMusic: function rePlayMusic() {
        this.musicPlayManager && this.musicPlayManager.loop && this.musicPlayManager.play();
      },
      stopMusic: function stopMusic() {
        if (this.musicPlayManager) {
          this.musicPlayManager.stop();
          this.musicPlayManager.destroy();
          this.musicPlayManager = null;
        }
      },
      playEffect: function playEffect(file, isloop, volume) {
        3 == arguments.length && this.setEffectsVolume(volume);
        cc.audioEngine.playEffect(ty.SystemInfo.cdnPath + cc.url.raw(file), isloop);
      },
      stopEffect: function stopEffect(effectId) {
        if (effectId < 0) return;
        cc.audioEngine.stopEffect(effectId);
      },
      stopAllEffects: function stopAllEffects() {
        cc.audioEngine.stopAllEffects();
      },
      unloadAll: function unloadAll() {
        cc.audioEngine.uncacheAll();
      },
      setEffectsVolume: function setEffectsVolume(val) {
        hall.GlobalFuncs.setInLocalStorage(ddz.SETTING_EFFECT_KEY, val);
        cc.audioEngine.setEffectsVolume(val);
      },
      setMusicVolume: function setMusicVolume(val) {
        hall.GlobalFuncs.setInLocalStorage(ddz.SETTING_MUSIC_KEY, val);
        cc.audioEngine.setMusicVolume(val);
      },
      getMusicVolume: function getMusicVolume() {
        return hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.SETTING_MUSIC_KEY, cc.audioEngine.getMusicVolume());
      },
      getEffectsVolume: function getEffectsVolume() {
        return hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.SETTING_EFFECT_KEY, cc.audioEngine.getEffectsVolume());
      }
    };
    cc._RF.pop();
  }, {} ],
  DdzEventType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9fcaEbEk1HxKhcpv9UWDyc", "DdzEventType");
    "use strict";
    ddz.EventType = {
      CMD_BIND_USER: "bind_user",
      CMD_SET_USEREINFO: "set_user",
      CMD_USER_INFO: "user_info",
      MSG_USER_INFO: "user_info",
      CMD_BIND_GAME: "bind_game",
      CMD_GAME_DATA: "game_data",
      MSG_GAME_DATA: "game_data",
      MSG_GDATA_BACK: "msg_gdata_back",
      MSG_LOG_OUT: "logout",
      CMD_CUSTOMTABLE: "custom_table",
      MSG_CUSTOMTABLE: "custom_table",
      MSG_ROOM_ONLINE_INFO: "room_online_info",
      CMD_EVERYTASK: "every_task",
      MSG_EVERYTASK: "every_task",
      CMD_HALL_INFO: "hall_info",
      MSG_HALL_INFO: "hall_info",
      CMD_GAME: "game",
      MSG_UPDATE_ROUND_LIST: "msg_upate_round_list",
      MSG_UPDATE_NOTIFY: "noitify",
      ACTION_SHORT_CUT: "shortcut",
      MSG_ROOM_MYROOMS: "msg_room_myrooms",
      MSG_ROOM_NEWROOM: "msg_room_newroom",
      MSG_ROOM_JOINROOM: "msg_room_joinroom",
      MSG_ROOM_QUITROOM: "msg_room_quitroom",
      MSG_ROOM_INFO: "msg_room_info",
      MSG_ROOM_CHAT: "msg_room_chat",
      MSG_ROOM_RESULT: "msg_room_result",
      MSG_ROOM_QUICKSTART: "msg_room_quickstart",
      MSG_ROOM_RESULTLIST: "msg_room_resultList",
      MSG_ROOM_STANDUP: "msg_room_standup",
      MSG_ROOM_SITDOWN: "msg_room_sitdown",
      MSG_ROOM_JOINHISTORY: "msg_room_joinHistory",
      MSG_CUSTOMTABLE_GAMEDATA: "msg_ct_gamedata",
      MSG_CUSTOMTABLE_FIGHTDATA: "msg_ct_fightdata",
      CMD_LED_RECEIVE: "led_receive",
      CMD_TABLE_QUICKSTART: "quick_start",
      MSG_TABLE_QUICKSTART: "quick_start",
      MSG_TABLE_TABLEINFO: "table_info",
      MSG_TABLE_POPWND: "popwnd",
      CMD_TABLE_CALL: "table_call",
      CMD_STAND_UP: "standup",
      MSG_TABLE_CALL: "table_call",
      CMD_ROOM_LEAVE: "room_leave",
      MSG_TABLE_LEAVE: "table_leave",
      MSG_TABLE_SIT: "sit",
      MSG_TABLE_ENTER: "table_enter",
      CMD_CANCEL_DEPOSITE: "robot",
      CMD_TABLE_CHAT: "table_chat",
      CMD_FRUIT_QUICKSTART: "quick_start",
      CMD_NEW_VIP: "newvip",
      MSG_NEW_VIP: "newvip",
      MSG_NEW_VIP_RECEIVE: "newvipreceive",
      CMD_STORE_INFO: "store_config",
      MSG_STORE_INFO: "store_config",
      STORE_INFO_UPDATE: "store_info_update",
      CMD_STORE: "store",
      MSG_STORE: "store",
      CMD_BAG_INFO: "bag",
      MSG_BAG_INFO: "bag",
      CMD_MESSAGE: "message",
      MSG_MESSAGE: "message",
      CMD_CUSTOM_RANK: "custom_rank",
      MSG_CUSTOM_RANK: "custom_rank",
      RECIVE_MESSAGE_LIST: "recive_message_list",
      ASYNC_COMMON_ARENA_MATCH: "async_common_arena_match",
      MSG_MATCH_DES: "match_des",
      MSG_JEWEL_RANK_BACK: "message_jewel_back",
      MSG_SYS_MESSAGE_BACK: "message_sys_back",
      MSG_REC_MESSAGE_BACK: "message_rec_back",
      MSG_SEND_MESSAGE_BACK: "message_send_back",
      CMD_HEART_BEAT: "heart_beat",
      MSG_PROD_DELIVERY: "prod_delivery",
      BUY_MSG_BACK: "buy_msg_back",
      MSG_MODULE_TIP: "module_tip",
      MSG_MODULE_TIP_BACK: "module_tip_back",
      CMD_USER: "user",
      MSG_USER: "user",
      MSG_NAME_BACK: "msg_name_back",
      CMD_ROOM: "room",
      MSG_ROOM: "room",
      CMD_RANK: "rank",
      MSG_RANK: "rank",
      MSG_RANK_BACK: "msg_rank_back",
      CMD_COMPLAIN: "complain",
      MSG_COMPLAIN: "complain",
      CMD_NEW_USER_REWARD: "new_user_reward",
      CMD_GET_NSLOGIN_REWARD: "gain_nslogin_reward",
      MSG_LOGIN_REWARD: "gain_nslogin_reward",
      MSG_LED: "led",
      MSG_REWARD_SUCCESS: "gain_reward_success",
      CMD_DIZHU: "dizhu",
      ACTION_READY: "ready",
      ACTION_FT_CREATE: "ft_create",
      ACTION_FT_ENTER_TABLE: "ft_enter",
      ACTION_FT_GET_CONF: "ft_get_conf",
      ACTION_GET_FT_TABLE_RECORD: "get_ft_table_record",
      ACTION_FT_CHANGE_ROUND_SELECT: "ACTION_FT_GET_CONF",
      ACTION_GET_MATCH_RULES: "get_match_rules",
      ACTION_FRIEND_RANK_LIST: "friend_rank_list",
      ACTION_FT_REQ_DISBIND: "ft_req_disbind",
      ACTION_FT_REQ_DISBIND_ANSWER: "ft_req_disbind_answer",
      ACTION_FT_REQ_DISBIND_RESULT: "ft_req_disbind_result",
      ACTION_CAN_ROOM_LEAVE: "action_can_room_leave",
      ACTION_END_RESULT_SHOW: "ACTION_END_RESULT_SHOW",
      ACTION_FT_DISBIND: "ft_disbind",
      ACTION_FT_CONTINUE: "ft_continue",
      ACTION_DUIJU_LIUSHUI: "msg_duiju_liushui",
      MSG_TODO_TASKS: "todo_tasks",
      UPDATE_EVERYDAYLOGIN: "update_everydaylogin",
      MSG_TODO_QUICK_START: "todo_quick_start",
      MSG_TBOX_GETREWARD: "msg_tbox_getreward",
      ACTION_TBOX_GETREWARD: "tbox_getReward",
      ACTION_GET_OLD_USER_CHIP_REWARD: "get_old_user_chip_reward",
      MSG_ON_LOC: "msg_on_loc",
      CMD_GET_HEAD_PICS: "get_head_pics",
      MSG_GET_HEAD_PICS: "get_head_pics",
      CMD_DATA_CHANGED: "update_notify",
      MSG_DATA_CHANGED: "update_notify",
      CMD_ITEM_UPDATE: "item_list",
      MSG_ITEM_UPDATE: "item_list",
      UPDATE_LOGIN_REWARD_FLIPCARD: "update_login_reward",
      UPDATE_TABLE_INFO: "update_table_info",
      UPDATE_POP_WINDOW: "update_pop_window",
      UPDATE_TABLE_CALL: "update_table_call",
      UPDATE_TABLE_LEAVE: "update_table_leave",
      UPDATE_MATCH_STORE: "update_match_store",
      UPDATE_BAG_INFO: "update_bag_info",
      UPDATE_BAG_INFO_SUCCESS: "update_bag_info_success",
      UPDATE_DIAMOND_NUMBER: "update_diamond_number",
      UPDATE_COIN_NUMBER: "update_coin_number",
      UPDATE_QUICK_START: "update_quick_start",
      UPDATE_SIT_INFO: "update_sit_info",
      UPDATE_EVERY_TASK: "update_every_task",
      UPDATE_MESSAGE_PRIVATE: "update_message_private",
      UPDATE_MESSAGE_GLOBAL: "update_message_global",
      UPDATE_REWARD_COUNT: "update_reward_count",
      UPDATE_GIFTBAG_COUNT: "update_giftbag_count",
      UPDATE_BTN_STATE: "UPDATE_BTN_STATE",
      UPDATE_ROOMLIST_KUANG: "update_roomlist_kuang",
      UPDATE_GUIDE_ICON_STATE: "update_guide_icon_state",
      UPDATE_WATCH_VIDEO_STATUS: "update_watch_video_status",
      IS_HAVE_REWARD: "is_have_reward",
      UPDATE_SHARE_FRIEND_TITLE_STATE: "update_share_friend_title_state",
      REMOVE_TREASURE_BOX: "remove_treasure_box",
      BOX_ON_CLOSE: "BOX_ON_CLOSE",
      HIDE_TOP_BUTTON: "hide_top_button",
      UPDATE_CELA_MENU_INFO: "UPDATE_CELA_MENU_INFO",
      UPDATE_PAY_FAIL: "update_pay_fail",
      UPDATE_PAY_SUCCESS: "update_pay_success",
      UPDATE_PAY_CANCEL: "update_pay_cancel",
      CONVERSION_SUCCESS: "conversion_success",
      CHARGE_SUCCESS: "charge_success",
      DIAMOND_INSUFFICIENT: "diamond_insufficient",
      UPDATE_CONVERSION_STATE: "update_conversion_state",
      MSG_CHARGE_NOTIFY: "charge_notify",
      UPDATE_ITEM_INFO: "update_item_info",
      UPDATE_GDATA_INFO: "update_gdata_info",
      UPDATE_HEAD_PICS: "update_head_pics",
      UPDATE_HALL_INFO: "hall_info_data",
      UPDATE_BIND_USER_SNS: "bind_old_user_sns",
      UPDATE_MULTI: "update_multi",
      ACTION_SYNC_TIMESTAMP: "sync_timestamp",
      MSG_GAME: "game",
      CMD_CASH: "cash",
      MSG_CASH: "cash",
      ACTION_SAVE: "save",
      ACTION_RESUME: "resume",
      ACTION_CHALLENGE: "match_challenge",
      ACTION_RECORDS: "async_upgrade_hero_match",
      ACTION_ENTER_TABLE: "ACTION_ENTER_TABLE",
      GET_REWARD: "get_reward",
      CHECK_REWARD: "check_reward",
      HALL_SHARE2: "hall_share2",
      USER_CLICK_MATCH_ITEM: "USER_CLICK_MATCH_ITEM",
      RECIVE_HALL_INFO: "RECIVE_HALL_INFO",
      RECIVE_MATCH_LIST_INFO: "RECIVE_MATCH_LIST_INFO",
      RECIVE_TABLE_INFO: "RECIVE_TABLE_INFO",
      RECIVE_QUICK_START: "RECIVE_QUICK_START",
      SHOW_GAME_WIN_ANI: "SHOW_GAME_WIN_ANI",
      UPDATE_MATCH_INFO: "UPDATE_MATCH_INFO",
      UPDATE_WAIT_INFO: "UPDATE_WAIT_INFO",
      UPDATE_MATCH_DES: "UPDATE_MATCH_DES",
      UPDATE_REWARD_MASSAGE: "UPDATE_REWARD_MASSAGE",
      UPDATE_NEW_REWARD_MASSAGE: "UPDATE_NEW_REWARD_MASSAGE",
      UPDATE_WINLOSESHAREREWARD: "UPDATE_WINLOSESHAREREWARD",
      UPDATE_COMMON_CONFIG: "UPDATE_COMMON_CONFIG",
      UPDATE_CASH_RESULT: "UPDATE_CASH_RESULT",
      RESET_TABLE: "RESET_TABLE",
      UPDATE_SELF_HEAD_IMAGE: "UPDATE_SELF_HEAD_IMAGE",
      SCROLLTOBOTTOM: "SCROLL_TOBOTTOM",
      SHOW_MATCHING: "SHOW_MATCHING",
      REMOVE_MATCHING: "REMOVE_MATCHING",
      START_MATCHING: "START_MATCHING",
      STOP_MATCHING: "STOP_MATCHING",
      REMOVE_TABLE_ANI: "REMOVE_TABLE_ANI",
      REMOVE_DDZ_MAIN_ANI: "REMOVE_DDZ_MAIN_ANI",
      HIDE_DDZ_MAIN: "HIDE_DDZ_MAIN",
      CHANGE_TO_SHOW_FROM_HODE: "CHANGE_TO_SHOW_FROM_HODE",
      GAME_HIDE: "GAME_HIDE",
      GET_TIMESTAMP: "GET_TIMESTAMP",
      CHANE_COUNT_LABEL: "CHANE_COUNT_LABEL",
      CLICK_HEAD_BTN: "CLICK_HEAD_BTN",
      SET_BOX_TYPE: "SET_BOX_TYPE",
      UPDATE_REMOVE_CHAT: "UPDATE_REMOVE_CHAT",
      SAVE_MATCH_SUCCESS: "SAVE_MATCH_SUCCESS",
      ARENA_BACK_TO_SCENE: "arena_back_to_main_scene",
      RESUME_MATCH: "RESUME_MATCH",
      RECIVE_MATCH_RECORD: "RECIVE_MATCH_RECORD",
      ARENA_SEND_MATCH_BACK: "ARENA_SEND_MATCH_BACK",
      FTINFO_CHANGE: "FTINFO_CHANGE",
      OPEN_BANNER: "OPEN_BANNER",
      OPEN_JIPAIJI: "OPEN_JIPAIJI",
      CLOSE_JIPAIJI: "CLOSE_JIPAIJI",
      CLOSE_BETBOXABSTRACT: "CLOSE_BETBOXABSTRACT",
      UPDATE_CARD_NOTE: "UPDATE_CARD_NOTE",
      USE_NEW_CARD_NOTE: "USE_NEW_CARD_NOTE",
      UPDATE_SHARE_STATE: "UPDATE_SHARE_STATE",
      REMOVE_WINDOW_ANI: "REMOVE_WINDOW_ANI",
      UPDATE_JIPAIQI: "UPDATE_JIPAIQI",
      UPDATE_DIAMOND_COUNT: "UPDATE_DIAMOND_COUNT",
      START_AUTHORIZATION_FAILED: "START_AUTHORIZATION_FAILED",
      UPDATE_RANK_LIST: "UPDATE_RANK_LIST",
      RECEIVE_MATCH_WAIT_STATE: "RECEIVE_MATCH_WAIT_STATE",
      CHANGE_DEBUG_MODE: "CHANGE_DEBUG_MODE",
      START_RECORD: "START_RECORD",
      STOP_RECORD: "STOP_RECORD",
      ERROR_RECORD: "ERROR_RECORD",
      START_PLAY_TABLE_CHAT: "START_PLAY_TABLE_CHAT",
      SHOW_TABLE_CHAT: "SHOW_TABLE_CHAT",
      END_PLAY_TABLE_CHAT: "END_PLAY_TABLE_CHAT",
      SHOW_LAIZI_ON_TABLE: "SHOW_LAIZI_ON_TABLE",
      UPDATE_PLAYER_INFO: "UPDATE_PLAYER_INFO",
      GAME_READY: "GAME_READY",
      TABLE_INFO_CHAGE: "TABLE_INFO_CHAGE",
      STAGE_FORWARD: "STAGE_FORWARD",
      BUY_CHIP_CHANEG: "BUY_CHIP_CHANEG",
      MACH_RANK_CHANGE: "MACH_RANK_CHANGE",
      RESET_MATCH_CLICK_STATE: "RESET_MATCH_CLICK_STATE",
      CLICK_MATCHING_ITEM: "CLICK_MATCHING_ITEM",
      SHOW_MATCH_REVIVE: "SHOW_MATCH_REVIVE",
      SET_LOSS_MONEY_NUMBER: "SET_LOSS_MONEY_NUMBER",
      REWARD_VIDEO_COMPLETE: "REWARD_VIDEO_COMPLETE",
      REWARD_VIDEO_COMPLETE_ERROR: "REWARD_VIDEO_COMPLETE_ERROR",
      UPDATE_VIDEO_REWARD: "UPDATE_VIDEO_REWARD",
      MATCH_GIVE_UP: "MATCH_GIVE_UP",
      GET_USER_INFO: "GET_USER_INFO",
      REMOVE_ALL_MATCH_RESULT_PANEL: "REMOVE_ALL_MATCH_RESULT_PANEL",
      SHOW_TABLE_BANNER: "SHOW_TABLE_BANNER",
      SELECT_INFO: "SELECT_INFO",
      CLOSE_XIA_LA_VIEW: "CLOSE_XIA_LA_VIEW",
      BET_SCORE_CHANGE_ANI: "BET_SCORE_CHANGE_ANI",
      CHOOSE_BAR: "CHOOSE_BAR",
      OPEN_DIVERSION: "OPEN_DIVERSION"
    };
    cc._RF.pop();
  }, {} ],
  DdzGlobalFuncs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dfb06LdRwJG0554aS1NJuJM", "DdzGlobalFuncs");
    "use strict";
    ddz.GlobalFuncs = {};
    ddz.GlobalFuncs.SortCardFunc = function(c1, c2) {
      var info1 = c1._info;
      var info2 = c2._info;
      return info1._type < info2._type ? 1 : info1._type > info2._type ? -1 : info1._value < info2._value ? 1 : info1._value > info2._value ? -1 : info2._color - info1._color;
    };
    ddz.GlobalFuncs.SortCardFuncForInfo = function(c1, c2) {
      var info1 = c1;
      var info2 = c2;
      return info1._type < info2._type ? 1 : info1._type > info2._type ? -1 : info1._value < info2._value ? 1 : info1._value > info2._value ? -1 : info2._color - info1._color;
    };
    ddz.GlobalFuncs._sortByPoint = function(o1, o2) {
      return o1.point - o2.point;
    };
    ddz.GlobalFuncs.GetNextIndex = function(index, totalnum) {
      if ("undefined" == typeof totalnum) return index % 3 + 1;
      return index % totalnum + 1;
    };
    ddz.GlobalFuncs.getPreIndex = function(index, totalnum) {
      if ("undefined" == typeof totalnum) return 1 == index ? 3 : index - 1;
      return 1 == index ? totalnum : index - 1;
    };
    ddz.GlobalFuncs.getTopIndex = function(index, totalnum) {
      if ("undefined" == typeof totalnum) return 1 == index ? 2 : 1;
      return 1 == index ? 2 : 1;
    };
    ddz.GlobalFuncs.getMyIndex = function(index, totalnum) {
      if ("undefined" == typeof totalnum) return index % 2 + 1;
      return index % totalnum + 1;
    };
    ddz.GlobalFuncs.GetCardsOriginInterval = function(container, cardWidth, iNum) {
      var cardsLayerWidth = container.getBoundingBox().width;
      var maxlen = cardWidth * (iNum - 1) * ddz.CARD_MAX_INTERVAL + cardWidth;
      var origin, interval;
      var breakline = 10;
      if (maxlen > cardsLayerWidth) {
        origin = 0;
        interval = (cardsLayerWidth - cardWidth) / (iNum - 1);
        var minlen = cardWidth * (iNum - 1) * ddz.CARD_MIN_INTERVAL + cardWidth;
        if (minlen > cardsLayerWidth) {
          breakline = Math.ceil((cardsLayerWidth - cardWidth) / (cardWidth * ddz.CARD_MIN_INTERVAL));
          interval = (cardsLayerWidth - cardWidth) / (breakline - 1);
        }
      } else {
        origin = (cardsLayerWidth - maxlen) / 2;
        interval = ddz.CARD_MAX_INTERVAL * cardWidth;
      }
      return {
        origin: origin,
        interval: interval,
        breakline: breakline
      };
    };
    ddz.GlobalFuncs.numberToPoint = function(num) {
      var point = num % 13;
      52 != num && 53 != num || (point = num % 13 + 13);
      num > 53 && (point = num - 54);
      return point;
    };
    ddz.GlobalFuncs.numberToValue = function(num) {
      var point = this.numberToPoint(num);
      return this.pointToValue(point);
    };
    ddz.GlobalFuncs.pointToValue = function(point) {
      return -1 == point ? -1 : point <= 12 ? (point - 2 + 13) % 13 : point;
    };
    ddz.GlobalFuncs.valueToPoint = function(value) {
      return -1 == value ? -1 : value <= 12 ? (value + 2) % 13 : value;
    };
    ddz.GlobalFuncs.getLaiziNumByValue = function(value) {
      var point = this.valueToPoint(value);
      return this.getLaiziNumByPoint(point);
    };
    ddz.GlobalFuncs.getLaiziNumByPoint = function(point) {
      return point + 54;
    };
    ddz.GlobalFuncs.canShowTag = function(breakline, len, index) {
      return index == len - 1 || (index + 1) % breakline == 0;
    };
    ddz.GlobalFuncs.setToCenter = function(node) {
      var winSize = cc.director.getWinSize();
      node.x = winSize.width / 2;
      node.y = winSize.height / 2;
    };
    ddz.GlobalFuncs.formatTime = function(value) {
      var h = Math.floor(value / 3600);
      var m = Math.floor(value % 3600 / 60);
      var s = parseInt(value % 60);
      var mh = h < 10 ? "0" + h : "" + h;
      var ms = m < 10 ? "0" + m : "" + m;
      var ss = s < 10 ? "0" + s : "" + s;
      return mh + ":" + ms + ":" + ss;
    };
    ddz.GlobalFuncs.drawGameCanvas = function() {
      var webC = cc._renderContext;
      webC.clearColor(183 / 255, 220 / 255, 181 / 255, 1);
      webC.clear(webC.COLOR_BUFFER_BIT | webC.DEPTH_BUFFER_BIT);
    };
    ddz.GlobalFuncs.getBackButtonPositionY = function() {
      var systemTy = ty.UserInfo.systemType;
      var sceneSize = cc.director.getWinSize();
      var reultHeight = 0;
      systemTy == ty.UserInfo.SYSTEMTYPE.iphoneOtherType ? reultHeight = sceneSize.height / 2 - 49 : systemTy == ty.UserInfo.SYSTEMTYPE.iPhoneXType ? reultHeight = sceneSize.height / 2 - 102 : systemTy == ty.UserInfo.SYSTEMTYPE.ANDROIDOther ? reultHeight = sceneSize.height / 2 - 54 : systemTy == ty.UserInfo.SYSTEMTYPE.iPhone7P8PType ? reultHeight = sceneSize.height / 2 - 46 : systemTy == ty.UserInfo.SYSTEMTYPE.ANDROIDVIVO85 && (reultHeight = sceneSize.height / 2 - 104);
      return reultHeight;
    };
    ddz.GlobalFuncs.getCeLabgSizeY = function() {
      var systemTy = ty.UserInfo.systemType;
      var reultHeight = 0;
      systemTy == ty.UserInfo.SYSTEMTYPE.iphoneOtherType ? reultHeight = 49 : systemTy == ty.UserInfo.SYSTEMTYPE.iPhoneXType ? reultHeight = 102 : systemTy == ty.UserInfo.SYSTEMTYPE.ANDROIDOther ? reultHeight = 54 : systemTy == ty.UserInfo.SYSTEMTYPE.iPhone7P8PType ? reultHeight = 46 : systemTy == ty.UserInfo.SYSTEMTYPE.ANDROIDVIVO85 && (reultHeight = 104);
      return reultHeight;
    };
    ddz.GlobalFuncs.getBannerIntervalY = function() {
      var systemTy = ty.UserInfo.systemType;
      var reultHeight = 0;
      systemTy == ty.UserInfo.SYSTEMTYPE.iPhoneXType && (reultHeight = 20);
      return reultHeight;
    };
    ddz.GlobalFuncs.getOpenData = function(update) {
      var wechatTypeA = ty.UserInfo.wechatType.split(".");
      if (wechatTypeA[1] && wechatTypeA[1] < 6) {
        update || hall.MsgBoxManager.showToast({
          title: ddz.GameWorld.weChatVersionTips
        });
        return null;
      }
      if (wechatTypeA[1] && 6 == wechatTypeA[1] && wechatTypeA[2] && wechatTypeA[2] < 2) {
        update || hall.MsgBoxManager.showToast({
          title: ddz.GameWorld.weChatVersionTips
        });
        return null;
      }
      if (wx.hasOwnProperty("getOpenDataContext")) {
        var openDataContext = wx.getOpenDataContext();
        if (openDataContext) return openDataContext;
      }
      return null;
    };
    ddz.GlobalFuncs.judgeweChatVersion = function() {
      var wechatTypeA = ty.UserInfo.wechatType.split(".");
      if (null != wechatTypeA[1] && wechatTypeA[1] >= 7 && null != wechatTypeA[2] && wechatTypeA[2] >= 1) return true;
      return false;
    };
    ddz.GlobalFuncs.upDateRankData = function(val) {
      var openDataContext = ddz.GlobalFuncs.getOpenData(true);
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "updateRank",
        sumReward: val,
        userId: ty.UserInfo.userId
      });
    };
    ddz.GlobalFuncs.upDateRankDataChip = function(val) {
      var openDataContext = ddz.GlobalFuncs.getOpenData(true);
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "updateRankChip",
        chip: val,
        userId: ty.UserInfo.userId
      });
    };
    ddz.GlobalFuncs.getUserInfo = function() {
      var openDataContext = ddz.GlobalFuncs.getOpenData(true);
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "getUserInfo"
      });
    };
    ddz.GlobalFuncs.getFriendUserIds = function() {
      var openDataContext = ddz.GlobalFuncs.getOpenData(true);
      if (!openDataContext) return;
      var getFriendUidCallBack = function getFriendUidCallBack() {
        var openDataContext = wx.getOpenDataContext();
        var sharedCanvas = openDataContext.canvas;
        if (sharedCanvas && sharedCanvas.hasOwnProperty("2d")) {
          var context = sharedCanvas.getContext("2d");
          if (context.hasOwnProperty("friendUids")) {
            ty.Timer.cancelTimer(cc.director, getFriendUidCallBack);
            ty.UserInfo.FriendUids = context["friendUids"];
            var myUserIdIndex = ty.UserInfo.FriendUids.indexOf(ty.UserInfo.userId);
            myUserIdIndex > -1 && ty.UserInfo.FriendUids.splice(myUserIdIndex, 1);
            ddz.LOGD("ddz.GlobalFuncs.getFriendUserIds", JSON.stringify(ty.UserInfo.FriendUids));
            delete context["friendUids"];
          }
        }
      };
      ty.Timer.setTimer(cc.director, getFriendUidCallBack, 1 / 30);
      openDataContext.postMessage({
        method: "getFriendUserIds"
      });
    };
    ddz.GlobalFuncs.showGroupRank = function(val, rankType) {
      var nowWeek = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.LAST_RANK_WEEK, "");
      var openDataContext = ddz.GlobalFuncs.getOpenData();
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "showGroupRank",
        shareTicket: val,
        week: nowWeek,
        userId: ty.UserInfo.userId,
        rankType: rankType
      });
    };
    ddz.GlobalFuncs.showFriendRank = function(shareTicket, rankType) {
      var nowWeek = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.LAST_RANK_WEEK, "");
      var openDataContext = ddz.GlobalFuncs.getOpenData();
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "showFriendRank",
        week: nowWeek,
        userId: ty.UserInfo.userId,
        rankType: rankType
      });
    };
    ddz.GlobalFuncs.showOrigin = function() {
      var openDataContext = ddz.GlobalFuncs.getOpenData();
      if (!openDataContext) return;
      openDataContext.postMessage({
        method: "showOrigin"
      });
    };
    ddz.GlobalFuncs.playZuanShi = function(isShowTips, manager, rewardNumber, isChip, isHongbao, isJiPaiQi) {
      hall.LOGW("==", " file = [DdzGlobalFuncs] fun = [playZuanShi] isShowTips = " + isShowTips);
      cc.loader.loadRes("prefabs/zuanshi/zuanshi", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("ddz_zuanShiAni");
        com.parentScene = manager;
        rewardNumber && com.setCountWithNumber(rewardNumber);
        if (isChip) isHongbao ? com.changeDiamondToHongbao() : isJiPaiQi ? com.changeDiamondToJiPaiQi() : com.changeDiamondToChip(); else {
          var ani = preFabNode.getComponent(cc.Animation);
          var clipName = ani.getClips()[0].name;
          var anim = ani.getAnimationState(clipName);
          com.setTipsRichText(isShowTips);
          anim.once("finished", function() {});
          anim.play();
        }
      }.bind(this));
    };
    ddz.GlobalFuncs.playMultiReward = function(coinNum, diamondNum, jipaiqiNum, countNum, _title) {
      cc.loader.loadRes("prefabs/ddz_multiReward", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("multiReward");
        com.updateRewardInfo(coinNum, diamondNum, jipaiqiNum, countNum, _title);
      }.bind(this));
    };
    ddz.GlobalFuncs.playZuanShiBox = function(_count, isType) {
      hall.LOGW("", "file = [DdzGlobalFuncs] fun = [playZuanShiBox] _count = " + _count);
      if (ddz.zuanshiBoxCom) {
        ddz.zuanshiBoxCom.setZuanshiNnm(_count, isType);
        return;
      }
      cc.loader.loadRes("prefabs/ddz_zuanshiBox", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        if (preFabNode) {
          cc.director.getScene().addChild(preFabNode, 777777);
          ddz.zuanshiBoxCom = preFabNode.getComponent("ddz_zuanshiBox");
          ddz.zuanshiBoxCom && ddz.zuanshiBoxCom.setZuanshiNnm(_count, isType);
        } else hall.LOGW("", "file = [DdzGlobalFuncs] fun = [playZuanShiBox] preFabNode = null");
      }.bind(this));
    };
    ddz.GlobalFuncs.showWindowTipsForFriend = function(callBack) {
      var preFabPath = "prefabs/ddz_window_tips";
      var comName = "ddz_tipsWindow";
      if (ddz.friendModel.tipsWindow) {
        hall.LOGW("==ddz.friendModel.tipsWindow==", "======ddz.friendModel.tipsWindow======");
        cc.director.getScene().addChild(ddz.friendModel.tipsWindow);
        callBack(ddz.friendModel.tipsWindow, comName);
        var animation = ddz.friendModel.tipsWindow.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
      } else {
        hall.LOGW("===", "======!!!!ddz.friendModel.tipsWindow======");
        cc.loader.loadRes(preFabPath, function(err, prefab) {
          var preFabNode = cc.instantiate(prefab);
          ddz.friendModel.tipsWindow = preFabNode;
          cc.director.getScene().addChild(preFabNode);
          ddz.GlobalFuncs.setToCenter(preFabNode);
          callBack(preFabNode, comName);
        });
      }
    };
    ddz.GlobalFuncs.playShareZuanShi = function(rewardNumber, tips, strRich) {
      hall.LOGW("==", " file = [DdzGlobalFuncs] fun = [playShareZuanShi] rewardNumber = " + rewardNumber);
      if (ddz.tipsNode) {
        ddz.tipsNode.removeFromParent();
        ddz.tipsNode = null;
      }
      cc.loader.loadRes("prefabs/conversionSuccess", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        if (ddz.tipsNode) {
          ddz.tipsNode.removeFromParent();
          ddz.tipsNode = null;
        }
        ddz.tipsNode = preFabNode;
        var winSize = cc.director.getWinSize();
        preFabNode.x = winSize.width / 2;
        preFabNode.y = winSize.height / 2 + 103;
        var com = preFabNode.getComponent("conversionSuccess");
        com.updateDiamondCount(rewardNumber);
        tips && com.updateTipsText(tips);
        strRich && com.updateCoinText(strRich);
      }.bind(this));
    };
    ddz.GlobalFuncs.checkFailCount = function(matchName) {
      ddz.matchModel.canShowMatchRevivalPanel = false;
      var lastFailDate = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.LAST_FAIL_DATE, "");
      var curDate = hall.GlobalTimer.getCurDay();
      var countString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, "");
      var countDic = {};
      "" != countString && (countDic = JSON.parse(countString));
      if (lastFailDate != curDate) {
        countDic = {};
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.LAST_FAIL_DATE, curDate);
        countDic[matchName] = 1;
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
        "arena" == matchName ? ddz.gameModel.setTempDataWithArenaFailTime(1) : ddz.gameModel.setTempDataWithMatchFailTime(1);
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
        return 1;
      }
      if (!countDic[matchName]) {
        countDic[matchName] = 1;
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
        "arena" == matchName ? ddz.gameModel.setTempDataWithArenaFailTime(1) : ddz.gameModel.setTempDataWithMatchFailTime(1);
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
        return 1;
      }
      var nowNumber = parseInt(countDic[matchName]);
      nowNumber += 1;
      countDic[matchName] = nowNumber;
      "arena" == matchName ? ddz.gameModel.setTempDataWithArenaFailTime(nowNumber) : ddz.gameModel.setTempDataWithMatchFailTime(nowNumber);
      hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
      return nowNumber;
    };
    ddz.GlobalFuncs.getFailCondition = function(matchName, failCount) {
      var config = ddz.gameModel.resurgenceConfig;
      if (!config) return null;
      var matchConfig;
      var curWait = ddz.matchModel.getCurWaitInfo();
      if (config.hasOwnProperty("cityConfig")) {
        var cityConfig = config.cityConfig;
        matchConfig = cityConfig.fightMatch;
        if ("arena" == matchName) {
          matchConfig = cityConfig.arenaMatch;
          cityConfig.hasOwnProperty("arenaMatchNew") && curWait && (matchConfig = cityConfig.arenaMatchNew[curWait.matchId]);
        }
        matchConfig = ty.UserInfo.isInBSGS ? matchConfig["bsgsCity"] : matchConfig["otherCity"];
      } else {
        matchConfig = config.fightMatch;
        "arena" == matchName && (matchConfig = config.arenaMatch);
      }
      var userConfig;
      if (curWait) {
        var isNewUser = 1 == curWait.newUserProtect;
        userConfig = isNewUser ? matchConfig.newUser : matchConfig.oldUser;
        var stageIndex = curWait.stageIndex;
        for (var i = 0; i < userConfig.length; i++) {
          var configDic = userConfig[i];
          if (stageIndex <= configDic.stageIndexMax && stageIndex >= configDic.stageIndexMin) {
            var failCondition = configDic.failCondition;
            for (var j = 0; j < failCondition.length; j++) {
              var failDic = failCondition[j];
              if (failCount >= failDic.failCountMin && failCount <= failDic.failCountMax) {
                ddz.matchModel.revivalShareKey = matchName;
                "ad" == failDic.resurgenceCondition.conditionType && (failDic.resurgenceCondition.requestCount = ddz.gameModel.getFightMatchAdConfigJson(stageIndex, ty.UserInfo.tgCount, failCount, isNewUser));
                return failDic;
              }
            }
          }
        }
      }
      return null;
    };
    ddz.GlobalFuncs.showArenaReviveWindow = function(arenaMatchDes, stageIndex) {
      var preFabPath = "prefabs/ddz_window_revive";
      var comName = "ddz_window_revive";
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        window.setMatchInfo(arenaMatchDes, stageIndex);
      });
    };
    ddz.GlobalFuncs.showRevivalWindow = function(failCondition, matchName) {
      var preFabPath = "prefabs/ddz_window_revival";
      var comName = "ddz_revivalWindow";
      if (ddz.matchRevivalPanel) {
        ddz.matchRevivalPanel.setContentWithFailCondition(failCondition, matchName);
        return;
      }
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        ddz.matchRevivalPanel = window;
        window.setContentWithFailCondition(failCondition, matchName);
      });
    };
    ddz.GlobalFuncs.showBannerResurgenceWindow = function() {
      var preFabPath = "prefabs/match/ddz_bannerResurgence";
      var comName = "ddz_bannerResurgence";
      if (ddz.bannerResurgenceWindow) return;
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        ddz.bannerResurgenceWindow = window;
      });
    };
    ddz.GlobalFuncs.showShareGuideWindow = function(isWin, chipNumber, multiple, adsCounts) {
      var preFabPath = "prefabs/ddz_window_revival";
      var comName = "ddz_revivalWindow";
      if (ddz.matchRevivalPanel) {
        ddz.matchRevivalPanel.setRewardAndCompersation(isWin, chipNumber, multiple, adsCounts);
        return;
      }
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        window.setRewardAndCompersation(isWin, chipNumber, multiple, adsCounts);
        ddz.matchRevivalPanel = window;
      });
    };
    ddz.GlobalFuncs.showTipsWindowWithString = function(widthTips, buttonS) {
      var preFabPath = "prefabs/ddz_window_normal";
      var comName = "ddz_window_normal";
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        var tiString = "邀请好友";
        buttonS && (tiString = buttonS);
        window.setTitleContentAndButtonsString("提示", widthTips, [ {
          title: tiString,
          callFunc: function callFunc() {}
        } ]);
      });
    };
    ddz.GlobalFuncs.showDiamondInsufficient = function(widthTips, buttonS) {
      var preFabPath = "prefabs/ddz_window_normal";
      var comName = "ddz_window_normal";
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        var tiString = "邀请好友";
        buttonS && (tiString = buttonS);
        window.setTitleContentAndButtonsString("提示", widthTips, [ {
          title: tiString,
          callFunc: function callFunc() {
            var shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondHall;
            ddz.Share.shareWithType(shareType);
          }
        } ]);
      });
    };
    ddz.GlobalFuncs.showNormalTipsWindow = function(widthTips, buttons, title) {
      var preFabPath = "prefabs/ddz_window_normal";
      var comName = "ddz_window_normal";
      if (ddz.gameModel.normalWindow) {
        var window = ddz.gameModel.normalWindow.getComponent(comName);
        var _title = "提示";
        title && (_title = title);
        window.setTitleContentAndButtonsString(_title, widthTips, buttons);
        var animation = ddz.gameModel.normalWindow.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
        return;
      }
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var window = preFabNode.getComponent(comName);
        ddz.gameModel.normalWindow = preFabNode;
        var _title = "提示";
        title && (_title = title);
        window.setTitleContentAndButtonsString(_title, widthTips, buttons);
      });
    };
    ddz.GlobalFuncs.showDropEffect = function(baseScale, pNode) {
      pNode.scale = 1.15 * baseScale;
      var seq = cc.sequence(cc.scaleTo(.1, .93 * baseScale), cc.scaleTo(.015, baseScale));
      pNode.runAction(seq);
    };
    ddz.GlobalFuncs.showShareMomentsItem = function(type, data) {
      ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "shareMoments", type ]);
      cc.loader.loadRes("prefabs/ddz_item_shareMoments", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("ddz_item_shareMoments");
        com.setShareImageType(type, data);
      }.bind(this));
    };
    ddz.GlobalFuncs.setDayLoginRewardCount = function() {
      ddz.gameModel.dayLoginCount = 0;
      var day = hall.GlobalTimer.getCurDay();
      var nowHour = hall.GlobalTimer.getCurHours();
      if (nowHour < 10) {
        ddz.GlobalFuncs.setTodayLoginRewardDic(day);
        return 0;
      }
      var lastGetStateString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.LAST_GETDAYREWARD_TIME, "");
      if ("" == lastGetStateString || lastGetStateString.indexOf("{") < 0) {
        ddz.GlobalFuncs.setTodayLoginRewardDic(day);
        return 1;
      }
      var lastGetStateDic = JSON.parse(lastGetStateString);
      if (!lastGetStateDic[day]) {
        ddz.GlobalFuncs.setTodayLoginRewardDic(day);
        return 1;
      }
      var dayGetList = lastGetStateDic[day];
      ddz.gameModel.dayLoginCount = dayGetList.length;
      if (0 == dayGetList.length) return 1;
      var lastGetHour = dayGetList[dayGetList.length - 1];
      return lastGetHour < 18 ? nowHour < 18 ? -1 : 1 : -1;
    };
    ddz.GlobalFuncs.setTodayLoginRewardDic = function(day) {
      var nowDic = {};
      nowDic[day] = [];
      hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.LAST_GETDAYREWARD_TIME, JSON.stringify(nowDic));
    };
    ddz.GlobalFuncs.removeMatchResultPanel = function(com) {
      requestAnimationFrame(function() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_ALL_MATCH_RESULT_PANEL, com);
      });
    };
    ddz.GlobalFuncs.isFristGetReward = function() {
      var lastDate = hall.GlobalFuncs.ReadStringFromLocalStorage(hall.LAST_GET_REWARD_DAY, "");
      var curDay = hall.GlobalTimer.getCurDay();
      if (lastDate != curDay) {
        hall.GlobalFuncs.setInLocalStorage(hall.LAST_GET_REWARD_DAY, curDay);
        return true;
      }
      return false;
    };
    ddz.GlobalFuncs.noteToFriend = function(noteType, moneyCount) {
      var serverConfig = ddz.gameModel.getServerConfigJson();
      if (serverConfig && serverConfig.version >= 5.7 && ddz.GlobalFuncs.isFristGetReward()) {
        var mv = 0;
        if (moneyCount) mv = moneyCount; else {
          var couponCount = hall.ME.udataInfo.m_couponCount;
          var exchangedCoupon = hall.ME.udataInfo.m_exchangedCoupon;
          mv = hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount + exchangedCoupon);
        }
        ddz.MsgFactory.sendRewardMsgToFriends(ty.UserInfo.FriendUids, mv, noteType);
      }
    };
    ddz.GlobalFuncs.giftBtnClick = function() {
      ddz.gameModel.gongZhonghaoMenuPoint > 0 ? hall.GlobalFuncs.onOfficialAccountGuide() : ddz.GlobalFuncs.showNormalTipsWindow("今天的免费礼包已领取\n明天奖励更给力哦~", [ {
        title: "确定",
        callFunc: function callFunc() {}
      } ], "天天礼包");
    };
    cc._RF.pop();
  }, {} ],
  DdzMatching: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ef60hsopVIq6i9oXy5D4NQ", "DdzMatching");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "DdzMatching";
        this.isPlaying = false;
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        tipsLabel: {
          default: null,
          type: cc.Label
        },
        tipsLabel2: {
          default: null,
          type: cc.Label
        },
        bgSprite: {
          default: null,
          type: cc.Sprite
        },
        backBtn: {
          default: null,
          type: cc.Button
        },
        feeText: {
          default: null,
          type: cc.RichText
        },
        nowIndex: 1,
        massageList: null
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_MATCHING, this.shutSelf, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.shutSelf, this);
        this.massageList = ddz.gameModel.matchingMassage;
        this.massageList || (this.massageList = ddz.GameWorld.matchingMassage);
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backBtn.node.y = backButtonH);
        this.backBtn.node.active = false;
        this.setTxet();
        ty.Timer.setTimer(this, this.changeTxet, 3, cc.macro.REPEAT_FOREVER, -1);
        var size = cc.director.getWinSize();
        this.bgBtn && this.bgBtn.node.setContentSize(size);
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
        hall.adManager.canShowTableBanner = false;
        hall.adManager.hideBannerAd();
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        if (bc) {
          var winnerCount = ddz.matchModel.getCurWinnerCount();
          if (bc.start) {
            if (winnerCount >= bc.start) {
              hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
              this.feeText.node.y = -200;
            }
          } else {
            hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
            this.feeText.node.y = -200;
          }
        }
        ddz.LOGD("", "file = [DdzMatching] fun = [onLoad] ");
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TREASURE_BOX);
        ddz.zuanshiBoxCom && ddz.zuanshiBoxCom.onClose && ddz.zuanshiBoxCom.onClose();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
      },
      clearMessageList: function clearMessageList() {
        this.massageList = [ "" ];
        this.tipsLabel.string = "匹配中...";
        this.tipsLabel2.string = "";
        this.bgSprite.node.active = true;
        ty.Timer.cancelTimer(this, this.changeTxet);
      },
      enterQueue: function enterQueue() {
        this.backBtn.node.active = true;
        this.massageList = [ "" ];
        this.tipsLabel.string = "匹配中...";
        this.tipsLabel2.string = "";
        this.bgSprite.node.active = true;
        ty.Timer.cancelTimer(this, this.changeTxet);
        var _queueInfo = ddz.matchModel.getCurQueueInfo();
        if (_queueInfo.roomFee && _queueInfo.roomFee > 0 && this.feeText) {
          this.feeText.node.active = true;
          this.feeText.string = "<color=#ffffff>本局服务费</color><img src='ddz_coin_white'/><color=#FFFFFF> " + _queueInfo.roomFee + "</c>";
        }
      },
      backAction: function backAction() {
        var _queueInfo = ddz.matchModel.getCurQueueInfo();
        this.shutSelf();
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var _mixID = _queueInfo.mixId;
        var _mixedRoomId = _queueInfo.mixedRoomId;
        ddz.MsgFactory.getRoomLeave(_queueInfo.roomId, null, null, _mixID, _mixedRoomId);
      },
      setTxet: function setTxet() {
        this.tipsLabel.string = this.getShowText();
      },
      changeTxet: function changeTxet() {
        var ani = this.node.getComponent(cc.Animation);
        if (1 == this.nowIndex) {
          this.tipsLabel2.opacity = 0;
          this.tipsLabel2.string = this.getShowText();
          if (null == this.tipsLabel2.string) return;
          var anim = ani.getAnimationState("changeTips");
          anim.play();
          this.nowIndex = 2;
        } else {
          this.tipsLabel.string = this.getShowText();
          if (null == this.tipsLabel.string) return;
          var anim = ani.getAnimationState("changeTips2");
          anim.play();
          this.nowIndex = 1;
        }
      },
      getShowText: function getShowText() {
        var massageIndex = hall.GlobalFuncs.getRandomNumberBefore(this.massageList.length);
        var textS = this.massageList[massageIndex];
        return textS;
      },
      playAni: function playAni(value) {
        if (this.node && cc.isValid(this.node)) {
          var ani = this.node.getComponent(cc.Animation);
          var anim = ani.getAnimationState("ddz_matching");
          value ? anim.play() : anim.stop();
          this.isPlaying = value;
        }
      },
      shutSelf: function shutSelf() {
        ddz.LOGD(this._TAG, "shutSelf");
        this.isPlaying && this.playAni(false);
        ty.NotificationCenter.ignoreScope(this);
        ty.Timer.cancelTimer(this, this.changeTxet);
        if (this.node) {
          var ani = this.node.getComponent(cc.Animation);
          if (ani) {
            ani.stop();
            this.node.removeFromParent();
          }
        }
        if (hall.GlobalFuncs.isInAtScene("TableScene")) {
          hall.adManager.canShowTableBanner = true;
          hall.adManager.canShowTableTopBanner = true;
          ty.NotificationCenter.trigger(ddz.EventType.SHOW_TABLE_BANNER);
        }
      },
      onDestroy: function onDestroy() {
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  DdzMsgFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e65ceeb86ZOa6OsXKW2angY", "DdzMsgFactory");
    "use strict";
    ddz.MsgFactory = {
      getQuickStart: function getQuickStart(roomId, apiver, sessionIndex) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_QUICKSTART,
          params: {
            apiver: apiver,
            gameId: ty.SystemInfo.gameId
          }
        };
        "undefined" != typeof sessionIndex && null != sessionIndex && (params["params"]["sessionIndex"] = sessionIndex);
        "undefined" != typeof roomId && null != roomId && (params["params"]["roomId"] = roomId);
        hall.MsgFactory._sendCmd(params);
      },
      getTableLeave: function getTableLeave(roomId, tableId, seatId, mixId) {
        var params = {
          cmd: ddz.EventType.MSG_TABLE_LEAVE,
          params: {
            gameId: ty.SystemInfo.gameId,
            roomId: roomId,
            seatId: seatId,
            tableId: tableId
          }
        };
        mixId && (params.params["mixId"] = mixId);
        hall.MsgFactory._sendCmd(params);
      },
      getRoomLeave: function getRoomLeave(roomId, tableId, seatId, mixId, _mixedRoomId) {
        var params = {
          cmd: ddz.EventType.CMD_ROOM_LEAVE,
          params: {
            gameId: ty.SystemInfo.gameId,
            roomId: roomId
          }
        };
        tableId && (params.params["tableId"] = tableId);
        seatId && (params.params["seatId"] = seatId);
        mixId && (params.params["mixId"] = mixId);
        _mixedRoomId && (params.params["mixedRoomId"] = _mixedRoomId);
        hall.MsgFactory._sendCmd(params);
      },
      getTableCall: function getTableCall(action, param) {
        var subparams = {
          action: action,
          gameId: ty.SystemInfo.gameId
        };
        for (var key in param) subparams[key] = param[key];
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: subparams
        };
        hall.MsgFactory._sendCmd(params);
      },
      getReady: function getReady(roomId, tableId, seatId) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: {
            action: ddz.EventType.ACTION_READY,
            gameId: ddz.GameId,
            roomId: roomId,
            tableId: tableId,
            seatId: seatId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getCradNote: function getCradNote(roomId, tableId, seatId) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: {
            action: "newCardNote",
            gameId: ddz.GameId,
            roomId: roomId,
            tableId: tableId,
            seatId: seatId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      toComplain: function toComplain(roomId, tableId, otherPlayerId1, otherPlayerId2, gameNum) {
        var cmd = {
          cmd: ddz.EventType.CMD_COMPLAIN,
          params: {
            action: "complain",
            roomId: roomId,
            tableId: tableId,
            otherPlayerId1: otherPlayerId1,
            otherPlayerId2: otherPlayerId2,
            gameNum: gameNum
          }
        };
        hall.MsgFactory._sendCmd(cmd);
      },
      sendTableChat: function sendTableChat(roomId, tableId, from, to, emoTag, send10) {
        var params = {
          cmd: "table",
          params: {
            action: "smilies",
            roomId: roomId,
            tableId: tableId,
            seatId: from,
            smilies: emoTag,
            toseat: to,
            gameId: ty.SystemInfo.gameId,
            number: (send10, 1)
          }
        };
        ddz.LOGD(null, "sendTableChat params = " + JSON.stringify(params));
        hall.MsgFactory._sendCmd(params);
      },
      getTboxReward: function getTboxReward(roomId) {
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            action: "tbox_getReward",
            gameId: ty.SystemInfo.gameId,
            roomId: roomId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      saveMatch: function saveMatch() {
        var waitInfo = ddz.matchModel.getCurWaitInfo();
        if (!waitInfo) {
          ddz.friendModel.isEnterTable && ddz.friendModel.enterFTTable(ddz.Share.shareKeywordReplace.inviteFriendID);
          hall.LOGW(null, "当前没有wait信息,无需保存!");
          return;
        }
        if (2 != waitInfo.state && 4 != waitInfo.state) {
          ddz.friendModel.isEnterTable = false;
          hall.MsgBoxManager.showToast({
            title: "当前在比赛中,不可进入好友桌"
          });
          return;
        }
        var roomId = waitInfo.roomId;
        var params = {
          cmd: ddz.EventType.CMD_ROOM,
          params: {
            action: ddz.EventType.ACTION_SAVE,
            gameId: ty.SystemInfo.gameId,
            roomId: roomId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      resumeMatch: function resumeMatch() {
        var roomId;
        var records = ddz.gameModel.getCurMatchRecords();
        records && records.length > 0 && (roomId = records[0].roomId);
        var params = {
          cmd: ddz.EventType.CMD_ROOM,
          params: {
            action: ddz.EventType.ACTION_RESUME,
            gameId: ty.SystemInfo.gameId,
            roomId: roomId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getMatchRecords: function getMatchRecords() {
        var params = {
          cmd: ddz.EventType.MSG_GAME,
          params: {
            action: ddz.EventType.ACTION_RECORDS,
            gameId: ty.SystemInfo.gameId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      sendRewardMsgToFriends: function sendRewardMsgToFriends(friendIds, moneyVal, msgType) {
        if (!friendIds) return;
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            action: "wx_public_msg",
            gameId: ty.SystemInfo.gameId,
            friendIds: friendIds,
            msgType: msgType,
            data: {
              money: moneyVal,
              name: ty.UserInfo.userName
            }
          }
        };
        hall.MsgFactory._sendCmd(params);
      }
    };
    cc._RF.pop();
  }, {} ],
  DdzNetWorkCenter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9b03nH0HJPlJCN6wMSWAHY", "DdzNetWorkCenter");
    "use strict";
    console.log("DdzMsgFactory.js loaded");
    ddz.NetWorkCenter = {
      canNotLeave: false,
      boot: function boot() {
        this._TAG = "ddz.ClsNetWorkCenter";
        ddz.LOGD(this._TAG, "boot");
        this.cmdMap = {};
        this.cmdMap[ddz.EventType.MSG_HALL_INFO] = this.onHallInfo;
        this.cmdMap[ddz.EventType.MSG_TABLE_QUICKSTART] = this.onQuickStart;
        this.cmdMap[ddz.EventType.MSG_TABLE_TABLEINFO] = this.onTableInfo;
        this.cmdMap[ddz.EventType.MSG_ROOM] = this.onRoom;
        this.cmdMap[ddz.EventType.MSG_GAME] = this.onGame;
        this.cmdMap[ddz.EventType.MSG_USER_INFO] = this.onReceiveUserInfo;
        this.cmdMap[ddz.EventType.CMD_DIZHU] = this.onDiZhuMsg;
        this.cmdMap[ddz.EventType.CMD_ROOM_LEAVE] = this.onRoomLeave;
        this.cmdMap[ddz.EventType.HALL_SHARE2] = this.onShare2;
        this.cmdMap[ddz.EventType.CMD_TABLE_CHAT] = this.onTableChat;
        this.cmdMap[ddz.EventType.MSG_TODO_TASKS] = this.onTodoTask;
        this.cmdMap[ddz.EventType.MSG_TABLE_LEAVE] = this.onTableLeave;
        this.cmdMap[ddz.EventType.MSG_LED] = this.onLed;
        this.cmdMap[ddz.EventType.MSG_DATA_CHANGED] = this.onUpdateChangedData;
        ty.NotificationCenter.listen(ty.EventType.TCP_RECEIVE, this.onReceiveTCP_Msg, this);
      },
      onReceiveUserInfo: function onReceiveUserInfo(value) {
        if ("undefined" == typeof value) return;
        hall.ME.parseUserInfoDDZ(value);
        ty.NotificationCenter.trigger(ty.EventType.UPDATE_UER_INFO, hall.ME);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COIN_NUMBER);
        ty.NotificationCenter.trigger(ddz.EventType.SET_LOSS_MONEY_NUMBER);
      },
      shut: function shut() {
        this.cmdMap = {};
        ty.NotificationCenter.ignoreScope(this);
      },
      onDiZhuMsg: function onDiZhuMsg(argument) {
        ddz.friendModel.parseDiZhuInfo(argument);
      },
      onTableChat: function onTableChat(msg) {
        ddz.tableChatModel.parseTableChat(msg);
      },
      onTableLeave: function onTableLeave(argument) {
        if (0 == argument.result.reason) {
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
          hall.GlobalFuncs.gotoRoomListScene();
        } else -1 == argument.result.reason && hall.MsgBoxManager.showToast({
          title: "牌局已开始，请打完本局。"
        });
      },
      onLed: function onLed(params) {
        var result = params["result"];
        if (result && "hall6" == result.scope) {
          hall.gameWorld.parseLed(result.text);
          var model = hall.gameWorld.model;
          model.m_ledBeWork || ty.NotificationCenter.trigger(ddz.EventType.CMD_LED_RECEIVE, result);
        } else if (result && "6" == result.scope) {
          hall.gameWorld.parseGameLed(result.text);
          var model = hall.gameWorld.model;
          model.m_ledBeWork || ty.NotificationCenter.trigger(ddz.EventType.CMD_LED_RECEIVE, result);
        }
      },
      onTodoTask: function onTodoTask(value) {
        value && value["result"] && hall.gameWorld.model.m_todoTask.parseTodoTask(value["result"]);
      },
      onShare2: function onShare2(msg) {
        if (msg.result.action == ddz.EventType.GET_REWARD) {
          if (ddz.waitGetRevial && "waitRecive" == ddz.waitGetRevial.type && msg.result.rewards.length > 0) {
            ddz.waitGetRevial.curCount++;
            if (ddz.waitGetRevial.curCount == ddz.waitGetRevial.needCount) {
              if ("arena" == ddz.waitGetRevial.matchType) {
                ddz.matchModel.matchBack(ddz.waitGetRevial.matchDes.roomId, ddz.waitGetRevial.matchDes.matchId);
                ty.NotificationCenter.trigger(ddz.EventType.ARENA_SEND_MATCH_BACK);
                ddz.waitGetRevial = null;
                return;
              }
              ddz.matchResultPanel && ddz.matchResultPanel.shut();
              ddz.matchModel.matchBack();
              ddz.waitGetRevial = null;
            }
          } else if (msg.result.rewards.length > 0) {
            hall.LOGW("==", " file = [DdzNETWorkCenter] fun = [onShare2] msg.result.rewards.length = " + msg.result.rewards.length);
            var _count = 1;
            if (msg.result.rewards[0].count) if (1 == msg.result.rewards.length) {
              _count = msg.result.rewards[0].count;
              if ("user:chip" == msg.result.rewards[0].itemId) ddz.GlobalFuncs.playZuanShi(false, this, _count, true); else if ("item:1311" == msg.result.rewards[0].itemId) ddz.GlobalFuncs.playZuanShi(false, this, _count); else if ("item:1363" == msg.result.rewards[0].itemId) if (ddz.gameModel.firstUseJiPaiQiPoint > 0) {
                ty.NotificationCenter.trigger(ddz.EventType.USE_NEW_CARD_NOTE);
                hall.MsgBoxManager.showToast({
                  title: "送你一个记牌器,可以消除广告哦~"
                });
                ddz.gameModel.checkShareReward(ddz.Share.SharePointType.firstUseJiPaiQi);
              } else ddz.GlobalFuncs.playZuanShi(false, this, _count, true, false, true);
            } else if (msg.result.rewards.length > 1) {
              var coinNum;
              var diamondNum;
              var jipaiqinum;
              hall.LOGW("==", " file = [DdzNETWorkCenter] fun = [onShare2] 多个奖励");
              for (var i = 0; i < msg.result.rewards.length; i++) {
                var _count = 0;
                _count = msg.result.rewards[i].count;
                "user:chip" == msg.result.rewards[i].itemId ? coinNum = _count : "item:1311" == msg.result.rewards[i].itemId ? diamondNum = _count : "item:1363" == msg.result.rewards[i].itemId && (jipaiqinum = _count);
              }
              ddz.GlobalFuncs.playMultiReward(coinNum, diamondNum, jipaiqinum, 3);
            }
          }
        } else if (msg.result.action == ddz.EventType.CHECK_REWARD) {
          var data = {};
          data.leftCount = msg.result.leftCount;
          data.pointId = msg.result.pointId;
          ddz.ShareRecord[data.pointId.toString()] = data;
          ty.NotificationCenter.trigger(ty.EventType.UPDATE_BUTTON_TEXT, data);
          if (msg.result.pointId == ddz.Share.SharePointType.gongZhongHaoCard) ddz.gameModel.gongZhonghaoCardPoint = msg.result.leftCount; else if (msg.result.pointId == ddz.Share.SharePointType.gongZhongHaoMenu) {
            ddz.gameModel.gongZhonghaoMenuPoint = msg.result.leftCount;
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GIFTBAG_COUNT);
          } else msg.result.pointId == ddz.Share.SharePointType.firstWithDraw ? ddz.gameModel.firstWithDrawPoint = msg.result.leftCount : msg.result.pointId == ddz.Share.SharePointType.shareFriend ? ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_FRIEND_TITLE_STATE, msg.result.leftCount) : msg.result.pointId == ddz.Share.SharePointType.firstUseJiPaiQi ? ddz.gameModel.firstUseJiPaiQiPoint = msg.result.leftCount : msg.result.pointId == ddz.Share.SharePointType.getDayFirstLogin && ty.NotificationCenter.trigger(ty.EventType.UPDATE_BUTTON_TEXT, msg.result.leftCount);
        }
      },
      onRoomLeave: function onRoomLeave(msg) {
        if (-1 == msg.result.reason) return;
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
        ddz.LOGD("", "file = [DdzNetWorkCenter] fun = [onRoomLeave] this.canNotLeave = " + this.canNotLeave);
        if (this.canNotLeave) ty.NotificationCenter.trigger(ddz.EventType.ACTION_CAN_ROOM_LEAVE); else {
          var curScene = cc.director.getScene();
          var tableScene = curScene.children[0].getComponent("DdzTableScene");
          tableScene && tableScene.tableInfo().getSceneType() == ddz.Enums.SceneType.NORMAL ? hall.GlobalFuncs.gotoRoomListScene() : hall.GlobalFuncs && hall.GlobalFuncs.gotoDdz && hall.GlobalFuncs.gotoDdz();
          this.canNotLeave = false;
        }
      },
      onReceiveTCP_Msg: function onReceiveTCP_Msg(value) {
        var msgCmd = value.cmd;
        var result = value.result;
        if (result) {
          var gameId = result.gameId;
          if (gameId === ty.SystemInfo.gameId) {
            var func = this.cmdMap[msgCmd];
            if (func) func.call(this, value); else {
              ty.NotificationCenter.trigger(msgCmd, value);
              ddz.LOGD(this._TAG, "未注册关于消息 ： " + msgCmd + " 的监听！");
            }
          }
        }
      },
      onHallInfo: function onHallInfo(val) {
        hall.gameWorld.parseNormalRooms(val.result);
        ddz.gameModel.getMatchList();
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_HALL_INFO);
      },
      onQuickStart: function onQuickStart(argument) {
        ddz.LOGD("", "file = [DdzNetWorkCenter] fun = [onQuickStart]");
        var curScene = cc.director.getScene();
        var result = argument["result"];
        var success = true === result["isOK"];
        success ? "undefined" != typeof result["roomId"] && 0 != result["roomId"] && ddz.quickStartModel.parse(argument) : "RoomListScene" == curScene.name || hall.MsgBoxManager.showToast({
          title: "进入房间失败"
        });
      },
      onTableInfo: function onTableInfo(argument) {
        ddz.Share.isMatchShare = false;
        ddz.tableInfoModel.parse(argument);
        var curScene = cc.director.getScene();
        var noDelete = false;
        if ("TableScene" != curScene.name) {
          noDelete = true;
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING, noDelete);
          ddz.gameModel.isLoadTableScene = true;
          requestAnimationFrame(function() {
            hall.GlobalFuncs.gotoDdzTable();
          });
        }
      },
      onRoom: function onRoom(argument) {
        ddz.matchModel.parse(argument);
      },
      onGame: function onGame(argument) {
        hall.LOGD("hello", "parseGame");
        ddz.gameModel.parseGame(argument);
      },
      onUpdateChangedData: function onUpdateChangedData(argument) {
        hall.LOGD(this._TAG, "onUpdateGold -------------------------");
        if ("undefined" != typeof argument) {
          var result = argument["result"];
          if ("undefined" != typeof result && "undefined" != typeof result["changes"]) {
            var gameId = result.gameId;
            hall.LOGD(this._TAG, "gameid = " + gameId);
            for (var i = 0; i < result["changes"].length; i++) {
              var curValue = result["changes"][i];
              if ("undefined" == typeof curValue) continue;
              if ("gdata" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新gdata");
                hall.MsgFactory.getGameData(gameId);
              } else if ("item" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新道具");
                hall.MsgFactory.getBagInfo();
              } else if ("udata" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新钻石金币");
                hall.MsgFactory.getUserInfo(gameId);
              }
            }
          }
        }
      }
    };
    ddz.NetWorkCenter.boot();
    cc._RF.pop();
  }, {} ],
  DdzTableAniPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3e685w4h+FBVoDMPSTC1a6z", "DdzTableAniPlayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._tableScene = arguments[0];
        this._aniMap = {};
      },
      properties: {},
      playAniByPrefab: function playAniByPrefab(preFabPath, finish_func, start_func) {
        var that = this;
        var showAni = function showAni(aniNode, parentNode, finish_func, start_func) {
          ddz.LOGD(null, "播放动画:" + preFabPath);
          parentNode.addChild(preFabNode);
          var ani = preFabNode.getComponent(cc.Animation);
          var clipName = ani.getClips()[0].name;
          var anim = ani.getAnimationState(clipName);
          anim.once("finished", function() {
            finish_func && finish_func(preFabNode);
            preFabNode.removeFromParent(false);
            ddz.LOGD(null, "牌桌动画回收:" + preFabPath);
            that.putAni(preFabPath, preFabNode);
          });
          anim.play();
          start_func && start_func(preFabNode);
        };
        var preFabNode = this.getAniFromCache(preFabPath);
        preFabNode ? showAni(preFabNode, this._tableScene.aniNode, finish_func, start_func) : cc.loader.loadRes(preFabPath, function(err, prefab) {
          preFabNode = cc.instantiate(prefab);
          if (!preFabNode) {
            ddz.LOGD(null, "动画实例化失败:" + preFabPath);
            return;
          }
          if (!this._tableScene) return;
          var _parentNode = this._tableScene.aniNode;
          showAni(preFabNode, _parentNode, finish_func, start_func);
        }.bind(this));
      },
      getAniFromCache: function getAniFromCache(preFabPath) {
        var aniList = this._aniMap[preFabPath];
        if (aniList) return aniList.length > 0 ? aniList.pop() : null;
        return null;
      },
      putAni: function putAni(preFabPath, preFabNode) {
        var aniList = this._aniMap[preFabPath];
        if (!aniList) {
          aniList = [];
          this._aniMap[preFabPath] = aniList;
        }
        aniList.push(preFabNode);
      },
      playBomb: function playBomb(pt) {
        this.playAniByPrefab("ani/doudizhu/ddz_table_ani_bomb_blast_action/ddz_table_ani_bomb_blast");
      },
      playPlane: function playPlane() {
        this.playAniByPrefab("ani/doudizhu/ddz_table_ani_plane_action/ddz_table_ani_plane");
      },
      playRocket: function playRocket() {
        this.playAniByPrefab("ani/doudizhu/ddz_table_ani_rocket_fly_action/ddz_table_ani_rocket_fly");
        this.playAniByPrefab("ani/doudizhu/ddz_table_ani_rocket_blast_action/ddz_table_ani_rocket_blast");
      },
      playShunZi: function playShunZi() {
        this.playAniByPrefab("ani/doudizhu/ddz_table_ani_shunzi_action/ddz_table_shunzi");
      },
      playLianDui: function playLianDui() {
        this.playAniByPrefab("ani/doudizhu/ddz_table_liandui_action/ddz_table_liandui");
      },
      playChunTian: function playChunTian() {
        this.playAniByPrefab("ani/doudizhu/ddz_table_result_title_chuntian_action/ddz_table_result_title_chuntian");
      },
      playWin: function playWin() {
        this.playAniByPrefab("ani/winorlose/win1");
      },
      playLose: function playLose() {
        this.playAniByPrefab("ani/winorlose/shibai");
      },
      playGameFlow: function playGameFlow() {
        this.playAniByPrefab("ani/winorlose/gameFlow");
      },
      playLaiZi: function playLaiZi() {
        this.playAniByPrefab("ani/laizi/laizi");
      },
      shut: function shut() {
        this._tableScene = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  DdzTableChatAni: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53d541BXRNNxIZiu/CkveMt", "DdzTableChatAni");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._tableScene = arguments[0];
        this._aniMap = {};
      },
      properties: {},
      playAniByPrefab: function playAniByPrefab(preFabPath, start_func, finish_func, isForver) {
        var that = this;
        var showAni = function showAni(chatNode, parentNode, finish_func, start_func) {
          ddz.LOGD(null, "播放动画:" + preFabPath);
          parentNode.addChild(preFabNode);
          var callF;
          var ani = preFabNode.getComponent(cc.Animation);
          var clipName = ani.getClips()[0].name;
          var anim = ani.getAnimationState(clipName);
          isForver ? callF = function callF() {
            finish_func && finish_func(preFabNode);
            preFabNode.removeFromParent(false);
            ddz.LOGD(null, "牌桌动画回收:" + preFabPath);
            that.putAni(preFabPath, preFabNode);
          } : anim.once("finished", function() {
            finish_func && finish_func(preFabNode);
            preFabNode.removeFromParent(false);
            ddz.LOGD(null, "牌桌动画回收:" + preFabPath);
            that.putAni(preFabPath, preFabNode);
          });
          anim.play();
          start_func && start_func(preFabNode, callF);
        };
        var preFabNode = this.getAniFromCache(preFabPath);
        preFabNode ? showAni(preFabNode, this._tableScene.chatNode, finish_func, start_func) : cc.loader.loadRes(preFabPath, function(err, prefab) {
          preFabNode = cc.instantiate(prefab);
          if (!preFabNode) {
            ddz.LOGD(null, "动画实例化失败:" + preFabPath);
            return;
          }
          if (!this._tableScene) return;
          var _parentNode = this._tableScene.chatNode;
          showAni(preFabNode, _parentNode, finish_func, start_func);
        }.bind(this));
      },
      getAniFromCache: function getAniFromCache(preFabPath) {
        var aniList = this._aniMap[preFabPath];
        if (aniList) return aniList.length > 0 ? aniList.pop() : null;
        return null;
      },
      putAni: function putAni(preFabPath, preFabNode) {
        var aniList = this._aniMap[preFabPath];
        if (!aniList) {
          aniList = [];
          this._aniMap[preFabPath] = aniList;
        }
        aniList.push(preFabNode);
      },
      playFlowerFly: function playFlowerFly(start_func, finish_func) {
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion3_0_action/meigui", start_func, finish_func, true);
      },
      playFlower: function playFlower(start_func, finish_func) {
        ddz.AudioHelper.playEffect(ddz.SmiliesPath_mp3["flower"], false);
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion3_1_action/meigui2", start_func, finish_func);
      },
      playDiamondFly: function playDiamondFly(start_func, finish_func) {
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion1_1_action/zuanjie2", start_func, finish_func, true);
      },
      playDiamond: function playDiamond(start_func, finish_func) {
        ddz.AudioHelper.playEffect(ddz.SmiliesPath_mp3["diamond"], false);
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion1_1_action/zuanjie2", start_func, finish_func);
      },
      playEggFly: function playEggFly(start_func, finish_func) {
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion2_0_action/jidan", start_func, finish_func, true);
      },
      playEgg: function playEgg(start_func, finish_func) {
        ddz.AudioHelper.playEffect(ddz.SmiliesPath_mp3["egg"], false);
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion2_1_action/jidan2", start_func, finish_func);
      },
      playBrickFly: function playBrickFly(start_func, finish_func) {
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion4_0_action/banzhuan1", start_func, finish_func, true);
      },
      playBrick: function playBrick(start_func, finish_func) {
        ddz.AudioHelper.playEffect(ddz.SmiliesPath_mp3["brick"], false);
        this.playAniByPrefab("ani/ddz_bq/ddz_table_interactive_emotion4_1_action/banzhuan2", start_func, finish_func);
      },
      shut: function shut() {
        this._tableScene = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  DdzTableScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03a45ujieVNMaIjVCnJAKQe", "DdzTableScene");
    "use strict";
    var DdzTableAniPlayer = require("DdzTableAniPlayer");
    var DdzTableChatAni = require("DdzTableChatAni");
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        ddz.GlobalFuncs.drawGameCanvas();
        this._TAG = "DdzTableScene";
        this._leftPlayerController = null;
        this._rightPlayerController = null;
        this._leftChatController = null;
        this._rightChatController = null;
        this._operateController = null;
        this._cardsBreakline = 10;
        this._mDizhuCalled = false;
        this._cards = [];
        this._selectedCards = [];
        this._touchedCards = [];
        this._playedCards = [];
        this._extraCards = [];
        this._isUserInteractive = false;
        this._isInTrust = false;
        this._status = ddz.Enums.PlayStatus.PLAY_STATUS_PREPARE;
        this._touchCardIndexBegin = -1;
        this._touchCardIndexEnd = -1;
        this._multiNum = 1;
        this._leftSeatinfo = new ddz.SeatInfo();
        this._rightSeatinfo = new ddz.SeatInfo();
        this._mySeatinfo = new ddz.SeatInfo();
        this._mySeatIndex = 0;
        this._showCardIndex = 0;
        this._changeLaiZi = false;
        this._tableInfo = new ddz._TableInfo();
        this._tableState = new ddz._TableState();
        this._topCardType = null;
        this._playTips = null;
        this._tipNum = 0;
        this._netMsgHandler = null;
        this._mode = ddz.Enums.PlayMode.PLAY_MODE_NET;
        this._type = ddz.Enums.PlayType.PLAY_TYPE_JINGDIAN;
        this._roomId = null;
        this.cardPool = null;
        this._laiziBaseCard = null;
        this._cardAniPlayer = new DdzTableAniPlayer(this);
        this._chatAniPlayer = new DdzTableChatAni(this);
      },
      properties: {
        stageTag: cc.Node,
        cardPrefab: {
          default: null,
          type: cc.Prefab
        },
        arenaMatchPrefab: cc.Prefab,
        cardSmallPrefab: cc.Prefab,
        friendPrefab: cc.Prefab,
        goldPrefab: cc.Prefab,
        throughPrefab: cc.Prefab,
        cardsContainer: cc.Node,
        playedCardArea: cc.Node,
        cardsTip: cc.Label,
        controlPanel: cc.Node,
        myAvatar: cc.Node,
        leftPlayerPanel: cc.Node,
        rightPlayerPanel: cc.Node,
        bottomPlayerPanel: cc.Node,
        extraCardsNode: cc.Node,
        laiZiCardsNode: cc.Node,
        btnCancelInStruct: cc.Button,
        lblStage: cc.Label,
        ColorBg: cc.Node,
        faPai: cc.Node,
        aniNode: cc.Node,
        chatNode: cc.Node,
        playModeNode: cc.Node,
        head_left: cc.Node,
        head_regiht: cc.Node,
        opNode: cc.Node,
        goldInfoNode: cc.Node,
        goldInfoLabel: cc.Label,
        ledNode: cc.Node,
        ledBg: cc.Sprite,
        ledRichText: cc.RichText,
        ledTextLength: cc.RichText,
        dizhuHat: cc.Node,
        dizhuHatSprite: cc.Sprite,
        ddz_maozi_1: cc.Node,
        ddz_maozi_2: cc.Node,
        dizhuHatSpriteFrame: [ cc.SpriteFrame ],
        jipaiqi: cc.Node
      },
      setGoldInfo: function setGoldInfo(_info) {
        this.goldInfoLabel.node.active = true;
        this.goldInfoLabel.string = _info;
      },
      showGoldInfo: function showGoldInfo() {
        this.goldInfoNode.active = true;
      },
      hideGoldInfo: function hideGoldInfo() {
        this.goldInfoNode.active = false;
      },
      changeBg: function changeBg(stageIndex) {
        var curIndex = Math.max(0, stageIndex);
        this.ColorBg.getComponent("ColorBg").changeBgColor(Math.floor(curIndex / 3));
      },
      showStage: function showStage(value) {
        this.changeBg(value);
        var curIndex = Math.max(0, value - 1);
        this.stageTag.active = true;
        var numStr = "一二三四五六七"[curIndex];
        this.lblStage.string = "第" + numStr + "关";
        this.myAvatar.active = true;
        ddz.LOGD(this._TAG, "设置当前是第几关:" + numStr);
      },
      hideStage: function hideStage() {
        this.stageTag && (this.stageTag.active = false);
        this._arenaPanel && this._arenaPanel.disableChatBtn();
        this._leftPlayerController.setChatButtonActive(true);
        this._rightPlayerController.setChatButtonActive(true);
        this._operateController.setChatButtonActive(true);
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        ddz.gameModel.isLoadTableScene = false;
        var winSize = cc.view.getFrameSize();
        if (winSize.width / winSize.height >= .625) {
          var scale = .7;
          this.leftPlayerPanel.scale = scale;
          this.rightPlayerPanel.scale = scale;
          this.bottomPlayerPanel.scale = scale;
          this.stageTag.scale = scale;
          this.extraCardsNode.scale = scale;
          this.laiZiCardsNode.scale = scale;
          this.faPai.scale = scale;
        }
        this._cardBaseScale = this.playedCardArea.scale;
        this.faPai.active = false;
        this.myAvatar.active = false;
        if (ty.UserInfo.systemType == ty.UserInfo.SYSTEMTYPE.iPhoneXType) {
          var wid = this.leftPlayerPanel.getComponent(cc.Widget);
          wid.top = 30;
          var widL = this.rightPlayerPanel.getComponent(cc.Widget);
          widL.top = 30;
        }
        this._leftPlayerController = this.leftPlayerPanel.getComponent("PlayerPanel");
        this._leftPlayerController.initWithPar(true, false, this, ddz.LOCATION_SIGN.LEFT);
        this._rightPlayerController = this.rightPlayerPanel.getComponent("PlayerPanel");
        this._rightPlayerController.initWithPar(false, false, this, ddz.LOCATION_SIGN.RIGHT);
        this._operateController = this.controlPanel.getComponent("ControlPanel");
        this._operateController.init(this);
        this._leftPlayerController.setChatButtonActive(false);
        this._rightPlayerController.setChatButtonActive(false);
        this._operateController.setChatButtonActive(false);
        ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
        this.btnCancelInStruct.node.active = false;
        this.btnCancelInStruct.node.on("click", this._cancelDeposite, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_GAME_WIN_ANI, this._onShoGameWinAni, this);
        ty.NotificationCenter.listen(ddz.EventType.RESET_TABLE, this._reset, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
        ty.NotificationCenter.listen(ddz.EventType.CHANGE_TO_SHOW_FROM_HODE, this.changeToShowFromHide, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.onGameHide, this);
        ty.NotificationCenter.listen(ddz.EventType.CLICK_HEAD_BTN, this.onClickHeadBtn, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_LAIZI_ON_TABLE, this.showLaiZiCardOnTable, this);
        ty.NotificationCenter.listen(ddz.EventType.CONVERSION_SUCCESS, this.onConversionSuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.CMD_LED_RECEIVE, this.playLed, this);
        ty.NotificationCenter.listen(ddz.EventType.USE_NEW_CARD_NOTE, this.userJiPaiQi, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SELF_HEAD_IMAGE, this.changeSelfHead, this);
        ty.NotificationCenter.listen(ddz.EventType.OPEN_DIVERSION, this.openDiversion, this);
        this.cardPool = new cc.NodePool();
        var i;
        for (i = 0; i < 27; i++) this.cardPool.put(cc.instantiate(this.cardPrefab));
        var smallCard, smallCardCom;
        for (i = 0; i < 3; i++) {
          smallCard = cc.instantiate(this.cardSmallPrefab);
          smallCardCom = smallCard.getComponent("Card");
          this._extraCards.push(smallCardCom);
          smallCard.setPosition(60 * (i - 1), 0);
          this.extraCardsNode.addChild(smallCard);
          smallCard.active = false;
        }
        smallCard = cc.instantiate(this.cardSmallPrefab);
        smallCardCom = smallCard.getComponent("Card");
        this._laiziBaseCard = smallCardCom;
        smallCard.setPosition(0, 0);
        this.laiZiCardsNode.addChild(smallCard);
        smallCard.active = false;
        this.FIRSTLINECARDY = this.cardsContainer.height - ddz.CARD_BIG_SIZE.height;
        this._netMsgHandler = new ddz.PlayingNetMsg(this);
        if (ddz.quickStartModel.cache) {
          this._netMsgHandler.onQuickStart(ddz.quickStartModel.cache);
          ddz.quickStartModel.cache = null;
        }
        ddz.tableInfoModel.cache && this._netMsgHandler.onTableInfo(ddz.tableInfoModel.cache);
        this.myCardNote = [];
        ddz.isClickJiPaiQi = false;
        this.jipaiqi.active = false;
        this._initUI();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && 0 != backButtonH && (this.ledNode.y = backButtonH + 8);
        this.initAdManager();
        ty.NotificationCenter.listen(ty.EventType.CREATE_TABLE_AD, this.createTableAd, this);
        this.openDiversion();
      },
      openDiversion: function openDiversion() {
        hall.sxAdManager.show();
        hall.sxAdManager.setPositionById(101);
      },
      createTableAd: function createTableAd() {
        this.createCrossButton();
        this.showCrossButton();
      },
      initAdManager: function initAdManager() {
        hall && hall.AdManagerTYWX && hall.AdManagerTYWX.init();
      },
      createCrossButton: function createCrossButton() {
        if (hall && hall.AdManagerTYWX) {
          var size = cc.director.getWinSize();
          hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") ? hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").showAdNode() : hall.AdManagerTYWX.showAd({
            x: size.width - 70,
            y: size.height / 2 + 80
          }, "tableAdNode");
          this._isAdManagerCreated = true;
        }
      },
      showCrossButton: function showCrossButton() {
        hall && hall.AdManagerTYWX && (this._isAdManagerCreated ? hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").showAdNode() : this.scheduleOnce(this.showCrossButton, 1));
      },
      showLaiZiCardOnTable: function showLaiZiCardOnTable() {
        var laiZiCardNode = this.createNewCard(this._tableState.m_laiziNumber);
        laiZiCardNode.x = -laiZiCardNode.width / 2;
        laiZiCardNode.y = -laiZiCardNode.height / 2;
        var cordCom = laiZiCardNode.getComponent("Card");
        cordCom.setDiZhuTag(false);
        cordCom.showMask(false);
        this.node.addChild(laiZiCardNode);
        this.scheduleOnce(function() {
          this.returnCard(laiZiCardNode);
          this.showBaseLaiZi();
          this._changeHandLaiZiCards();
        }.bind(this), 1.5);
      },
      onConversionSuccess: function onConversionSuccess() {
        var playMode = this.tableInfo().playMode;
        var _mixID = this.tableInfo().mixId;
        hall.MsgFactory.getQuickStart(ty.UserInfo.userId, ddz.GameId, ddz.quickStartModel.getRoomId(), hall.staticSystemInfo.version, null, null, null, null, _mixID, playMode);
      },
      playLed: function playLed(result) {
        var model = hall.gameWorld.model;
        model.m_ledBeWork = true;
        var _ledList = model.m_ledTableList;
        var ledListSort = function ledListSort() {
          _ledList = _ledList.sort(function(x, y) {
            return x[0].grade - y[0].grade;
          });
        };
        var _moveTime = 1;
        var that = this;
        var _playLed = function _playLed() {
          ledListSort();
          var data = _ledList.shift();
          if (data && data.length > 0) {
            that.ledNode.active = true;
            var index = 0;
            that.ledRichText.string = "<color=#" + data[0].color + ">" + data[0].text + "</color>";
            that.ledTextLength.string = "<color=#" + data[0].color + ">" + data[0].text + "</color>";
            var size = that.ledBg.node.getContentSize();
            var text_size = that.ledRichText.node.getContentSize();
            var text_size_length = that.ledTextLength.node.getContentSize();
            size.width = text_size.width + 90;
            text_size_length.width < text_size.width && (size.width = text_size_length.width + 90);
            that.ledBg.node.setContentSize(size);
            text_size.height > size.height && (index = Math.ceil(text_size.height / size.height));
            that.ledRichText.node.y = size.height / 2;
            that.playModeNode.stopAllActions();
            var delay = cc.delayTime(30);
            var action;
            if (index > 1) for (var i = 0; i < index; i++) {
              var _move = cc.moveTo(_moveTime, cc.p(60, size.height / 2 + i * size.height));
              var _delay = cc.delayTime(4 * (i + 1));
              action = cc.sequence(_delay, cc.callFunc(function() {
                that.ledRichText.node.runAction(_move);
              }, that), cc.callFunc(function() {
                i == index && that.playModeNode.runAction(cc.sequence(cc.delayTime(3), cc.callFunc(function() {
                  that.ledNode.active = false;
                }), delay, cc.callFunc(function() {
                  _playLed();
                }, that)));
              }, that));
              that.playModeNode.runAction(action);
            } else {
              action = cc.sequence(cc.delayTime(5), cc.callFunc(function() {
                that.ledNode.active = false;
              }), delay, cc.callFunc(function() {
                _playLed();
              }, that));
              that.playModeNode.runAction(action);
            }
          } else {
            that.ledNode.active = false;
            model.m_ledBeWork = false;
          }
        };
        _playLed();
      },
      onClickCenterButton: function onClickCenterButton() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "mallInvite" ]);
        var shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondHall;
        ddz.Share.shareWithType(shareType);
      },
      showBaseLaiZi: function showBaseLaiZi() {
        if (this.isLaizi()) {
          this.extraCardsNode.x = -50;
          var laiziCard = this._laiziBaseCard;
          laiziCard.resetWithNum(this._tableState.m_laiziNumber);
          laiziCard.node.active = true;
        }
      },
      onRemoveAni: function onRemoveAni() {
        this.aniNode.removeAllChildren();
      },
      _onShoGameWinAni: function _onShoGameWinAni(dizhuWin) {
        var dizhuIndex = this._tableState.normalInfo.m_dizhu;
        var myIndex = this._mySeatIndex;
        var widx = 0;
        var table_result_music = ddz.EffectPath_mp3.table_victory;
        var aniName;
        if (dizhuWin) if (myIndex == dizhuIndex) aniName = "shengli"; else {
          aniName = "shibai";
          widx = 1;
        } else if (myIndex == dizhuIndex) {
          aniName = "shibai";
          widx = 1;
        } else aniName = "shengli";
        if (1 == widx) {
          table_result_music = ddz.EffectPath_mp3.table_lose;
          this._cardAniPlayer.playLose();
        } else this._cardAniPlayer.playWin();
        ddz.AudioHelper.playMusic(table_result_music, false);
      },
      _flipExtraCards: function _flipExtraCards(bAnimation, bUpside) {
        ddz.LOGD(this._TAG, "flip extra cards....");
        var tmp;
        for (var index = 0; index < 3; index++) {
          tmp = this._extraCards[index];
          tmp.node.active = bUpside;
        }
      },
      createNewCard: function createNewCard(num) {
        var cardNode;
        cardNode = this.cardPool.size() > 0 ? this.cardPool.get() : cc.instantiate(this.cardPrefab);
        cardNode.getComponent("Card").resetWithNum(num);
        return cardNode;
      },
      returnCard: function returnCard(card) {
        this.cardPool.put(card);
      },
      start: function start() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        ty.Timer.cancelTimer(this, this.showTableBannerAd);
        hall.adManager.destroyWidthBannerAd();
        this.tableInfo().destroy();
        ddz.tableInfoModel.clean();
        this._netMsgHandler.destroy();
        this._netMsgHandler = null;
        this._cardAniPlayer.shut();
        this._cardAniPlayer = null;
        this._chatAniPlayer.shut();
        this._chatAniPlayer = null;
        this.node.off(cc.Node.EventType.TOUCH_END, this._bgGroundTouch, this);
        ddz.AudioHelper.stopMusic();
        ddz.matchResultPanel = null;
        ddz.arenaResultPanel = null;
        ddz.msgCache.blocked = true;
        hall.gameWorld.model.m_ledTableList = [];
        this._rightChatController && (this._rightChatController = null);
        this._leftChatController && (this._leftChatController = null);
        this._myChatController && (this._myChatController = null);
        if (this._arenaPanelNode) {
          this._arenaPanelNode = null;
          this._arenaPanel = null;
        }
        if (this._goldPanelNode) {
          this._goldPanelNode = null;
          this._goldPanel = null;
        }
        if (this._throughPanelNode) {
          this._throughPanelNode = null;
          this._throughPanel = null;
        }
        this._friendPanel && (this._friendPanel = null);
        ddz.detailsModel.clearDetail();
        hall.loginBtnManager.destroyTableBtn();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").hideAdNode();
        hall.sxAdManager && hall.sxAdManager.hide();
      },
      _initUI: function _initUI() {
        this._createPlayerNode();
        this._isUserInteractive = true;
        var that = this;
        var containerRect = cc.rect(0, 0, this.cardsContainer.width, this.cardsContainer.height);
        cc.eventManager.addListener({
          event: cc.EventListener.TOUCH_ONE_BY_ONE,
          swallowTouches: true,
          onTouchBegan: function onTouchBegan(touch, event) {
            if (!that._isUserInteractive || that._isInTrust) return false;
            var pos = that.cardsContainer.convertToNodeSpace(touch.getLocation());
            if (cc.rectContainsPoint(containerRect, pos) && that.isTouchOnCards(pos)) return that._onTouchBegan(pos);
            return false;
          },
          onTouchEnded: function onTouchEnded(touch, event) {
            if (!that._isUserInteractive || that._isInTrust) return;
            that.touchCardsEnd();
          },
          onTouchMoved: function onTouchMoved(touch, event) {
            if (!that._isUserInteractive || that._isInTrust) return;
            var pos = that.cardsContainer.convertToNodeSpace(touch.getLocation());
            cc.rectContainsPoint(containerRect, pos) && that.isTouchOnCards(pos) && that.touchCardsMoved(pos);
          }
        }, this.cardsContainer);
        this.toFriend();
        this.toGold();
        this.toArenaMatch();
        this.toThrough();
        this.node.on(cc.Node.EventType.TOUCH_END, this._bgGroundTouch, this);
        this._tableState.normalInfo.m_state != ddz.Enums.TableState.TABLEDSTAT_IDLE && this._refreshMultipleLabel(false, true, true);
        var winnerCount = ddz.matchModel.getCurWinnerCount();
        if (this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH) {
          var bc = ddz.gameModel.getTableBannerConfigJson();
          var btc = ddz.gameModel.getTableTopBannerConfigJson();
          var isTop = false;
          this.jipaiqi.active = true;
          var winnerCount = ddz.matchModel.getCurWinnerCount();
          if (bc) if (bc.start) {
            if (winnerCount >= bc.start) {
              isTop = false;
              this.showMatchBanner(bc, isTop);
            }
          } else {
            isTop = false;
            this.showMatchBanner(bc, isTop);
          } else if (btc) if (btc.start) {
            if (winnerCount >= bc.start) {
              isTop = true;
              this.showMatchBanner(btc, isTop);
            }
          } else {
            isTop = true;
            this.showMatchBanner(btc, isTop);
          }
        } else if (this._goldPanel) {
          var bc = ddz.gameModel.getGoldTableBannerConfigJson();
          bc && (bc.start ? winnerCount >= bc.start && this.showGoldBanner(bc) : this.showGoldBanner(bc));
        } else if (this._arenaPanel) {
          var bc = ddz.gameModel.getMatchTableBannerConfigJson();
          bc && (bc.start ? winnerCount >= bc.start && this.showArenaMatchBanner(bc) : this.showArenaMatchBanner(bc));
        } else this._friendPanel, hall.adManager.destroyWidthBannerAd();
      },
      showGoldBanner: function showGoldBanner(_config, isTop) {
        if (!isTop) {
          ty.NotificationCenter.listen(ddz.EventType.SHOW_TABLE_BANNER, this.showTableBannerAd, this);
          var bottomNode = this.node.getChildByName("playerBottom");
          var bw = bottomNode.getComponent(cc.Widget);
          bw.bottom = 190;
          var gold_bottom = this._goldPanelNode.getChildByName("bottomNode");
          var gw = gold_bottom.getComponent(cc.Widget);
          gw.bottom = 155;
          hall.adManager.canShowTableBanner = true;
          this.showTableBannerAd();
          ty.Timer.setTimer(this, this.showTableBannerAd, _config.delay);
        }
      },
      showArenaMatchBanner: function showArenaMatchBanner(_config, isTop) {
        if (!isTop) {
          ty.NotificationCenter.listen(ddz.EventType.SHOW_TABLE_BANNER, this.showTableBannerAd, this);
          var bottomNode = this.node.getChildByName("playerBottom");
          var bw = bottomNode.getComponent(cc.Widget);
          bw.bottom = 190;
          var gold_bottom = this._arenaPanelNode.getChildByName("bottomNode");
          var gw = gold_bottom.getComponent(cc.Widget);
          gw.bottom = 155;
          hall.adManager.canShowTableBanner = true;
          this.showTableBannerAd();
          ty.Timer.setTimer(this, this.showTableBannerAd, _config.delay);
        }
      },
      showMatchBanner: function showMatchBanner(_config, isTop) {
        if (isTop) {
          ty.NotificationCenter.listen(ddz.EventType.SHOW_TABLE_BANNER, this.showTableTopBannerAd, this);
          var rightNode = this.node.getChildByName("playerRight");
          var br = rightNode.getComponent(cc.Widget);
          br.top = 90;
          var leftNode = this.node.getChildByName("playerLeft");
          var bl = leftNode.getComponent(cc.Widget);
          bl.top = 90;
          var exNode = this.node.getChildByName("ExtraCardsNode");
          var ex = exNode.getComponent(cc.Widget);
          ex.top = 156;
          var fapaiNode = this.node.getChildByName("fapai");
          var fapai = fapaiNode.getComponent(cc.Widget);
          fapai.top = 353;
          var stageNode = this.node.getChildByName("stageTag");
          var stage = stageNode.getComponent(cc.Widget);
          stage.top = 538;
          hall.adManager.canShowTableTopBanner = true;
          this.showTableTopBannerAd();
          ty.Timer.setTimer(this, this.showTableTopBannerAd, _config.delay);
        } else {
          ty.NotificationCenter.listen(ddz.EventType.SHOW_TABLE_BANNER, this.showTableBannerAd, this);
          hall.adManager.canShowTableBanner = true;
          this.showTableBannerAd();
          ty.Timer.setTimer(this, this.showTableBannerAd, _config.delay);
        }
      },
      showTableBannerAd: function showTableBannerAd() {
        hall.adManager.canShowTableBanner && hall.adManager.showBannerAd("adunit-811cc4e234425489");
      },
      showTableTopBannerAd: function showTableTopBannerAd() {
        hall.adManager.canShowTableTopBanner && !ddz.matchResultPanel;
      },
      _bgGroundTouch: function _bgGroundTouch(eventTouch) {
        eventTouch.touch._point.y > 100 && ("没有牌能大过上家" == this.cardsTip.string ? this._operateController._playBuchu() : this._clearSelectedCards());
      },
      _reset: function _reset() {
        this.dizhuHat.active = false;
        this.dizhuHat.x = 0;
        this.dizhuHat.y = 50;
        this.myCardNote = [];
        this.onRemoveAni();
        ddz.gameModel.isAcceptGameWin = false;
        this._waitShowJiaoDiZhu = false;
        this.jipaiqi.active = false;
        this.faPai.active = false;
        this._showCardIndex = 0;
        this._tableState.Reset();
        this._multiNum = 1;
        this._mDizhuCalled = false;
        this.setStatus(ddz.Enums.PlayStatus.PLAY_STATUS_PREPARE);
        this._topCardType = null;
        this._playTips = null;
        this._tipNum = 0;
        this._setCardsTipVisible(false);
        this.goldInfoNode.active = false;
        this._changeLaiZi = false;
        this.goldInfoLabel.node.active = false;
        this._cardsOriginX = 0;
        this._cardsIntervalX = 0;
        this._cardsBreakline = 10;
        this._touchCardIndexBegin = -1;
        this._touchCardIndexEnd = -1;
        var cardCom;
        while (this._cards.length > 0) {
          cardCom = this._cards.pop();
          this.returnCard(cardCom.node);
        }
        for (i = 0; i < this._extraCards.length; i++) {
          var card = this._extraCards[i];
          card.node.active = false;
        }
        this.extraCardsNode.x = 0;
        this._laiziBaseCard.node.active = false;
        this._selectedCards = [];
        this._touchedCards = [];
        this._clearPlayedCards();
        if (!this._friendPanel) {
          this._leftSeatinfo.clean();
          this._rightSeatinfo.clean();
        }
        this._leftPlayerController && this._leftPlayerController.reset();
        this._rightPlayerController && this._rightPlayerController.reset();
        this.myAvatar.active = false;
        this._friendPanel && (this.myAvatar.active = true);
        if (this._goldPanel) {
          this.myAvatar.active = true;
          this._goldPanel.reset();
        }
        this._throughPanel && this._throughPanel.reset();
        if (this._arenaPanel) {
          this.myAvatar.active = true;
          this._arenaPanel.reset();
        }
        this._leftPlayerController.setChatButtonActive(false);
        this._rightPlayerController.setChatButtonActive(false);
        this._operateController.setChatButtonActive(false);
        this._operateController.showPrepare(false);
        this._isUserInteractive = false;
        this._isInTrust = false;
        this.btnCancelInStruct.node.active = this._isInTrust;
        this.head_left.stopAllActions();
        this.head_regiht.stopAllActions();
        this._rightChatController && this._rightChatController.setChatNode(false, true);
        this._leftChatController && this._leftChatController.setChatNode(false, true);
        this._myChatController && this._myChatController.setChatNode(false, true);
      },
      showDizhuHat: function showDizhuHat(to_pos) {
        this.dizhuHatSprite.spriteFrame = this.dizhuHatSpriteFrame[0];
        this.dizhuPos = to_pos;
        this.dizhuHat.active = true;
        var animation = this.dizhuHat.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("maozi1");
        anim1.on("finished", this.completeHatAni, this);
        anim1.play();
      },
      showDizhuHatOrigin: function showDizhuHatOrigin(to_pos) {
        this.dizhuHatSprite.spriteFrame = this.dizhuHatSpriteFrame[1];
        this.ddz_maozi_1.opacity = 0;
        this.ddz_maozi_2.opacity = 0;
        this.dizhuPos = to_pos;
        this.dizhuHat.active = true;
        this.dizhuHat.x = to_pos.x;
        this.dizhuHat.y = to_pos.y;
      },
      completeHatAni: function completeHatAni() {
        var to_pos = this.dizhuPos;
        var from_pos = cc.p(0, 50);
        var midy;
        var midx;
        if (Math.abs(to_pos.x - from_pos.x) < 100) {
          midx = to_pos.x + 200;
          midy = from_pos.y + (to_pos.y - from_pos.y) / 2;
        } else if (Math.abs(to_pos.y - from_pos.y) < 100) {
          midx = (to_pos.x - from_pos.x) / 2;
          midy = from_pos.y;
        } else {
          midx = -200;
          midy = from_pos.y + (to_pos.y - from_pos.y) / 2 + 100;
        }
        ddz.LOGD("", "曲线运动中间点 midx = " + midx + "  midy = " + midy);
        var midPoint = cc.p(midx, midy);
        var controlPoints1 = [ from_pos, midPoint, to_pos ];
        var bezierToDst1 = cc.bezierTo(.7, controlPoints1);
        var scaleChange = cc.scaleTo(.7, 1, 1);
        this.dizhuHat.runAction(cc.sequence(cc.spawn(bezierToDst1, scaleChange), cc.callFunc(function() {
          this.dizhuHatSprite.spriteFrame = this.dizhuHatSpriteFrame[1];
        }, this)));
      },
      changePlayerAvatar: function changePlayerAvatar(hasAnimation) {
        if (hasAnimation) {
          this._leftPlayerController.refreshAvatarForeFriend();
          this._rightPlayerController.refreshAvatarForeFriend();
        } else {
          this._leftPlayerController.refreshAvatarForeFriendOrigin();
          this._rightPlayerController.refreshAvatarForeFriendOrigin();
        }
        this.myAvatar.active = true;
        var isDiZhu = this._mySeatIndex == this._tableState.normalInfo.m_dizhu;
        if (isDiZhu) {
          var that = this;
          var nextCallBack = function nextCallBack() {
            var to_pos = that.getEmoPos(that._mySeatIndex);
            hasAnimation ? that.showDizhuHat(to_pos) : that.showDizhuHatOrigin(to_pos);
          };
          requestAnimationFrame(nextCallBack);
        }
        return;
      },
      _createPlayerNode: function _createPlayerNode() {
        if (this.myAvatar) {
          var avatarCom = this.myAvatar.getComponent("Avatar");
          ddz.gameModel.isLimit && avatarCom.setAvatarUrl(hall.ME.udataInfo.m_purl);
        }
      },
      changeSelfHead: function changeSelfHead(data) {
        if (this.myAvatar) {
          var avatarCom = this.myAvatar.getComponent("Avatar");
          avatarCom.setAvatarUrl(data.url);
          hall.ME.udataInfo.m_purl = data.url;
          hall.ME.udataInfo.m_name = data.name;
        }
      },
      _getPosFromIndex: function _getPosFromIndex(index) {
        var cardIndex, posx, posy, cardsOriginX;
        if (index < this.firstLineCardCount) {
          cardsOriginX = this.firstLineOriginX;
          posy = this.FIRSTLINECARDY;
          cardIndex = index;
        } else {
          cardsOriginX = this.secondLineOriginX;
          posy = 0;
          cardIndex = index - this.firstLineCardCount;
        }
        posx = cardsOriginX + this._cardsIntervalX * cardIndex;
        return cc.p(posx, posy);
      },
      _rankCardsWithLaizi: function _rankCardsWithLaizi() {
        var lz_point = this._tableState.normalInfo.m_cardLaizi;
        var lz_number = this._tableState.m_laiziNumber;
        var len = this._cards.length;
        for (var i = 0; i < len; i++) this._cards[i]._info._point - 1 == lz_point && this._cards[i].resetWithNum(lz_number);
        this._cards.sort(ddz.GlobalFuncs.SortCardFunc);
      },
      isLaizi: function isLaizi() {
        return this.isType(ddz.Enums.PlayType.PLAY_TYPE_LAIZI);
      },
      isHuanle: function isHuanle() {
        return this.isType(ddz.Enums.PlayType.PLAY_TYPE_HUANLE);
      },
      isReplay: function isReplay() {
        return this._mode == ddz.Enums.PlayMode.PLAY_MODE_REPLAY;
      },
      isStatus: function isStatus(val) {
        return this._status == val;
      },
      setStatus: function setStatus(val) {
        this._status = val;
      },
      isType: function isType(val) {
        return this._type == val;
      },
      _isDizhu: function _isDizhu(index) {
        return this._tableState.normalInfo.m_dizhu == index;
      },
      isMode: function isMode(val) {
        return this._mode == val;
      },
      tableInfo: function tableInfo() {
        return this._tableInfo;
      },
      mySeatinfo: function mySeatinfo() {
        return this._mySeatinfo;
      },
      setType: function setType(val) {
        this._type = val;
      },
      updateTableState: function updateTableState(info) {
        this._tableState.parseTableState(info["stat"]);
      },
      getMultiple: function getMultiple() {
        var table_config = this._tableInfo.config;
        var normal = this._tableState.normalInfo;
        var multiNum = 1;
        var bc = normal.m_bomb;
        bc > 0 && (multiNum *= Math.pow(2, bc));
        var mcc = normal.m_call;
        mcc > 0 && (multiNum *= mcc);
        var mct = normal.m_chuntian;
        mct > 0 && (multiNum *= mct);
        if (normal.m_state == ddz.Enums.TableState.TABLEDSTAT_PLAYING) {
          var mbc = normal.m_bcmulti;
          mbc > 0 && (multiNum *= mbc);
          this._tableState.m_bUpdatebcMulti = false;
        }
        var mshow = normal.m_show;
        mshow > 0 && (multiNum *= mshow);
        var maxmulti = table_config.m_maxMulti;
        maxmulti > 0 && multiNum >= maxmulti && (multiNum = maxmulti);
        return multiNum;
      },
      _refreshMultipleLabel: function _refreshMultipleLabel(bWithAnimation, bUseServerData, forceUpdate) {
        if (bUseServerData) {
          var multiNum = this.getMultiple();
          if (this._multiNum != multiNum || forceUpdate) {
            bWithAnimation;
            this._multiNum = multiNum;
            this._friendPanel && this._friendPanel.updateMultiple(this.getBaseScore(), this._multiNum);
            this._goldPanel && this._goldPanel.updateMultiple(this.getBaseScore(), this._multiNum);
            this._arenaPanel && this._arenaPanel.updateMultiple(this.getBaseScore(), this._multiNum);
            this._throughPanel && this._throughPanel.updateMultiple(this.getBaseScore(), this._multiNum);
          }
        }
      },
      _setCardsTipVisible: function _setCardsTipVisible(bVisible, tipType) {
        if (arguments.length > 1) {
          this.cardsTip.node.active = true;
          var str = " ";
          tipType == ddz.Enums.PlayCardsTip.PLAYCARDSTIP_ILLEGAL ? str = "出牌不符合规则" : tipType == ddz.Enums.PlayCardsTip.PLAYCARDSTIP_NOCARD ? str = "没有牌能大过上家" : tipType == ddz.Enums.PlayCardsTip.PLAYCARDSTIP_PLAY && (str = "请选择要出的牌");
          this.cardsTip.string = str;
        } else this.cardsTip.node.active = bVisible;
      },
      parseMySeatInfo: function parseMySeatInfo(info) {
        this._mySeatinfo.parseSeatInfo(info, this._mySeatIndex);
      },
      _startPlay: function _startPlay() {
        this._isUserInteractive = true;
        this.removeAllPrepare();
        this.setStatus(ddz.Enums.PlayStatus.PLAY_STATUS_PLAYING);
      },
      _startJiaodz: function _startJiaodz() {
        ddz.LOGD(this._TAG, "start jiaodz now");
        this.removeAllPrepare();
        this._operateController.hideAll();
        this.setStatus(ddz.Enums.PlayStatus.PLAY_STATUS_JIAODZ);
        this.refreshOtherPlayerCardsNum();
      },
      refreshOtherPlayerCardsNum: function refreshOtherPlayerCardsNum() {
        if (this._leftPlayerController) {
          var leftNum = this._leftSeatinfo.model.m_card.length;
          leftNum && 0 != leftNum && this._leftPlayerController.changeShowLeftNum(leftNum);
        }
        if (this._rightPlayerController) {
          var rightNum = this._rightSeatinfo.model.m_card.length;
          rightNum && 0 != rightNum && this._rightPlayerController.changeShowLeftNum(rightNum);
        }
      },
      updateJiaodzFromTableInfo: function updateJiaodzFromTableInfo() {
        this._operateController.showJiaodz(this._tableState.normalInfo.m_call);
        if (this._leftPlayerController) {
          var leftCall = this._leftSeatinfo.model.m_call;
          this._leftPlayerController.showJiaodzOnlyNumber(leftCall);
        }
        if (this._rightPlayerController) {
          var rightCall = this._rightSeatinfo.model.m_call;
          this._rightPlayerController.showJiaodzOnlyNumber(rightCall);
        }
      },
      removeAllPrepare: function removeAllPrepare() {
        this._leftPlayerController.setPrepareVisible(false);
        this._rightPlayerController.setPrepareVisible(false);
        this._operateController.lblMsg.string = " ";
        this.playedCardArea && this.playedCardArea.removeAllChildren();
      },
      _finishJiaodz: function _finishJiaodz() {
        ddz.LOGD(this._TAG, "finish jiaodz in play controller");
        this.removeAllPrepare();
        this._startInsertExtra();
      },
      getIsMale: function getIsMale() {
        if (hall.ME && hall.ME.udataInfo) return hall.ME.udataInfo.m_sex == ddz.Enums.PlayerSexEnum.SEX_MALE;
        return true;
      },
      _classicJiaodz: function _classicJiaodz(call) {
        if (this.faPai.active) return;
        var audioName = "";
        audioName = this.getIsMale() ? "man_" : "female_";
        audioName += call > 0 ? call + "_point" : "not_call";
        ddz.LOGD(this._TAG, "playEffect=" + audioName);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[audioName], false);
        var callFen = call > 0 ? call + "分" : "不叫";
        this._operateController.callNode.active = false;
        this._operateController.lblMsg.string = callFen;
        this._mySeatinfo.model.m_call = call;
        this._operateController.setClockVisible(false);
        if (false == this.isReplay()) {
          var params = {
            seatId: this._mySeatIndex,
            call: call,
            roomId: this._tableInfo.roomId(),
            tableId: this._tableInfo.tableId()
          };
          ddz.MsgFactory.getTableCall("call", params);
        }
      },
      happyJiaodz: function happyJiaodz(call) {
        var file = this.getIsMale() ? "man_" : "female_";
        var callFen;
        if (this._mDizhuCalled) if (0 == call) {
          callFen = "不抢";
          file += "not_rob";
        } else {
          callFen = "抢地主";
          file += "rob_dizhu";
        } else if (0 == call) {
          callFen = "不叫";
          file += "not_call";
        } else {
          callFen = "叫地主";
          file += "call_dizhu";
        }
        ddz.LOGD(this._TAG, "playEffect=" + ddz.EffectPath_mp3[file]);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[file], false);
        this._operateController.lblMsg.string = callFen;
        this._operateController.setClockVisible(false);
        if (false == this.isReplay()) {
          var params = {
            seatId: this._mySeatIndex,
            call: call,
            roomId: this._tableInfo.roomId(),
            tableId: this._tableInfo.tableId()
          };
          ddz.MsgFactory.getTableCall("call", params);
        }
      },
      _returnAllCards: function _returnAllCards() {
        var cardCom;
        while (this._cards.length > 0) {
          cardCom = this._cards.pop();
          this.returnCard(cardCom.node);
        }
      },
      _initMyCards: function _initMyCards() {
        this._clearSelectedCards(true);
        this._returnAllCards();
        var cards = this._mySeatinfo.model.m_card;
        var card, cardCom;
        for (var i = 0; i < cards.length; i++) {
          card = this.createNewCard(cards[i]);
          cardCom = card.getComponent("Card");
          cardCom.showMask(false);
          this._cards.push(cardCom);
          this.cardsContainer.addChild(card);
        }
        this._cards.sort(ddz.GlobalFuncs.SortCardFunc);
        this._refreshCardsLayer();
      },
      _changeHandLaiZiCards: function _changeHandLaiZiCards() {
        var cardCom;
        for (var i = 0; i < this._cards.length; i++) {
          cardCom = this._cards[i];
          cardCom._info._point == this._tableState.normalInfo.m_cardLaizi && cardCom.resetWithNum(this._tableState.m_laiziNumber);
        }
        this._cards.sort(ddz.GlobalFuncs.SortCardFunc);
        this._refreshCardsLayer();
      },
      _resetExtraCards: function _resetExtraCards() {
        var extra = this._tableState.objectInfo.m_baseCard;
        for (var i = 0; i < extra.length; i++) this._extraCards[i].resetWithNum(extra[i]);
        this._extraCards.sort(ddz.GlobalFuncs.SortCardFunc);
        var smallCard;
        for (i = 0; i < 3; i++) {
          smallCard = this._extraCards[i].node;
          smallCard.setPosition(60 * (i - 1), 0);
        }
        this._laiziBaseCard.resetWithNum(this._tableState.m_laiziNumber);
      },
      _refreshLayoutData: function _refreshLayoutData() {
        var len = this._cards.length;
        this.firstLineCardCount = this._getCardCountInLine();
        this.secondLineCardCount = len - this.firstLineCardCount;
        var maxCount = Math.max(this.firstLineCardCount, this.secondLineCardCount);
        var data = ddz.GlobalFuncs.GetCardsOriginInterval(this.cardsContainer, ddz.CARD_BIG_SIZE.width, maxCount);
        this._cardsOriginX = data["origin"];
        this._cardsIntervalX = data["interval"];
        this._cardsBreakline = data["breakline"];
        var cardsLayerWidth = this.cardsContainer.getBoundingBox().width;
        var cardWidth = ddz.CARD_BIG_SIZE.width;
        this.firstLineWidth = (this.firstLineCardCount - 1) * this._cardsIntervalX + cardWidth;
        this.secondLineWidth = (this.secondLineCardCount - 1) * this._cardsIntervalX + cardWidth;
        this.firstLineOriginX = (cardsLayerWidth - this.firstLineWidth) / 2;
        this.secondLineOriginX = (cardsLayerWidth - this.secondLineWidth) / 2;
      },
      _checkInFirstLineCards: function _checkInFirstLineCards(pos) {
        return pos.x > this.firstLineOriginX && pos.x < this.firstLineOriginX + this.firstLineWidth && pos.y > this.FIRSTLINECARDY;
      },
      _checkInSecondLineCards: function _checkInSecondLineCards(pos) {
        return pos.x > this.secondLineOriginX && pos.x < this.secondLineOriginX + this.secondLineWidth && pos.y < ddz.CARD_BIG_SIZE.height;
      },
      _refreshCardsLayer: function _refreshCardsLayer() {
        ddz.LOGD(this._TAG, "111111 _refreshCardsLayer");
        this._clearSelectedCards();
        var len = this._cards.length;
        this._touchedCards = [];
        if (len <= 0) return;
        this._refreshLayoutData();
        var cardCom;
        var canShowTag;
        for (var index = 0; index < len; index++) {
          canShowTag = index == this.firstLineCardCount - 1 || index == len - 1;
          cardCom = this._cards[index];
          cardCom.node.stopAllActions();
          cardCom.showTag(canShowTag);
          cardCom.setDiZhuTag(this._isDizhu(this._mySeatIndex) && canShowTag);
          cardCom.showMask(this._isInTrust);
          cardCom.setPosition(this._getPosFromIndex(index));
          cardCom.setZIndex(index);
        }
      },
      _resetTopCardType: function _resetTopCardType(bNoshowCardstip) {
        this._tipNum = 0;
        if (this._tableState.normalInfo.m_topseat == this._mySeatIndex) this._topCardType = null; else {
          var top = this._tableState.objectInfo.m_topCard;
          ddz.LOGD(this._TAG, "verify topCard....." + JSON.stringify(top));
          if (top.length > 0) {
            var types = ddz.RobotGlobal.judgeType(top, false);
            this._topCardType = types[0];
            this._playTips = ddz.RobotGlobal.findWinCardsFromArray(types[0], this._mySeatinfo.model.m_card);
            if (0 == this._playTips.length) {
              ddz.LOGD(this._TAG, "no cards larger than top card");
              if (!bNoshowCardstip) {
                ddz.LOGD(this._TAG, "!bNoshowCardstip is true ~~~~~~~ ");
                this._setCardsTipVisible(true, ddz.Enums.PlayCardsTip.PLAYCARDSTIP_NOCARD);
              }
              return true;
            }
          } else {
            ddz.LOGD(this._TAG, "这不对吧");
            this._topCardType = null;
          }
        }
        return false;
      },
      showTopCards: function showTopCards() {
        var topSeatId = this._tableState.normalInfo.m_topseat;
        var mySeatId = this._mySeatIndex;
        if (topSeatId == mySeatId) return;
        var cards = this._tableState.objectInfo.m_topCard;
        var leftid = ddz.GlobalFuncs.getPreIndex(mySeatId);
        var rightid = ddz.GlobalFuncs.GetNextIndex(mySeatId);
        var controller, bdizhu;
        if (topSeatId == rightid) {
          controller = this._rightPlayerController;
          bdizhu = this._isDizhu(rightid);
        } else {
          controller = this._leftPlayerController;
          bdizhu = this._isDizhu(leftid);
        }
        this._tableState.normalInfo.m_state != ddz.Enums.TableState.TABLEDSTAT_CALLING && controller.playTopCards(cards, bdizhu);
      },
      _startInsertExtra: function _startInsertExtra() {
        ddz.LOGD(this._TAG, "start insert extra in play controller....");
        if (this._tableState.normalInfo.m_dizhu == this._mySeatIndex) this._insertExtraCards(); else {
          var seatInfo = this._tableState.normalInfo.m_dizhu == ddz.GlobalFuncs.getPreIndex(this._mySeatIndex) ? this._leftSeatinfo : this._rightSeatinfo;
          for (var i = 0; i < this._extraCards.length; i++) seatInfo.model.m_card.push(this._extraCards[i]._info._number);
          this._startPlay();
        }
      },
      _insertExtraCards: function _insertExtraCards() {
        var newcards = [];
        var i, card, cardCom;
        for (i = 0; i < 3; i++) {
          card = this._extraCards[i];
          var nc = this.createNewCard(card._info._number);
          this._cards.push(nc.getComponent("Card"));
          newcards.push(nc);
          this._mySeatinfo.model.m_card.push(card._info._number);
          nc.parent = this.cardsContainer;
        }
        this._cards.sort(ddz.GlobalFuncs.SortCardFunc);
        this._refreshCardsLayer();
        var length = this._cards.length;
        this._cards[length - 1].setDiZhuTag(true);
        for (i = 0; i < 3; i++) {
          var poker = newcards[i];
          var old_pos = poker.getPosition();
          poker.setPosition(cc.p(old_pos.x, 1.2 * old_pos.y));
          var delay = cc.delayTime(.1);
          var move = cc.moveTo(.2, poker.getComponent("Card")._oldP);
          2 == i ? poker.runAction(cc.sequence(delay, move, cc.callFunc(this._startPlay, this))) : poker.runAction(cc.sequence(delay, move));
        }
      },
      setIsInTrust: function setIsInTrust(isin) {
        if (this._isInTrust == isin) return;
        this._isInTrust = isin;
        this._refreshCardsLayer();
        this.btnCancelInStruct.node.active = this._isInTrust;
        for (var i = 0; i < this._cards.length; ++i) {
          var card = this._cards[i];
          card.showMask(this._isInTrust);
        }
      },
      _resetPlayerCardsWithLaizi: function _resetPlayerCardsWithLaizi() {
        var lz_point = this._tableState.normalInfo.m_cardLaizi;
        var lz_number = this._tableState.m_laiziNumber;
        this._mySeatinfo.resetCardsWithLaizi(lz_point, lz_number);
        this._leftSeatinfo.resetCardsWithLaizi(lz_point, lz_number);
        this._rightSeatinfo.resetCardsWithLaizi(lz_point, lz_number);
        var extra = this._tableState.objectInfo.m_baseCard;
        for (var i = 0; i < extra.length; i++) {
          var point = ddz.GlobalFuncs.numberToPoint(extra[i]);
          point == lz_point && (extra[i] = lz_number);
        }
      },
      _findCards: function _findCards(cards) {
        var return_arr = [];
        var lz_pos = -1;
        for (var i = 0; i < cards.length; i++) {
          var tip_number = cards[i];
          var index = -1;
          for (var j = 0; j < this._cards.length; j++) {
            var card = this._cards[j];
            var card_number = card._info._number;
            if (card_number == tip_number && card_number <= 53) {
              index = j;
              break;
            }
            if (card_number > 53 && tip_number > 53 && j > lz_pos) {
              lz_pos = j;
              index = j;
              break;
            }
          }
          index >= 0 && return_arr.push(card);
        }
        return return_arr;
      },
      clickChatButton: function clickChatButton(index) {
        var url;
        var name;
        var _userInfo;
        var _player_info;
        var _player_info_type;
        var _fuhao_user_info;
        var that = this;
        var to = -1;
        var _tableId = this._tableInfo.tableId();
        var _roomId = this._tableInfo.roomId();
        if (index == ddz.LOCATION_SIGN.LEFT) {
          _userInfo = this._leftSeatinfo.model.user_info;
          _player_info = this._leftSeatinfo.model.m_playinfo;
          _fuhao_user_info = this._leftSeatinfo.model.fuhao_user_info;
          _player_info_type = this._leftSeatinfo.model.m_playinfo_type;
          url = _userInfo.udataInfo.m_purl;
          name = _userInfo.udataInfo.m_name;
          to = ddz.GlobalFuncs.getPreIndex(this._mySeatIndex);
          this._rightChatController && this._rightChatController.setChatNode(false);
          this._myChatController && this._myChatController.setChatNode(false);
          if (null == this._leftChatController) cc.loader.loadRes("prefabs/userChat", function(err, prefab) {
            var _userChatL = cc.instantiate(prefab);
            this._leftChatController = _userChatL.getComponent("userChat");
            that.chatNode.addChild(_userChatL);
            this._leftChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._leftChatController.updatePos();
            this._leftChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
          }.bind(this)); else {
            this._leftChatController.setChatNode(true);
            this._leftChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._leftChatController.updatePos();
            this._leftChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
          }
        } else if (index == ddz.LOCATION_SIGN.RIGHT) {
          _userInfo = this._rightSeatinfo.model.user_info;
          _player_info = this._rightSeatinfo.model.m_playinfo;
          _fuhao_user_info = this._rightSeatinfo.model.fuhao_user_info;
          _player_info_type = this._rightSeatinfo.model.m_playinfo_type;
          url = _userInfo.udataInfo.m_purl;
          name = _userInfo.udataInfo.m_name;
          to = ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex);
          this._leftChatController && this._leftChatController.setChatNode(false);
          this._myChatController && this._myChatController.setChatNode(false);
          if (null == this._rightChatController) cc.loader.loadRes("prefabs/userChat", function(err, prefab) {
            var _userChatR = cc.instantiate(prefab);
            this._rightChatController = _userChatR.getComponent("userChat");
            that.chatNode.addChild(_userChatR);
            this._rightChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._rightChatController.updatePos();
            this._rightChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
          }.bind(this)); else {
            this._rightChatController.setChatNode(true);
            this._rightChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._rightChatController.updatePos();
            this._rightChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
          }
        } else if (index == ddz.LOCATION_SIGN.SELF) {
          _userInfo = this._mySeatinfo.model.user_info;
          _player_info = this._mySeatinfo.model.m_playinfo;
          _fuhao_user_info = this._mySeatinfo.model.fuhao_user_info;
          _player_info_type = this._mySeatinfo.model.m_playinfo_type;
          if (!_userInfo || !_player_info) return;
          url = hall.ME.udataInfo.m_purl;
          name = hall.ME.udataInfo.m_name;
          to = ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex);
          this._leftChatController && this._leftChatController.setChatNode(false);
          this._rightChatController && this._rightChatController.setChatNode(false);
          if (null == this._myChatController) cc.loader.loadRes("prefabs/userChat", function(err, prefab) {
            var _userChatR = cc.instantiate(prefab);
            this._myChatController = _userChatR.getComponent("userChat");
            that.chatNode.addChild(_userChatR);
            this._myChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._myChatController.updatePos();
            this._myChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
            this._myChatController.hideChat();
          }.bind(this)); else {
            this._myChatController.setChatNode(true);
            this._myChatController.setArguments(_tableId, _roomId, this._mySeatIndex, to, url, name, this);
            this._myChatController.updatePos();
            this._myChatController.updatePersonalInfo(_player_info, _player_info_type, _fuhao_user_info);
            this._myChatController.hideChat();
          }
        }
        ddz.LOGD(null, "clickChatButton 点击头像 index = " + index + " name = " + name);
      },
      playTip: function playTip() {
        var len = this._playTips.length;
        ddz.LOGD(null, "-----------------------playTip-----------------------------" + len);
        if (0 == len) {
          this._operateController._playBuchu();
          this._setCardsTipVisible(false);
          return;
        }
        this._clearSelectedCards();
        this._selectedCards = this._findCards(this._playTips[this._tipNum]);
        for (var i = 0; i < this._selectedCards.length; i++) this._selectedCards[i].up();
        this._operateController.btnPlay.active = true;
        this._operateController.btnPlay.interactable = true;
        this._tipNum = (this._tipNum + 1) % len;
      },
      playAnimationSoundByCardType: function playAnimationSoundByCardType(type, bMale, userPosition) {
        var sound;
        var special_effect;
        switch (type.getType()) {
         case ddz.Enums.PaixingType.ROCKET:
          sound = bMale ? "man_rocket" : "female_rocket";
          special_effect = "rocket";
          this._cardAniPlayer.playRocket();
          ty.NotificationCenter.trigger(ddz.EventType.BET_SCORE_CHANGE_ANI);
          break;

         case ddz.Enums.PaixingType.BOMB_CARD:
          sound = bMale ? "man_bomb" : "female_bomb";
          special_effect = "bomb";
          this._cardAniPlayer.playBomb();
          ty.NotificationCenter.trigger(ddz.EventType.BET_SCORE_CHANGE_ANI);
          break;

         case ddz.Enums.PaixingType.AIRCRAFT_CARD:
          sound = bMale ? "man_airplane" : "female_airplane";
          special_effect = null == this._topCardType ? "airplane_the_first_time" : "airplane_beiguan";
          this._cardAniPlayer.playPlane();
          break;

         case ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD:
         case ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD:
          this._cardAniPlayer.playPlane();
          sound = bMale ? "man_aircraft_with_wings" : "female_airplane_with_wing";
          special_effect = null == this._topCardType ? "airplane_the_first_time" : "airplane_beiguan";
          break;

         case ddz.Enums.PaixingType.SHUNZI_CARD:
          this._cardAniPlayer.playShunZi();
          sound = bMale ? "man_shunzi" : "female_shunzi";
          special_effect = "shunzi";
          break;

         case ddz.Enums.PaixingType.LIANDUI_CARD:
          this._cardAniPlayer.playLianDui();
          sound = bMale ? "man_continuous_pair" : "female_continuous_pair";
          special_effect = "continuous_pair";
          break;

         case ddz.Enums.PaixingType.THREE_ONE_CARD:
          sound = bMale ? "man_three_with_one" : "female_three_with_one";
          break;

         case ddz.Enums.PaixingType.THREE_CARD:
          sound = bMale ? "man_three_one" : "female_three_one";
          break;

         case ddz.Enums.PaixingType.THREE_TWO_CARD:
          sound = bMale ? "man_three_with_one_pair" : "female_three_with_one_pair";
          break;

         case ddz.Enums.PaixingType.BOMB_TWO_CARD:
          sound = bMale ? "man_four_with_two" : "female_four_with_two";
          break;

         case ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD:
          sound = bMale ? "man_four_with_one_pair" : "female_four_with_two_pair";
        }
        if (sound) {
          ddz.LOGD(this._TAG, "playEffect=" + sound);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[sound], false);
        }
        if (special_effect) {
          ddz.LOGD(this._TAG, "playEffect=" + special_effect);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[special_effect], false);
        }
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.Playing_cards, false);
      },
      _sendPlayCardInfo: function _sendPlayCardInfo(cards) {
        var params = {
          seatId: this._mySeatIndex,
          ccrc: this._tableState.normalInfo.m_ccrc,
          roomId: this._tableInfo.roomId(),
          tableId: this._tableInfo.tableId(),
          cards: cards
        };
        ddz.MsgFactory.getTableCall("card", params);
      },
      _playCards: function _playCards() {
        ddz.LOGD(this._TAG, "play cards in play controller");
        if (this.isLaizi() && !this._changeLaiZi) {
          hall.MsgBoxManager.showToast({
            title: "请等待癞子确定后,再出牌!"
          });
          return;
        }
        this._setCardsTipVisible(false);
        var cards = [];
        var len = this._selectedCards.length;
        if (len > 0) {
          for (var i = 0; i < len; i++) cards.push(this._selectedCards[i]._info._number);
          var types = ddz.RobotGlobal.judgeType(cards, true);
          if (types.length <= 0) {
            ddz.LOGD(this._TAG, "in play cards, illegal cards, return" + JSON.stringify(cards));
            this._setCardsTipVisible(true, ddz.Enums.PlayCardsTip.PLAYCARDSTIP_ILLEGAL);
            return;
          }
          var type, checkLarger = false;
          if (this._topCardType) {
            ddz.LOGD(null, "topCard : ......");
            this._topCardType.dump();
            for (var j = 0; j < types.length; j++) {
              type = types[j];
              ddz.LOGD(null, "play cards type : ......." + type._type);
              type.dump();
              checkLarger = type.isLargerThan(this._topCardType);
              if (checkLarger) break;
            }
            if (!checkLarger) {
              ddz.LOGD(this._TAG, "in play cards, not larger than top card, return" + JSON.stringify(this._topCardType));
              this._setCardsTipVisible(true, ddz.Enums.PlayCardsTip.PLAYCARDSTIP_ILLEGAL);
              return;
            }
          } else type = types[0];
          this.isMode(ddz.Enums.PlayMode.PLAY_MODE_SINGLE) || (this._isUserInteractive = false);
          cards = type.getCards();
        }
        this.isMode(ddz.Enums.PlayMode.PLAY_MODE_SINGLE) || this._sendPlayCardInfo(cards);
      },
      _playCardsFromServer: function _playCardsFromServer(cards) {
        this._clearPlayedCards();
        var isMale = this.getIsMale();
        if (0 == cards.length) {
          this._operateController.showBuchuSprite();
          var filename = isMale ? "man_no" : "female_no";
          ddz.LOGD(this._TAG, "playEffect=" + filename);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[filename], false);
          return;
        }
        var types = ddz.RobotGlobal.judgeType(cards, false);
        0 == types.length && ddz.LOGD(null, "error in _playCardsFromServer!!! type error..");
        this._mySeatinfo.playCards(cards);
        this._clearSelectedCards(true);
        this._selectedCards = this._findCards(cards);
        this._playCardsInternal();
        this.playAnimationSoundByCardType(types[0], isMale);
        this._runPlayCardsAction(cards);
      },
      _groupCards: function _groupCards() {
        var cardGroup = [];
        var curSubArr;
        var cardCom, curPoint;
        var len = this._cards.length;
        for (var i = 0; i < len; i++) {
          cardCom = this._cards[i];
          curPoint = cardCom._info._point;
          if (0 == cardGroup.length) {
            curSubArr = [];
            curSubArr.push(cardCom);
            cardGroup.push(curSubArr);
          } else {
            curSubArr = cardGroup[cardGroup.length - 1];
            if (curSubArr[curSubArr.length - 1]._info._point == curPoint) curSubArr.push(cardCom); else {
              curSubArr = [];
              curSubArr.push(cardCom);
              cardGroup.push(curSubArr);
            }
          }
        }
        return cardGroup;
      },
      _getCardCountInLine: function _getCardCountInLine() {
        var firstLineCardCount = 0;
        var allCardCount = this._cards.length;
        if (allCardCount <= 10) firstLineCardCount = allCardCount; else {
          var curSubArr;
          var lineCardCount = 0;
          var cardGroup = this._groupCards();
          var nextCount;
          for (var i = 0; i < cardGroup.length; i++) {
            curSubArr = cardGroup[i];
            nextCount = lineCardCount + curSubArr.length;
            if (nextCount > 10) {
              firstLineCardCount = allCardCount - lineCardCount <= 10 ? lineCardCount : 10;
              break;
            }
            lineCardCount += curSubArr.length;
          }
        }
        return firstLineCardCount;
      },
      _reorderCardsLayer: function _reorderCardsLayer() {
        ddz.LOGD(this._TAG, "1111111 _reorderCardsLayer");
        var len = this._cards.length;
        if (len <= 0) return;
        this.playedCardArea.removeAllChildren();
        this._refreshLayoutData();
        var cardCom, des, poker;
        var canShowTag;
        for (var index = 0; index < len; index++) {
          canShowTag = index == this.firstLineCardCount - 1 || index == len - 1;
          cardCom = this._cards[index];
          poker = cardCom.node;
          des = this._getPosFromIndex(index);
          cardCom.setOldPosition(des);
          cardCom.setZIndex(index);
          cardCom.showTag(canShowTag);
          cardCom.setDiZhuTag(this._isDizhu(this._mySeatIndex) && canShowTag);
          poker.stopAllActions();
          poker.runAction(cc.moveTo(.1, des));
        }
      },
      _playCardsInternal: function _playCardsInternal() {
        var scard, index;
        for (var i = 0; i < this._selectedCards.length; i++) {
          scard = this._selectedCards[i];
          index = hall.GlobalFuncs.FindInArray(this._cards, scard);
          index >= 0 ? this._cards.splice(index, 1) : ddz.LOGD(this._TAG, "error, not found selected card in cards!!!!!!!!" + scard._info._number);
        }
        if (this._selectedCards.length <= 0) return;
        this._reorderCardsLayer();
        var audio;
        var isMale = this.getIsMale();
        var leftCardsNum = this._cards.length;
        if (2 == leftCardsNum) {
          audio = isMale ? "man_" : "female_";
          audio += "I_got_left_two_cards";
          ddz.LOGD(this._TAG, "playEffect=" + audio);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[audio], false);
        } else if (1 == leftCardsNum) {
          audio = isMale ? "man_" : "female_";
          audio += "I_got_left_one_cards";
          ddz.LOGD(this._TAG, "playEffect=" + audio);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[audio], false);
        }
      },
      _runPlayCardsAction: function _runPlayCardsAction(cards) {
        var length = this._selectedCards.length;
        if (length <= 0) return;
        var startY = 0;
        var startX = 0;
        var breakline = 10;
        var splitWidth = 55;
        if (length > 10) {
          startY = this.FIRSTLINECARDY;
          startX = 0;
        } else {
          startY = 0;
          startX = (this.playedCardArea.width - ((length - 1) * splitWidth + ddz.CARD_BIG_SIZE.width)) / 2;
        }
        var tox, toy;
        var canShowTag, card, cardNum;
        for (var i = 0; i < length; i++) {
          canShowTag = ddz.GlobalFuncs.canShowTag(this._cardsBreakline, length, i);
          card = this._selectedCards.shift();
          cardNum = cards[i];
          this.isLaizi() && card.resetWithNum(cardNum);
          card.showTag(canShowTag);
          card.setDiZhuTag(this._isDizhu(this._mySeatIndex) && canShowTag);
          card.setZIndex(i);
          card.showMask(false);
          this._playedCards.push(card);
          card.node.parent = this.playedCardArea;
          tox = i % breakline * splitWidth + startX;
          toy = startY - 56 * Math.floor(i / breakline);
          card.node.setPosition(tox, toy);
        }
        ddz.GlobalFuncs.showDropEffect(this._cardBaseScale, this.playedCardArea);
      },
      _clearSelectedCards: function _clearSelectedCards(withOutAni) {
        cc.isValid(this.cardsTip) && (this.cardsTip.node.active = false);
        ddz.LOGD(this._TAG, "clear selected cards len = ***" + this._selectedCards.length);
        var card;
        while (this._selectedCards.length > 0) {
          card = this._selectedCards.pop();
          card.down(withOutAni);
        }
        this._operateController.btnPlay.active = false;
      },
      startDeposite: function startDeposite() {
        if (this._isInTrust || this.isStatus(ddz.Enums.PlayStatus.PLAY_STATUS_PREPARE)) return;
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        ddz.LOGD(this._TAG, "托管状态 startDeposite");
        this._isTrustEnable = false;
        var params = {
          seatId: this._mySeatIndex,
          roomId: this._tableInfo.roomId(),
          tableId: this._tableInfo.tableId()
        };
        ddz.MsgFactory.getTableCall("robot", params);
      },
      _cancelDeposite: function _cancelDeposite() {
        this.setIsInTrust(false);
        this._isTrustEnable = true;
        var params = {
          seatId: this._mySeatIndex,
          roomId: this._tableInfo.normal.m_roomId,
          tableId: this._tableInfo.normal.m_tableId
        };
        ddz.MsgFactory.getTableCall("robot", params);
      },
      onActionWildCard: function onActionWildCard(result) {
        var self = this;
        var delayTime = 1.8;
        var p = result["wildcard"];
        self._tableState.setLaizi(p);
        self._resetPlayerCardsWithLaizi();
        self.playChooseLaiziAnimation();
        this.scheduleOnce(function() {
          self._changeLaiZi = true;
        }, delayTime);
      },
      playChooseLaiziAnimation: function playChooseLaiziAnimation() {
        this._cardAniPlayer.playLaiZi();
      },
      getEmoPos: function getEmoPos(index) {
        var pos;
        pos = index == ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex) ? this.chatNode.convertToNodeSpace(this.head_regiht.convertToWorldSpace(cc.p(0, 0))) : index == ddz.GlobalFuncs.getPreIndex(this._mySeatIndex) ? this.chatNode.convertToNodeSpace(this.head_left.convertToWorldSpace(cc.p(0, 0))) : this.chatNode.convertToNodeSpace(this.myAvatar.convertToWorldSpace(cc.p(0, 0)));
        return pos;
      },
      onActionChat: function onActionChat(result) {
        var to_pos = this.getEmoPos(result["toseat"]);
        var from_pos = this.getEmoPos(result["fromseat"]);
        var that = this;
        if (result["fromseat"] == this._mySeatIndex) if (result["toseat"] == ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex)) {
          that.head_regiht.stopAllActions();
          ddz.CHAT_COOLING_TIMER_RIGHT = 6;
          var _call_right = function _call_right() {
            if (ddz.CHAT_COOLING_TIMER_RIGHT >= 0) {
              that._rightChatController && that._rightChatController.isCooling(ddz.CHAT_COOLING_TIMER_RIGHT);
              that.head_regiht.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(_call_right, that)));
              ddz.CHAT_COOLING_TIMER_RIGHT = ddz.CHAT_COOLING_TIMER_RIGHT - 1;
            }
          };
          _call_right();
        } else if (result["toseat"] == ddz.GlobalFuncs.getPreIndex(this._mySeatIndex)) {
          that.head_left.stopAllActions();
          ddz.CHAT_COOLING_TIMER_LEFT = 6;
          var _call_left = function _call_left() {
            if (ddz.CHAT_COOLING_TIMER_LEFT >= 0) {
              that._leftChatController && that._leftChatController.isCooling(ddz.CHAT_COOLING_TIMER_LEFT);
              that.head_left.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(_call_left, that)));
              ddz.CHAT_COOLING_TIMER_LEFT = ddz.CHAT_COOLING_TIMER_LEFT - 1;
            }
          };
          _call_left();
        }
        var emoId = result["smilies"];
        var startFunc = function startFunc(_preFabNode, _callFunc) {
          _preFabNode.x = to_pos.x;
          _preFabNode.y = to_pos.y;
        };
        var gStartFunc = function gStartFunc(_preFabNode, _callFunc) {
          _preFabNode.x = from_pos.x;
          _preFabNode.y = from_pos.y;
          var midy;
          var midx;
          if (Math.abs(to_pos.x - from_pos.x) < 100) {
            midx = to_pos.x + 200;
            midy = from_pos.y + (to_pos.y - from_pos.y) / 2;
          } else if (Math.abs(to_pos.y - from_pos.y) < 100) {
            midx = (to_pos.x - from_pos.x) / 2;
            midy = from_pos.y;
          } else {
            midx = -200;
            midy = from_pos.y + (to_pos.y - from_pos.y) / 2 + 100;
          }
          ddz.LOGD("", "曲线运动中间点 midx = " + midx + "  midy = " + midy);
          var midPoint = cc.p(midx, midy);
          var controlPoints1 = [ from_pos, midPoint, to_pos ];
          var bezierToDst1 = cc.bezierTo(.7, controlPoints1);
          _preFabNode.runAction(cc.sequence(bezierToDst1, cc.callFunc(function() {
            if ("brick" == emoId) {
              to_pos.x = to_pos.x - 42;
              to_pos.y = to_pos.y - 36;
            }
            switch (emoId) {
             case "flower":
              this._chatAniPlayer.playFlower(startFunc, null);
              break;

             case "diamond":
              this._chatAniPlayer.playDiamond(startFunc, null);
              break;

             case "egg":
              this._chatAniPlayer.playEgg(startFunc, null);
              break;

             case "brick":
              this._chatAniPlayer.playBrick(startFunc, null);
            }
            _callFunc && _callFunc();
          }, that)));
        };
        switch (emoId) {
         case "flower":
          this._chatAniPlayer.playFlowerFly(gStartFunc, null);
          break;

         case "diamond":
          this._chatAniPlayer.playDiamondFly(gStartFunc, null);
          break;

         case "egg":
          this._chatAniPlayer.playEggFly(gStartFunc, null);
          break;

         case "brick":
          this._chatAniPlayer.playBrickFly(gStartFunc, null);
        }
      },
      onActionReady: function onActionReady(sid) {
        if (sid == this._mySeatIndex) {
          this._mySeatinfo.model.m_state = ddz.Enums.SeatState.SEATDZSTAT_READY;
          if (this.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND) {
            this._friendPanel.setBtnReadyState(false);
            this._operateController.showPrepare(true);
          }
        } else if (sid == ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex)) {
          ddz.LOGD(this._TAG, "action == right game_ready");
          this._rightPlayerController.setPrepareVisible(true);
          this._rightSeatinfo.model.m_state = ddz.Enums.SeatState.SEATDZSTAT_READY;
        } else {
          ddz.LOGD(this._TAG, "action == left game_ready");
          this._leftPlayerController.setPrepareVisible(true);
          this._leftSeatinfo.model.m_state = ddz.Enums.SeatState.SEATDZSTAT_READY;
        }
      },
      onActionGameReady: function onActionGameReady(result) {
        ddz.LOGD(this._TAG, "action == game_ready");
        this.hideStage();
        if (this.tableInfo().ftInfo) {
          this.tableInfo().ftInfo.parseGameReady(result);
          1 == this.tableInfo().ftInfo.curRound && ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeStartFriendGame, [ ddz.Share.shareKeywordReplace.inviteFriendID, ddz.Share.shareKeywordReplace.totalRound, ddz.Share.shareKeywordReplace.displayName, ddz.Share.shareKeywordReplace.goodCard ]);
        }
        var mycards = result["cards" + (this._mySeatIndex - 1)];
        var saveDic = {
          myCards: mycards,
          baseCard: result.basecard
        };
        hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.ORIGINCARDS, JSON.stringify(saveDic));
        var rcards, lcards;
        this._mySeatinfo.model.m_card = mycards;
        rcards = result["cards" + (ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex) - 1)];
        this._rightSeatinfo.model.m_card = rcards;
        lcards = result["cards" + (ddz.GlobalFuncs.getPreIndex(this._mySeatIndex) - 1)];
        this._leftSeatinfo.model.m_card = lcards;
        this._leftPlayerController.changeShowLeftNum(0);
        this._rightPlayerController.changeShowLeftNum(0);
        this.playCardAni();
        this._returnAllCards();
        this._showCardIndex = 0;
        var card, cardCom;
        for (var i = 0; i < mycards.length; i++) {
          card = this.createNewCard(mycards[i]);
          cardCom = card.getComponent("Card");
          cardCom.showMask(false);
          this._cards.push(cardCom);
          card.active = false;
          this.cardsContainer.addChild(card);
        }
        this._cards.sort(ddz.GlobalFuncs.SortCardFunc);
        this._refreshLayoutData();
        var rc = 17;
        var allTime = 1;
        ty.Timer.setTimer(this, this.addCardToPlayer, allTime / rc, rc, 17 / 30);
        this._tableState.objectInfo.m_baseCard = result["basecard"];
        this._resetExtraCards();
        this._startJiaodz();
        this.upDateGoldInfo();
        ty.NotificationCenter.trigger(ddz.EventType.GAME_READY);
        if (result.myCardNote) {
          this.myCardNote = result.myCardNote;
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CARD_NOTE, this.myCardNote);
        }
        this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH && (this.jipaiqi.active || (this.jipaiqi.active = true));
      },
      playCardAni: function playCardAni() {
        this.faPai.active = true;
        var animationCom = this.faPai.getComponent(cc.Animation);
        var ani = animationCom.getAnimationState("fapai_anim");
        ani.play();
      },
      stopCardAni: function stopCardAni() {
        var animationCom = this.faPai.getComponent(cc.Animation);
        var ani = animationCom.getAnimationState("fapai_anim");
        if (ani.isPlaying) {
          ani.stop();
          this.faPai.active = false;
        }
      },
      changeToShowFromHide: function changeToShowFromHide(timeGap) {
        if (this.isStatus(ddz.Enums.PlayStatus.PLAY_STATUS_GAMEOVER)) return;
        this.stopCardAni();
        ty.Timer.cancelTimer(this, this.addCardToPlayer);
        if (this._cards) for (var i = 0; i < this._cards.length; i++) {
          var cardCom = this._cards[i];
          cardCom.node.active = true;
        }
        this._refreshCardsLayer();
        this.refreshOtherPlayerCardsNum();
      },
      onGameHide: function onGameHide() {
        this.hideStage();
      },
      onClickHeadBtn: function onClickHeadBtn(index) {
        this.clickChatButton(index);
      },
      addCardToPlayer: function addCardToPlayer() {
        var index = this._showCardIndex;
        var cardCom = this._cards[index];
        if (!cardCom) return;
        cardCom.node.active = true;
        cardCom.showTag(true);
        cardCom.setDiZhuTag(false);
        cardCom.setPosition(this._getPosFromIndex(index));
        cardCom.setZIndex(index);
        index > 0 && index - 1 != 9 && this._cards[index - 1].showTag(false);
        this._showCardIndex++;
        if (17 == this._showCardIndex) {
          ty.Timer.cancelTimer(this, this.addCardToPlayer);
          this.faPai.active = false;
          this._waitShowJiaoDiZhu && this.showCallPanel();
        }
        this._leftPlayerController.changeShowLeftNum(this._showCardIndex);
        this._rightPlayerController.changeShowLeftNum(this._showCardIndex);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.click_cards, false);
      },
      showCallPanel: function showCallPanel() {
        this._operateController.showJiaodz(this._tableState.normalInfo.m_call);
        this._operateController.showClock();
        this._waitShowJiaoDiZhu = false;
      },
      getOpTime: function getOpTime(result) {
        var time = result["opTime"];
        this.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND && (time = ddz.FriendOpTimeOut);
        return time;
      },
      onActionNext: function onActionNext(result) {
        ddz.LOGD(this._TAG, "onActionNext action == next");
        this._tableState.normalInfo.m_state == ddz.Enums.TableState.TABLEDSTAT_PLAYING && this._status == ddz.Enums.PlayStatus.PLAY_STATUS_JIAODZ && (this._isDizhu(this._mySeatIndex) || this._startPlay());
        var index = result["next"];
        this._tableState.normalInfo.m_topseat == index && ty.Timer.setTimer(this, this._onOneGameCircle, .2, 1, 0);
        var time = this.getOpTime(result);
        if (index == this._mySeatIndex) {
          ddz.LOGD(this._TAG, "index == this._mySeatIndex");
          if (this._isInTrust) return;
          this._clearPlayedCards();
          this._operateController.hideAll();
          if (this._tableState.normalInfo.m_state == ddz.Enums.TableState.TABLEDSTAT_CALLING && !this.isReplay()) {
            this._waitShowJiaoDiZhu = false;
            this.faPai.active ? this._waitShowJiaoDiZhu = true : this._operateController.showJiaodz(this._tableState.normalInfo.m_call);
          }
          var bNoCard = false;
          if (this._tableState.normalInfo.m_state == ddz.Enums.TableState.TABLEDSTAT_PLAYING) {
            this._resetTopCardType() && (bNoCard = true);
            this.isReplay() || this._operateController.showPlay(bNoCard);
          }
          ddz.LOGD(this._TAG, "show my Time :" + time);
          this._operateController.setClockVisible(true, time);
          this.faPai.active && this._operateController.hideClock();
        } else index == ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex) ? this._rightPlayerController.setClockVisible(true, time) : this._leftPlayerController.setClockVisible(true, time);
      },
      _onOneGameCircle: function _onOneGameCircle() {
        ty.Timer.cancelTimer(this, this._onOneGameCircle);
        if (this._tableState.normalInfo.m_state != ddz.Enums.TableState.TABLEDSTAT_PLAYING) return;
        var leftindex = ddz.GlobalFuncs.getPreIndex(this._mySeatIndex);
        var userIndex = this._tableState.normalInfo.m_topseat;
        if (userIndex == this._mySeatIndex) {
          this._leftPlayerController.setLblMsg(" ");
          this._rightPlayerController.setLblMsg(" ");
          return;
        }
        if (userIndex == leftindex) {
          this._operateController.setLblMsg(" ");
          this._rightPlayerController.setLblMsg(" ");
          return;
        }
        this._operateController.setLblMsg(" ");
        this._leftPlayerController.setLblMsg(" ");
      },
      onActionCall: function onActionCall(result) {
        var index = result["seatId"];
        var call = result["call"];
        var nextIndex = ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex);
        var preIndex = ddz.GlobalFuncs.getPreIndex(this._mySeatIndex);
        ddz.LOGD(this._TAG, "onActionCall  index = " + index + "_mySeatIndex:" + this._mySeatIndex + ";nextIndex:" + nextIndex + ";preIndex:" + preIndex);
        if (index == this._mySeatIndex) {
          this._operateController.showCallNode(false);
          call > 0 && this._operateController.setClockVisible(false);
        } else if (index == nextIndex) {
          this._rightSeatinfo.model.m_call = call;
          this._rightPlayerController.setClockVisible(false);
          this._rightPlayerController.showJiaodz(call);
        } else if (index == preIndex) {
          this._leftSeatinfo.model.m_call = call;
          this._leftPlayerController.setClockVisible(false);
          this._leftPlayerController.showJiaodz(call);
        }
        1 == this._tableInfo.config.m_grab && false == this._mDizhuCalled && 1 == call && (this._mDizhuCalled = true);
        this._refreshMultipleLabel(false, true, true);
      },
      onActionGameStart: function onActionGameStart(result) {
        ddz.LOGD(this._TAG, "action == game_start");
        if (result.hasOwnProperty("stat")) {
          this.updateTableState(result);
          this._resetExtraCards();
        }
        this._finishJiaodz();
        this.changePlayerAvatar(true);
        this._flipExtraCards(false, true);
        ddz.gameModel.isAcceptGameWin = false;
        if (this._goldPanel) {
          var roomId = this._tableInfo.roomId();
          this._goldPanel.showTboxGetReward(result, roomId);
        }
        if (result.myCardNote) {
          this.myCardNote = result.myCardNote;
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CARD_NOTE, this.myCardNote);
        }
        this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH && (ddz.gameModel.firstUseJiPaiQiPoint > 0 ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstUseJiPaiQi) : this.userJiPaiQi());
      },
      userJiPaiQi: function userJiPaiQi() {
        var roomId = this._tableInfo.roomId();
        var tableId = this._tableInfo.tableId();
        var seatId = this._mySeatIndex;
        ddz.MsgFactory.getCradNote(roomId, tableId, seatId);
      },
      onActionCardNote: function onActionCardNote(result) {
        if (result && 1 == result.isOpen) {
          if (result.myCardNote) {
            this.myCardNote = result.myCardNote;
            ty.NotificationCenter.trigger(ddz.EventType.OPEN_JIPAIJI, {
              myCardNote: this.myCardNote,
              num: result.cardNoteCount
            });
          }
        } else result && 0 == result.isOpen && ddz.isClickJiPaiQi && hall.MsgBoxManager.showToast({
          title: "首页观看广告可得记牌器哦~"
        });
        ddz.isClickJiPaiQi = false;
      },
      onActionCard: function onActionCard(result) {
        ddz.LOGD(this._TAG, "action == card");
        var index = result["seatId"];
        var cards = result["cards"];
        if (result.myCardNote) {
          this.myCardNote = result.myCardNote;
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CARD_NOTE, this.myCardNote);
        }
        var cardTypd, sortedCards;
        if (cards.length > 3) {
          var card_types = ddz.RobotGlobal.judgeType(cards, true);
          if (card_types.length > 0) {
            cardTypd = card_types[0];
            sortedCards = cardTypd.getCards();
          } else sortedCards = ddz.AI.sordPlayCards(cards);
        } else sortedCards = cards;
        if (index == ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex)) {
          this._rightPlayerController.setClockVisible(false);
          this._rightSeatinfo.playCardsInFriend(cards);
          this._rightPlayerController.playCards(sortedCards, this._isDizhu(index));
          return;
        }
        if (index == ddz.GlobalFuncs.getPreIndex(this._mySeatIndex)) {
          this._leftPlayerController.setClockVisible(false);
          this._leftSeatinfo.playCardsInFriend(cards);
          this._leftPlayerController.playCards(sortedCards, this._isDizhu(index));
          return;
        }
        this._isUserInteractive = true;
        this._setCardsTipVisible(false);
        this._operateController.hideAll();
        this._playCardsFromServer(sortedCards);
      },
      onActionRb: function onActionRb(result) {
        var robots = result["robots"];
        var tips = result["tips"];
        if (tips) {
          hall.MsgBoxManager.showToast({
            title: tips
          });
          return;
        }
        ddz.LOGD(this._TAG, "托管状态 onActionRb this._mySeatIndex = " + this._mySeatIndex);
        if (robots[this._mySeatIndex - 1]) {
          ddz.LOGD(this._TAG, "托管状态 ： 我被托管了");
          this._clearSelectedCards(true);
          this._clearTouchedCards();
          this.setIsInTrust(true);
        } else ddz.LOGD(this._TAG, "托管状态 ： 别人被托管了");
      },
      onActionGameWin: function onActionGameWin(result) {
        ddz.matchModel.new_gift_reward = null;
        ddz.matchModel.canShowMatchRevivalPanel = true;
        hall.adManager.canShowTableTopBanner = false;
        hall.adManager.canShowTableBanner = false;
        var isOncePlay = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ONCEPLAYGAME, false);
        isOncePlay || hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.ONCEPLAYGAME, true);
        ddz.gameModel.throughCount = this._mySeatinfo.model.m_playinfo.playcount;
        ddz.gameModel.isAcceptGameWin = true;
        var that = this;
        var dzwin = result["dizhuwin"];
        this._leftPlayerController.setChatButtonActive(false);
        this._rightPlayerController.setChatButtonActive(false);
        this._operateController.setChatButtonActive(false);
        ty.NotificationCenter.trigger(ddz.EventType.CLOSE_JIPAIJI);
        var isFlow = result && result.hasOwnProperty("nowin") && 1 === result["nowin"];
        if (isFlow) {
          this._cardAniPlayer.playGameFlow();
          if (this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH) {
            ddz.matchModel.isGameFlow = true;
            ddz.matchModel.getMatchDes();
            ty.Timer.setTimer(this, function() {
              that._reset();
              ddz.matchModel.checkOldVersion() && 1 === ddz.matchModel.getStageIndex() ? ddz.matchModel.matchSignin() : ddz.matchModel.matchChallenge();
            }, 1, 0);
            return;
          }
          if (this._goldPanel) {
            this.scheduleOnce(function() {
              that._reset();
              var playModel = that.tableInfo().playMode;
              var _mixID = that.tableInfo().mixId;
              hall.MsgFactory.getQuickStart(ty.UserInfo.userId, ddz.GameId, ddz.quickStartModel.getRoomId(), hall.staticSystemInfo.version, null, null, null, null, _mixID, playModel);
            }, 2);
            return;
          }
        } else ty.NotificationCenter.trigger(ddz.EventType.SHOW_GAME_WIN_ANI, dzwin);
        var isChunTian = false;
        if (!isFlow && this._tableState.normalInfo.m_chuntian > 1) {
          this._cardAniPlayer.playChunTian();
          isChunTian = true;
        }
        if (this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH) {
          ddz.matchModel.isDiZhuWin = dzwin;
          ddz.matchModel.getMatchDes();
        }
        this._operateController.hideAll();
        this.cardsTip.string = "";
        this.setStatus(ddz.Enums.PlayStatus.PLAY_STATUS_GAMEOVER);
        this._tableState.parseTableState(result["stat"]);
        var ftInfo = this._tableInfo.ftInfo;
        ftInfo && result.results && result.results.length > 0 && ftInfo.parseGameWin(result);
        that._friendPanel && (result["curRound"] < result["totalRound"] || ty.Timer.setTimer(this, function() {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeEndFriendGame, [ that.tableInfo().ftInfo.totalRound, that.tableInfo().ftInfo.curRound, ddz.Share.shareKeywordReplace.goodCard ]);
          hall.GlobalFuncs.onShowDetail();
        }, 7, 0));
        this._refreshMultipleLabel(false, true);
        this._isTrustEnable = false;
        this._isUserInteractive = false;
        this._startGameOverAnimation(result);
        result.new_gift_reward && (ddz.matchModel.new_gift_reward = result.new_gift_reward);
        isChunTian && ty.NotificationCenter.trigger(ddz.EventType.SET_BOX_TYPE, "春天宝箱");
      },
      _startGameOverAnimation: function _startGameOverAnimation(result) {
        ddz.LOGD(this._TAG, "_startGameOverAnimation 游戏结束");
        this._leftPlayerController.setPrepareVisible(false);
        this._rightPlayerController.setPrepareVisible(false);
        this._leftPlayerController.setChatButtonActive(false);
        this._rightPlayerController.setChatButtonActive(false);
        this._operateController.setChatButtonActive(false);
        var leftindex = ddz.GlobalFuncs.getPreIndex(this._mySeatIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex);
        this._friendPanel && this._friendPanel.updateAllScore();
        if (this._goldPanel) {
          result.mySeatIndex = this._mySeatIndex;
          this._goldPanel.updateAllScore(result);
        }
        this._arenaPanel && this._arenaPanel.updateAllScore(result);
        this._showCardsWhenGameOver(result, leftindex, rightindex);
        this.setIsInTrust(false);
        this._goldPanel && this.scheduleOnce(function() {
          this._goldPanel.showResult(result);
        }.bind(this), 5.5);
        this._throughPanel && this.scheduleOnce(function() {
          result.mySeatIndex = this._mySeatIndex;
          this._throughPanel.showResult(result);
        }.bind(this), 3);
        this._friendPanel && this.scheduleOnce(function() {
          this._friendPanel.showResult(result);
        }.bind(this), 5.5);
        hall.sxAdManager && hall.sxAdManager.hide();
      },
      getBaseScore: function getBaseScore() {
        var base = ddz.SINGLE_SCORE_BASE;
        var sceneType = this.tableInfo().getSceneType();
        var table_config = this._tableInfo.config;
        base = sceneType == ddz.Enums.SceneType.ARENA ? table_config.m_base || 0 : sceneType == ddz.Enums.SceneType.MATCH ? table_config.m_base || 0 : table_config.m_roommulti * table_config.m_basemulti * table_config.m_base;
        return base;
      },
      _showCardsWhenGameOver: function _showCardsWhenGameOver(result, leftindex, rightindex) {
        this._mySeatinfo && this._mySeatinfo.setNotShowCards();
        this._leftSeatinfo.model.m_card = result["cards"][leftindex - 1];
        this._rightSeatinfo.model.m_card = result["cards"][rightindex - 1];
        var left_cards = this._leftSeatinfo.model.m_card;
        var isDiZhu = this._isDizhu(leftindex);
        this._leftPlayerController.showCards(left_cards, isDiZhu);
        var right_cards = this._rightSeatinfo.model.m_card;
        isDiZhu = this._isDizhu(rightindex);
        this._rightPlayerController.showCards(right_cards, isDiZhu);
        this._cards.length > 0 && this._clearPlayedCards();
      },
      _getIndexFromPos: function _getIndexFromPos(pos) {
        var firstLineIndex = -1;
        var secondLineIndex = -1;
        if (this._checkInFirstLineCards(pos)) {
          firstLineIndex = Math.floor((pos.x - this.firstLineOriginX) / this._cardsIntervalX);
          firstLineIndex > this.firstLineCardCount - 1 && (firstLineIndex = this.firstLineCardCount - 1);
        }
        if (this._checkInSecondLineCards(pos)) {
          secondLineIndex = Math.floor((pos.x - this.secondLineOriginX) / this._cardsIntervalX);
          secondLineIndex > this.secondLineCardCount - 1 && (secondLineIndex = this.secondLineCardCount - 1);
        }
        if (-1 != secondLineIndex) return this.firstLineCardCount + secondLineIndex;
        if (-1 != firstLineIndex) return firstLineIndex;
        return -1;
      },
      _onTouchBegan: function _onTouchBegan(pos) {
        var index = this._getIndexFromPos(pos);
        this._touchCardIndexBegin = index;
        this._touchCardIndexEnd = index;
        var tc = this._cards[this._touchCardIndexBegin];
        tc.showMask(true);
        this._touchedCards.push(tc);
        return true;
      },
      _clearTouchedCards: function _clearTouchedCards() {
        var cards = this._touchedCards;
        var len = cards.length;
        for (var tmpi = 0; tmpi < len; tmpi++) {
          var tc = cards.pop();
          tc.showMask(false);
        }
      },
      touchCardsMoved: function touchCardsMoved(pos) {
        var index = this._getIndexFromPos(pos);
        var begin = this._touchCardIndexBegin;
        var end = this._touchCardIndexEnd;
        var startpos;
        var endpos;
        var i;
        var tc;
        if (index < end) if (index >= begin) for (i = end; i > index; i--) {
          tc = this._touchedCards.pop();
          tc && tc.showMask(false);
        } else {
          if (end <= begin) {
            startpos = index;
            endpos = end - 1;
          } else {
            this._clearTouchedCards();
            startpos = index;
            endpos = begin;
          }
          for (i = endpos; i >= startpos; i--) {
            tc = this._cards[i];
            tc.showMask(true);
            this._touchedCards.push(tc);
          }
        } else if (index > end) if (index <= begin) for (i = end; i < index; i++) {
          tc = this._touchedCards.pop();
          tc && tc.showMask(false);
        } else {
          if (end >= begin) {
            startpos = end;
            endpos = index;
          } else {
            this._clearTouchedCards();
            startpos = begin - 1;
            endpos = index;
          }
          for (i = startpos + 1; i <= index; i++) {
            tc = this._cards[i];
            tc.showMask(true);
            this._touchedCards.push(tc);
          }
        }
        this._touchCardIndexEnd = index;
      },
      isTouchOnCards: function isTouchOnCards(pos) {
        var len = this._cards.length;
        if (len <= 0) return false;
        var hitArea = this._checkInFirstLineCards(pos);
        if (0 != this.secondLineCardCount) {
          var hitSecond = this._checkInSecondLineCards(pos);
          hitArea = hitArea || hitSecond;
        }
        return hitArea;
      },
      _selectLegalTouchCards: function _selectLegalTouchCards() {
        var len = this._touchedCards.length;
        if (len <= 0) return;
        var touchCardsCount = [];
        for (var nIndex = 0; nIndex < len; nIndex++) touchCardsCount[nIndex] = this._touchedCards[nIndex]._info._number;
        ddz.LOGD(this._TAG, "选中的牌的count值数组是：");
        var oneLongest = ddz.AI._findLongestFromSelectedCards(touchCardsCount);
        if (oneLongest.length <= 0) {
          ddz.LOGD(this._TAG, "出错了，没有找出最长的牌");
          return;
        }
        var searchOneLongest = oneLongest.slice(0);
        for (var i = 0; i < len; i++) {
          var card = this._touchedCards[i];
          var index = hall.GlobalFuncs.FindInArray(searchOneLongest, card._info._number);
          if (index >= 0) {
            searchOneLongest[index] = -1;
            ddz.LOGD(this._TAG, "拖动选择出最长牌，弹起来");
            this._selectedCards.push(card);
            card.up();
          }
        }
      },
      touchCardsEnd: function touchCardsEnd() {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.click_cards, false);
        var hasSelect = false;
        this._selectedCards.length > 0 && (hasSelect = true);
        var active = false;
        null == this._topCardType ? active = true : ddz.LOGD(this._TAG, "top Card Type is : " + this._topCardType._type);
        ddz.LOGD(this._TAG, "touch cards num is : " + this._touchedCards.length + "===" + this._selectedCards.length);
        var cardOne, i, index, h;
        if (!hasSelect && 1 == this._touchedCards.length && ddz.RobotGlobal.rocketWin(this._mySeatinfo.model.m_card)) {
          cardOne = this._touchedCards[0];
          if (52 == cardOne._info._number || 53 == cardOne._info._number) for (i = this._cards.length - 1; i >= 0; i--) if ((52 == this._cards[i]._info._number || 53 == this._cards[i]._info._number) && this._cards[i]._info._number != cardOne._info._number) {
            this._touchedCards.push(this._cards[i]);
            break;
          }
        }
        if (!hasSelect && 1 == this._touchedCards.length && (active || this._topCardType._type == ddz.Enums.PaixingType.DOUBLE_CARD)) {
          var pc = ddz.RobotGlobal.getPCArrayByPoint(this._mySeatinfo.model.m_card);
          cardOne = this._touchedCards[0];
          var nPoint = cardOne._info._point;
          var nCount = cardOne._info._number;
          var pos = ddz.GlobalFuncs.numberToValue(cardOne._info._number);
          for (var m = pc.length - 1; m >= 0; m--) if (pc[m].point == pos && 2 == pc[m].count) {
            for (i = this._cards.length - 1; i >= 0; i--) this._cards[i]._info._point == nPoint && this._cards[i]._info._number != nCount && (active && this._isInShunzi(i) || this._touchedCards.push(this._cards[i]));
            break;
          }
        }
        if (false == hasSelect) {
          this._selectLegalTouchCards();
          for (index = 0; index < this._touchedCards.length; index++) this._touchedCards[index].showMask(false);
          this._touchedCards = [];
        } else {
          var card;
          while (this._touchedCards.length) {
            card = this._touchedCards.pop();
            if (!card) continue;
            card.showMask(false);
            index = hall.GlobalFuncs.FindInArray(this._selectedCards, card);
            if (index >= 0) {
              this._selectedCards.splice(index, 1);
              card.down();
            } else {
              this._selectedCards.push(card);
              card.up();
            }
          }
        }
        this._operateController.btnPlay.interactable = this._selectedCards.length > 0;
        return true;
      },
      _isInShunzi: function _isInShunzi(mypos) {
        var card = this._cards[mypos];
        var myVal = card._info._value;
        if (myVal > 11) return false;
        var minCnt = 0;
        var index;
        var judgeCardVal;
        for (index = mypos + 1; index < this._cards.length; ++index) {
          judgeCardVal = this._cards[index]._info._value;
          if (judgeCardVal == myVal || myVal - judgeCardVal == minCnt) continue;
          if (myVal - judgeCardVal != minCnt + 1) break;
          ++minCnt;
        }
        var largerCnt = 0;
        for (index = mypos - 1; index >= 0; --index) {
          judgeCardVal = this._cards[index]._info._value;
          if (judgeCardVal > 11) break;
          if (judgeCardVal == myVal || myVal - judgeCardVal == -largerCnt) continue;
          if (myVal - judgeCardVal != -largerCnt - 1) break;
          ++largerCnt;
        }
        ddz.LOGD(this._TAG, "is in shunzi : = " + (minCnt + largerCnt));
        ddz.LOGD(this._TAG, "is in shunzi minCnt = " + minCnt);
        ddz.LOGD(this._TAG, "is in shunzi largerCnt = " + largerCnt);
        return minCnt + largerCnt >= 4;
      },
      _clearPlayedCards: function _clearPlayedCards() {
        this.playedCardArea.scale = this._cardBaseScale;
        while (this._playedCards.length > 0) {
          var card = this._playedCards.pop();
          this.returnCard(card.node);
        }
      },
      toFriend: function toFriend() {
        ddz.LOGD("", "file = [DdzTableScene] fun = [toFriend] this.tableInfo().getSceneType() = " + this.tableInfo().getSceneType());
        if (!this._friendPanel && this.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND) {
          this.shutMatchResult();
          if (this._arenaPanelNode) {
            this._arenaPanelNode.destroy();
            this._arenaPanelNode = null;
            this._arenaPanel = null;
          }
          if (this._goldPanelNode) {
            this._goldPanelNode.destroy();
            this._goldPanelNode = null;
            this._goldPanel = null;
          }
          this.stageTag.active = false;
          var _friendPanelNode = cc.instantiate(this.friendPrefab);
          this._friendPanel = _friendPanelNode.getComponent("FriendModule");
          this._friendPanel.setTableScene(this);
          this._friendPanel.setBtnInviteState(!Boolean(this._leftSeatinfo.hasData && this._rightSeatinfo.hasData));
          _friendPanelNode.parent = this.playModeNode;
          this.tableInfo().disbind ? this._friendPanel.refreshDisbindState(this.tableInfo().disbind) : this._friendPanel.deleteDisbindState();
          var that = this;
          var nextCallBack = function nextCallBack() {
            that._leftPlayerController.refreshAvatarForeFriendOrigin();
            that._rightPlayerController.refreshAvatarForeFriendOrigin();
            that.myAvatar.active = true;
            var isDiZhu = that._mySeatIndex == that._tableState.normalInfo.m_dizhu;
            if (isDiZhu) {
              var to_pos = that.getEmoPos(that._mySeatIndex);
              that.showDizhuHatOrigin(to_pos);
            }
          };
          requestAnimationFrame(nextCallBack);
          var seatList = this.tableInfo().seats;
          var nextId = ddz.GlobalFuncs.GetNextIndex(this._mySeatIndex);
          var seatInfo = seatList[nextId - 1];
          var ruid = seatInfo["uid"];
          0 != ruid ? ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
            pos: "right",
            type: "sit"
          }) : ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
            pos: "right",
            type: "leave"
          });
          var preIndex = ddz.GlobalFuncs.getPreIndex(this._mySeatIndex);
          seatInfo = seatList[preIndex - 1];
          ruid = seatInfo["uid"];
          0 != ruid ? ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
            pos: "left",
            type: "sit"
          }) : ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
            pos: "left",
            type: "leave"
          });
        }
      },
      toGold: function toGold() {
        if (!this._goldPanel && this.tableInfo().getSceneType() == ddz.Enums.SceneType.NORMAL) {
          this.shutMatchResult();
          this.stageTag.active = false;
          this._goldPanelNode = cc.instantiate(this.goldPrefab);
          this._goldPanel = this._goldPanelNode.getComponent("GoldModule");
          this._goldPanel.setTableScene(this);
          this._goldPanelNode.parent = this.playModeNode;
          this.upDateGoldInfo();
        }
      },
      upDateGoldInfo: function upDateGoldInfo() {
        var tableinfo = this.tableInfo();
        var _goldInfo = "";
        tableinfo.hasOwnProperty("roomName") && (_goldInfo = tableinfo.roomName);
        tableinfo.config && tableinfo.config.m_couponrule && (_goldInfo = _goldInfo + "\n" + tableinfo.config.m_couponrule);
        this.setGoldInfo(_goldInfo);
      },
      toThrough: function toThrough() {
        this.shutMatchResult();
        if (!this._throughPanel && this.tableInfo().getSceneType() == ddz.Enums.SceneType.MATCH) {
          this.stageTag.active = false;
          this._throughPanelNode = cc.instantiate(this.throughPrefab);
          this._throughPanel = this._throughPanelNode.getComponent("ThroughModule");
          this._throughPanel.setTableScene(this);
          this._throughPanelNode.parent = this.playModeNode;
        }
      },
      toArenaMatch: function toArenaMatch() {
        this.shutMatchResult();
        if (!this._arenaPanel && this.tableInfo().getSceneType() == ddz.Enums.SceneType.ARENA) {
          this.stageTag.active = false;
          this._arenaPanelNode = cc.instantiate(this.arenaMatchPrefab);
          this._arenaPanel = this._arenaPanelNode.getComponent("ArenaMatchModule");
          this._arenaPanel.setTableScene(this);
          this._arenaPanelNode.parent = this.playModeNode;
        }
      },
      shutMatchResult: function shutMatchResult() {
        ddz.matchResultPanel && ddz.matchResultPanel.shut();
        ddz.arenaResultPanel && ddz.arenaResultPanel.shut();
      },
      update: function update(dt) {
        ddz.msgCache.triggerFristMsg();
      }
    });
    cc._RF.pop();
  }, {
    DdzTableAniPlayer: "DdzTableAniPlayer",
    DdzTableChatAni: "DdzTableChatAni"
  } ],
  Ddz: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "280c3rsZJJKnZ9RqbALVwtK", "Ddz");
    "use strict";
    console.log("Ddz loaded");
    cc.Class({
      extends: cc.Component,
      properties: {
        _TAG: "Ddz.js",
        bg: cc.Node,
        mainScene: cc.Node,
        loadingNode: {
          default: null,
          type: cc.Node
        },
        lblVersion: cc.Label,
        topUpButton: cc.Button,
        completeType: "",
        nodeAuthorizationFailed: cc.Sprite,
        lblTimer: cc.Label
      },
      ctor: function ctor() {
        cc.rendererWebGL._clearColor = {
          r: 21 / 255,
          g: 173 / 255,
          b: 163 / 255,
          a: 1
        };
      },
      onShowAuthorizationFailed: function onShowAuthorizationFailed() {
        this.nodeAuthorizationFailed.node.active = true;
        var timeCount = 3;
        this.lblTimer.string = timeCount + "";
        var that = this;
        var tickFun = function tickFun() {
          timeCount--;
          that.lblTimer.string = timeCount + "";
          if (timeCount <= 0) {
            that.nodeAuthorizationFailed.node.active = false;
            that.lblTimer.string = "3";
            wx.openSetting();
            ty.Timer.cancelTimer(this, tickFun);
          }
        };
        ty.Timer.setTimer(this, tickFun, 1, 3);
      },
      onHideDdzMain: function onHideDdzMain() {
        if (this.mainScene) {
          ddz.LOGD("", "file = [Ddz] fun = [onHideDdzMain]");
          this.mainScene.active = false;
        }
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var mainW = this.mainScene.getComponent("ddz_main");
        mainW.parentScene = this;
        this.isAction = false;
        ty.NotificationCenter.listen(ty.EventType.TCP_OPENED, this.onReciveHallInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.START_AUTHORIZATION_FAILED, this.onShowAuthorizationFailed, this);
        ty.NotificationCenter.listen(ddz.EventType.HIDE_DDZ_MAIN, this.onHideDdzMain, this);
        ty.NotificationCenter.listen(ddz.EventType.GET_USER_INFO, this.onGetUserInfo, this);
        ty.NotificationCenter.listen(ty.EventType.WX_LOGIN_SUCCESS, this.onWxLoginSuccess, this);
        ty.NotificationCenter.listen(ty.EventType.MSG_LOGIN_SUCCESS, this.onUserSDKLoginSuccess, this);
        this.lblVersion.string = this.lblVersion.string.replace("{version}", ty.SystemInfo.version);
        ty.UserInfo.systemType != ty.UserInfo.SYSTEMTYPE.ANDROIDOther && ty.UserInfo.systemType != ty.UserInfo.SYSTEMTYPE.ANDROIDVIVO85 || (this.topUpButton.node.active = false);
        hall.adManager.showAdIco();
        var that = this;
        this.onWxLoginSuccess();
        wx.getSetting({
          success: function success(res) {
            res.authSetting["scope.userInfo"] || hall.loginBtnManager.showHideAuthorizeBtn(ddz.GlobalFuncs.giftBtnClick);
          }
        });
        var showFailMsg = function showFailMsg() {
          hall.MsgBoxManager.showToast({
            title: "资源加载失败!请重启游戏再试!"
          });
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeResourceDownloadFail, [ "Ddz" ]);
        };
        var fs = wx.getFileSystemManager();
        var filePath = wx.env.USER_DATA_PATH + "/res.zip";
        var preLogin = function preLogin() {
          fs.access({
            path: filePath,
            success: function success() {
              ty.hasRes = true;
              that.checkLoading();
            },
            fail: function fail(res) {
              that.showLoading();
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeResourceDownload, [ "Ddz" ]);
              var remoteFilePath = ty.SystemInfo.cdnPath + ty.SystemInfo.remotePackPath;
              ddz.LOGD(null, "remote res path:" + remoteFilePath);
              wx.downloadFile({
                url: remoteFilePath,
                success: function success(res) {
                  var tempFilePath = res.tempFilePath;
                  if (404 === res.statusCode) {
                    hall.LOGE(null, "Download file failed: " + remoteFilePath);
                    showFailMsg();
                  } else tempFilePath && wx.saveFile({
                    tempFilePath: tempFilePath,
                    filePath: filePath,
                    success: function success(res) {
                      fs.unzip({
                        zipFilePath: filePath,
                        targetPath: wx.env.USER_DATA_PATH + "/",
                        success: function success(res) {
                          ty.hasRes = true;
                          that.checkLoading();
                          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeResourceDownloadSuccess, [ "Ddz" ]);
                        },
                        fail: function fail(res) {
                          fs.unlinkSync(filePath);
                          showFailMsg();
                        }
                      });
                      fs.unlinkSync(tempFilePath);
                    },
                    fail: function fail(res) {
                      showFailMsg();
                    }
                  });
                },
                fail: function fail(res) {
                  showFailMsg();
                }
              });
            }
          });
        };
        var needLoadRemoteRes = hall.GlobalFuncs.checkNeedLoadRemoteRes();
        if (needLoadRemoteRes) {
          ddz.LOGD(null, "version is changed ,need load remote res....");
          fs.access({
            path: filePath,
            success: function success() {
              fs.unlinkSync(filePath);
              preLogin();
            },
            fail: function fail() {
              preLogin();
            }
          });
        } else preLogin();
        if (wx.hasOwnProperty("getUpdateManager")) {
          var updateManager = wx.getUpdateManager();
          updateManager.onCheckForUpdate(function(res) {
            ddz.LOGD(null, res.hasUpdate);
          });
          updateManager.onUpdateReady(function() {
            wx.showModal({
              title: "更新提示",
              content: "新版本已经准备好，是否重启应用？",
              success: function success(res) {
                if (res.confirm) {
                  fs.unlinkSync(filePath);
                  updateManager.applyUpdate();
                }
              }
            });
          });
          updateManager.onUpdateFailed(function() {
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeNewVersionDownloadFail, [ "Ddz" ]);
          });
        }
        hall.adManager.checkVideoAd();
        ty.NotificationCenter.listen(ty.EventType.GET_AD_MSG_SUCCESS, this.showCrossButton, this);
        hall.loginBtnManager.destroyTableBtn();
        this.initAdManager();
        this.showCrossButton();
      },
      initAdManager: function initAdManager() {
        if (hall && hall.AdManagerTYWX) {
          hall.AdManagerTYWX.init();
          ty.NotificationCenter.listen(ty.EventType.GET_ADMANAGER_ICON_INFO_SUCCESS, this.createCrossButton, this);
        }
      },
      createCrossButton: function createCrossButton() {
        if (hall && hall.AdManagerTYWX) {
          var size = cc.director.getWinSize();
          hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") ? hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").showAdNode() : hall.AdManagerTYWX.showAd({
            x: size.width - 80,
            y: size.height / 2 + 50
          }, "myFirstAdNode");
          this._isAdManagerCreated = true;
        }
      },
      showCrossButton: function showCrossButton() {
        hall && hall.AdManagerTYWX && (this._isAdManagerCreated ? hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").showAdNode() : this.scheduleOnce(this.showCrossButton, 1));
      },
      getAdMsg: function getAdMsg() {
        var winSize = cc.director.getWinSize();
        hall.AdManagerTYWX.showAd({
          x: 80,
          y: winSize.height / 2
        }, "myFirstAdNode");
      },
      onUserSDKLoginSuccess: function onUserSDKLoginSuccess() {
        this.checkLoading();
      },
      onWxLoginSuccess: function onWxLoginSuccess() {
        if (ty.wxLoginCode) {
          var that = this;
          wx.getSetting({
            success: function success(res) {
              if (res.authSetting["scope.userInfo"]) {
                ddz.LOGD("", "file = [Ddz] fun = [onWxLoginSuccess] 已经授权,直接登录");
                ty.TuyooSDK.login();
              } else {
                that.showLoading();
                if (ddz.GlobalFuncs.getOpenData(true)) {
                  ty.TuyooSDK.loginWithOutAuthorization(ty.wxLoginCode);
                  ddz.LOGD("", "file = [Ddz] fun = [onWxLoginSuccess] 222");
                } else {
                  ddz.LOGD("", "file = [Ddz] fun = [onWxLoginSuccess] 111");
                  ty.TuyooSDK.loginWithOutAuthorization(ty.wxLoginCode);
                }
              }
            }
          });
        }
      },
      showLoading: function showLoading() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeLoadingUI, [ "Ddz" ]);
        this.loadingAction();
      },
      checkLoading: function checkLoading() {
        if (ty.UserInfo.userId && ty.hasRes) {
          this.unLoadingAction();
          ddz.matchModel.matchUpdate();
        }
      },
      onGetUserInfo: function onGetUserInfo(needShowLoading) {
        hall.LOGE("", "file = [Ddz] fun = [onGetUserInfo]");
        needShowLoading && this.showLoading();
        ty.TuyooSDK.login();
      },
      loadingAction: function loadingAction() {
        var mainW = this.mainScene.getComponent("ddz_main");
        mainW.loadingAction();
        this.loadingNode.active = true;
        this.loadingNode.setLocalZOrder(999999);
      },
      unLoadingAction: function unLoadingAction() {
        var mainW = this.mainScene.getComponent("ddz_main");
        mainW.unLoadingAction();
        this.loadingNode.active = false;
        ty.UserInfo.systemType != ty.UserInfo.SYSTEMTYPE.ANDROIDOther && ty.UserInfo.systemType != ty.UserInfo.SYSTEMTYPE.ANDROIDVIVO85 || (this.topUpButton.node.active = false);
      },
      enterTable: function enterTable() {
        var animation = this.mainScene.getComponent(cc.Animation);
        animation.play("ddz_main_xiaoshi");
      },
      startAnimationWithType: function startAnimationWithType(event, type) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ type ]);
        if (this.isAction) return;
        this.isAction = true;
        var that = this;
        ty.Timer.setTimer(this, function() {
          that.isAction = false;
        }, .6, 1, 0);
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        this.completeType = type;
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if ("begin" == type || "friend" == type || "gold" == type || "match" == type || "giftBag" == type || "helpBox" == type) {
          ty.NotificationCenter.listen(ddz.EventType.ACTION_ENTER_TABLE, this.enterTable, this);
          this.chooseActionForType();
          return;
        }
        if ("diamondNew" == type || "diamondInvite" == type) this.chooseActionForType(); else {
          var animation = this.mainScene.getComponent(cc.Animation);
          animation.once("finished", this.completeAni, this);
          animation.play("ddz_main_xiaoshi");
        }
      },
      completeAni: function completeAni() {
        this.node.getChildByName("ddz_main").active = false;
        this.chooseActionForType();
      },
      chooseActionForType: function chooseActionForType() {
        var type = this.completeType;
        switch (type) {
         case "detail":
          this.onDetailButton();
          break;

         case "begin":
          if (!ty.UserInfo.isInBSGS && !ddz.gameModel.isNewUser) {
            var bc = ddz.gameModel.getSkipCustomsConfigJson();
            if (bc && bc.oldCustoms > 0) {
              var curWaitInfo = ddz.matchModel.getCurWaitInfo();
              if (!curWaitInfo || curWaitInfo.stageIndex < bc.oldCustoms) {
                var continuousLogin = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.CONTINUOUSLOGIN, false);
                var yesterdayShare = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.YESTERDAYSHARE, true);
                if (!continuousLogin) {
                  hall.GlobalFuncs.onSkipCustom(3);
                  return;
                }
                if (!yesterdayShare) {
                  hall.GlobalFuncs.onSkipCustom(2);
                  return;
                }
              }
            }
          }
          ddz.matchModel.startMatchProgress();
          break;

         case "friend":
          this.onEnterFriend();
          break;

         case "gold":
          hall.GlobalFuncs.gotoRoomListScene();
          break;

         case "match":
          this.onMatchListButton();
          break;

         case "rank":
          this.onRankButton();
          break;

         case "topUp":
         case "diamondNew":
          break;

         case "diamondInvite":
          ddz.isClickShareReward = true;
          ddz.gameModel.getDayInviteReward();
          break;

         case "helpBox":
          ddz.isClickOpenBox = true;
          ddz.gameModel.getOpenBox();
          break;

         case "reward":
          this.onGetRewardButton();
          break;

         case "giftBag":
          if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
            hall.MsgBoxManager.showToast({
              title: "正在登录，请稍候"
            });
            ddz.LOGD(null, "TCP is not ok! Please wait!");
            return;
          }
          hall.loginBtnManager.canShowUserInfoBtn() ? ddz.GlobalFuncs.giftBtnClick() : wx.getSetting({
            success: function success(res) {
              res.authSetting["scope.userInfo"] ? ddz.GlobalFuncs.giftBtnClick() : hall.loginBtnManager.onlyAuthorizeAndLogin(ddz.GlobalFuncs.giftBtnClick);
            }
          });
        }
      },
      onEnterFriend: function onEnterFriend() {
        hall.GlobalFuncs.showPopWinByPreFab("prefabs/ddz_window_createRoom", function(preFabNode) {});
      },
      onDetailButton: function onDetailButton() {
        var sceneName = "ddz_detail";
        var onLaunched = function onLaunched() {};
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
      },
      onRankButton: function onRankButton() {
        var sceneName = "ddz_rank";
        var onLaunched = function onLaunched() {
          var logicScene = cc.director.getScene();
          var no = logicScene.children[0];
          var window = no.getComponent("ddz_rank");
          window.showRankListForShare();
        };
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
        ddz.LOGD(null, "onRankButton");
      },
      onMatchListButton: function onMatchListButton() {
        var sceneName = "MatchListScene";
        var onLaunched = function onLaunched() {};
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
      },
      onGetRewardButton: function onGetRewardButton() {
        var sceneName = "ddz_reward";
        hall.GlobalFuncs.pushScene(sceneName);
      },
      onReciveHallInfo: function onReciveHallInfo() {
        ddz.LOGD(this._TAG, "onReciveHallInfo");
        this.checkLoading();
      },
      update: function update(dt) {},
      onDestroy: function onDestroy() {
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
        ty.NotificationCenter.ignoreScope(this);
        hall.loginBtnManager.destroyHideBtn();
      }
    });
    cc._RF.pop();
  }, {} ],
  DetailsModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1552cQ+2lCGa8xdykPYU+4", "DetailsModel");
    "use strict";
    ddz.detailsModel = {
      resuslts: [],
      curRound: 0,
      totalRound: 0,
      avatars: [],
      sumScores: [ 0, 0, 0 ],
      nickNames: [],
      whoWin: -1,
      playMode: "经典玩法",
      isOver: false,
      isNowin: false,
      isHistory: false,
      mySeatIndex: 0,
      parseResults: function parseResults(results) {
        if (!results || results.length <= 0) this.curRound <= 1 && this.totalRound > 0 && this.isHistory && this.clearDetail(); else {
          this.resuslts = [];
          var isEnd = false;
          for (var i = 0; i < results.length; i++) if (results[i].winloses) {
            var _winloses = results[i].winloses;
            i == results.length - 1 && (isEnd = true);
            this.parseWinLose(_winloses, i, isEnd);
          }
        }
      },
      setIsNoWin: function setIsNoWin(_nowin) {
        this.isNowin = _nowin;
      },
      parseWinLose: function parseWinLose(_winloses, index, _isEnd) {
        var singleScore = [];
        var copyList = _winloses;
        for (var i = 0; i < 3; i++) {
          singleScore.push(copyList[i].delta);
          this.avatars[i] = copyList[i].avatar;
          this.nickNames[i] = copyList[i].nickname;
          if (_isEnd) {
            this.sumScores[i] = copyList[i].score;
            this.whoWin = this.sumScores.indexOf(Math.max.apply(Math, this.sumScores));
          }
        }
        this.resuslts[index] = singleScore;
      },
      parseFriendRound: function parseFriendRound(_curRound, _totalRound) {
        this.curRound = _curRound;
        this.totalRound = _totalRound;
      },
      getAvatars: function getAvatars() {
        return this.avatars;
      },
      getWhoWin: function getWhoWin() {
        return this.whoWin;
      },
      getSumScore: function getSumScore() {
        return this.sumScores;
      },
      setIsOver: function setIsOver(_isOver) {
        this.isOver = _isOver;
      },
      getIsOver: function getIsOver() {
        return this.isOver;
      },
      setIsHisTory: function setIsHisTory(_isHistory) {
        this.isHistory = _isHistory;
      },
      getIsHisTory: function getIsHisTory() {
        return this.isHistory;
      },
      setMySeatIndex: function setMySeatIndex(_mySeatIndex) {
        this.mySeatIndex = _mySeatIndex;
      },
      getMySeatIndex: function getMySeatIndex() {
        return this.mySeatIndex;
      },
      getNickNames: function getNickNames() {
        return this.nickNames;
      },
      getTotalRound: function getTotalRound() {
        return this.totalRound;
      },
      clearDetail: function clearDetail() {
        this.resuslts = [];
        this.curRound = 0;
        this.totalRound = 0;
        this.avatars = [];
        this.sumScores = [ 0, 0, 0 ];
        this.nickNames = [];
        this.whoWin = -1;
        this.isOver = false;
        this.isHistory = false;
        this.mySeatIndex = 0;
      }
    };
    cc._RF.pop();
  }, {} ],
  EventType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "09e49EE14lJBKlG0YgDJVVQ", "EventType");
    "use strict";
    console.log("EventType loaded");
    var msgId = 0;
    ty.EventType = {
      CMD_USER_INFO: "user_info",
      MSG_LOG_OUT: "logout",
      CMD_BIND_USER: "bind_user",
      CMD_BIND_GAME: "bind_game",
      MSG_REMOTE_NOTIFICATION: "receive_remote_notefication",
      MSG_LOGIN_SUCCESS: "login_success_ret",
      MSG_LOGIN_FAILED: "login_failed_ret",
      MSG_SET_PLATFORM_USER_INF_SUCCESS: "set_user_info_success_ret",
      MSG_SET_PLATFORM_USER_INF_FAILED: "set_user_info_failed_ret",
      MSG_GET_PLATFORM_USER_INF_SUCCESS: "get_platform_user_success_ret",
      MSG_GET_PLATFORM_USER_INF_FAILED: "get_platform_user_failed_ret",
      MSG_GET_FRIEND_LIST_SUCCESS: "get_friend_list_success_ret",
      MSG_GET_FRIEND_LIST_FAILED: "get_friend_list_failed_ret",
      MSG_GET_REQ_FRIEND_LIST_SUCCESS: "get_friend_req_list_success_ret",
      MSG_GET_REQ_FRIEND_LIST_FAILED: "get_friend_req_list_failed_ret",
      MSG_GET_NEARBY_PLAYER_SUCCESS: "get_nearby_player_success_ret",
      MSG_GET_NEARBY_PLAYER_FAILED: "get_nearby_player_failed_ret",
      MSG_GET_CONTACT_LIST_SUCCESS: "get_contact_list_success_ret",
      MSG_GET_CONTACT_LIST_FAILED: "get_contact_list_failed_ret",
      MSG_INVITE_CONTACT_LIST_SUCCESS: "invite_contact_friend_success_ret",
      MSG_INVITE_CONTACT_LIST_FAILED: "invite_contact_friend_fail_ret",
      MSG_GET_RANK_LIST_SUCCESS: "get_rank_list_success_ret",
      MSG_GET_RANK_LIST_FAILED: "get_rank_list_failed_ret",
      MSG_REPORT_LBS_SUCCESS: "report_lbs_success_ret",
      MSG_REPORT_LBS_FAILED: "report_lbs_failed_ret",
      MSG_PAY_TIMEOUT: "pay_process_timeout",
      MSG_PAY_PROCESSING: "pay_processing_ret",
      MSG_BUY_SUCCESS: "buy_success_ret",
      MSG_BUY_FAILED: "buy_failed_ret",
      MSG_BUY_BACK: "buy_back_ret",
      GET_ADMANAGER_ICON_INFO_SUCCESS: "GET_ADMANAGER_ICON_INFO_SUCCESS",
      GET_ADMANAGER_BANNER_INFO_SUCCESS: "GET_ADMANAGER_BANNER_INFO_SUCCESS",
      MSG_CONSUME_DIAMOND_SUCCESS: "consume_diamond_success_ret",
      MSG_CONSUME_DIAMOND_FAILED: "consume_diamond_failed_ret",
      MSG_BUY_COIN_DIRECT_SUCCESS: "buy_coin_direct_success_ret",
      MSG_BUY_COIN_DIRECT_FAILED: "buy_coin_direct_failed_ret",
      MSG_GET_DIAMOND_LIST_SUCCESS: "request_diamond_list_success_ret",
      MSG_GET_DIAMOND_LIST_FAILED: "request_diamond_list_failed_ret",
      MSG_PAY_DIAMOND_SUCCESS: "pay_diamond_success_ret",
      MSG_PAY_DIAMOND_FAILED: "pay_diamond_failed_ret",
      MSG_PAY_DIAMOND_BACK: "pay_diamond_back_ret",
      MSG_WEIXIN_SHARE_SUCCESS: "weixin_share_success_ret",
      MSG_WEIXIN_SHARE_FAIL: "weixin_share_failed_ret",
      MSG_BIND_PHONE_SUCCESS: "bind_mobile_success",
      TCP_ERROR: "tcp_error",
      TCP_CLOSE: "tcp_close",
      TCP_OPENED: "tcp_opened",
      TCP_RECONNECT: "tcp_reconnect",
      TCP_RECEIVE: "tcp_receive",
      UPDATE_OK: "update_ok",
      UPDATE_ERR: "update_error",
      UPDATE_PROGRESS: "update_progress",
      HEART_BEAT_LOGIC: "heart_beat_logic",
      HEART_BEAT: "heart_beat",
      NETWORK_STATE_CHANGE: "network_state_change",
      VIEW_MODE_CHANGED: "view_mode_changed",
      FINISH_OPEN_CAMERA: "finish_open_camera",
      FINISH_PICKSAVE: "finish_picksave",
      GET_DIAMOND: "get_diamond",
      UPDATE_BUTTON_TEXT: "UPDATE_BUTTON_TEXT",
      UPDATE_UER_INFO: "update_user_info",
      HALL_IMAGE_LOADED_FINISHED: "HALL_IMAGE_LOADED_FINISHED",
      GET_USER_FEATURE_SUCCESS: "GET_USER_FEATURE_SUCCESS",
      GET_USER_FEATURE_FAIL: "GET_USER_FEATURE_FAIL",
      GET_SHARE_CONFIG_SUCCESS: "GET_SHARE_CONFIG_SUCCESS",
      GET_SHARE_SINGLE_CONFIG_SUCCESS: "GET_SHARE_SINGLE_CONFIG_SUCCESS",
      GET_SHARE_CONFIG_FAIL: "GET_SHARE_CONFIG_FAIL",
      GET_SHARE_SINGLE_CONFIG_FAIL: "GET_SHARE_SINGLE_CONFIG_FAIL",
      WX_LOGIN_SUCCESS: "WX_LOGIN_SUCCESS",
      GET_AD_MSG_SUCCESS: "GET_AD_MSG_SUCCESS",
      CREATE_TABLE_AD: "CREATE_TABLE_AD"
    };
    cc._RF.pop();
  }, {} ],
  FriendModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dce48n4Do9G/IYu9bov6RXs", "FriendModel");
    "use strict";
    ddz.friendModel = {
      CREATE_ROUND_COUNT: "CREATE_ROUND_COUNT",
      CREATE_MODE_TYPE: "CREATE_MODE_TYPE",
      CREATE_PLAYING_METHOD: "CREATE_PLAYING_METHOD",
      tipsWindow: null,
      isEnterTable: false,
      parseDiZhuInfo: function parseDiZhuInfo(argument) {
        switch (argument.result.action) {
         case ddz.EventType.ACTION_FT_CREATE:
          this.parseCreateFriendBack(argument.result);
          break;

         case ddz.EventType.ACTION_FT_GET_CONF:
          this.parseRoomCfg(argument.result);
          break;

         case ddz.EventType.ACTION_FT_ENTER_TABLE:
          this.parseEnterTable(argument.result);
          break;

         case ddz.EventType.ACTION_GET_FT_TABLE_RECORD:
          this.parseHistoryInfo(argument.result);
          break;

         case "winLoseShareReward":
          ddz.gameModel.parseWinLoseShareReward(argument.result);
          break;

         case ddz.EventType.ACTION_TBOX_GETREWARD:
          ty.NotificationCenter.trigger(ddz.EventType.MSG_TBOX_GETREWARD, argument.result.info);
          break;

         case ddz.EventType.ACTION_GET_OLD_USER_CHIP_REWARD:
          argument.result.shortcut && 1 == argument.result.shortcut ? ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GUIDE_ICON_STATE, false) : ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GUIDE_ICON_STATE, true);
          ddz.gameModel.isNewUser = argument.result.isNewUser || false;
          ddz.gameModel.isLimit = argument.result.isLimit || false;
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_BTN_STATE);
          hall.gameWorld.parsePersonInfo(argument.result);
        }
      },
      parseCreateFriendBack: function parseCreateFriendBack(result) {
        if (result.hasOwnProperty("code") && 0 != result["code"] || !result.hasOwnProperty("ftId")) {
          ddz.LOGD("parseCreateFriendBack", "创建失败啦吧！！！！！！！！！！！！" + JSON.stringify(result));
          hall.MsgBoxManager.showToast({
            title: result.info
          });
        } else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeStartFriendTime, [ result["ftId"] ]);
          ddz.friendModel.enterFTTable(result["ftId"]);
        }
      },
      parseRoomCfg: function parseRoomCfg(result) {
        this._roomCfg = result.conf;
        ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_GET_CONF, result.conf);
      },
      parseEnterTable: function parseEnterTable(result) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeStartFriendFail, [ result.info ]);
        if (-1 == result.code && result.info && result.info.length > 0) {
          var tipsString = result.info;
          var preFabPath = "prefabs/dissolveNode";
          var comName = "ddz_window_dissolve";
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var window = preFabNode.getComponent(comName);
            window.setTipsSString(tipsString);
          });
        }
      },
      parseHistoryInfo: function parseHistoryInfo(result) {
        hall.LOGW("", "file = [FriendModel] fun = [parseHistoryInfo]");
        ddz.historyModel.parseHistory(result);
        hall.GlobalFuncs.onHistory();
      },
      getRoomCfg: function getRoomCfg() {
        return this._roomCfg;
      },
      enterFriendTable: function enterFriendTable(ftId) {
        ddz.Share.shareKeywordReplace.inviteFriendID = ftId;
        this.isEnterTable = true;
        ddz.matchModel.getCurWaitInfo() ? ddz.MsgFactory.saveMatch() : debugMode && ddz.MsgFactory.getMatchRecords();
      },
      enterFTTable: function enterFTTable(ftId) {
        if ("" == ftId) return;
        var curScene = cc.director.getScene();
        var tableScene = curScene.children[0].getComponent("DdzTableScene");
        if ("TableScene" == curScene.name && tableScene.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND) {
          hall.MsgBoxManager.showToast({
            title: "当前已在牌桌中,不可重复进桌"
          });
          return;
        }
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            gameId: ty.SystemInfo.gameId,
            action: ddz.EventType.ACTION_FT_ENTER_TABLE,
            inviteId: ftId,
            ftId: ftId,
            version: "3.90"
          }
        };
        hall.MsgFactory._sendCmd(params);
        ddz.friendModel.isEnterTable = false;
      },
      reqDisbind: function reqDisbind(roomId, tableId, seatId) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeFriendRoomDissolveClick, [ "request" ]);
        ddz.NetWorkCenter.canNotLeave = false;
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: {
            action: ddz.EventType.ACTION_FT_REQ_DISBIND,
            gameId: ty.SystemInfo.gameId,
            seatId: seatId,
            roomId: roomId,
            tableId: tableId,
            version: "3.90"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      ansDisbind: function ansDisbind(roomId, tableId, seatId, answer) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: {
            action: ddz.EventType.ACTION_FT_REQ_DISBIND_ANSWER,
            gameId: ty.SystemInfo.gameId,
            seatId: seatId,
            roomId: roomId,
            tableId: tableId,
            answer: answer
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getFriendConf: function getFriendConf() {
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            gameId: ty.SystemInfo.gameId,
            action: ddz.EventType.ACTION_FT_GET_CONF
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      continueFT: function continueFT(roomId, tableId, seatId) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CALL,
          params: {
            action: ddz.EventType.ACTION_FT_CONTINUE,
            gameId: ty.SystemInfo.gameId,
            seatId: seatId,
            roomId: roomId,
            tableId: tableId
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      createFriendRoom: function createFriendRoom(nRound, double, playMode, goodCard) {
        var conf = {
          nRound: nRound,
          double: double,
          playMode: playMode,
          goodCard: goodCard
        };
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            gameId: ty.SystemInfo.gameId,
            action: ddz.EventType.ACTION_FT_CREATE,
            conf: conf
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getHisToryInfo: function getHisToryInfo() {
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            gameId: ty.SystemInfo.gameId,
            action: ddz.EventType.ACTION_GET_FT_TABLE_RECORD
          }
        };
        hall.MsgFactory._sendCmd(params);
      }
    };
    cc._RF.pop();
  }, {} ],
  FriendModule: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "021f5jIl1hDDblrF+m/ZAUz", "FriendModule");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnBack: cc.Button,
        jifenNode: cc.Node,
        jifenLeftNode: cc.Node,
        jifenRightNode: cc.Node,
        bigBtnNode: cc.Node,
        bottomNode: cc.Node,
        lblDiFen: cc.Label,
        btnInvite: cc.Button,
        btnReady: cc.Button,
        btnDuiJu: cc.Button,
        btnRecord: cc.Button,
        btnChat: cc.Button,
        disbinds: [],
        namesForSeat: [],
        lblNum: cc.Label,
        shouldLeave: false,
        disbindResult: 0,
        recordNode: cc.Node,
        recordProgressNode: cc.Node,
        recordProgressSprite: cc.Sprite,
        recordProgressFrame: [ cc.SpriteFrame ],
        recordNowIndex: 3,
        recordBackNode: cc.Node,
        rbar: cc.Sprite,
        recordTip: cc.Node,
        leftMsgAni: cc.Node,
        rightMsgAni: cc.Node,
        selfMsgAni: cc.Node,
        chatNode: cc.Node,
        leftMsgNode: cc.Node,
        rightMsgNode: cc.Node,
        selfMsgNode: cc.Node,
        game_result: cc.Prefab,
        allMsgShowTime: 2,
        leftShowTime: 0,
        rightShowTime: 0,
        selfShowTime: 0
      },
      ctor: function ctor() {
        this.resetStartTime();
        this._isOnRecord = false;
        this._maxRecordTime = 8;
        this._cancelRecord = false;
        this.chatStringList = [ "咱们一会儿再开一场!", "炸的漂亮!", "哎呀,一不小心又赢了。", "来呀,互相伤害呀!", "稍等一会儿,我马上回来。", "来来来，炸我呀!", "你的牌打得也太好了!", "我等的假花儿都谢了!" ];
      },
      resetStartTime: function resetStartTime() {
        this._recordTime = 0;
      },
      setTableScene: function setTableScene(val) {
        this._tableScene = val;
        this.refresh();
      },
      refresh: function refresh() {
        var ftInfo = this._tableScene.tableInfo().ftInfo;
        this.setBtnReadyState(!ftInfo.allComplete && this._tableScene._mySeatinfo.model.m_state == ddz.Enums.SeatState.SEATDZSTAT_WAIT);
        this._tableScene.myAvatar.active = this._tableScene._tableState.normalInfo.m_state != ddz.Enums.TableState.TABLEDSTAT_PLAYING;
        this.updateDuiJuBtnLabel();
        debugMode && (this.lblNum.string = "牌桌号:" + this._tableScene.tableInfo().ftInfo.ftId);
        this._tableScene._tableState && this._tableScene._tableState.normalInfo.m_call > -1 && this._tableScene._refreshMultipleLabel(false, true, true);
      },
      updateMultiple: function updateMultiple(baseScore, multiple) {
        this.lblDiFen.string = baseScore + "分 x " + multiple + "倍";
      },
      updateDuiJuBtnLabel: function updateDuiJuBtnLabel() {
        var lbl = this.btnDuiJu.node.getChildByName("Label").getComponent(cc.Label);
        lbl.string = this._tableScene.tableInfo().ftInfo.curRound + "/" + this._tableScene.tableInfo().ftInfo.totalRound + "局";
      },
      endResultShow: function endResultShow() {
        if (this.shouldLeave && this._tableScene.tableInfo().ftInfo.curRound < 1) {
          hall.GlobalFuncs.gotoDdz();
          return;
        }
        if (1 == this.disbindResult) if (ddz.detailsModel.resuslts.length <= 0 || 1 == ddz.detailsModel.isNowin) hall.GlobalFuncs.gotoDdz(); else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeEndFriendGame, [ this._tableScene.tableInfo().ftInfo.totalRound, this._tableScene.tableInfo().ftInfo.curRound, ddz.Share.shareKeywordReplace.goodCard ]);
          hall.GlobalFuncs.onShowDetail();
          this.shouldLeave = true;
          ty.Timer.setTimer(this, this.leaveAction, 300);
        }
      },
      leaveAction: function leaveAction() {
        this.unscheduleAllCallbacks();
        hall.GlobalFuncs.gotoDdz();
      },
      reciveOnHide: function reciveOnHide() {},
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_PLAYER_INFO, this._onUpdateInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_READY, this._onGameReady, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_DISBIND, this.reciveFtDisbind, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_REQ_DISBIND, this.reciveDisbind, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_REQ_DISBIND_ANSWER, this.reciveDisbindAnswer, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_REQ_DISBIND_RESULT, this.reciveDisbindResult, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_END_RESULT_SHOW, this.endResultShow, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.reciveOnHide, this);
        ty.NotificationCenter.listen(ddz.EventType.FTINFO_CHANGE, this.onFtInfoChange, this);
        ddz.NetWorkCenter.canNotLeave = true;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.btnBack.node.y = backButtonH);
        this.btnRecord.node.on(cc.Node.EventType.TOUCH_START, this._onRecordBtnTouchBegan, this, true);
        this.btnRecord.node.on(cc.Node.EventType.TOUCH_MOVE, this._onRecordBtnTouchMoved, this, true);
        this.btnRecord.node.on(cc.Node.EventType.TOUCH_END, this._onRecordBtnTouchEnded, this, true);
        this.btnRecord.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onRecordBtnTouchCancel, this, true);
        ty.NotificationCenter.listen(ddz.EventType.STOP_RECORD, this._onRecordComplete, this);
        ty.NotificationCenter.listen(ddz.EventType.ERROR_RECORD, this._onRecordError, this);
        ty.NotificationCenter.listen(ddz.EventType.START_PLAY_TABLE_CHAT, this._onStartPlayTableChat, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_TABLE_CHAT, this._onShowPlayTableChat, this);
        ty.NotificationCenter.listen(ddz.EventType.END_PLAY_TABLE_CHAT, this._onEndTableChat, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this._onRemoveAni, this);
        if (ty.UserInfo.systemType == ty.UserInfo.SYSTEMTYPE.iPhoneXType) {
          var wid = this.bottomNode.getComponent(cc.Widget);
          wid.bottom = 30;
          var widL = this.jifenLeftNode.getComponent(cc.Widget);
          widL.top = 160;
          var widR = this.jifenRightNode.getComponent(cc.Widget);
          widR.top = 160;
        }
        this.initScore();
      },
      _onUpdateInfo: function _onUpdateInfo(obj) {
        var userPanel;
        "left" == obj.pos ? userPanel = this.jifenLeftNode : "right" == obj.pos && (userPanel = this.jifenRightNode);
        userPanel.active = true;
        "leave" != obj.type && "none" != obj.type || (userPanel.active = false);
      },
      _onGameReady: function _onGameReady() {
        this.jifenLeftNode.active = true;
        this.jifenRightNode.active = true;
      },
      onBtnChat: function onBtnChat() {
        this.chatNode.active = true;
      },
      _onRemoveAni: function _onRemoveAni() {
        this.leftMsgAni.removeFromParent();
        this.rightMsgAni.removeFromParent();
        this.selfMsgAni.removeFromParent();
      },
      _onStartPlayTableChat: function _onStartPlayTableChat(seatId) {
        seatId == ddz.GlobalFuncs.GetNextIndex(this._tableScene._mySeatIndex) ? this._showChatAni(this.rightMsgAni) : seatId == ddz.GlobalFuncs.getPreIndex(this._tableScene._mySeatIndex) ? this._showChatAni(this.leftMsgAni) : seatId == this._tableScene._mySeatIndex && this._showChatAni(this.selfMsgAni);
      },
      _onShowPlayTableChat: function _onShowPlayTableChat(result) {
        var seatId = parseInt(result.seatId);
        if (seatId == ddz.GlobalFuncs.GetNextIndex(this._tableScene._mySeatIndex)) {
          this.rightShowTime = this.allMsgShowTime;
          this._showChatMsgRight(this.rightMsgNode, result.msg);
        } else if (seatId == ddz.GlobalFuncs.getPreIndex(this._tableScene._mySeatIndex)) {
          this.leftShowTime = this.allMsgShowTime;
          this._showChatMsgRight(this.leftMsgNode, result.msg);
        } else if (seatId == this._tableScene._mySeatIndex) {
          this.selfShowTime = this.allMsgShowTime;
          this._showChatMsgRight(this.selfMsgNode, result.msg);
        }
      },
      _onEndTableChat: function _onEndTableChat(seatId) {
        seatId == ddz.GlobalFuncs.GetNextIndex(this._tableScene._mySeatIndex) ? this._stopChatAni(this.rightMsgAni) : seatId == ddz.GlobalFuncs.getPreIndex(this._tableScene._mySeatIndex) ? this._stopChatAni(this.leftMsgAni) : seatId == this._tableScene._mySeatIndex && this._stopChatAni(this.selfMsgAni);
      },
      _showChatAni: function _showChatAni(aniNode) {
        aniNode.active = true;
        var ani = aniNode.getComponent(cc.Animation);
        ani.play("table_chat_ani");
      },
      _showChatMsgRight: function _showChatMsgRight(msgNode, msgString) {
        msgNode.active = true;
        var nodeMa = msgNode.getComponent("ddz_item_ft_chat");
        nodeMa.setDetailMsg(msgString);
      },
      _stopChatAni: function _stopChatAni(aniNode) {
        aniNode.active = false;
        var ani = aniNode.getComponent(cc.Animation);
        ani.stop("table_chat_ani");
      },
      _onRecordComplete: function _onRecordComplete(audioFilePath) {
        var fs = wx.getFileSystemManager();
        if (this.recordNode.active) {
          this.recordNode.active = false;
          this._isOnRecord = false;
        }
        if (this._recordTime < 1) {
          var that = this;
          that.recordTip.active = true;
          this.scheduleOnce(function() {
            that.recordTip.active = false;
          }, 3);
          ddz.LOGD(null, "录音小于1S,不发送!");
          fs.unlinkSync(audioFilePath);
          return;
        }
        var tableInfo = this._tableScene.tableInfo();
        var fileStr = fs.readFileSync(audioFilePath, "base64");
        hall.MsgFactory.sendChatMsg(tableInfo.roomId(), tableInfo.tableId(), this._tableScene._mySeatIndex, fileStr, 2, 0);
      },
      onBtnChatDetail: function onBtnChatDetail(event, type) {
        this.chatNode.active = false;
        if ("cancel" == type) return;
        var sendMsg = this.chatStringList[parseInt(type)];
        var tableInfo = this._tableScene.tableInfo();
        hall.MsgFactory.sendChatMsg(tableInfo.roomId(), tableInfo.tableId(), this._tableScene._mySeatIndex, sendMsg, 0, 0);
      },
      _onRecordError: function _onRecordError() {
        hall.LOGE("", "file = [FriendModule] fun = [_onRecordError] 语音错误");
        if (this.recordNode.active) {
          this.recordNode.active = false;
          this._isOnRecord = false;
        }
      },
      _onRecordBtnTouchBegan: function _onRecordBtnTouchBegan(event) {
        ddz.LOGD(null, "Beganevent:" + event);
        ddz.AudioHelper.getMusicPlayManager().volume = 0;
        this.resetStartTime();
        this.recordNode.active = true;
        this._btnRecordStatePressed = true;
        this.recordProgressNode.active = true;
        this.recordBackNode.active = false;
        var that = this;
        var startRecord = function startRecord() {
          if (!that._btnRecordStatePressed) return;
          that._isOnRecord = true;
          that.recordNode.active = true;
          hall.recorder.startRecord(that._maxRecordTime);
        };
        wx.getSetting({
          success: function success(res) {
            res.authSetting["scope.record"] ? startRecord() : wx.authorize({
              scope: "scope.record",
              success: function success() {
                startRecord();
              },
              fail: function fail() {
                hall.MsgBoxManager.showToast({
                  title: "授权失败,语音功能不可用,请手动进行授权!"
                });
                ty.Timer.setTimer(cc.director, function() {
                  wx.openSetting();
                }, 2, 0);
              },
              complete: function complete() {}
            });
          }
        });
      },
      _onRecordBtnTouchMoved: function _onRecordBtnTouchMoved(event) {
        ddz.LOGD(null, "Movedevent:" + event);
        ddz.AudioHelper.getMusicPlayManager().volume = 0;
        if (event.touch._point.y - event.touch._startPoint.y > 20) {
          if (this._isOnRecord) {
            this._isOnRecord = false;
            this.recordProgressNode.active = false;
            this.recordBackNode.active = true;
            hall.recorder.pauseRecord();
          }
        } else {
          if (!this._isOnRecord) {
            this._isOnRecord = true;
            this.recordProgressNode.active = true;
            this.recordBackNode.active = false;
            hall.recorder.resumeRecord();
          }
          var oriIndex = this.recordNowIndex;
          var indexp = hall.GlobalFuncs.getRandomNumberBefore(2);
          var changeNumber = hall.GlobalFuncs.getRandomNumberBefore(3);
          oriIndex = 0 == indexp ? oriIndex - changeNumber : oriIndex + changeNumber;
          oriIndex = oriIndex < 0 ? 0 : oriIndex;
          oriIndex = oriIndex > 6 ? 6 : oriIndex;
          this.recordNowIndex = oriIndex;
          this.recordProgressSprite.spriteFrame = this.recordProgressFrame[oriIndex];
        }
      },
      _onRecordBtnTouchEnded: function _onRecordBtnTouchEnded(event) {
        ddz.LOGD(null, "Endedevent:" + event);
        ddz.AudioHelper.getMusicPlayManager().volume = 1;
        this._btnRecordStatePressed = false;
        hall.recorder.stop(false);
      },
      _onRecordBtnTouchCancel: function _onRecordBtnTouchCancel(event) {
        ddz.LOGD(null, "Cancelevent:" + event);
        ddz.AudioHelper.getMusicPlayManager().volume = 1;
        this._btnRecordStatePressed = false;
        this._isOnRecord = false;
        this.recordNode.active = false;
        hall.recorder.stop(true);
      },
      onFtInfoChange: function onFtInfoChange() {
        this.updateDuiJuBtnLabel();
      },
      onBigBtnClick: function onBigBtnClick(event, par0) {
        var tableInfo = this._tableScene.tableInfo();
        ddz.LOGD("FriendModule", "par0:" + par0);
        if (this.shouldLeave) {
          this.unscheduleAllCallbacks();
          hall.GlobalFuncs.gotoDdz();
          return;
        }
        switch (par0) {
         case "invire":
          ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeInviteFriend);
          break;

         case "ready":
          ddz.MsgFactory.getReady(tableInfo.roomId(), tableInfo.tableId(), this._tableScene._mySeatIndex);
          break;

         case "back":
          var state = this._tableScene._tableState.normalInfo.m_state;
          if (this._tableScene.isStatus(ddz.Enums.PlayStatus.PLAY_STATUS_GAMEOVER)) return;
          state == ddz.Enums.TableState.TABLEDSTAT_IDLE && 0 == this._tableScene.tableInfo().ftInfo.curRound ? tableInfo.ftInfo.iscreator ? this.showTipsWindow("你确定要解散牌桌吗?") : ddz.friendModel.reqDisbind(tableInfo.roomId(), tableInfo.tableId(), this._tableScene._mySeatIndex) : this.showTipsWindow("你确定要发起投票中途退出吗?");
        }
      },
      showTipsWindow: function showTipsWindow(tipsString) {
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: "取消"
          }, {
            title: "确定"
          } ];
          window.setTitleContentAndButtons("提示", tipsString, testArray);
        });
      },
      onClickRightButton: function onClickRightButton() {
        var tableInfo;
        if (this.waitAnswer) {
          tableInfo = this._tableScene.tableInfo();
          ddz.friendModel.ansDisbind(this._tableScene._roomId, tableInfo.tableId(), this._tableScene._mySeatIndex, 0);
        } else {
          tableInfo = this._tableScene.tableInfo();
          ddz.friendModel.reqDisbind(tableInfo.roomId(), tableInfo.tableId(), this._tableScene._mySeatIndex);
        }
        this.waitAnswer = false;
      },
      onClickLeftButton: function onClickLeftButton() {
        if (this.waitAnswer) {
          var tableInfo = this._tableScene.tableInfo();
          ddz.friendModel.ansDisbind(this._tableScene._roomId, tableInfo.tableId(), this._tableScene._mySeatIndex, 1);
          this.waitAnswer = false;
        }
      },
      reciveFtDisbind: function reciveFtDisbind(result) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeFriendRoomDissolveClick, [ "success" ]);
        if (this.disbinds && this.disbinds.length && this.disbinds.length > 0) return;
        hall.LOGE("===", "====reciveFtDisbind=========" + JSON.stringify(result));
        this.shouldLeave = true;
        var preFabPath = "prefabs/dissolveNode";
        var comName = "ddz_window_dissolve";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          ddz.NetWorkCenter.canNotLeave ? window.setTipsSString("房主已解散牌桌") : window.setTipsSString("你已解散牌桌");
        });
      },
      reciveDisbind: function reciveDisbind(result) {
        this.disbinds = [];
        hall.LOGD("===", "====reciveDisbind=========" + JSON.stringify(result));
        var that = this;
        var callBack = function callBack(preFabNode, comName) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          if (result.userId == ty.UserInfo.userId) {
            window.setDissolvePregrossForCreator(result.optime, [ 1, -1, -1 ]);
            window.noDissolve = true;
            that.disbindsOwer = true;
          } else {
            var tableInfo = that._tableScene.tableInfo();
            var name;
            name = tableInfo.nameList.length > 2 ? tableInfo.nameList[result.seatId - 1] : "玩家未知";
            window.setDissolvePregrossForAnswer(result.optime, [ 1, -1, -1 ], name);
            window.noDissolve = true;
            that.disbindsOwer = false;
            that.waitAnswer = true;
          }
          that.disbinds.push(1);
        };
        ddz.GlobalFuncs.showWindowTipsForFriend(callBack);
      },
      reciveDisbindAnswer: function reciveDisbindAnswer(result) {
        hall.LOGD("===", "====reciveDisbindAnswer=========" + JSON.stringify(result));
        var disbindsR = result.disbinds;
        var anser = disbindsR[result.seatId - 1];
        this.disbinds.push(anser);
        var window;
        if (!ddz.friendModel.tipsWindow) return;
        window = ddz.friendModel.tipsWindow.getComponent("ddz_tipsWindow");
        window.changePregross(this.disbinds);
        ty.UserInfo.userId == result.userId && (this.disbindsOwer || window.changeStateToWait(anser));
      },
      reciveDisbindResult: function reciveDisbindResult(result) {
        this.waitAnswer = false;
        ddz.NetWorkCenter.canNotLeave = true;
        hall.LOGD("++++", "=======reciveDisbindResult=====" + JSON.stringify(result));
        var window;
        if (!ddz.friendModel.tipsWindow) return;
        window = ddz.friendModel.tipsWindow.getComponent("ddz_tipsWindow");
        window.onClose();
        var disbindResult = result.disbindResult;
        this.disbindResult = disbindResult;
        var disbinds = result.disbinds;
        var preFabPath = "prefabs/dissolveNode";
        var comName = "ddz_window_dissolve";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          var tableInfo = that._tableScene.tableInfo();
          var nameA = [];
          if (0 == disbindResult) {
            if (tableInfo.nameList.length < 3) {
              window.setDissolveFailDetailTextString("玩家1", "玩家2");
              return;
            }
            for (var i = 0; i < 3; i++) if (0 == disbinds[i]) {
              var name = tableInfo.nameList[i];
              nameA.push(name);
            }
            window.setDissolveFailDetailTextString(nameA, false);
            hall.LOGW("==", "=======被拒绝=====");
          } else {
            if (tableInfo.nameList.length < 3) {
              window.setDissolveFailDetailTextString("玩家1", "玩家2");
              return;
            }
            for (var i = 0; i < 3; i++) if (1 == disbinds[i]) {
              var name = tableInfo.nameList[i];
              nameA.push(name);
            }
            window.setDissolveFailDetailTextString(nameA, true);
            ddz.detailsModel.setIsOver(true);
            that.shouldLeave = true;
            hall.LOGW("==", "=======解散成功=====");
          }
        });
      },
      deleteDisbindState: function deleteDisbindState() {},
      refreshDisbindState: function refreshDisbindState(disbind) {
        var states = disbind.states;
        var stateDic = {
          before: [],
          one: [],
          zero: []
        };
        for (var i = 0; i < states.length; i++) -1 == states[i] ? stateDic.before.push(states[i]) : 0 == states[i] ? stateDic.zero.push(states[i]) : stateDic.one.push(states[i]);
        var oneL = stateDic.one;
        var zeroL = stateDic.zero;
        this.disbinds = oneL.concat(zeroL);
        var that = this;
        var preFabNodeAction = function preFabNodeAction(preFabNode, comName) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          if (disbind.reqSeatId == that._tableScene._mySeatIndex) {
            window.setDissolvePregrossForCreator(disbind.optime, that.disbinds);
            window.noDissolve = true;
            that.disbindsOwer = true;
          } else {
            var tableInfo = that._tableScene.tableInfo();
            var name;
            name = tableInfo.nameList.length > 2 ? tableInfo.nameList[disbind.reqSeatId - 1] : "玩家未知";
            window.setDissolvePregrossForAnswer(disbind.optime, that.disbinds, name);
            window.noDissolve = true;
            that.disbindsOwer = false;
            if (-1 == states[that._tableScene._mySeatIndex - 1]) that.waitAnswer = true; else {
              that.waitAnswer = false;
              window.changeStateToWait(states[that._tableScene._mySeatIndex - 1]);
            }
          }
        };
        ddz.GlobalFuncs.showWindowTipsForFriend(preFabNodeAction);
      },
      initScore: function initScore() {
        var myIndex = this._tableScene._mySeatIndex;
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var ftInfo = this._tableScene.tableInfo().ftInfo;
        var score = ftInfo.getScore(myIndex - 1);
        this.setScore("my", score);
        score = ftInfo.getScore(leftindex - 1);
        this.setScore("left", score);
        score = ftInfo.getScore(rightindex - 1);
        this.setScore("right", score);
      },
      updateAllScore: function updateAllScore() {
        var myIndex = this._tableScene._mySeatIndex;
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var ftInfo = this._tableScene.tableInfo().ftInfo;
        var score = ftInfo.getScore(myIndex - 1);
        var delta = ftInfo.getDelta(myIndex - 1);
        this.upDataScore("my", score, delta);
        score = ftInfo.getScore(leftindex - 1);
        delta = ftInfo.getDelta(leftindex - 1);
        this.upDataScore("left", score, delta);
        score = ftInfo.getScore(rightindex - 1);
        delta = ftInfo.getDelta(rightindex - 1);
        this.upDataScore("right", score, delta);
      },
      upDataScore: function upDataScore(pos, scroe, delta) {
        var lblScoreChange, lblName;
        var deltaStr = "";
        if (delta >= 0) {
          deltaStr = "+" + delta;
          lblName = "lblJiFenChangeAdd";
        } else {
          deltaStr = "" + delta;
          lblName = "lblJiFenChange";
        }
        switch (pos) {
         case "my":
          lblScoreChange = this.getScoreLabel(this.jifenNode, lblName);
          break;

         case "left":
          lblScoreChange = this.getScoreLabel(this.jifenLeftNode, lblName);
          break;

         case "right":
          lblScoreChange = this.getScoreLabel(this.jifenRightNode, lblName);
        }
        lblScoreChange.string = deltaStr;
        var that = this;
        that.setScore(pos, scroe);
        var callBack = cc.callFunc(function() {
          lblScoreChange.node.opacity = 255;
          lblScoreChange.string = "";
        });
        var flyAni = cc.sequence(cc.delayTime(5), cc.fadeOut(.2), callBack);
        lblScoreChange.node.runAction(flyAni);
      },
      reSetAddScore: function reSetAddScore() {
        this.getScoreLabel(this.jifenNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChange").string = "";
      },
      setScore: function setScore(pos, scroe) {
        var lblScore;
        switch (pos) {
         case "my":
          lblScore = this.getScoreLabel(this.jifenNode, "lblJiFen");
          break;

         case "left":
          lblScore = this.getScoreLabel(this.jifenLeftNode, "lblJiFen");
          break;

         case "right":
          lblScore = this.getScoreLabel(this.jifenRightNode, "lblJiFen");
        }
        scroe > 0 && (scroe = "+" + scroe);
        lblScore.string = scroe + "";
      },
      getScoreLabel: function getScoreLabel(scoreNode, lblName) {
        return scoreNode.getChildByName(lblName).getComponent(cc.Label);
      },
      setBtnInviteState: function setBtnInviteState(val) {
        this.btnInvite.node.active = val;
      },
      setBtnReadyState: function setBtnReadyState(val) {
        val && (this.lblDiFen.string = "");
        this.btnReady.node.active = false;
        var btnReady;
        if (0 == this._tableScene.tableInfo().ftInfo.curRound) {
          btnReady = this.btnReady;
          btnReady.node.active = val;
        }
      },
      onDuiJuBtnClick: function onDuiJuBtnClick(event) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeFriendRoomDuiju, []);
        hall.GlobalFuncs.onShowDetail();
      },
      showResult: function showResult(result) {
        ddz.LOGD("", "file = [DdzTableScene] fun = [_startGameOverAnimation] 好友桌显示结算界面");
        this._tableScene._reset();
        ty.NotificationCenter.trigger(ddz.EventType.STOP_MATCHING);
        if (!this._gameResult) {
          var game_result_wnd = cc.instantiate(this.game_result);
          cc.director.getScene().addChild(game_result_wnd);
          this._gameResult = game_result_wnd.getComponent("ddz_game_result");
          this._gameResult.setTableScene(this._tableScene);
        }
        result["curRound"] < result["totalRound"] ? this._gameResult.showFtResult(result, true) : this._gameResult.showFtResult(result, false);
      },
      onDestroy: function onDestroy() {
        ddz.NetWorkCenter.canNotLeave = false;
        ddz.tableChatModel.clear();
        ty.NotificationCenter.ignoreScope(this);
        ddz.friendModel.tipsWindow && ddz.friendModel.tipsWindow.removeFromParent();
        ddz.friendModel.tipsWindow = null;
        this._tableScene = null;
        this.unscheduleAllCallbacks();
      },
      update: function update(dt) {
        this.rightShowTime -= dt;
        this.rightMsgNode.active = this.rightShowTime >= 0;
        this.leftShowTime -= dt;
        this.leftMsgNode.active = this.leftShowTime >= 0;
        this.selfShowTime -= dt;
        this.selfMsgNode.active = this.selfShowTime >= 0;
        this._isOnRecord && this._recordTime < this._maxRecordTime && (this._recordTime += dt);
      }
    });
    cc._RF.pop();
  }, {} ],
  FtInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c710e9h+vJNyatl3FaXgsLU", "FtInfo");
    "use strict";
    ddz.FtInfo = cc.Class({
      ftId: "",
      results: [],
      statics: {},
      curRound: 0,
      goodCard: 0,
      totalRound: 0,
      allComplete: false,
      isComplete: false,
      playMode: {
        name: "123",
        displayName: "经典"
      },
      iscreator: false,
      getScore: function getScore(index) {
        return this.getScoreInfo(index, "score");
      },
      getDelta: function getDelta(index) {
        return this.getScoreInfo(index, "delta");
      },
      getScoreInfo: function getScoreInfo(index, fname) {
        if (this.results && this.results.length > 0) return this.results[this.results.length - 1].winloses[index][fname];
        return 0;
      },
      clearResult: function clearResult() {
        this.results = [];
      },
      cleanup: function cleanup() {
        this.ftId = "";
        this.results = [];
        this.statics = {};
        this.curRound = 0;
        this.totalRound = 0;
        this.iscreator = false;
        this.isComplete = false;
        this.allComplete = false;
      },
      parseGameWin: function parseGameWin(gamewinAction) {
        ddz.LOGD(null, "parseGameWin ：解析 game_win" + JSON.stringify(gamewinAction));
        this.curRound = gamewinAction.curRound;
        this.totalRound = gamewinAction.totalRound;
        this.results = gamewinAction.results;
        this.statics = gamewinAction.statics;
        this.isComplete = this.curRound == this.totalRound;
        this.allComplete = this.curRound == this.totalRound;
        ddz.detailsModel.parseFriendRound(this.curRound, this.totalRound);
        ddz.detailsModel.parseResults(this.results);
        ddz.detailsModel.setIsHisTory(false);
        ddz.detailsModel.setIsOver(this.allComplete);
        ddz.detailsModel.setIsNoWin(gamewinAction.nowin);
      },
      parseTableInfo: function parseTableInfo(tableInfo) {
        ddz.LOGD(null, "parseTableInfo : " + JSON.stringify(tableInfo.ftInfo));
        this.ftId = tableInfo.ftInfo.ftId;
        this.curRound = tableInfo.ftInfo.curRound;
        this.totalRound = tableInfo.ftInfo.totalRound;
        this.goodCard = tableInfo.ftInfo.goodCard;
        this.results = tableInfo.results;
        this.isComplete = false;
        this.allComplete = 0 == this.curRound && tableInfo["seat1"]["state"] == ddz.Enums.SeatState.SEATDZSTAT_WAIT;
        ddz.detailsModel.parseFriendRound(this.curRound, this.totalRound);
        ddz.detailsModel.parseResults(this.results);
        ddz.detailsModel.setIsOver(this.allComplete);
        ddz.detailsModel.setIsHisTory(false);
        this.playMode = tableInfo.ftInfo.playMode;
        this.iscreator = tableInfo.ftInfo.creator == ty.UserInfo.userId;
        ddz.Share.shareKeywordReplace.inviteFriendID = this.ftId;
        ddz.Share.shareKeywordReplace.totalRound = this.totalRound;
        ddz.Share.shareKeywordReplace.displayName = "happy" == this.playMode.name ? "欢乐" : "wild" == this.playMode.name ? "癞子" : "经典";
        ddz.Share.shareKeywordReplace.goodCard = 0 == tableInfo.ftInfo.goodCard ? "标准" : "炸弹";
        ty.NotificationCenter.trigger(ddz.EventType.FTINFO_CHANGE);
      },
      parseGameReady: function parseGameReady(gameReady) {
        ddz.LOGD(null, "parseTableInfo : " + JSON.stringify(gameReady));
        this.ftId = gameReady.ftInfo ? gameReady.ftInfo.ftId : "";
        this.curRound = gameReady.ftInfo.curRound;
        this.totalRound = gameReady.ftInfo.totalRound;
        this.iscreator = gameReady.ftInfo.creator == ty.UserInfo.userId;
        this.isComplete = false;
        ddz.Share.shareKeywordReplace.inviteFriendID = this.ftId;
        ty.NotificationCenter.trigger(ddz.EventType.FTINFO_CHANGE);
      },
      parseFTDisbind: function parseFTDisbind(ftDisbindAction) {
        this.results = ftDisbindAction.results;
        this.statics = ftDisbindAction.statics;
      }
    });
    cc._RF.pop();
  }, {} ],
  GameModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "edb2fNo6vJIp4WeuSUOHNb9", "GameModel");
    "use strict";
    ddz.gameModel = {
      LAST_GETDAYREWARD_TIME: "LAST_GETDAYREWARD_TIME",
      ONSHOW_PARAMS: "ONSHOW_PARAMS",
      DEBUG_MODE: "DEBUG_MODE",
      ORIGINCARDS: "DORIGINCARDS",
      SHARE_MOMENTS_NUMBER: "SHARE_MOMENTS_NUMBER",
      CONTINUOUSLOGIN: "CONTINUOUSLOGIN",
      YESTERDAYSHARE: "YESTERDAYSHARE",
      ONCEPLAYGAME: "ONCEPLAYGAME",
      normalWindow: null,
      _matchRecords: null,
      isNewUser: true,
      isLimit: false,
      shareConfig: null,
      matchingMassage: null,
      resurgenceConfig: null,
      rewardAnduchangConfig: null,
      shareMoments: null,
      notifyInfo: {},
      inviteConfig: [],
      inviteShowList: [],
      inviteNewShowList: [],
      allCount: 0,
      massageCount: 0,
      watchVideoCount: 0,
      dayLoginCount: 0,
      gongZhonghaoCardPoint: 0,
      gongZhonghaoMenuPoint: 0,
      firstWithDrawPoint: 0,
      firstUseJiPaiQiPoint: 0,
      isLoadTableScene: false,
      throughCount: -1,
      isAcceptGameWin: false,
      isBringVersion: false,
      registerDays: null,
      messageRewardTitle: "",
      notifyMailMessage: [],
      getMatchList: function getMatchList() {},
      getNewGiftReward: function getNewGiftReward(inviteeId, giftId) {
        if (!inviteeId) return;
        inviteeId = parseInt(inviteeId);
        var pars = {
          cmd: "game",
          params: {
            action: "get_new_gift_reward",
            gameId: 6,
            giftUserId: inviteeId,
            giftId: giftId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      sendVersion: function sendVersion() {
        var params = {
          cmd: "game",
          params: {
            action: "version_update",
            gameId: 6,
            version: ty.SystemInfo.version
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getInviteReward: function getInviteReward(inviteeId) {
        if (!inviteeId) return;
        var pars = {
          cmd: "game",
          params: {
            action: "get_invite_reward",
            gameId: 6,
            inviteeId: inviteeId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getInviteRewardDay: function getInviteRewardDay(inviteeId) {
        if (!inviteeId) return;
        var pars = {
          cmd: "game",
          params: {
            action: "get_day_invite_reward",
            gameId: 6,
            inviteeId: inviteeId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getDayInviteReward: function getDayInviteReward() {
        var pars = {
          cmd: "game",
          params: {
            action: "query_day_invite_info",
            gameId: 6,
            userId: ty.UserInfo.userId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getNewInviteReward: function getNewInviteReward(inviteeId) {
        if (!inviteeId) return;
        var pars = {
          cmd: "game",
          params: {
            action: "get_new_invite_reward",
            gameId: 6,
            rewardState: inviteeId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getWatchVideoReward: function getWatchVideoReward() {
        var pars = {
          cmd: "game",
          params: {
            action: "get_watch_video_reward",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      shareToCheckReward: function shareToCheckReward(sharePoint) {
        var pars = {
          cmd: ddz.EventType.HALL_SHARE2,
          params: {
            action: "check_reward",
            gameId: ddz.GameId,
            pointId: sharePoint || 6789e4
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      shareToGetreward: function shareToGetreward(sharePoint) {
        if (!sharePoint || 0 == sharePoint) return;
        if (ddz.gameModel.isBringVersion) return;
        var pars = {
          cmd: ddz.EventType.HALL_SHARE2,
          params: {
            action: ddz.EventType.GET_REWARD,
            gameId: ddz.GameId,
            pointId: sharePoint || 6789e4
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getShoreCut: function getShoreCut() {
        var pars = {
          cmd: "game",
          params: {
            action: ddz.EventType.ACTION_SHORT_CUT,
            gameId: ddz.GameId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      checkShareReward: function checkShareReward(sharePoint) {
        var pars = {
          cmd: ddz.EventType.HALL_SHARE2,
          params: {
            action: ddz.EventType.CHECK_REWARD,
            gameId: ddz.GameId,
            pointId: sharePoint || 6789e4
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getCashReward: function getCashReward(cash) {
        if (cash < 0) return;
        var pars = {
          cmd: ddz.EventType.CMD_CASH,
          params: {
            action: "get_cash",
            gameId: 9999,
            value: cash,
            wxappId: ty.SystemInfo.wxAppId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getCashCoin: function getCashCoin(cash) {
        if (cash < 0) return;
        var pars = {
          cmd: ddz.EventType.CMD_CASH,
          params: {
            action: "exchange_chip",
            gameId: 9999,
            value: cash,
            wxappId: ty.SystemInfo.wxAppId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      bindInviteCode_ID: function bindInviteCode_ID(inviterId) {
        if (!parseInt(inviterId)) return;
        var pars = {
          cmd: "game",
          params: {
            action: "bind_day_invite_Id",
            gameId: 6,
            inviterId: inviterId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      bindNewInviteCode: function bindNewInviteCode(inviteCode) {
        if (!parseInt(inviteCode)) return;
        var pars = {
          cmd: "game",
          params: {
            action: "bind_new_invite_code",
            gameId: 6,
            inviteCode: inviteCode
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      queryInviteInfo: function queryInviteInfo() {
        var pars = {
          cmd: "game",
          params: {
            action: "query_invite_info",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      queryNewInviteInfo: function queryNewInviteInfo() {
        var pars = {
          cmd: "game",
          params: {
            action: "query_new_invite_info",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      queryInviteConfig: function queryInviteConfig() {
        var pars = {
          cmd: "game",
          params: {
            action: "query_invite_config",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      queryWatchVideoReward: function queryWatchVideoReward() {
        var pars = {
          cmd: "game",
          params: {
            action: "query_watch_video_status",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getNewRedBagReward: function getNewRedBagReward() {
        if (null == ddz.gameModel.registerDays) return;
        var pars = {
          cmd: "game",
          params: {
            action: "gain_new_coupon",
            gameId: 6,
            registerDays: ddz.gameModel.registerDays
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getBoxReward: function getBoxReward(boxUserId, boxId, groupId) {
        if (!boxUserId || "" == boxUserId) return;
        boxUserId == ty.UserInfo.userId && (boxId = "self" + boxId);
        var pars = {
          cmd: "game",
          params: {
            action: "get_box_reward",
            gameId: 6,
            boxUserId: boxUserId,
            boxId: boxId
          }
        };
        groupId && (pars.params.groupId = groupId);
        hall.MsgFactory._sendCmd(pars);
      },
      setPersonInfo: function setPersonInfo(micro_signal, isVisible, signature, constellation, province, district) {
        var params = {
          cmd: "game",
          params: {
            action: "set_user_info",
            gameId: ty.SystemInfo.gameId,
            userInfo: {
              micro_signal: micro_signal,
              isVisible: isVisible,
              signature: signature,
              constellation: constellation,
              province: province,
              district: district,
              sex: hall.ME.udataInfo.m_sex
            }
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      saveRewardToBox: function saveRewardToBox(pointId) {
        if (!pointId) return;
        if (ddz.gameModel.isBringVersion) return;
        var pars = {
          cmd: "game",
          params: {
            action: "save_reward_to_box",
            gameId: 6,
            pointId: pointId
          }
        };
        hall.LOGW("", "file = [GameModel] fun = [saveRewardToBox] pars = " + JSON.stringify(pars));
        hall.MsgFactory._sendCmd(pars);
      },
      getOpenBox: function getOpenBox() {
        var pars = {
          cmd: "game",
          params: {
            action: "open_reward_in_box",
            gameId: 6
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getHelpBoxReward: function getHelpBoxReward(boxUserId) {
        var pars = {
          cmd: "game",
          params: {
            action: "get_reward_in_box",
            gameId: 6,
            boxUserId: boxUserId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getCommonConfig: function getCommonConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "notifys"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getFightMatchAdConfig: function getFightMatchAdConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "fightMatchAdConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getFightMatchAdConfigJson: function getFightMatchAdConfigJson(guan, tg, failCont, isNewUser) {
        if (!this.fightMatchAdConfig) return 1;
        var checkHitKey = function checkHitKey(keyStr, inValue) {
          var kv, hitValue;
          if (keyStr.indexOf(",") > -1) {
            kv = keyStr.split(",");
            hitValue = inValue >= parseInt(kv[0]) && inValue <= parseInt(kv[1]);
          } else {
            kv = parseInt(keyStr);
            hitValue = inValue == kv;
          }
          return hitValue;
        };
        var keys;
        var cfg = isNewUser ? this.fightMatchAdConfig["newUser"] : this.fightMatchAdConfig["oldUser"];
        for (var key in cfg) {
          keys = key.split("_");
          if (checkHitKey(keys[0], guan) && checkHitKey(keys[1], tg) && checkHitKey(keys[2], failCont)) return cfg[key][0];
        }
        return 1;
      },
      getArenaMatchConfig: function getArenaMatchConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "arenaMatchConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getAlmsConfig: function getAlmsConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "alms"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getServerConfig: function getServerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "serverConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getBringConfig: function getBringConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "bringConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getTableBannerConfig: function getTableBannerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "tableBannerConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getTableTopBannerConfig: function getTableTopBannerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "tableTopBannerConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getGoldTableBannerConfig: function getGoldTableBannerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "goldTableBannerConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getMatchTableBannerConfig: function getMatchTableBannerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "matchTableBannerConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getRoomListBannerConfig: function getRoomListBannerConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "roomListBannerConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getBannerResurgenceConfig: function getBannerResurgenceConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "bannerResurgenceConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getSkipCustomConfig: function getSkipCustomConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "skipCustomsConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getRewardMethod: function getRewardMethod() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "congratulationGetReward"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getDiversionConfig: function getDiversionConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "diversionConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getBoxShareSuccessTips: function getBoxShareSuccessTips() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "boxShareSuccessTips"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getMatchingMassageConfig: function getMatchingMassageConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "matchingMassage"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getResurgenceConfigConfig: function getResurgenceConfigConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "resurgenceConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getRewardAnbuchangConfigConfig: function getRewardAnbuchangConfigConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "rewardAnduchangConfig"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getcongratulationGetRedPacketConfig: function getcongratulationGetRedPacketConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "congratulationGetRedPacket"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getShareMomentsConfig: function getShareMomentsConfig() {
        var params = {
          cmd: "game",
          params: {
            action: "common_config",
            gameId: ty.SystemInfo.gameId,
            configKey: "shareMoments"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getWinLoseShareReward: function getWinLoseShareReward(isWin) {
        var params = {
          cmd: ddz.EventType.CMD_DIZHU,
          params: {
            gameId: 6,
            action: "winLoseShareReward",
            winOrLose: isWin
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getOldUserChipReward: function getOldUserChipReward() {
        requestAnimationFrame(function() {
          var sceneInfo = ty.UserInfo.onShowParam || wx.getLaunchOptionsSync();
          var loginType = 0;
          loginType = 1089 == sceneInfo.scene ? 0 : 1035 == sceneInfo.scene ? 1 : 1074 == sceneInfo.scene ? 2 : 3;
          var params = {
            cmd: ddz.EventType.CMD_DIZHU,
            params: {
              gameId: ty.SystemInfo.gameId,
              action: "get_old_user_chip_reward",
              loginType: loginType
            }
          };
          hall.MsgFactory._sendCmd(params);
        });
      },
      setTongGuanCount: function setTongGuanCount(tgCount) {
        var sec = hall.GlobalTimer.getCurLastSecond();
        var params = {
          cmd: "game",
          params: {
            gameId: ty.SystemInfo.gameId,
            action: "set_temp_data",
            lifeTime: sec,
            dataKey: "resurgence",
            data: {
              tgCount: tgCount
            }
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      setTempDataWithMatchFailTime: function setTempDataWithMatchFailTime(failCount) {
        var sec = hall.GlobalTimer.getCurLastSecond();
        var params = {
          cmd: "game",
          params: {
            gameId: ty.SystemInfo.gameId,
            action: "set_temp_data",
            lifeTime: sec,
            dataKey: "resurgence",
            data: {
              match: failCount
            }
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      setTempDataWithArenaFailTime: function setTempDataWithArenaFailTime(failCount) {
        var sec = hall.GlobalTimer.getCurLastSecond();
        var params = {
          cmd: "game",
          params: {
            gameId: ty.SystemInfo.gameId,
            action: "set_temp_data",
            lifeTime: sec,
            dataKey: "resurgence",
            data: {
              arena: failCount
            }
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      getTempData: function getTempData() {
        var params = {
          cmd: "game",
          params: {
            gameId: ty.SystemInfo.gameId,
            action: "get_temp_data",
            dataKey: "resurgence"
          }
        };
        hall.MsgFactory._sendCmd(params);
      },
      parseGame: function parseGame(value) {
        hall.LOGD(this._TAG, "onGame Ddz_network -------------------------" + JSON.stringify(value));
        switch (value.result.action) {
         case ddz.EventType.ACTION_RECORDS:
          this.parseMatchRecord(value.result);
          break;

         case "query_invite_info":
          this.updateRewardMassage(value);
          break;

         case "query_new_invite_info":
          this.updateNewRewardMassage(value);
          hall.GlobalFuncs.onShareReward_NewFriend(value.result);
          break;

         case "get_invite_reward":
          break;

         case "get_new_invite_reward":
          value.result.count && ddz.GlobalFuncs.playShareZuanShi(value.result.count);
          break;

         case "query_invite_config":
          this.parseQueryInviteConfig(value.result);
          break;

         case "common_config":
          this.parseCommonConfig(value.result);
          break;

         case "async_common_arena_match":
          var matches = value.result["matches"] || [];
          hall.ME.matchInfo.parseMatchListInfo(matches);
          ty.NotificationCenter.trigger(ddz.EventType.ASYNC_COMMON_ARENA_MATCH);
          break;

         case "shortcut":
          1 == value.result.sucess && ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GUIDE_ICON_STATE, false);
          break;

         case "get_temp_data":
          this.parseFailTempData(value.result);
          break;

         case "query_watch_video_status":
          this.parseWatchVideoStatus(value.result);
          break;

         case "get_watch_video_reward":
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_VIDEO_REWARD, value.result);
          break;

         case "get_box_reward":
          hall.LOGW("", "file = [GameModel] fun = [parseGame] value.result = " + JSON.stringify(value.result));
          if (value.result.rewardMsg) {
            var _rewardMsg = value.result.rewardMsg;
            if (_rewardMsg.indexOf("钻石") > 0) {
              var _index = _rewardMsg.indexOf("钻石") + 2;
              var _num = Number(_rewardMsg.substring(_index));
              _num > 0 ? ddz.GlobalFuncs.playZuanShi(false, this, _num, false) : hall.MsgBoxManager.showToast({
                title: _rewardMsg
              });
            } else if (_rewardMsg.indexOf("金币") > 0) {
              var _index = _rewardMsg.indexOf("金币") + 2;
              var _num = Number(_rewardMsg.substring(_index));
              _num > 0 ? ddz.GlobalFuncs.playZuanShi(false, this, _num, true) : hall.MsgBoxManager.showToast({
                title: _rewardMsg
              });
            } else if (_rewardMsg.indexOf("红包券") > 0) {
              var _index = _rewardMsg.indexOf("红包券") + 3;
              var _num = parseInt(_rewardMsg.substring(_index)) / 100;
              _num > 0 ? ddz.GlobalFuncs.playZuanShi(false, this, _num, true, true) : hall.MsgBoxManager.showToast({
                title: _rewardMsg
              });
            } else if (_rewardMsg.indexOf("记牌器") > 0) {
              hall.LOGW("", "file = [GameModel] fun = [parseGame] 记牌器 ");
              var _index = _rewardMsg.indexOf("记牌器") + 3;
              var _num = Number(_rewardMsg.substring(_index));
              _num > 0 ? ddz.GlobalFuncs.playZuanShi(false, this, _num, true, false, true) : hall.MsgBoxManager.showToast({
                title: _rewardMsg
              });
            } else hall.MsgBoxManager.showToast({
              title: _rewardMsg
            });
          }
          break;

         case "query_day_invite_info":
          if (ddz.isClickShareReward) {
            ddz.isClickShareReward = false;
            hall.GlobalFuncs.onShareDiamondReward(value.result);
          } else ty.NotificationCenter.trigger(ddz.EventType.UPDATE_REWARD_COUNT, value.result);
          break;

         case "get_day_invite_reward":
          if (value.result.count) {
            if ("user:coupon" == value.result.itemId) {
              var num = value.result.count / 100;
              hall.GlobalFuncs.rewadAni(num);
            } else ddz.GlobalFuncs.playShareZuanShi(value.result.count);
            ddz.ddz_dayWelfare && ddz.ddz_dayWelfare.updateShareInfo(value.result);
          }
          break;

         case "save_reward_to_box":
          hall.LOGW("", "file = [GameModel] fun = [parseGame] value.result = " + JSON.stringify(value.result));
          if (value.result.rewards) {
            var isType = "";
            var _count = 0;
            if (value.result.rewards["item:1311"]) {
              isType = "item:1311";
              _count = value.result.rewards["item:1311"];
            } else if (value.result.rewards["user:chip"]) {
              isType = "user:chip";
              _count = value.result.rewards["user:chip"];
            }
            _count > 0 && ddz.GlobalFuncs.playZuanShiBox(_count, isType);
            ddz.gameModel.checkShareReward(ddz.Share.SharePointType.shareFriend);
          }
          break;

         case "open_reward_in_box":
          if (ddz.isClickOpenBox) {
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeOpenHelpBox, [ "openBox" ]);
            hall.GlobalFuncs.onFriendHelpBox(value.result);
            ddz.isClickOpenBox = false;
          } else ty.NotificationCenter.trigger(ddz.EventType.IS_HAVE_REWARD, value.result);
          break;

         case "new_gift_reward_tips":
          if (value.result && value.result.mail) {
            var mail = value.result.mail;
            hall.MsgBoxManager.showToast({
              title: mail
            });
          }
          break;

         case "get_new_gift_reward":
          break;

         case "set_user_info":
          if (value.result && 1 == value.result.success) {
            hall.MsgBoxManager.showToast({
              title: "保存成功!"
            });
            hall.gameWorld.parsePersonInfo(value.result);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CELA_MENU_INFO);
          }
          break;

         case "new_coupon_reward":
          if (value.result && 1 == value.result.popup) {
            0 == value.result.registerDays ? hall.GlobalFuncs.giftRedBag(1) : value.result.registerDays > 0 && hall.GlobalFuncs.giftRedBag(2);
            ddz.gameModel.registerDays = value.result.registerDays;
          }
          break;

         case "gain_new_coupon":
          if (value.result && 1 == value.result.success && value.result.rewards && value.result.rewards[0] && "user:coupon" == value.result.rewards[0].itemId) {
            var num = value.result.rewards[0].count / 100;
            hall.GlobalFuncs.rewadAni(num);
          }
          break;

         case "old_login_popup":
          if (value.result && 1 == value.result.popup) {
            ddz.isClickShareReward = true;
            ddz.gameModel.getDayInviteReward();
          }
        }
      },
      parseWatchVideoStatus: function parseWatchVideoStatus(result) {
        1 == result.status ? this.watchVideoCount = 1 : this.watchVideoCount = 0;
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_WATCH_VIDEO_STATUS, result);
      },
      parseFailTempData: function parseFailTempData(result) {
        var curDate = hall.GlobalTimer.getCurDay();
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.LAST_FAIL_DATE, curDate);
        var matchCount;
        var arenaCount;
        var firstWithDraw;
        var countDic = {};
        if (result.data) {
          matchCount = result.data.match || 0;
          arenaCount = result.data.arena || 0;
          firstWithDraw = result.data.first_withdraw || false;
          countDic = {
            match: matchCount,
            arena: arenaCount,
            firstWithDraw: firstWithDraw
          };
          ty.UserInfo.tgCount = result.data.tgCount || 0;
          ty.UserInfo.lastUpdateTgDate = hall.GlobalTimer.getCurDay();
          ty.UserInfo.matchFailCount = result.data.match || 0;
          ty.UserInfo.arenaFailCount = result.data.arena || 0;
        }
        ddz.LOGD("", "file = [GameModel] fun = [parseFailTempData] countDic = " + JSON.stringify(countDic));
        hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.FAIL_NUMBER_LIST, JSON.stringify(countDic));
      },
      parseMatchRecord: function parseMatchRecord(result) {
        this._matchRecords = null;
        if (result.matches && result.matches.length > 0) {
          var records = result.matches[0].records;
          records && records.length > 0 && (this._matchRecords = records);
        }
        hall.LOGW("==", "==========ddz.friendModel.isEnterTable=========" + ddz.friendModel.isEnterTable + "===" + ty.UserInfo.loc);
        ddz.friendModel.isEnterTable && (this._matchRecords ? ddz.MsgFactory.resumeMatch() : "0.0.0.0" == ty.UserInfo.loc && ddz.friendModel.enterFTTable(ddz.Share.shareKeywordReplace.inviteFriendID));
        var _stageIndex = 0;
        this._matchRecords && this._matchRecords[0].stageIndex && (_stageIndex = this._matchRecords[0].stageIndex);
        ty.NotificationCenter.trigger(ddz.EventType.RECIVE_MATCH_RECORD, _stageIndex);
      },
      updateRewardMassage: function updateRewardMassage(result) {
        var resultMap;
        result && (resultMap = result.result);
        var showList = [];
        var giveCount = 0;
        var allCount = 0;
        var inviteeList = resultMap.inviteeList;
        inviteeList || (inviteeList = []);
        var mixGiveCount = ddz.gameModel.inviteConfig.length;
        var nowCount = resultMap.inviteeList.length > mixGiveCount ? mixGiveCount : resultMap.inviteeList.length;
        for (var i = 0; i < 10; i++) {
          giveCount = parseInt(ddz.gameModel.inviteConfig[i]);
          if (i < inviteeList.length) {
            inviteeList[i].bindRewardCount = giveCount;
            1 == inviteeList[i].rewardState && (allCount += giveCount);
            inviteeList[i].count = i + 1;
            inviteeList[i].nowCount = nowCount > i + 1 ? i + 1 : nowCount;
            showList.push(inviteeList[i]);
          } else showList.push({
            pic: "",
            rewardState: 0,
            count: i + 1,
            userId: 0,
            name: "玩家",
            nowCount: nowCount,
            bindRewardCount: giveCount
          });
        }
        var loginCount = ddz.GlobalFuncs.setDayLoginRewardCount();
        loginCount = loginCount > 0 ? loginCount : 0;
        this.massageCount = allCount;
        this.dayLoginCount = loginCount;
        this.allCount = this.massageCount + this.dayLoginCount;
        this.inviteShowList = showList;
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_REWARD_MASSAGE);
      },
      updateNewRewardMassage: function updateNewRewardMassage(result) {
        var resultMap;
        result && (resultMap = result.result);
        var rewardState = resultMap.rewardState;
        rewardState || (rewardState = []);
        var rewardsByIndex = resultMap.rewardConfig;
        var showList = [];
        rewardsByIndex || (rewardsByIndex = []);
        for (var i = 0; i < rewardsByIndex.length; i++) {
          var reward = {};
          reward.bindRewardCount = rewardsByIndex[i].count;
          reward.inviteedCode = rewardsByIndex[i].getCode;
          reward.count = rewardsByIndex[i].inviteNum;
          reward.nowCount = reward.count > resultMap.totalNum ? resultMap.totalNum : reward.count;
          rewardsByIndex[i] && rewardsByIndex[i].getCode && rewardState[rewardsByIndex[i].getCode] ? reward.rewardState = rewardState[rewardsByIndex[i].getCode] : reward.rewardState = 0;
          showList.push(reward);
        }
        this.inviteNewShowList = showList;
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_NEW_REWARD_MASSAGE);
      },
      parseQueryInviteConfig: function parseQueryInviteConfig(value) {
        ddz.gameModel.queryInviteInfo();
        this.inviteConfig = [ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 ];
        value && value.rewards && value.rewards.rewardsByIndex && (this.inviteConfig = value.rewards.rewardsByIndex);
        hall.LOGD(this._TAG, "parseQueryInviteConfig-------------------------" + JSON.stringify(this.inviteConfig));
      },
      parseCommonConfig: function parseCommonConfig(value) {
        switch (value.configKey) {
         case "notifys":
          this.saveNotifysConfig(value);
          break;

         case "matchingMassage":
          this.saveMatchingMassageConfig(value.config);
          break;

         case "arenaMatchConfig":
          this.saveArenaMatchConfigJson(value.config);
          break;

         case "resurgenceConfig":
          this.saveResurgenceConfigConfigJson(value.config);
          break;

         case "rewardAnduchangConfig":
          this.saveRewardAnduchangConfigJson(value.config);
          break;

         case "shareMoments":
          this.saveShareMomentsConfigJson(value.config);
          break;

         case "alms":
          this.saveAlmsConfigJson(value.config);
          break;

         case "serverConfig":
          this.saveServerConfigJson(value.config);
          break;

         case "bringConfig":
          this.saveBringConfigJson(value.config);
          break;

         case "tableBannerConfig":
          this.saveTableBannerConfigJson(value.config);
          break;

         case "tableTopBannerConfig":
          this.saveTableTopBannerConfigJson(value.config);
          break;

         case "matchTableBannerConfig":
          this.saveMatchTableBannerConfigJson(value.config);
          break;

         case "roomListBannerConfig":
          this.saveRoomListBannerConfigJson(value.config);
          break;

         case "bannerResurgenceConfig":
          this.saveBannerResurgenceConfigJson(value.config);
          break;

         case "goldTableBannerConfig":
          this.saveGoldTableBannerConfigJson(value.config);
          break;

         case "boxShareSuccessTips":
          this.saveBoxShareSuccessTipsJson(value.config);
          break;

         case "skipCustomsConfig":
          this.saveSkipCustomsConfigJson(value.config);
          break;

         case "congratulationGetReward":
          this.saveCongratulationGetRewardJson(value.config);
          break;

         case "diversionConfig":
          this.saveDiversionConfigJson(value.config);
          break;

         case "fightMatchAdConfig":
          this.saveFightMatchAdConfigJson(value.config);
          break;

         case "congratulationGetRedPacket":
          this.saveCongratulationGetRedPacketJson(value.config);
        }
      },
      saveNotifysConfig: function saveNotifysConfig(resultValue) {
        this.notifyInfo = resultValue.config;
        var notifyList = this.notifyInfo.info;
        var indexStr = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify([]));
        var indexList = JSON.parse(indexStr);
        if (indexList.length > 60) {
          indexList.splice(0, indexList.length - 30);
          hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify(indexList));
        }
        var unReadCount = 0;
        var autoShowCount = 0;
        var autoShowList = [];
        for (var i = 0; i < notifyList.length; i++) {
          var notify = notifyList[i];
          if (-1 == indexList.indexOf(notify.index)) {
            notify.readed = 0;
            unReadCount++;
            if (notify.autoShow) {
              autoShowCount++;
              autoShowList.push(notify.index);
            }
          } else notify.readed = 1;
        }
        this.notifyInfo.unReadCount = unReadCount;
        this.notifyInfo.autoShowCount = autoShowCount;
        this.notifyInfo.autoShowList = autoShowList;
        this.notifyInfo.getInfo = 1;
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COMMON_CONFIG);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GIFTBAG_COUNT);
        hall.LOGW("====gameModel====", "=======================" + JSON.stringify(this.notifyInfo));
      },
      saveShareConfigFromHttp: function saveShareConfigFromHttp(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        var shareExt = value["shareExt"];
        delete value["shareExt"];
        var shareCfg, extCfg;
        for (var shareKey in value) {
          shareCfg = value[shareKey];
          extCfg = shareExt[shareKey];
          if (extCfg) for (var subKey in extCfg) shareCfg[subKey] = extCfg[subKey];
        }
        this.shareConfig = value;
      },
      saveMatchingMassageConfig: function saveMatchingMassageConfig(value) {
        if (!value || !value.length || value.length < 1) return;
        this.matchingMassage = value;
      },
      saveShareMomentsConfigJson: function saveShareMomentsConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.shareMoments = value;
      },
      getShareConfig: function getShareConfig() {
        return this.shareConfig;
      },
      saveArenaMatchConfigJson: function saveArenaMatchConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.arenaMatchConfig = value;
      },
      saveResurgenceConfigConfigJson: function saveResurgenceConfigConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.resurgenceConfig = value;
      },
      saveRewardAnduchangConfigJson: function saveRewardAnduchangConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.rewardAnduchangConfig = value;
      },
      saveCongratulationGetRedPacketJson: function saveCongratulationGetRedPacketJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.congratulationGetRedPacketConfig = value;
      },
      saveAlmsConfigJson: function saveAlmsConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.almsConfig = value;
      },
      saveServerConfigJson: function saveServerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.serverConfig = value;
      },
      saveBringConfigJson: function saveBringConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.saveBringConfig = value;
        if (ty.SystemInfo.version == value.version) {
          ty.UserInfo.isInBSGS = true;
          ddz.gameModel.isBringVersion = true;
        } else ddz.gameModel.isBringVersion = false;
      },
      saveTableBannerConfigJson: function saveTableBannerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.tableBannerConfig = value;
      },
      saveTableTopBannerConfigJson: function saveTableTopBannerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.tableTopBannerConfig = value;
      },
      saveMatchTableBannerConfigJson: function saveMatchTableBannerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.matchTableBannerConfig = value;
      },
      saveRoomListBannerConfigJson: function saveRoomListBannerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.roomListBannerConfig = value;
      },
      saveBannerResurgenceConfigJson: function saveBannerResurgenceConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.bannerResurgenceConfig = value;
      },
      saveGoldTableBannerConfigJson: function saveGoldTableBannerConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.goldTableBannerConfig = value;
      },
      saveBoxShareSuccessTipsJson: function saveBoxShareSuccessTipsJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.boxShareSuccessTips = value;
      },
      saveSkipCustomsConfigJson: function saveSkipCustomsConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.skipCustomsConfig = value;
      },
      saveCongratulationGetRewardJson: function saveCongratulationGetRewardJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.congratulationGetReward = value;
      },
      saveDiversionConfigJson: function saveDiversionConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.diversionConfig = value;
      },
      saveFightMatchAdConfigJson: function saveFightMatchAdConfigJson(value) {
        if (hall.GlobalFuncs.isEmptyObject(value)) return;
        this.fightMatchAdConfig = value;
      },
      getServerConfigJson: function getServerConfigJson() {
        return this.serverConfig;
      },
      getBringConfigJson: function getBringConfigJson() {
        return this.saveBringConfig;
      },
      getTableBannerConfigJson: function getTableBannerConfigJson() {
        return this.tableBannerConfig;
      },
      getTableTopBannerConfigJson: function getTableTopBannerConfigJson() {
        return this.tableTopBannerConfig;
      },
      getGoldTableBannerConfigJson: function getGoldTableBannerConfigJson() {
        return this.goldTableBannerConfig;
      },
      getMatchTableBannerConfigJson: function getMatchTableBannerConfigJson() {
        return this.matchTableBannerConfig;
      },
      getRoomListBannerConfigJson: function getRoomListBannerConfigJson() {
        return this.roomListBannerConfig;
      },
      getBannerResurgenceConfigJson: function getBannerResurgenceConfigJson() {
        return this.bannerResurgenceConfig;
      },
      getBoxShareSuccessTipsJson: function getBoxShareSuccessTipsJson() {
        return this.boxShareSuccessTips;
      },
      getSkipCustomsConfigJson: function getSkipCustomsConfigJson() {
        return this.skipCustomsConfig;
      },
      getCongratulationGetRewardJson: function getCongratulationGetRewardJson() {
        return this.congratulationGetReward;
      },
      getDiversionConfigJson: function getDiversionConfigJson() {
        return this.diversionConfig;
      },
      getAlmsConfigJson: function getAlmsConfigJson() {
        return this.almsConfig;
      },
      getArenaMatchConfigJson: function getArenaMatchConfigJson() {
        return this.arenaMatchConfig;
      },
      parseWinLoseShareReward: function parseWinLoseShareReward(result) {
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_WINLOSESHAREREWARD, result);
      },
      getCurMatchRecords: function getCurMatchRecords() {
        return this._matchRecords;
      }
    };
    cc._RF.pop();
  }, {} ],
  GlobalFuncs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a2c3O/mspOpLP03XhBLc8E", "GlobalFuncs");
    "use strict";
    hall.GlobalFuncs = {};
    hall.SceneGather = [];
    hall.GlobalFuncs.SliceStringToLength = function(str, length) {
      if (!str) return str;
      var len = 0;
      var tmp = 0;
      var s;
      for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        tmp += charCode >= 0 && charCode <= 128 ? 1 : 2;
        tmp <= length - 2 && len++;
      }
      if (tmp <= length) s = str.slice(0); else {
        s = str.slice(0, len);
        s += "..";
      }
      return s;
    };
    hall.GlobalFuncs.formatGold = function(score) {
      if (!score) return "0";
      var tar = "";
      if (score < 0) {
        tar = "-";
        score = -score;
      }
      var scoreText = "";
      var arr;
      var endStr;
      var sp;
      var isInteger = false;
      if (score < 1e4) scoreText = score + ""; else if (score >= 1e4 && score < 1e8) {
        scoreText = score / 1e4 + "";
        if (-1 == scoreText.indexOf(".")) {
          isInteger = true;
          scoreText += ".000";
        } else {
          isInteger = false;
          scoreText += "000";
        }
        arr = scoreText.split(".");
        var wanStr = arr[0];
        sp = 1;
        1 == wanStr.length ? sp = 2 : 2 == wanStr.length ? sp = 1 : 3 == wanStr.length ? sp = 0 : 4 == wanStr.length && (sp = 0);
        endStr = arr[1].substr(0, sp);
        scoreText = wanStr + "." + endStr + "万";
        (0 == sp || isInteger) && (scoreText = wanStr + "万");
      } else {
        scoreText = score / 1e8 + "";
        if (-1 == scoreText.indexOf(".")) {
          isInteger = true;
          scoreText += ".000";
        } else {
          isInteger = false;
          scoreText += "000";
        }
        arr = scoreText.split(".");
        var yiStr = arr[0];
        sp = 1;
        sp = 1 == yiStr.length ? 2 : 2 == yiStr.length ? 1 : (3 == yiStr.length, 0);
        endStr = arr[1].substr(0, sp);
        scoreText = yiStr + "." + endStr + "亿";
        (0 == sp || isInteger) && (scoreText = yiStr + "亿");
      }
      return tar + scoreText;
    };
    hall.GlobalFuncs.PrintArray = function(arr) {
      var s = "";
      for (var index = 0; index < arr.length; index++) {
        s += arr[index];
        s += " ";
      }
      hall.LOGD(null, "global", s);
    };
    hall.GlobalFuncs.FindInArray = function(arr, obj) {
      var len = arr.length;
      for (var index = 0; index < len; index++) if (arr[index] === obj) return index;
      return -1;
    };
    hall.GlobalFuncs.FindInArrayBuFun = function(array, func) {
      for (var i = 0, len = array.length; i < len; i++) {
        var element = array[i];
        if (func(element)) return element;
      }
      return null;
    };
    hall.GlobalFuncs.GetSubArrayExceptIndex = function(arr, indexs) {
      var newarr = arr.slice(0);
      indexs.sort(hall.GlobalFuncs.SortNumberFunc);
      for (var i = indexs.length - 1; i >= 0; i--) newarr.splice(indexs[i], 1);
      return newarr;
    };
    hall.GlobalFuncs.SortNumberFunc = function(c1, c2) {
      return c1 - c2;
    };
    hall.GlobalFuncs.GetLevelByExp = function(exp) {
      var level = 0;
      while (exp > 0) {
        exp -= parseInt(5 * Math.pow(level, 3.5) + 3 * Math.pow(level, 1.5) + 50);
        level++;
      }
      return level - 1;
    };
    hall.GlobalFuncs.GetExpByLevel = function(level) {
      var exp = 0;
      for (var i = 0; i < level; i++) exp += parseInt(5 * Math.pow(i - 1, 3.5) + 3 * Math.pow(i - 1, 1.5) + 50);
      return exp;
    };
    hall.GlobalFuncs.ChangeSpriteTexure = function(sprite, texureName) {
      var frme = cc.spriteFrameCache.getSpriteFrame(texureName);
      frme && sprite.setSpriteFrame(frme);
    };
    hall.GlobalFuncs.ChangeSpriteTexureWithSize = function(sprite, texureName, size) {
      var frme = cc.spriteFrameCache.getSpriteFrame(texureName);
      var f_size = frme.getOriginalSize();
      sprite.setScaleX(size.width / f_size.width);
      sprite.setScaleY(size.height / f_size.height);
      sprite.setSpriteFrame(frme);
    };
    hall.GlobalFuncs.ReadBoolFromLocalStorage = function(key, def_value) {
      if (!cc.sys.localStorage.getItem) return def_value;
      var tmp = cc.sys.localStorage.getItem(key);
      if (!tmp) return def_value;
      var bv = "true" === tmp;
      return bv;
    };
    hall.GlobalFuncs.ReadNumFromLocalStorage = function(key, def_value) {
      if (!cc.sys.localStorage.getItem) return def_value;
      var tmp = cc.sys.localStorage.getItem(key);
      if (!tmp) return def_value;
      return Number(tmp);
    };
    hall.GlobalFuncs.ReadStringFromLocalStorage = function(key, def_value) {
      if (!cc.sys.localStorage.getItem) return def_value;
      var tmp = cc.sys.localStorage.getItem(key);
      if (!tmp) return def_value;
      return String(tmp);
    };
    hall.GlobalFuncs.ReadValueFromLocalStorage = function(key, def_value) {
      if (!cc.sys.localStorage.getItem) return def_value;
      var tmp = cc.sys.localStorage.getItem(key);
      if (!tmp) return def_value;
      return Array(tmp);
    };
    hall.GlobalFuncs.setInLocalStorage = function(key, value) {
      try {
        cc.sys.localStorage.setItem(key, value + "");
      } catch (e) {}
    };
    hall.GlobalFuncs.DownloadImg = function(url, filePath, cobj, callback, params) {
      if (url.indexOf("http") < 0) {
        hall.LOGE("global", "Invalid url to download, return!!!!!!");
        return;
      }
      var configObj = {
        imageUrl: url
      };
      ty.Http.httpGet("proxyImage", configObj, function(retObj) {
        var result = JSON.parse(retObj);
        "200" == result["statusCode"] && 1 != result["openErr"] && 1 != result["writeErr"] && callback.call(cobj, result["path"], params);
      }, "");
    };
    hall.GlobalFuncs.formatSeconds = function(value) {
      var theTime = parseInt(value);
      var theTime1 = 0;
      var theTime2 = 0;
      if (theTime > 60) {
        theTime1 = parseInt(theTime / 60);
        theTime = parseInt(theTime % 60);
        if (theTime1 > 60) {
          theTime2 = parseInt(theTime1 / 60);
          theTime1 = parseInt(theTime1 % 60);
        }
      }
      var result = "";
      result = theTime > 9 ? "" + parseInt(theTime) : "0" + parseInt(theTime);
      theTime1 >= 0 && (result = theTime1 > 9 ? parseInt(theTime1) + ":" + result : "0" + parseInt(theTime1) + ":" + result);
      theTime2 >= 0 && (result = theTime2 > 9 ? parseInt(theTime2) + ":" + result : "0" + parseInt(theTime2) + ":" + result);
      return result;
    };
    hall.GlobalFuncs.formatMinSeconds = function(value) {
      var theTime = parseInt(value);
      var theTime1 = 0;
      var theTime2 = 0;
      if (theTime > 10) {
        theTime1 = parseInt(theTime / 10);
        theTime = parseInt(theTime % 10);
        if (theTime1 > 60) {
          theTime2 = parseInt(theTime1 / 60);
          theTime1 = parseInt(theTime1 % 60);
        }
      }
      var result = "";
      result = theTime > 9 ? "" + parseInt(theTime) : "0" + parseInt(theTime);
      theTime1 >= 0 && (result = theTime1 > 9 ? parseInt(theTime1) + ":" + result : "0" + parseInt(theTime1) + ":" + result);
      theTime2 >= 0 && (result = theTime2 > 9 ? parseInt(theTime2) + ":" + result : "0" + parseInt(theTime2) + ":" + result);
      return result;
    };
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    hall.GlobalFuncs.base64encode = function(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = hall.GlobalFuncs._utf8_encode(input);
      var len = input.length;
      while (i < len) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (3 & chr1) << 4 | chr2 >> 4;
        enc3 = (15 & chr2) << 2 | chr3 >> 6;
        enc4 = 63 & chr3;
        isNaN(chr2) ? enc3 = enc4 = 64 : isNaN(chr3) && (enc4 = 64);
        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }
      return output;
    };
    hall.GlobalFuncs.base64decode = function(input) {
      var output = hall.GlobalFuncs.base64decodeRaw(input);
      return hall.GlobalFuncs._utf8_decode(output);
    };
    hall.GlobalFuncs.base64decodeRaw = function(input) {
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var len = input.length;
      var output = [];
      while (i < len) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (15 & enc2) << 4 | enc3 >> 2;
        chr3 = (3 & enc3) << 6 | enc4;
        output.push(chr1);
        64 != enc3 && output.push(chr2);
        64 != enc4 && output.push(chr3);
      }
      return output;
    };
    hall.GlobalFuncs._utf8_encode = function(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";
      for (var n = 0, len = string.length; n < len; n++) {
        var c = string.charCodeAt(n);
        if (c < 128) utftext += String.fromCharCode(c); else if (c > 127 && c < 2048) {
          utftext += String.fromCharCode(c >> 6 | 192);
          utftext += String.fromCharCode(63 & c | 128);
        } else {
          utftext += String.fromCharCode(c >> 12 | 224);
          utftext += String.fromCharCode(c >> 6 & 63 | 128);
          utftext += String.fromCharCode(63 & c | 128);
        }
      }
      return utftext;
    };
    hall.GlobalFuncs._utf8_decode = function(array) {
      var string = "";
      var i = 0, c1, c2;
      var c = c1 = c2 = 0;
      var len = array.length;
      while (i < len) {
        c = array[i];
        if (c < 128) {
          string += String.fromCharCode(c);
          i++;
        } else if (c > 191 && c < 224) {
          c2 = array[i + 1];
          string += String.fromCharCode((31 & c) << 6 | 63 & c2);
          i += 2;
        } else {
          c2 = array[i + 1];
          c3 = array[i + 2];
          string += String.fromCharCode((15 & c) << 12 | (63 & c2) << 6 | 63 & c3);
          i += 3;
        }
      }
      return string;
    };
    hall.GlobalFuncs.checkMsgWithGameId = function(param, gameId) {
      var pgameId = param["result"]["gameId"];
      if (pgameId == gameId) {
        hall.LOGE("global", "EQUAL!!!!!!");
        return true;
      }
      return false;
    };
    hall.GlobalFuncs.gotoDdzTable = function() {
      var noDelete = false;
      var curScene = cc.director.getScene();
      if ("TableScene" != curScene.name) {
        noDelete = true;
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING, noDelete);
      }
      var toSceneName = "TableScene";
      if (hall.GlobalFuncs.isInAtScene(toSceneName)) {
        ddz.gameModel.isLoadTableScene = false;
        return;
      }
      ty.NotificationCenter.trigger(ddz.EventType.ACTION_ENTER_TABLE);
      ty.NotificationCenter.trigger(ddz.EventType.REMOVE_DDZ_MAIN_ANI);
      hall.GlobalFuncs.pushScene(toSceneName);
    };
    hall.GlobalFuncs.isInAtScene = function(toSceneName) {
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, "file = [GlobalFuncs] fun = [isInAtScene] curScene : " + curScene.name);
      return curScene.name == toSceneName;
    };
    hall.GlobalFuncs.pushScene = function(sceneName, onLaunched) {
      if ("TableScene" == sceneName || "Ddz" == sceneName) {
        hall.SceneGather = [];
        cc.director.loadScene(sceneName, onLaunched);
        return;
      }
      var index = -1;
      for (var i = 0; i < hall.SceneGather.length; i++) if (hall.SceneGather[i].name == sceneName) {
        index = i;
        break;
      }
      -1 == index || hall.SceneGather.splice(index, 1);
      var data = {};
      data.name = sceneName;
      data.onLaunched = onLaunched;
      hall.SceneGather.push(data);
      cc.director.loadScene(sceneName, onLaunched);
    };
    hall.GlobalFuncs.popScene = function() {
      var curScene = cc.director.getScene();
      if (hall.SceneGather.length > 0) {
        var data = hall.SceneGather.pop();
        var sceneName = data.name;
        var onLaunched = data.onLaunched;
        if (curScene.name == sceneName) {
          data = hall.SceneGather.pop();
          if (data) {
            sceneName = data.name;
            onLaunched = data.onLaunched;
          } else {
            sceneName = "Ddz";
            onLaunched = null;
          }
        }
        "TableScene" == sceneName && (sceneName = "Ddz");
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
      } else {
        var toSceneName = "Ddz";
        hall.GlobalFuncs.pushScene(toSceneName);
      }
    };
    hall.GlobalFuncs.gotoDdz = function() {
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, " file = [GlobalFuncs] fun = [gotoDdz] curScene : " + curScene.name);
      var toSceneName = "Ddz";
      if ("TableScene" != curScene.name) return;
      hall.GlobalFuncs.pushScene(toSceneName);
    };
    hall.GlobalFuncs.gotoMallScene = function() {
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, "file = [GlobalFuncs] fun = [gotoMallScene] curScene : " + curScene.name);
      var toSceneName = "MallScene";
      if (curScene.name == toSceneName) return;
      hall.GlobalFuncs.pushScene(toSceneName);
    };
    hall.GlobalFuncs.gotoRechargeScene = function() {
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, "file = [GlobalFuncs] fun = [gotoRechargeScene] curScene : " + curScene.name);
      var toSceneName = "rechargeScene";
      if (curScene.name == toSceneName) return;
      hall.GlobalFuncs.pushScene(toSceneName);
    };
    hall.GlobalFuncs.gotoRoomListScene = function(_playMode) {
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, "file = [GlobalFuncs] fun = [gotoRoomListScene] curScene : " + curScene.name);
      ty.NotificationCenter.trigger(ddz.EventType.REMOVE_DDZ_MAIN_ANI);
      var toSceneName = "RoomListScene";
      var onLaunched = function onLaunched() {
        var logicScene = cc.director.getScene();
        var no = logicScene.children[0];
        var window = no.getComponent("RoomListScene");
        window.setPlayMode(_playMode);
      };
      if (curScene.name == toSceneName) {
        onLaunched();
        return;
      }
      hall.GlobalFuncs.pushScene(toSceneName, onLaunched);
    };
    hall.GlobalFuncs.gotoRank = function(shareTicketS) {
      ty.NotificationCenter.trigger(ddz.EventType.REMOVE_DDZ_MAIN_ANI);
      var curScene = cc.director.getScene();
      hall.LOGD(this._TAG, "file = [GlobalFuncs] fun = [gotoRank] curScene : " + curScene.name);
      var toSceneName = "ddz_rank";
      var onLaunched = function onLaunched() {
        var logicScene = cc.director.getScene();
        var no = logicScene.children[0];
        var window = no.getComponent("ddz_rank");
        window.changeButtonToRank(shareTicketS);
      };
      if (curScene.name == toSceneName) {
        onLaunched();
        return;
      }
      hall.GlobalFuncs.pushScene(toSceneName, onLaunched);
    };
    hall.GlobalFuncs.showDiamondWindowWithType = function(type) {
      var sceneName = "ddz_diamond_friend";
      var curScene = cc.director.getScene();
      if (curScene.name == sceneName) return;
      var onLaunched = function onLaunched() {};
      hall.GlobalFuncs.pushScene(sceneName, onLaunched);
    };
    hall.GlobalFuncs.onShowDetail = function() {
      hall.LOGW("", "加载 对局流水prefab");
      var curScene = cc.director.getScene();
      var _layer = curScene.getChildByTag(100050);
      if (_layer) {
        var com = _layer.getComponent("ddz_window_gameDetail");
        "TableScene" == curScene.name && com.setParentScene(curScene.children[0].getComponent("DdzTableScene"));
        com.createDetail();
        return;
      }
      cc.loader.loadRes("prefabs/ddz_window_gameDetail", function(err, prefab) {
        var _gameDetail = cc.instantiate(prefab);
        curScene.addChild(_gameDetail);
        _gameDetail.setTag(100050);
        ddz.GlobalFuncs.setToCenter(_gameDetail);
        var com = _gameDetail.getComponent("ddz_window_gameDetail");
        "TableScene" == curScene.name && com.setParentScene(curScene.children[0].getComponent("DdzTableScene"));
        var ani = _gameDetail.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {
          com.createDetail();
        });
        anim.play();
      });
    };
    hall.GlobalFuncs.onHistory = function() {
      hall.LOGW("", "加载 历史战绩prefab");
      cc.loader.loadRes("prefabs/ddz_window_history", function(err, prefab) {
        var _gameHistory = cc.instantiate(prefab);
        cc.director.getScene().addChild(_gameHistory, 777777);
        ddz.GlobalFuncs.setToCenter(_gameHistory);
        var ani = _gameHistory.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        var com = _gameHistory.getComponent("ddz_window_history");
        anim.once("finished", function() {
          com.createHistory();
        });
        anim.play();
      });
    };
    hall.GlobalFuncs.onPersonalInfo = function() {
      cc.loader.loadRes("prefabs/personalInfo", function(err, prefab) {
        var _info = cc.instantiate(prefab);
        cc.director.getScene().addChild(_info);
        ddz.GlobalFuncs.setToCenter(_info);
        var info = _info.getComponent("personalInfo");
        info.updateInfo();
      });
    };
    hall.GlobalFuncs.onGoldChoosePlayMode = function() {}, hall.GlobalFuncs.onCollectDeskTop = function() {
      cc.loader.loadRes("prefabs/collectDeskTop", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("collectDeskTop");
      });
    }, hall.GlobalFuncs.onOfficialAccountGuide = function(isAddApplet) {
      cc.loader.loadRes("prefabs/officialAccountGuide", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("officialAccountGuide");
        isAddApplet ? com.addAppletGetDiamond() : com.openWindow();
      });
    }, hall.GlobalFuncs.onbetBoxAbstract = function() {
      var curScene = cc.director.getScene();
      cc.loader.loadRes("prefabs/betBoxAbstract", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("betBoxAbstract");
        if ("TableScene" == curScene.name) {
          com.setParentScene(curScene.children[0].getComponent("DdzTableScene"));
          com.updateInfo();
        }
      });
    }, hall.GlobalFuncs.onBubbleTips = function(node, tips, posx, posy, isTable) {
      cc.loader.loadRes("prefabs/ddz_bubble_tips", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        preFabNode.x = 100;
        null != posx && (preFabNode.x = posx);
        preFabNode.y = -90;
        null != posy && (preFabNode.y = posy);
        node.addChild(preFabNode);
        var com = preFabNode.getComponent("ddz_bubble_tips");
        com.setTips(tips, isTable);
      });
    }, hall.GlobalFuncs.onTreasureBox = function(box_share, windoubles) {
      cc.loader.loadRes("prefabs/treasure_box", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("treasure_box");
        com.setBoxShareInfo(box_share, windoubles);
      });
    }, hall.GlobalFuncs.onFriendHelpBox = function(data) {
      if (ddz.ddz_helpBox) {
        ddz.ddz_helpBox.updateRewardInfo(data);
        return;
      }
      cc.loader.loadRes("prefabs/ddz_helpBox", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        ddz.ddz_helpBox = preFabNode.getComponent("ddz_helpBox");
        ddz.ddz_helpBox.updateRewardInfo(data);
      });
    }, hall.GlobalFuncs.onSkipCustom = function(state) {
      ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "skipWindow", state ]);
      cc.loader.loadRes("prefabs/ddz_window_skip", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("ddz_window_skip");
        com.updateWindowInfo(state);
      });
    }, hall.GlobalFuncs.giftRedBag = function(state) {
      hall.LOGD(null, "file = [GlobalFunc] fun = [giftRedBag]");
      ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "ddz_new_reweard", state ]);
      if (ddz.newReward) {
        ddz.newReward.setBagState(state);
        return;
      }
      cc.loader.loadRes("prefabs/ddz_new_reward", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        ddz.newReward = preFabNode.getComponent("ddz_new_reward");
        ddz.newReward.setBagState(state);
      });
    }, hall.GlobalFuncs.rewadAni = function(num) {
      ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "ddz_reward_ani" ]);
      if (ddz.rewardAni) {
        ddz.rewardAni.setNumber(num);
        return;
      }
      cc.loader.loadRes("prefabs/ddz_reward_ani", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 777777);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        ddz.rewardAni = preFabNode.getComponent("ddz_reward_ani");
        ddz.rewardAni.setNumber(num);
      });
    }, hall.GlobalFuncs.onNewUserGifts = function(data) {}, hall.GlobalFuncs.onShareDiamondReward = function(data) {
      if (ddz.ddz_dayWelfare) {
        ddz.ddz_dayWelfare.updateShareInfo(data);
        return;
      }
      cc.loader.loadRes("prefabs/ddz_diamond", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        ddz.ddz_dayWelfare = preFabNode.getComponent("ddz_diamond_windows");
        ddz.ddz_dayWelfare.updateShareInfo(data);
        ddz.ddz_dayWelfare.updateWindowInfo(1);
      });
    }, hall.GlobalFuncs.onEditPersonInfo = function() {
      cc.loader.loadRes("prefabs/ddz_personInfoEdit", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        var com = preFabNode.getComponent("ddz_personInfoEdit");
      });
    }, hall.GlobalFuncs.onShareReward_NewFriend = function() {
      if (ddz.ddz_shareReward) {
        ddz.ddz_shareReward.updateNewRewardMassage();
        return;
      }
      cc.loader.loadRes("prefabs/ddz_shareReward", function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        ddz.ddz_shareReward = preFabNode.getComponent("ddz_shareReward_windows");
        ddz.ddz_shareReward.updateNewRewardMassage();
      });
    }, hall.GlobalFuncs.onEnterQueue = function() {
      var preFabPath = "prefabs/enter_queue";
      var comName = "enter_queue";
      ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
      hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
        var com = preFabNode.getComponent(comName);
        com.enterQueue();
        com.playAni(true);
        ty.NotificationCenter.trigger(ddz.EventType.SHOW_MATCHING);
      });
    };
    hall.GlobalFuncs.getSpDataPath = function(isDiZhu, isMale) {};
    hall.GlobalFuncs.CreateUuid = function() {
      var s = [];
      var hexDigits = "0123456789abcdef";
      for (var i = 0; i < 36; i++) s[i] = hexDigits.substr(Math.floor(16 * Math.random()), 1);
      s[14] = "4";
      s[19] = hexDigits.substr(3 & s[19] | 8, 1);
      s[8] = s[13] = s[18] = s[23] = "";
      var uuid = s.join("");
      return uuid;
    };
    hall.GlobalFuncs.getLocalUuid = function() {
      var local_uuid = hall.GlobalFuncs.ReadStringFromLocalStorage(hall.LOCAL_UUID_KEY, "");
      if (!local_uuid) {
        local_uuid = hall.GlobalFuncs.CreateUuid();
        hall.GlobalFuncs.setInLocalStorage(hall.LOCAL_UUID_KEY, local_uuid);
      }
      return local_uuid;
    };
    hall.GlobalFuncs.getRandomNumberBefore = function(number) {
      return Math.floor(100 * Math.random()) % number;
    };
    hall.GlobalFuncs.getShareRandomNumberWithShareList = function(shareList) {
      var returnRandom = hall.GlobalFuncs.getRandomNumberBefore(100);
      var nowIndex = 0;
      if (shareList && shareList.length && shareList.length > 0) while (returnRandom > shareList[nowIndex].weight) {
        returnRandom -= shareList[nowIndex].weight;
        nowIndex++;
        nowIndex >= shareList.length && (nowIndex = 0);
      }
      return nowIndex;
    };
    hall.GlobalFuncs.replaceKeyWordInString = function(string) {
      var repString = "".concat(string);
      var replaceMap = ddz.Share.shareKeywordReplace;
      for (var key in replaceMap) {
        var reg = new RegExp(key, "g");
        repString = repString.replace(reg, replaceMap[key]);
      }
      return repString;
    };
    hall.GlobalFuncs.replaceToStringWithDic = function(dic) {
      return "query:" + JSON.stringify(dic);
    };
    hall.GlobalFuncs.getMoneyStringWithCoupons = function(couponCount) {
      var money = (couponCount / 100).toFixed(2) + "";
      return money;
    };
    hall.GlobalFuncs.getButtonTitle = function(_shareType) {
      var richText = "分享";
      if (_shareType && ddz.gameModel.shareConfig && ddz.gameModel.shareConfig[_shareType]) {
        var _buttonTitle = ddz.gameModel.shareConfig[_shareType].buttonTitle;
        ty.UserInfo.isInBSGS && ddz.gameModel.shareConfig[_shareType].buttonTitleBSGS && (_buttonTitle = ddz.gameModel.shareConfig[_shareType].buttonTitleBSGS);
        if (_buttonTitle) {
          var _string = hall.GlobalFuncs.replaceKeyWordInString(_buttonTitle);
          richText = _string;
        }
      }
      return richText;
    };
    hall.GlobalFuncs.getSharePoint = function(_shareType) {
      var sharePoint = 0;
      _shareType && ddz.gameModel.shareConfig && ddz.gameModel.shareConfig[_shareType] && (sharePoint = ddz.gameModel.shareConfig[_shareType].sharePoint);
      return sharePoint;
    };
    hall.GlobalFuncs.isEmptyObject = function(obj) {
      for (var name in obj) return false;
      return true;
    };
    hall.GlobalFuncs.sliceStringToLength = function(str, length) {
      var len = 0;
      var tmp = 0;
      var s;
      for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        tmp += charCode >= 0 && charCode <= 128 ? 1 : 2;
        tmp <= length - 2 && len++;
      }
      if (tmp <= length) s = str.slice(0); else {
        s = str.slice(0, len);
        s += "..";
      }
      return s;
    };
    hall.GlobalFuncs.btnEffect = function(node, scale, self) {
      node.on(cc.Node.EventType.TOUCH_START, function() {
        node.setScale(scale);
      }, self, true);
      node.on(cc.Node.EventType.TOUCH_END, function() {
        node.setScale(1);
      }, self, true);
      node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
        node.setScale(1);
      }, self, true);
    };
    hall.GlobalFuncs.btnScaleEffect = function(node, scale, nScale) {
      node.stopAllActions();
      var normalScale = 1;
      nScale && (normalScale = nScale);
      var scale_1 = cc.scaleTo(.2, scale, scale);
      var scale_2 = cc.scaleTo(.2, normalScale, normalScale);
      var delay = cc.delayTime(1.3);
      var seq1 = cc.sequence(scale_1, scale_2, scale_1, scale_2, delay);
      node.runAction(seq1.repeatForever());
    };
    hall.GlobalFuncs.checkNeedLoadRemoteRes = function() {
      var localVersion = hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.LOCAL_VERSION_KEY, 0);
      if (localVersion != ty.SystemInfo.version) {
        hall.GlobalFuncs.setInLocalStorage(ddz.LOCAL_VERSION_KEY, ty.SystemInfo.version);
        return true;
      }
      return false;
    };
    hall.GlobalFuncs.showPopWinByPreFab = function(preFabPath, func) {
      cc.loader.loadRes(preFabPath, function(err, prefab) {
        var preFabNode = cc.instantiate(prefab);
        cc.director.getScene().addChild(preFabNode, 666666);
        ddz.GlobalFuncs.setToCenter(preFabNode);
        func(preFabNode);
      });
    };
    hall.GlobalFuncs.checkBSGS = function(cityName) {
      if (!cityName || "未知" == cityName) return true;
      var keyWord;
      for (var key in ty.SystemInfo.bsgsCitys) {
        keyWord = ty.SystemInfo.bsgsCitys[key];
        if (cityName.indexOf(keyWord) > -1) return true;
      }
      return false;
    };
    hall.GlobalFuncs._TAG = "hall.GlobalFuncs";
    cc._RF.pop();
  }, {} ],
  GlobalTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05ecdFzSD5K/qeUrV0azxaI", "GlobalTimer");
    "use strict";
    hall.GlobalTimer = {
      boot: function boot() {
        this.MAX_COUNT = 30;
        this._curCounter = 0;
        this._curTime = new Date().getTime() / 1e3;
        ty.NotificationCenter.listen(ddz.EventType.GET_TIMESTAMP, this.updateTime, this);
        var that = this;
        hall.MsgFactory.getTimeStamp();
        ty.Timer.setTimer(cc.director, function() {
          that._curCounter++;
          that._curTime += 1;
          if (that._curCounter >= that.MAX_COUNT) {
            that._curCounter = 0;
            hall.MsgFactory.getTimeStamp();
          }
        }, 1);
      },
      getCurTime: function getCurTime() {
        return this._curTime;
      },
      getCurDay: function getCurDay() {
        var date = new Date(1e3 * this._curTime);
        var fullYear = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var dataStr = fullYear + "-" + month + "-" + day;
        ddz.LOGD(hall.GlobalTimer, "今天是:" + dataStr);
        return dataStr;
      },
      getCurDayList: function getCurDayList() {
        var date = new Date(1e3 * this._curTime);
        var fullYear = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var dataList = [ fullYear, month, day ];
        return dataList;
      },
      getCurHours: function getCurHours() {
        var date = new Date(1e3 * this._curTime);
        var hour = date.getHours();
        var dataStr = hour + "";
        ddz.LOGD(hall.GlobalTimer, "现在是:" + dataStr + "点");
        return dataStr;
      },
      getCurLastSecond: function getCurLastSecond() {
        var toDaySecond = parseInt((this._curTime - 1523203200) % 86400);
        return 86400 - toDaySecond;
      },
      updateTime: function updateTime(timeObj) {
        ddz.LOGD(hall.GlobalTimer, "时间校准。。。");
        this._curTime = timeObj.current_ts;
      }
    };
    cc._RF.pop();
  }, {} ],
  GoldModule: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ece9a/Xl3FBHpwfzXdQb/oO", "GoldModule");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnBack: cc.Button,
        jifenNode: cc.Node,
        jifenLeftNode: cc.Node,
        jifenRightNode: cc.Node,
        lblDiFen: cc.Label,
        lblNum: cc.Label,
        game_result: cc.Prefab,
        tasksNode: cc.Node,
        matchNode: cc.Node,
        matchingNode: cc.Node,
        txtSfee: cc.Label
      },
      ctor: function ctor() {},
      setTableScene: function setTableScene(val) {
        this._tableScene = val;
        this._tableInfoChange(this._tableScene.tableInfo());
        this.refresh();
      },
      refresh: function refresh() {
        this._tableScene.myAvatar.active = this._tableScene._tableState.normalInfo.m_state != ddz.Enums.TableState.TABLEDSTAT_PLAYING;
        this.initScore();
        this._tableScene._leftSeatinfo.hasData && this._tableScene._rightSeatinfo.hasData && this._onGameReady();
        this._tableScene._leftSeatinfo.hasData && this._onUpdateInfo({
          pos: "left",
          type: "sit"
        });
        this._tableScene._rightSeatinfo.hasData && this._onUpdateInfo({
          pos: "right",
          type: "sit"
        });
      },
      updateMultiple: function updateMultiple(baseScore, multiple) {
        this.lblDiFen.string = baseScore + " x " + multiple + "倍";
      },
      showTboxGetReward: function showTboxGetReward(result, roomId) {
        var that = this;
        if (result.seattb) {
          var task = result.seattb[this._tableScene._mySeatIndex - 1];
          task && task.tbc > 0 && cc.loader.loadRes("prefabs/gameTasks", function(err, prefab) {
            var preFabNode = cc.instantiate(prefab);
            var com = preFabNode.getComponent("ddz_gameTasks");
            var _roomId = roomId;
            task.mixRoomId && (_roomId = task.mixRoomId);
            com.updateProgress(task.tbt, task.tbc, _roomId);
            that.tasksNode && that.tasksNode.addChild(preFabNode);
          }.bind(this));
        }
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_PLAYER_INFO, this._onUpdateInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_READY, this._onGameReady, this);
        ty.NotificationCenter.listen(ddz.EventType.TABLE_INFO_CHAGE, this._tableInfoChange, this);
        ty.NotificationCenter.listen(ddz.EventType.BUY_CHIP_CHANEG, this._onByInChipChange, this);
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.btnBack.node.y = backButtonH);
        ty.NotificationCenter.listen(ddz.EventType.START_MATCHING, this.startAni, this);
        ty.NotificationCenter.listen(ddz.EventType.STOP_MATCHING, this.stopAni, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.removeMatching, this);
        this.matchNode.active = false;
        if (ty.UserInfo.systemType == ty.UserInfo.SYSTEMTYPE.iPhoneXType) {
          var widL = this.jifenLeftNode.getComponent(cc.Widget);
          widL.top = 160;
          var widR = this.jifenRightNode.getComponent(cc.Widget);
          widR.top = 160;
        }
      },
      startAni: function startAni() {
        ddz.LOGD("", "file = [GoldModule] fun = [startAni] queueInfo = " + JSON.stringify(ddz.matchModel.getCurQueueInfo()));
        if (ddz.matchModel.getCurQueueInfo()) this.matchNode.active = false; else {
          this.matchNode.active = true;
          var ani = this.matchingNode.getComponent(cc.Animation);
          var anim = ani.getAnimationState("ddz_matching");
          anim.play();
        }
      },
      stopAni: function stopAni() {
        var ani = this.matchingNode.getComponent(cc.Animation);
        ani.stop();
      },
      removeMatching: function removeMatching() {
        this.matchingNode.removeFromParent();
      },
      _onByInChipChange: function _onByInChipChange(seatId) {
        if (seatId == this._tableScene._mySeatIndex) {
          var mscore = this._tableScene._mySeatinfo.model.m_buyinChip;
          this.setScore("my", mscore);
        }
      },
      _onGameReady: function _onGameReady() {
        this.matchNode.active = false;
        ty.NotificationCenter.trigger(ddz.EventType.STOP_MATCHING);
        this._tableScene.showGoldInfo();
        this.btnBack.node.active = false;
      },
      _tableInfoChange: function _tableInfoChange(tableInfo) {
        this.txtSfee.string = "本局服务费" + tableInfo.config.m_sfee;
      },
      _onUpdateInfo: function _onUpdateInfo(obj) {
        var mscore = 0;
        var userPanel;
        if ("left" == obj.pos) {
          mscore = this._tableScene._leftSeatinfo.model.m_buyinChip;
          userPanel = this.jifenLeftNode;
        } else if ("right" == obj.pos) {
          mscore = this._tableScene._rightSeatinfo.model.m_buyinChip;
          userPanel = this.jifenRightNode;
        }
        userPanel.active = true;
        if ("leave" == obj.type) {
          mscore = 0;
          userPanel.active = false;
        }
        "sit" == obj.type && this._tableScene._rightSeatinfo.hasData && this._tableScene._leftSeatinfo.hasData && this._onGameReady();
        this.setScore(obj.pos, mscore);
      },
      initScore: function initScore() {
        var mscore = this._tableScene._mySeatinfo.model.m_buyinChip;
        this.setScore("my", mscore);
        mscore = 0;
        this._tableScene._leftSeatinfo.hasData && (mscore = this._tableScene._leftSeatinfo.model.m_buyinChip);
        this.setScore("left", mscore);
        mscore = 0;
        this._tableScene._rightSeatinfo.hasData && (mscore = this._tableScene._rightSeatinfo.model.m_buyinChip);
        this.setScore("right", mscore);
      },
      updateAllScore: function updateAllScore(result) {
        var myIndex = this._tableScene._mySeatIndex;
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var checkSeatIsWin = function checkSeatIsWin(seatIndex) {
          var dizhuWin = 1 == result.dizhuwin;
          var isWin = false;
          isWin = seatIndex == result.stat.dizhu ? dizhuWin : !dizhuWin;
          return isWin;
        };
        var seatInfo = result["seat" + myIndex];
        var score = seatInfo[1];
        var delta = seatInfo[0];
        this.upDataScore("my", score, delta, checkSeatIsWin(myIndex));
        seatInfo = result["seat" + leftindex];
        score = seatInfo[1];
        delta = seatInfo[0];
        this.upDataScore("left", score, delta, checkSeatIsWin(leftindex));
        seatInfo = result["seat" + rightindex];
        score = seatInfo[1];
        delta = seatInfo[0];
        this.upDataScore("right", score, delta, checkSeatIsWin(rightindex));
      },
      upDataScore: function upDataScore(pos, scroe, delta, isWin) {
        var lblScoreChange, lblName;
        var deltaStr = hall.GlobalFuncs.formatGold(delta);
        if (isWin) {
          deltaStr = "+" + deltaStr;
          lblName = "lblJiFenChangeAdd";
        } else {
          0 == delta && (deltaStr = "-0");
          lblName = "lblJiFenChange";
        }
        switch (pos) {
         case "my":
          lblScoreChange = this.getScoreLabel(this.jifenNode, lblName);
          break;

         case "left":
          lblScoreChange = this.getScoreLabel(this.jifenLeftNode, lblName);
          break;

         case "right":
          lblScoreChange = this.getScoreLabel(this.jifenRightNode, lblName);
        }
        lblScoreChange.string = deltaStr;
        var that = this;
        that.setScore(pos, scroe);
        var callBack = cc.callFunc(function() {
          lblScoreChange.node.opacity = 255;
          lblScoreChange.string = "";
        });
        var flyAni = cc.sequence(cc.delayTime(5), cc.fadeOut(.2), callBack);
        lblScoreChange.node.runAction(flyAni);
      },
      reSetAddScore: function reSetAddScore() {
        this.getScoreLabel(this.jifenNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenLeftNode, "lblJiFenChange").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChangeAdd").string = "";
        this.getScoreLabel(this.jifenRightNode, "lblJiFenChange").string = "";
      },
      setScore: function setScore(pos, scroe) {
        var lblScore;
        switch (pos) {
         case "my":
          lblScore = this.getScoreLabel(this.jifenNode, "lblJiFen");
          break;

         case "left":
          lblScore = this.getScoreLabel(this.jifenLeftNode, "lblJiFen");
          break;

         case "right":
          lblScore = this.getScoreLabel(this.jifenRightNode, "lblJiFen");
        }
        lblScore.string = hall.GlobalFuncs.formatGold(scroe) + "";
      },
      showResult: function showResult(result) {
        ddz.LOGD("", "file = [DdzTableScene] fun = [_startGameOverAnimation] 金币场显示结算界面");
        this._tableScene._reset();
        ty.NotificationCenter.trigger(ddz.EventType.STOP_MATCHING);
        this.matchNode.active = false;
        if (!this._gameResult) {
          var game_result_wnd = cc.instantiate(this.game_result);
          cc.director.getScene().addChild(game_result_wnd);
          this._gameResult = game_result_wnd.getComponent("ddz_game_result");
          this._gameResult.setTableScene(this._tableScene);
        }
        this._gameResult.show(result);
        var mySeatIndex = this._tableScene._mySeatIndex;
        if (mySeatIndex == result.stat.dizhu) {
          var saveCardsString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ORIGINCARDS, "");
          var saveCardsDic = JSON.parse(saveCardsString);
          var cards = saveCardsDic.myCards;
          var baseCards = saveCardsDic.baseCard;
          cards = cards.concat(baseCards);
          var saveDic = {
            myCards: cards,
            baseCard: baseCards
          };
          hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.ORIGINCARDS, JSON.stringify(saveDic));
        }
        this.scheduleOnce(function() {
          if (result.winShare) {
            ddz.GlobalFuncs.showShareGuideWindow(true, result.winShare.winChip, result.winShare.rewardDoubles, result.winShare.adsCounts);
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "loseTipsWindow", result.winShare.winChip, result.winShare.rewardDoubles ]);
          } else if (result.loseShare) {
            ddz.GlobalFuncs.showShareGuideWindow(false, result.loseShare.loseChip, result.loseShare.rewardDoubles, result.loseShare.adsCounts);
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "winTipsWindow", result.loseShare.loseChip, result.loseShare.rewardDoubles ]);
          } else result.winchips ? ddz.GlobalFuncs.showShareMomentsItem("showy_highTotal", result.winchips) : result.winstreak && ddz.GlobalFuncs.showShareMomentsItem("showy_winningStreak", result.winstreak);
        }.bind(this), 1);
      },
      getScoreLabel: function getScoreLabel(scoreNode, lblName) {
        return scoreNode.getChildByName(lblName).getComponent(cc.Label);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this._tableScene = null;
      },
      reset: function reset() {
        this.lblDiFen.string = "";
        this.jifenLeftNode.active = false;
        this.jifenRightNode.active = false;
        this.matchNode.active = true;
        ty.NotificationCenter.trigger(ddz.EventType.START_MATCHING);
        var lblScoreChange;
        lblScoreChange = this.getScoreLabel(this.jifenNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenLeftNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenLeftNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenRightNode, "lblJiFenChangeAdd");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        lblScoreChange = this.getScoreLabel(this.jifenRightNode, "lblJiFenChange");
        lblScoreChange.string = "";
        lblScoreChange.node.stopAllActions();
        this.btnBack.node.active = true;
      },
      update: function update(dt) {},
      onBack: function onBack() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var tableinfo = this._tableScene.tableInfo();
        var _mixID = tableinfo.mixId;
        var _roomId = tableinfo.roomId();
        if (!_roomId) {
          var _queueInfo = ddz.matchModel.getCurQueueInfo();
          _roomId = _queueInfo.roomId;
        }
        ddz.MsgFactory.getRoomLeave(_roomId, tableinfo.tableId(), this._tableScene._mySeatIndex, _mixID);
      }
    });
    cc._RF.pop();
  }, {} ],
  HallGameWorld: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c136bAOUTpHfaCBjgjO1oTy", "HallGameWorld");
    "use strict";
    var TodoTaskVec = require("TodoTaskVec");
    cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.GameWorld";
        this.model = {
          m_coinList: [],
          m_itemList: [],
          m_diamondList: [],
          m_jewelList: [],
          m_msgPrivateVec: null,
          m_msgGlobalVec: null,
          m_ledList: [],
          m_ledIndex: -1,
          m_ledTableList: [],
          m_ledLast: 0,
          m_ledTableLast: 0,
          m_ledCapacity: 20,
          m_ledBeWork: false,
          m_storeConfig: [],
          m_todoTask: new TodoTaskVec(),
          m_normalRooms: [],
          m_onlineInfos: [],
          personInfo: null
        };
        this.normal = {
          isSelectedPic: false,
          avatarPicIndex: 0,
          m_matchWait: null
        };
        this.firstChargeItem = null;
        hall.LOGD(this._TAG, "ctor in hall._GameWorld");
      },
      destroy: function destroy() {
        this.model = null;
        this.normal = null;
        hall.LOGD(this._TAG, "destroy in hall._GameWorld");
      },
      parsePersonInfo: function parsePersonInfo(result) {
        hall.LOGW("", "file = [HallGameWorld] fun = [parsePersonInfo] userInfo = " + JSON.stringify(result.userInfo));
        this.model.personInfo || (this.model.personInfo = new hall.PersonInfo());
        result.userInfo && this.model.personInfo.parseUserInfo(result.userInfo);
      },
      parseMatchStore: function parseMatchStore(result) {
        var items;
        var tabs = result["tabs"];
        var coinItems;
        var diamondItems;
        var jewelItems;
        result["conf"] && (this.model.m_storeConfig = result["conf"]);
        var i, list, item;
        for (i = 0; i < tabs.length; i++) {
          var tab = tabs[i];
          var sub = tab["subStore"];
          "coin" == sub ? coinItems = tab["items"] : "diamond" == sub ? diamondItems = tab["items"] : "jewel" == sub && (jewelItems = tab["items"]);
        }
        if (coinItems) {
          list = [];
          for (i = 0; i < coinItems.length; i++) {
            item = new hall.StoreItemInfo();
            item.parseStoreItemInfo(coinItems[i]);
            list.push(item);
          }
          this.model.m_coinList = list;
        }
        if (diamondItems) {
          list = [];
          for (i = 0; i < diamondItems.length; i++) {
            item = new hall.StoreItemInfo();
            item.parseStoreItemInfo(diamondItems[i]);
            list.push(item);
          }
          this.model.m_diamondList = list;
        }
        if (jewelItems) {
          list = [];
          for (i = 0; i < jewelItems.length; i++) {
            item = new hall.StoreItemInfo();
            item.parseStoreItemInfo(jewelItems[i]);
            list.push(item);
          }
          this.model.m_jewelList = list;
        }
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MATCH_STORE);
      },
      parseNormalRooms: function parseNormalRooms(result) {
        var rooms = [];
        var sessions = result["sessions"] || [];
        for (var i = 0, len = sessions.length; i < len; i++) rooms.push(new ddz.ConfigRoomSession(sessions[i]));
        this.model.m_normalRooms = rooms;
        this.model.m_onlineInfos = result["onlineInfos"];
      },
      getRoomsByType: function getRoomsByType(type) {
        var room = hall.GlobalFuncs.FindInArrayBuFun(this.model.m_normalRooms, function(element) {
          return element.m_type == type;
        });
        if (room) return room.m_rooms;
        return [];
      },
      getRoomOnlineInfo: function getRoomOnlineInfo(id) {
        var online = this.model.m_onlineInfos[1];
        if ("undefined" != typeof online && null != online[id + ""]) {
          var onlineNum = online[id];
          return onlineNum;
        }
        return -1;
      },
      parseLed: function parseLed(result) {
        var newMessage = [];
        for (var i = 0; i < result.length; i++) if (result[i].text.indexOf("通关奖励") > 0) {
          var _text = result[i].text;
          var startIndex = _text.indexOf("[") + 1;
          var endIndex = _text.indexOf("]");
          var str = _text.substring(startIndex, endIndex);
          var _string = _text.replace(str, hall.GlobalFuncs.SliceStringToLength(str, 8));
          newMessage.push({
            text: _string,
            color: result[i].color,
            size: 28
          });
        }
        var model = this.model;
        model.m_ledList[model.m_ledLast] = newMessage;
        model.m_ledLast = (model.m_ledLast + 1) % model.m_ledCapacity;
      },
      parseGameLed: function parseGameLed(result) {
        var newMessage = [];
        for (var i = 0; i < result.length; i++) if (result[i].text.indexOf("||") > 0) {
          var _text = result[i].text;
          var _arr = _text.split("||");
          var grade = _arr[0];
          var tips = _arr[1];
          var startIndex = tips.indexOf("[") + 1;
          var endIndex = tips.indexOf("]");
          var str = tips.substring(startIndex, endIndex);
          var _string = tips.replace(str, hall.GlobalFuncs.SliceStringToLength(str, 10));
          newMessage.push({
            text: _string,
            color: result[i].color,
            size: 28,
            grade: grade
          });
        }
        var model = this.model;
        model.m_ledTableList.push(newMessage);
      }
    });
    cc._RF.pop();
  }, {
    TodoTaskVec: "TodoTaskVec"
  } ],
  HallInfoModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50753HgbJxOxLex0zDIXcAe", "HallInfoModel");
    "use strict";
    ddz.HallInfoModel = {
      _TAG: "ddz.HallInfoModel",
      cache: {},
      matchs: {},
      rooms: {},
      sessions: {},
      parseHallInfo: function parseHallInfo(value) {
        ddz.LOGD(this._TAG, "parseHallInfo");
        this.sessions = value.sessions;
      },
      getSessionByType: function getSessionByType(type) {
        return this.sessions[type - 1];
      }
    };
    cc._RF.pop();
  }, {} ],
  HallNetWorkCenter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ab5eWt2qFOOocFil2B6RB4", "HallNetWorkCenter");
    "use strict";
    hall.hallNetWorkCenter = {
      _TAG: "hall.hallNetWorkCenter",
      boot: function boot() {
        hall.LOGD(this._TAG, "boot!");
        this.cmdMap = {};
        this.cmdMap[ddz.EventType.MSG_USER_INFO] = this.onReceiveUserInfo;
        this.cmdMap[ddz.EventType.MSG_BAG_INFO] = this.onReceiveBagInfo;
        this.cmdMap[ddz.EventType.MSG_GAME_DATA] = this.onReceiveGameData;
        this.cmdMap[ddz.EventType.MSG_TODO_TASKS] = this.onTodoTask;
        this.cmdMap[ddz.EventType.MSG_DATA_CHANGED] = this.onUpdateChangedData;
        this.cmdMap[ddz.EventType.MSG_USER] = this.onUserName;
        this.cmdMap[ddz.EventType.MSG_PROD_DELIVERY] = this.onProdDelivery;
        this.cmdMap[ddz.EventType.MSG_LOGIN_REWARD] = this.onLoginReward;
        this.cmdMap[ddz.EventType.MSG_LED] = this.onLed;
        this.cmdMap[ddz.EventType.MSG_TODO_QUICK_START] = this._onTodoQuickStart;
        this.cmdMap[ty.EventType.UPDATE_UER_INFO] = this.onUPDATE_UER_INFO;
        this.cmdMap[ty.EventType.MSG_LOG_OUT] = this.onLogout;
        this.cmdMap[ddz.EventType.MSG_ROOM] = this.onRoomAction;
        this.cmdMap[ddz.EventType.MSG_MODULE_TIP] = this.onModuleTip;
        this.cmdMap[ddz.EventType.MSG_MESSAGE] = this.onMessage;
        this.cmdMap[ddz.EventType.MSG_CUSTOM_RANK] = this.onRankList;
        this.cmdMap[ddz.EventType.MSG_COMPLAIN] = this.onComplain;
        this.cmdMap[ddz.EventType.MSG_STORE_INFO] = this.onStoreInfo;
        this.cmdMap[ddz.EventType.MSG_TABLE_POPWND] = this.onClassicPopwnd;
        this.cmdMap[ddz.EventType.MSG_STORE] = this.onStore;
        this.cmdMap[ddz.EventType.MSG_CUSTOMTABLE] = this.onCustomTable;
        this.cmdMap[ddz.EventType.MSG_ROOM_ONLINE_INFO] = this.onRoomOnlineInfo;
        this.cmdMap[ddz.EventType.MSG_CASH] = this.onCash;
        this.cmdMap[ddz.EventType.MSG_CHARGE_NOTIFY] = this.onChargeNotify;
        ty.NotificationCenter.listen(ty.EventType.TCP_OPENED, this.onTCP_Open, this);
        ty.NotificationCenter.listen(ty.EventType.TCP_RECEIVE, this.onReceiveTCP_Msg, this);
        ty.NotificationCenter.listen(ddz.EventType.MSG_ON_LOC, this._onLocInfo, this);
        ty.NotificationCenter.listen(ty.EventType.GET_USER_FEATURE_SUCCESS, this._userFeature, this);
      },
      shut: function shut() {
        this.cmdMap = {};
        ty.NotificationCenter.ignoreScope(this);
      },
      onTCP_Open: function onTCP_Open() {
        hall.MsgFactory.bindUser();
      },
      onReceiveTCP_Msg: function onReceiveTCP_Msg(value) {
        var msgCmd = value.cmd;
        var result = value.result;
        if (result) {
          var gameId = result.gameId;
          if (gameId === ty.SystemInfo.hallId) {
            var func = this.cmdMap[msgCmd];
            func ? func.call(this, value) : hall.LOGD(this._TAG, "未注册关于消息 ： " + msgCmd + " 的监听！");
          } else if (value.cmd == ddz.EventType.CMD_STORE_INFO) {
            var func = this.cmdMap[msgCmd];
            func ? func.call(this, value) : hall.LOGD(this._TAG, "未注册关于消息 ： " + msgCmd + " 的监听！");
          } else if (value.cmd == ddz.EventType.MSG_LED) {
            var func = this.cmdMap[msgCmd];
            func ? func.call(this, value) : hall.LOGD(this._TAG, "未注册关于消息 ： " + msgCmd + " 的监听！");
          }
        } else if (msgCmd == ty.EventType.MSG_LOG_OUT) {
          var errMsg = value.error ? value.error.info : null;
          errMsg && hall.MsgBoxManager.showToast({
            title: errMsg
          });
        }
      },
      _onLocInfo: function _onLocInfo(larr) {
        ddz.LOGD("", "file = [HallNetWorkCenter] fun =[_onLocInfo] ");
        ddz.matchModel.cleanWaitInfo();
        var gameid = parseInt(larr[0]);
        var roomid = parseInt(larr[1]);
        var tableid = parseInt(larr[2]);
        var seatId = parseInt(larr[3]);
        var sceneInfo = ty.UserInfo.onShowParam || wx.getLaunchOptionsSync();
        hall.LOGW(null, "file = [HallNetWorkCenter] fun = [_onLocInfo] sceneInfo = " + JSON.stringify(sceneInfo));
        var scene = ty.UserInfo.scene_id || sceneInfo.scene;
        var query = sceneInfo.query;
        var shareTicket = sceneInfo.shareTicket;
        var queryS = hall.GlobalFuncs.replaceToStringWithDic(query);
        if (ddz.qrCodeOption.withQrCode(scene)) {
          var par = "";
          query.hasOwnProperty("scene") ? par = query.scene : sceneInfo.hasOwnProperty("path") && (par = sceneInfo.path);
          ddz.qrCodeOption.runOption(par, scene);
        }
        if (1074 == scene && query && "fuhao_guanfang" == query.from) {
          if (query.topage && "fuli" == query.topage) {
            hall.LOGW("", "file = [HallNetWorkCenter] fun = [_onLocInfo] fuli");
            ddz.gameModel.getDayInviteReward();
            ddz.isClickShareReward = true;
          } else ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.gongZhongHaoCard);
          query.param1 && query.param2 && ddz.gameModel.getBoxReward(parseInt(query.param1), query.param2);
        } else if (1035 == scene && query && "fuhao_guanfang" == query.from) ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.gongZhongHaoMenu); else if (1104 == scene) {
          hall.LOGW("", "file = [HallNetWorkCenter] fun = [_onLocInfo] 小程序进入");
          ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.addApplet);
        }
        if (query && query.sourceCode) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, query.inviteCode, ddz.Share.clickStatShareType[query.sourceCode], query.imageType, "GameStart" ]);
          if (query.inviteCode) {
            ddz.gameModel.bindInviteCode_ID(parseInt(query.inviteCode));
            query.sourceCode == ddz.Share.onShareType.clickStatShareTypeSeekHelpFriend && ddz.gameModel.getHelpBoxReward(parseInt(query.inviteCode));
          }
          if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeInviteFriend) {
            var ftID = query.ftID ? query.ftID : "0000";
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeInviteFriendCardSuccess, [ ftID, query.inviteCode ]);
          }
          if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeGiveProp) {
            var treasureID = query.treasureID ? query.treasureID : "";
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeGivePropSuccess, [ treasureID, query.inviteCode ]);
          }
          if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeNewUserGifts) {
            var giftID = query.giftID ? query.giftID : "";
            ddz.gameModel.getNewGiftReward(query.inviteCode, giftID);
          }
          var curDay = hall.GlobalTimer.getCurDay();
          var lastDay = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.LAST_LOGIN_TIME, "");
          if (curDay != lastDay && query.inviteName && query.sourceCode != ddz.Share.onShareType.clickStatShareTypeInviteFriend && query.sourceCode != ddz.Share.onShareType.clickStatShareTypeGiveProp && query.inviteCode != ty.UserInfo.userId) {
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.LAST_LOGIN_TIME, curDay);
            var string = "<color=#1A6951>成功帮助 " + query.inviteName + " 获得</color><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> +1<c/><br/><color=#1A6951>每期仅能帮助一位好友哦</c>";
            ddz.GlobalFuncs.showTipsWindowWithString(string, "确定");
          }
        } else ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, query.from, query.appid, "GameStart" ]);
        hall.GlobalFuncs.setInLocalStorage(ddz.Share.LAST_LOGIN_TIME, hall.GlobalTimer.getCurDay());
        ddz.Share.isOnShare && ddz.Share.playAnimationAfterShareWithType();
        ddz.MsgFactory.getMatchRecords();
        ddz.Share.isOnShare = false;
        if ("" != ty.SystemInfo.treasureID && query.inviteCode) {
          var _boxUserId = query.inviteCode;
          ddz.Share.getOpenGid(shareTicket, _boxUserId);
          ty.SystemInfo.shareTicket = "";
        }
        if ("" != ty.SystemInfo.ftID) {
          ddz.friendModel.enterFriendTable(ty.SystemInfo.ftID);
          ty.SystemInfo.shareTicket = "";
        }
        if (ddz.waitGetRevial && "send" == ddz.waitGetRevial.type) {
          var needCount = ddz.waitGetRevial.needCount;
          if ("arena" == ddz.waitGetRevial.matchType) {
            ddz.waitGetRevial.type = "waitRecive";
            ddz.waitGetRevial.curCount = 0;
          } else ddz.waitGetRevial = {
            type: "waitRecive",
            curCount: 0,
            needCount: needCount
          };
          for (var i = 0; i < needCount; i++) ddz.gameModel.shareToGetreward(ddz.waitGetRevial.sharePoint || ddz.Share.SharePointType.firstFail);
        }
        var shareTicket;
        if (0 != roomid && 0 != tableid) {
          hall.MsgFactory.getQuickStart(ty.UserInfo.userId, gameid, roomid, hall.staticSystemInfo.version, null, null, null, tableid);
          if (seatId > 5 && "" != ty.SystemInfo.shareTicket) {
            shareTicket = ty.SystemInfo.shareTicket;
            hall.GlobalFuncs.isInAtScene("TableScene") && ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
            hall.GlobalFuncs.gotoRank(shareTicket);
          }
        } else {
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
          if ("" != ty.SystemInfo.shareTicket) {
            shareTicket = ty.SystemInfo.shareTicket;
            hall.GlobalFuncs.gotoRank(shareTicket);
          } else ddz.matchResultPanel || ddz.matchRevivalPanel || ddz.arenaResultPanel || ddz.gameResultPanel || ddz.hongBaoPanel || ddz.bannerResurgenceWindow || hall.GlobalFuncs.gotoDdz();
        }
        ty.SystemInfo.shareTicket = "";
      },
      onReceiveUserInfo: function onReceiveUserInfo(value) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeTCP_Success, []);
        this.onUserInfo(value);
        hall.MsgFactory.bindGame(ty.SystemInfo.gameId);
        ddz.gameModel.sendVersion();
        var funList = [ ddz.matchModel.matchUpdate, ddz.matchModel.getMatchDes, ddz.gameModel.getOldUserChipReward, ddz.gameModel.getArenaMatchConfig, ddz.gameModel.getAlmsConfig, ddz.gameModel.getServerConfig, ddz.gameModel.getBringConfig, ddz.gameModel.getTableBannerConfig, ddz.gameModel.getTableTopBannerConfig, ddz.gameModel.getGoldTableBannerConfig, ddz.gameModel.getMatchTableBannerConfig, ddz.gameModel.getRoomListBannerConfig, ddz.gameModel.getBannerResurgenceConfig, ddz.gameModel.getSkipCustomConfig, ddz.gameModel.getRewardMethod, ddz.gameModel.getBoxShareSuccessTips, ddz.gameModel.queryInviteConfig, ddz.gameModel.getCommonConfig, ddz.gameModel.getFightMatchAdConfig, ddz.gameModel.getMatchingMassageConfig, ddz.gameModel.getResurgenceConfigConfig, ddz.gameModel.getRewardAnbuchangConfigConfig, ddz.gameModel.getcongratulationGetRedPacketConfig, ddz.gameModel.getShareMomentsConfig, ddz.gameModel.getTempData, ddz.gameModel.getOpenBox, ddz.gameModel.getDayInviteReward, ddz.gameModel.getDiversionConfig ];
        hall.MsgFactory.getTimeStamp();
        hall.MsgFactory.getSystemMessageInfo();
        ddz.GlobalFuncs.getFriendUserIds();
        var runOneFun = function runOneFun() {
          if (funList.length > 0) {
            var func = funList.shift();
            func();
            requestAnimationFrame(runOneFun);
          }
        };
        runOneFun();
      },
      _userFeature: function _userFeature(val) {
        if (val.data && val.data.loc) {
          hall.LOGW("", "file = [HallNetWorkCenter] fun = [_userFeature] val = " + JSON.stringify(val));
          ty.UserInfo.featureInfo = val.data;
          ty.UserInfo.isInBSGS = hall.GlobalFuncs.checkBSGS(ty.UserInfo.featureInfo.loc[2]);
          ty.UserInfo.ip = ty.UserInfo.featureInfo.ip;
          ddz.gameModel.isBringVersion && (ty.UserInfo.isInBSGS = true);
        }
        hall.LOGW("", "file = [HallNetWorkCenter] fun = [_userFeature] ty.UserInfo.isInBSGS = " + ty.UserInfo.isInBSGS);
      },
      onReceiveBagInfo: function onReceiveBagInfo(value) {
        if ("undefined" == typeof value) return;
        hall.ME.parseBagInfo(value);
      },
      onReceiveGameData: function onReceiveGameData(value) {
        hall.LOGW(null, "file = [HallNetWorkCenter] fun = [onReceiveGameData] ");
        this.onGameData(value);
        hall.MsgFactory.getHallInfo(ty.SystemInfo.gameId);
      },
      onTodoTask: function onTodoTask(value) {
        value && value["result"] && hall.gameWorld.model.m_todoTask.parseTodoTask(value["result"]);
      },
      onUpdateChangedData: function onUpdateChangedData(argument) {
        hall.LOGD(this._TAG, "onUpdateGold -------------------------");
        if ("undefined" != typeof argument) {
          var result = argument["result"];
          if ("undefined" != typeof result && "undefined" != typeof result["changes"]) {
            var gameId = result.gameId;
            hall.LOGD(this._TAG, "gameid = " + gameId);
            for (var i = 0; i < result["changes"].length; i++) {
              var curValue = result["changes"][i];
              if ("undefined" == typeof curValue) continue;
              if ("gdata" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新gdata");
                hall.MsgFactory.getGameData(gameId);
              } else if ("item" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新道具");
                hall.MsgFactory.getBagInfo();
              } else if ("udata" == curValue) {
                hall.LOGD(this._TAG, "update_notify,更新钻石金币");
                hall.MsgFactory.getUserInfo(gameId);
              }
            }
          }
        }
      },
      onUserName: function onUserName(argument) {
        var data = argument["result"];
        if ("undefined" != typeof data) {
          var action = data["action"];
          if ("get_name" == action) {
            var code = data["code"];
            0 != code && code ? hall.MsgBoxManager.showToast({
              title: "你输入的ID不正确，请输入有效ID."
            }) : ty.NotificationCenter.trigger(ddz.EventType.MSG_NAME_BACK, data);
          } else action == ddz.EventType.ACTION_SYNC_TIMESTAMP && ty.NotificationCenter.trigger(ddz.EventType.GET_TIMESTAMP, data);
        }
      },
      onProdDelivery: function onProdDelivery(params) {
        hall.LOGW("", "file = [HallNetWorkCenter] fun = [onProdDelivery] params = " + JSON.stringify(params));
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PAY_SUCCESS, params);
      },
      onLoginReward: function onLoginReward(argument) {
        var result = argument[0]["result"];
        if ("undefined" != typeof result) {
          var success = result["success"];
          if (success) {
            hall.ME.loginRewardinfo.parse(result);
            ty.NotificationCenter.trigger(ddz.EventType.MSG_REWARD_SUCCESS);
          }
        }
      },
      onUserInfo: function onUserInfo(argument) {
        if ("undefined" == typeof argument) return;
        this._bBindGame;
        ddz.LOGD("", "file = [HallNetWorkCenter] fun = [onUserInfo] ");
        ty.UserInfo.userId = argument["result"]["userId"];
        ddz.LOGD(null, "onUserInfo argument = " + JSON.stringify(argument));
        hall.ME.parseUserInfo(argument);
        ty.NotificationCenter.trigger(ty.EventType.UPDATE_UER_INFO, hall.ME);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COIN_NUMBER);
        ty.NotificationCenter.trigger(ddz.EventType.SET_LOSS_MONEY_NUMBER);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.gongZhongHaoCard);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.gongZhongHaoMenu);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.firstUseJiPaiQi);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.addApplet);
        var curScene = cc.director.getScene();
        "Ddz" == curScene.name && ddz.gameModel.checkShareReward(ddz.Share.SharePointType.getDayFirstLogin);
        hall.MsgFactory.getBagInfo();
        hall.MsgFactory.getStoreInfo("update");
        ddz.gameModel.queryWatchVideoReward();
      },
      onGameData: function onGameData(argument) {
        hall.LOGD(this._TAG, "onGameData");
        if ("undefined" != typeof argument) {
          hall.ME.parseGameData(argument);
          hall.ME.hallGData.m_winchipstats && hall.ME.hallGData.m_winchipstats.length > 0 && ty.NotificationCenter.trigger(ddz.EventType.MSG_GDATA_BACK);
          !hall.GlobalFuncs.checkMsgWithGameId(argument, ddz.GameId);
          1 == hall.ME.gdataInfo.m_loginsum && hall.MsgFactory.getUserInfo(ddz.GameId);
          hall.MsgFactory.getEveryTaskInfo(ddz.GameId, "update");
          hall.MsgFactory.getPersonalMsg();
          hall.MsgFactory.getGlobalMsg();
        }
      },
      onLed: function onLed(params) {
        var result = params["result"];
        if (result && "hall6" == result.scope) {
          hall.gameWorld.parseLed(result.text);
          var model = hall.gameWorld.model;
          model.m_ledBeWork || ty.NotificationCenter.trigger(ddz.EventType.CMD_LED_RECEIVE, result);
        } else if (result && "6" == result.scope) {
          hall.gameWorld.parseGameLed(result.text);
          var model = hall.gameWorld.model;
          model.m_ledBeWork || ty.NotificationCenter.trigger(ddz.EventType.CMD_LED_RECEIVE, result);
        }
      },
      _onTodoQuickStart: function _onTodoQuickStart(param) {
        hall.MsgFactory.getQuickStart(ty.UserInfo.userId, param["gameid"], param["roomid"], hall.staticSystemInfo.version, null, null, null);
      },
      onUPDATE_UER_INFO: function onUPDATE_UER_INFO(userInfo) {
        var interval = userInfo.objectInfo.m_heart.heartbeat;
      },
      onLogout: function onLogout(argument) {
        hall.ME.isOtherLogin = true;
        var err = argument["error"];
        err && hall.MsgBoxManager.showToast({
          title: err["info"]
        });
      },
      onRoomAction: function onRoomAction(params) {
        hall.LOGD(null, this._TAG, "onRoomAction -------------------- ");
      },
      onCash: function onCash(argument) {
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CASH_RESULT, argument);
      },
      onChargeNotify: function onChargeNotify(params) {},
      onModuleTip: function onModuleTip(argument) {
        var data = argument["result"];
        if ("undefined" != typeof data) {
          var action = data["action"];
          "update" == action && hall.ME.msgInfo.praseModultTip(data["modules"]);
        }
      },
      onRankList: function onRankList(argument) {
        ty.NotificationCenter.trigger(ddz.EventType.MSG_CUSTOM_RANK, argument);
      },
      onMessage: function onMessage(argument) {
        var data = argument["result"];
        if ("undefined" != typeof data) {
          var action = data["action"];
          var list = data["list"];
          if ("sys_msg_list" == action) {
            hall.ME.msgInfo.parseSysInfo(list);
            ty.NotificationCenter.trigger(ddz.EventType.MSG_SYS_MESSAGE_BACK);
          } else if ("msg_receive_list" == action) {
            hall.ME.msgInfo.parseReceiveInfo(list);
            ty.NotificationCenter.trigger(ddz.EventType.MSG_REC_MESSAGE_BACK);
          } else if ("msg_send_list" == action) {
            hall.ME.msgInfo.parseSendInfo(list);
            ty.NotificationCenter.trigger(ddz.EventType.MSG_SEND_MESSAGE_BACK);
          } else if ("msg_send" == action) {
            var code = data["code"];
            var msgTitle = 0 == code ? "发送成功" : "发送失败";
            hall.MsgBoxManager.showToast({
              title: msgTitle
            });
          } else if ("unread_count" == action) {
            var unReadCount = data["chat_unread"];
            var sysUnread = data["sys_unread"];
            unReadCount ? hall.GlobalFuncs.setInLocalStorage(hall.HAS_MAIL_KEY, true) : hall.GlobalFuncs.setInLocalStorage(hall.HAS_MAIL_KEY, false);
          } else if ("list" == action) ty.NotificationCenter.trigger(ddz.EventType.RECIVE_MESSAGE_LIST, data); else if ("m_list" == action) {
            ddz.gameModel.notifyMailMessage = [];
            ddz.gameModel.messageCount = 0;
            var list = data.msgs;
            if (list.length > 0) {
              for (var i = 0; i < list.length; i++) if (list[i].text.indexOf("fuhao") >= 0) {
                var _info = {};
                var index_2 = list[i].text.indexOf("#");
                if (index_2 > 0) {
                  _info.versions = list[i].text.slice(list[i].text.indexOf("fuhao") + 5, index_2);
                  _info.title = list[i].text.slice(list[i].text.indexOf("fuhao") + 5, index_2);
                }
                _info.timer = list[i].time;
                _info.content = list[i].text;
                _info.sign = "富豪斗地主运营团队";
                _info.msgid = list[i].id;
                _info.get = list[i].get;
                _info.attachment = list[i].attachment;
                0 == list[i].get && ddz.gameModel.messageCount++;
                ddz.gameModel.notifyMailMessage[i] = _info;
              }
              ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COMMON_CONFIG);
            }
          } else if ("m_receive" == action) {
            hall.MsgFactory.getSystemMessageInfo();
            var itemlist = data["itemlist"];
            var countNum = itemlist.length;
            var coinNum;
            var diamondNum;
            var jipaiqinum;
            if (countNum > 0) {
              for (var i = 0; i < countNum; i++) "user:chip" == itemlist[i].itemId ? coinNum = itemlist[i].count : "item:1311" == itemlist[i].itemId ? diamondNum = itemlist[i].count : "item:1363" == itemlist[i].itemId && (jipaiqinum = itemlist[i].count);
              ddz.GlobalFuncs.playMultiReward(coinNum, diamondNum, jipaiqinum, countNum, ddz.gameModel.messageRewardTitle);
            }
          }
        }
      },
      onComplain: function onComplain(argument) {
        var result = argument;
        var error = result["error"];
        var str;
        if (error) str = error["info"]; else {
          var data = result["result"]["success"];
          str = data["info"];
        }
        hall.MsgBoxManager.showToast({
          title: str
        });
      },
      onStoreInfo: function onStoreInfo(argument) {
        if ("undefined" != typeof argument && "undefined" != typeof argument["result"]) {
          hall.gameWorld.parseMatchStore(argument["result"]);
          ty.NotificationCenter.trigger(ddz.EventType.STORE_INFO_UPDATE);
        }
      },
      onClassicPopwnd: function onClassicPopwnd(argument) {
        hall.LOGD(this._TAG, "onClassicPopwnd receivemsg-------------------------");
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_POP_WINDOW, argument);
      },
      onStore: function onStore(argument) {
        var data = argument[0]["result"];
        if ("undefined" != typeof data) {
          var action = data["action"];
          var code = data["code"];
          if ("jewel_give" == action) if (0 == code) ; else var info = data["info"];
        }
      },
      onCustomTable: function onCustomTable(params) {
        var data = params["result"];
        if (data) {
          var action = data["action"];
          "game_data" == action ? ty.NotificationCenter.trigger(ddz.EventType.MSG_CUSTOMTABLE_GAMEDATA, data) : "fight_data" == action && ty.NotificationCenter.trigger(ddz.EventType.MSG_CUSTOMTABLE_FIGHTDATA, data);
        }
      },
      onRoomOnlineInfo: function onRoomOnlineInfo(value) {}
    };
    hall.hallNetWorkCenter.boot();
    cc._RF.pop();
  }, {} ],
  HallUserInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0369MsCbhNGoVjUsAwG2A5", "HallUserInfo");
    "use strict";
    require("LoginRewardInfo");
    require("UserInfoUData");
    require("UserInfoGdata");
    require("RebateRankInfo");
    require("LoginInfo");
    require("NormalInfo");
    require("MsgInfo");
    require("RebateRankInfo");
    require("UserHeartBeat");
    require("MatchInfo");
    hall.HallUserInfo = cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.HallUserInfo";
        this.loc = null;
        this.udataInfo = new hall.UserInfoUData();
        this.gdataInfo = new hall.UserInfoGdata();
        this.hallGData = new hall.UserInfoGdata();
        this.loginInfo = new hall.LoginInfo();
        this.loginRewardinfo = new hall.LoginRewardInfo();
        this.normalInfo = new hall.NormalInfo();
        this.msgInfo = new hall.MsgInfo();
        this.matchInfo = new hall.MatchInfo();
        this.mrebateRank = new hall.RebateRankInfo();
        this.newTeachState = 0;
        this.isOtherLogin = false;
        this.objectInfo = {
          m_heart: new hall.UserHeartBeat(),
          m_pMedalInfos: []
        };
        hall.LOGD(this._TAG, "in ctor");
      },
      getName: function getName() {
        var name = this.udataInfo.m_name;
        0 == name.length && (name = "游客" + this.normalInfo.userId);
        return name;
      },
      getChip: function getChip() {
        return this.udataInfo.m_chip ? this.udataInfo.m_chip : 0;
      },
      starHeadId: function starHeadId() {
        return this.gdataInfo.starHeadId();
      },
      changeChip: function changeChip(param) {
        this.udataInfo.m_chip += param;
      },
      setChip: function setChip(param) {
        this.udataInfo.m_chip = param;
      },
      setAsRandom: function setAsRandom() {
        this.udataInfo.m_sex = parseInt(Math.random());
        this.gdataInfo.m_winrate["pt"] = 534 + parseInt(100 * Math.random());
        this.gdataInfo.m_winrate["wt"] = 254 + parseInt(200 * Math.random());
        var len = ddz.ROBOT_NAMES.length;
        this.udataInfo.m_name = ddz.ROBOT_NAMES[parseInt(Math.random() * len)];
        this.udataInfo.m_purl = "http://ddz.image.tuyoo.com/avatar/head_360_08.png";
        this.udataInfo.m_isBeauty = false;
        this.normalInfo.m_localCoin = 429 + parseInt(382 * Math.random());
        this.normalInfo.m_chip = 899 + parseInt(729 * Math.random());
        this.normalInfo.userId = 300 + parseInt(1e3 * Math.random());
        var exp = 839 + parseInt(539 * Math.random());
        this.gdataInfo.m_experience[0] = exp;
        this.gdataInfo.m_level = hall.GlobalFuncs.GetLevelByExp(exp);
        this.gdataInfo.m_experience[1] = hall.GlobalFuncs.GetExpByLevel(this.gdataInfo.m_level - 1);
        this.gdataInfo.m_experience[2] = hall.GlobalFuncs.GetExpByLevel(this.gdataInfo.m_level);
      },
      parseUserInfo: function parseUserInfo(json) {
        if (json) {
          var result = json["result"];
          this.udataInfo.parse(result["udata"]);
          this.gdataInfo.parseGdata(result["gdata"]);
          this.normalInfo.userId = result["userId"];
          if ("undefined" != result["loc"]) {
            ty.UserInfo.loc = result["loc"];
            this.loc = result["loc"];
            this.handleLoc();
          } else this.loc = null;
        }
      },
      parseUserInfoDDZ: function parseUserInfoDDZ(json) {
        if (json) {
          var result = json["result"];
          this.udataInfo.parse(result["udata"]);
          this.gdataInfo.parseGdata(result["gdata"]);
          this.normalInfo.userId = result["userId"];
        }
      },
      parseBagInfo: function parseBagInfo(json) {
        if (json) {
          var result = json["result"];
          var bagList = result["normal_list"];
          this.udataInfo.jiPaiQiCount = 0;
          this.udataInfo.diamondCount = 0;
          if (!bagList || "undefined" == typeof bagList || bagList.length < 1) return;
          for (var i = 0; i < bagList.length; i++) {
            var bagInfo = bagList[i];
            var bagID = bagInfo["id"];
            if (1311 == bagID) {
              this.udataInfo.diamondInfo = bagInfo;
              this.udataInfo.diamondCount = bagInfo["num"];
            } else 1363 == bagID && (this.udataInfo.jiPaiQiCount = bagInfo["num"]);
          }
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_DIAMOND_NUMBER, this.udataInfo.diamondCount);
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_JIPAIQI);
        }
      },
      parseGameData: function parseGameData(json) {
        if (json) {
          var result = json["result"];
          var gameId = result["gameId"];
          hall.LOGD(null, "gameId = " + gameId);
          gameId == ddz.GameId ? this.gdataInfo.parseGdata(result["gdata"]) : gameId == ty.SystemInfo.hallId && this.hallGData.parseGdata(result["gdata"]);
        }
      },
      handleLoc: function handleLoc() {
        if (this.loc) {
          var larr = this.loc.split(".");
          hall.LOGD(this._TAG, "send loc event ");
          ty.NotificationCenter.trigger(ddz.EventType.MSG_ON_LOC, larr);
        }
      },
      parseLoginRewardFlipCard: function parseLoginRewardFlipCard(json) {
        json && this.loginInfo.parse(json);
      },
      parseHallInfo: function parseHallInfo(json) {},
      parseAsPlayer: function parseAsPlayer(seat) {
        hall.LOGD(this._TAG, "ddz.UserInfo parseAsPlayer begin");
        "undefined" != typeof seat["uid"] && (this.normalInfo.userId = seat.uid);
        "undefined" != typeof seat["userId"] && (this.normalInfo.userId = seat["userId"]);
        if (0 == this.normalInfo.userId) {
          this.clean();
          return;
        }
        "undefined" != typeof seat["name"] && (this.udataInfo.m_name = seat["name"]);
        "undefined" != typeof seat["userName"] && (this.udataInfo.m_name = seat["userName"]);
        if ("undefined" != typeof seat["chip"]) {
          this.udataInfo.m_chip = seat["chip"];
          hall.LOGD(this._TAG, "parseAsPlayer chip = " + this.gdataInfo.m_chip);
        }
        "undefined" != typeof seat["gold"] && (this.normalInfo.m_gold = seat["gold"]);
        "undefined" != typeof seat["sex"] && (this.udataInfo.m_sex = seat["sex"]);
        "undefined" != typeof seat["fangyan"] && (this.normalInfo.m_fangyan = seat["fangyan"]);
        "undefined" != typeof seat["picurl"] && (this.udataInfo.purl = seat["picurl"]);
        "undefined" != typeof seat["purl"] && (this.udataInfo.m_purl = seat["purl"]);
        "" == this.udataInfo.m_purl && (this.udataInfo.m_purl = "http://ddz.image.tuyoo.com/avatar/head_360_08.png");
        hall.LOGD(null, "User Pic is : " + this.udataInfo.m_purl);
        "undefined" != typeof seat["isBeauty"] && (this.udataInfo.m_isBeauty = seat["isBeauty"]);
        if ("undefined" != typeof seat["exp"]) {
          var exp = seat["exp"];
          this.gdataInfo.m_experience[0] = exp;
          this.gdataInfo.m_level = hall.GlobalFuncs.GetLevelByExp(exp);
          this.gdataInfo.m_experience[1] = hall.GlobalFuncs.GetExpByLevel(this.gdataInfo.m_level - 1);
          this.gdataInfo.m_experience[2] = hall.GlobalFuncs.GetExpByLevel(this.gdataInfo.m_level);
        }
        "undefined" != typeof seat["plays"] && (this.gdataInfo.m_winrate["pt"] = seat["plays"]);
        "undefined" != typeof seat["charm"] && (this.gdataInfo.m_charm = seat["charm"]);
        "undefined" != typeof seat["starid"] ? this.gdataInfo.m_starHeadId = seat["starid"] : this.gdataInfo.randomSetStarHeadId(this.udataInfo.m_sex);
        "undefined" != typeof seat["wins"] && (this.gdataInfo.m_winrate["wt"] = seat["wins"]);
        if ("undefined" != typeof seat["vipzuan"]) {
          this.udataInfo.m_vip = 0;
          this.normalInfo.m_diamondCount = [];
          for (var t = 0; t < seat["vipzuan"].length; t++) if ("undefined" != typeof seat["vipzuan"][t]) {
            var v = seat["vipzuan"][t];
            v >= 5 && v <= 8 ? this.udataInfo.m_vip = v - 4 : v >= 11 && v <= 14 && (this.normalInfo.m_diamondCount[v - 11] = 1);
          }
        }
        "undefined" != typeof seat["level"] && (this.gdataInfo.m_level = seat["level"]);
        "undefined" != typeof seat["title"] && (this.normalInfo.m_levelTitle = seat["title"]);
        if ("undefined" != typeof seat["skillScoreInfo"]) {
          this.gdataInfo.m_skillScoreInfo = null;
          this.gdataInfo.m_skillScoreInfo = seat["skillScoreInfo"];
        } else {
          this.gdataInfo.m_skillScoreInfo = null;
          hall.LOGD(this._TAG, "牌桌里，服务器返回的大师分信息为空");
        }
        hall.LOGD(this._TAG, "ddz.UserInfo parseAsPlayer successed");
      },
      _sortByTime: function _sortByTime(o1, o2) {
        return o2["medal_getmedaltime"] - o1["medal_getmedaltime"];
      },
      clean: function clean() {
        this.gdataInfo.m_winrate = [];
        this.udataInfo.m_vip = 0;
        this.udataInfo.m_sex = 0;
        this.udataInfo.m_name = "";
        this.udataInfo.m_purl = "";
        this.udataInfo.m_isBeauty = false;
        this.objectInfo.m_pMedalInfos = [];
      }
    });
    cc._RF.pop();
  }, {
    LoginInfo: "LoginInfo",
    LoginRewardInfo: "LoginRewardInfo",
    MatchInfo: "MatchInfo",
    MsgInfo: "MsgInfo",
    NormalInfo: "NormalInfo",
    RebateRankInfo: "RebateRankInfo",
    UserHeartBeat: "UserHeartBeat",
    UserInfoGdata: "UserInfoGdata",
    UserInfoUData: "UserInfoUData"
  } ],
  HistoryModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb76cTM49VIGpZ0t2k6XgbJ", "HistoryModel");
    "use strict";
    ddz.historyModel = {
      historyData: [],
      parseHistory: function parseHistory(result) {
        this.historyData = [];
        if (result.records && result.records.length > 0) {
          var _records = result.records;
          for (var i = 0; i < _records.length; i++) this.parseResults(_records[i].results, _records[i].curSeatId, _records[i].time, _records[i].totalRound, _records[i].curRound, _records[i].palyMode);
        }
      },
      parseResults: function parseResults(results, _mySeatIndex, timer, totalRound, curRound, palyMode) {
        ddz.detailsModel.parseResults(results);
        ddz.detailsModel.setIsHisTory(true);
        ddz.detailsModel.setMySeatIndex(_mySeatIndex);
        var data = {};
        data.avatars = ddz.detailsModel.getAvatars();
        var sumScore = ddz.detailsModel.getSumScore();
        data.score = sumScore[_mySeatIndex - 1];
        data.timer = timer;
        data.mySeatIndex = _mySeatIndex;
        data.results = results;
        data.totalRound = totalRound;
        data.curRound = curRound;
        data.palyMode = palyMode;
        this.historyData.push(data);
      },
      getHistoryData: function getHistoryData() {
        return this.historyData;
      },
      getAvatars: function getAvatars(index) {
        var avatars = [];
        this.historyData[index] && (avatars = this.historyData[index].avatars);
        return avatars;
      },
      getScore: function getScore(index) {
        var score = 0;
        this.historyData[index] && (score = this.historyData[index].score);
        return score;
      },
      getPlayMode: function getPlayMode(index) {
        var playMode = "";
        this.historyData[index] && (playMode = this.historyData[index].palyMode);
        return playMode;
      },
      getTimer: function getTimer(index) {
        var timer = 0;
        this.historyData[index] && (timer = this.historyData[index].timer);
        return timer;
      },
      getMySeatIndex: function getMySeatIndex(index) {
        var mySeatIndex = 0;
        this.historyData[index] && this.historyData[index].mySeatIndex && (mySeatIndex = this.historyData[index].mySeatIndex);
        return mySeatIndex;
      }
    };
    cc._RF.pop();
  }, {} ],
  HttpUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d7aee6LxlBL6fyA1Pj6zQe", "HttpUtil");
    "use strict";
    ty.HttpUtil = {
      httpPost: function httpPost(cfgObj, httpType, successCallBack, failCallBack) {
        hall.LOGD("ty.HttpUtil.httpPost", "res =  ...");
        wx.request({
          url: cfgObj.url,
          data: cfgObj.postData,
          header: cfgObj.header,
          method: httpType,
          dataType: "json",
          success: function success(res) {
            hall.LOGD("ty.HttpUtil.httpPost", "res =  " + JSON.stringify(res));
            if (200 == res.statusCode) {
              res.data && res.data.hasOwnProperty("/api/bilog5/clientlog") && "ok" == res.data["/api/bilog5/clientlog"] && hall.LOGD("ty.HttpUtil.httpPost", "post success! ");
              successCallBack && successCallBack(res);
            } else hall.LOGD("ty.HttpUtil.httpPost", "statusCode:" + res.statusCode);
          },
          fail: function fail(res) {
            hall.LOGD("ty.HttpUtil.httpPost", "post error! " + cfgObj.url);
            failCallBack && failCallBack(res);
          },
          complete: function complete(res) {
            hall.LOGD("ty.HttpUtil.httpPost", "post complete! ");
          }
        });
      },
      httpGet: function httpGet(cfgObj, successcb, failcb) {
        hall.LOGD("ty.HttpUtil.httpGet", "url:" + cfgObj.url);
        wx.request({
          url: cfgObj.url,
          method: "GET",
          success: function success(res) {
            if (200 == res.statusCode) {
              hall.LOGD("ty.HttpUtil.httpGet", "res:" + JSON.stringify(res.data));
              successcb && successcb(res.data);
            } else hall.LOGD("ty.HttpUtil.httpGet", "statusCode:" + res.statusCode);
          },
          fail: function fail(res) {
            hall.LOGD("ty.HttpUtil.httpGet", "post error! " + cfgObj.url);
            failcb && failcb(res);
          }
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  LaiZiAni: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "957acKqjO5CG58S+LpKV5u8", "LaiZiAni");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      showLaiziCard: function showLaiziCard(val) {
        ty.NotificationCenter.trigger(ddz.EventType.SHOW_LAIZI_ON_TABLE);
      }
    });
    cc._RF.pop();
  }, {} ],
  LoginBtnManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2acbuI/GJB46njbAE9Emgk", "LoginBtnManager");
    "use strict";
    hall.loginBtnManager = {
      showLoginBtn: function showLoginBtn() {
        var btnWidth = 390;
        var btnHeight = 119;
        var btnToBottom = 140;
        if (this.canShowUserInfoBtn()) {
          var sysInfo = wx.getSystemInfoSync();
          var screenWidth = sysInfo.screenWidth;
          var screenHeight = sysInfo.screenHeight;
          var bi = screenWidth / 640;
          btnWidth = 390 * bi;
          btnHeight = 119 * bi;
          var button = wx.createUserInfoButton({
            type: "image",
            image: ty.SystemInfo.cdnPath + "res/raw-assets/resources/main/loginBtn.png",
            style: {
              left: (screenWidth - btnWidth) / 2,
              top: screenHeight - btnHeight / 2 - btnToBottom,
              width: btnWidth,
              height: btnHeight
            }
          });
          button.show();
          button.onTap(function(res) {
            ddz.LOGD("UserInfoButton onTap ", JSON.stringify(res));
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationStart, [ "授权开始!" ]);
            if ("getUserInfo:ok" == res.errMsg) {
              button.hide();
              hall.loginBtnManager.destroyHideBtn();
              hall.loginBtnManager.destroyTableBtn();
              ty.wxUserInfo = true;
              ty.NotificationCenter.trigger(ddz.EventType.GET_USER_INFO, true);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationSuccess, [ "授权成功!" ]);
            } else ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationFailed, [ "授权失败" ]);
          });
        } else this.oldAuhor();
      },
      canShowUserInfoBtn: function canShowUserInfoBtn() {
        return wx.hasOwnProperty("createUserInfoButton");
      },
      showHideAuthorizeBtn: function showHideAuthorizeBtn(callFun) {
        var btnWidth = 160;
        var btnHeight = 113;
        var btnToBottom = 250;
        if (this.canShowUserInfoBtn()) {
          var sysInfo = wx.getSystemInfoSync();
          var screenWidth = sysInfo.screenWidth;
          var screenHeight = sysInfo.screenHeight;
          var bi = screenWidth / 640;
          btnWidth *= bi;
          btnHeight *= bi;
          hall.loginBtnManager.hideButton = wx.createUserInfoButton({
            type: "image",
            image: ty.SystemInfo.cdnPath + "res/raw-assets/resources/main/hidebtn.png?3",
            style: {
              left: 0,
              top: screenHeight - btnHeight - btnToBottom * bi,
              width: btnWidth,
              height: btnHeight
            }
          });
          hall.loginBtnManager.hideButton.show();
          hall.loginBtnManager.hideButton.onTap(function(res) {
            ddz.LOGD("UserInfoButton onTap ", JSON.stringify(res));
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationStart, [ "授权开始!" ]);
            if ("getUserInfo:ok" == res.errMsg) {
              callFun && callFun();
              hall.loginBtnManager.destroyHideBtn();
              ty.wxUserInfo = true;
              ty.TuyooSDK.wechatLogin();
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationSuccess, [ "授权成功!" ]);
            } else ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationFailed, [ "授权失败" ]);
          });
        }
      },
      destroyHideBtn: function destroyHideBtn() {
        if (hall.loginBtnManager.hideButton) {
          hall.loginBtnManager.hideButton.hide();
          hall.loginBtnManager.hideButton = null;
        }
      },
      showTableAuthorizeBtn: function showTableAuthorizeBtn(callFun) {
        var btnWidth = 150;
        var btnHeight = 120;
        var btnToBottom = 120;
        if (this.canShowUserInfoBtn()) {
          var sysInfo = wx.getSystemInfoSync();
          var screenWidth = sysInfo.screenWidth;
          var screenHeight = sysInfo.screenHeight;
          var bi = screenWidth / 640;
          btnWidth *= bi;
          btnHeight *= bi;
          hall.loginBtnManager.TableButton = wx.createUserInfoButton({
            type: "image",
            image: ty.SystemInfo.cdnPath + "res/raw-assets/resources/main/hidebtn.png?3",
            style: {
              left: 0,
              top: screenHeight - btnHeight - btnToBottom * bi,
              width: btnWidth,
              height: btnHeight
            }
          });
          hall.loginBtnManager.TableButton.show();
          hall.loginBtnManager.TableButton.onTap(function(res) {
            ddz.LOGD("UserInfoButton onTap ", JSON.stringify(res));
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationStart, [ "授权开始!", "table" ]);
            if ("getUserInfo:ok" == res.errMsg) {
              callFun && callFun(ddz.LOCATION_SIGN.SELF);
              hall.loginBtnManager.destroyTableBtn();
              ty.wxUserInfo = true;
              ty.tableAuthor = true;
              ty.TuyooSDK.wechatLogin();
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationSuccess, [ "授权成功!", "table" ]);
            } else ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationFailed, [ "授权失败", "table" ]);
          });
        }
      },
      destroyTableBtn: function destroyTableBtn() {
        if (hall.loginBtnManager.TableButton) {
          hall.loginBtnManager.TableButton.hide();
          hall.loginBtnManager.TableButton = null;
        }
      },
      onlyAuthorizeAndLogin: function onlyAuthorizeAndLogin(callFun) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationStart, [ "授权开始!" ]);
        wx.authorize({
          scope: "scope.userInfo",
          success: function success() {
            callFun && callFun();
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationSuccess, [ "授权成功!" ]);
            ty.wxUserInfo = true;
            ty.TuyooSDK.wechatLogin();
          },
          fail: function fail() {
            ty.NotificationCenter.trigger(ddz.EventType.START_AUTHORIZATION_FAILED);
            ddz.needReLogin = true;
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationFailed, [ "授权失败" ]);
          },
          complete: function complete() {}
        });
      },
      oldAuhor: function oldAuhor() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationStart, [ "授权开始!" ]);
        wx.authorize({
          scope: "scope.userInfo",
          success: function success() {
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationSuccess, [ "授权成功!" ]);
            ty.wxUserInfo = true;
            ty.NotificationCenter.trigger(ddz.EventType.GET_USER_INFO, true);
          },
          fail: function fail() {
            ty.NotificationCenter.trigger(ddz.EventType.START_AUTHORIZATION_FAILED);
            ddz.needReLogin = true;
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeAuthorizationFailed, [ "授权失败" ]);
          },
          complete: function complete() {}
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  LoginInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "41856/8nO5Lu6prm/0PskCg", "LoginInfo");
    "use strict";
    hall.LoginInfo = cc.Class({
      ctor: function ctor() {
        this.m_rewardstate = [];
        this.m_vipReward = null;
      },
      parse: function parse(params) {
        if (params) {
          this.m_rewardstate = params["rewardstate"];
          this.m_vipReward = params["vip_reward"];
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  LoginRewardInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b9bak3YyZGXr8t6xzwaMc6", "LoginRewardInfo");
    "use strict";
    hall.LoginRewardInfo = cc.Class({
      ctor: function ctor() {
        this.m_rewardstate = [];
        this.m_index = null;
        this.m_rewardObj = null;
        this.m_extraRewardObj = null;
      },
      parse: function parse(params) {
        if (params) {
          this.m_rewardstate = params["rewardstate"];
          this.m_index = params["lottery_index"];
          this.m_rewardObj = params["rewards"][0];
          this.m_extraRewardObj = params["extra_rewards"][0];
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  MallScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39ee9njtphB8I6mPpw2K2WH", "MallScene");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        tableView: {
          default: null,
          type: cc.Node
        },
        personalAssets: {
          default: null,
          type: cc.Node
        },
        conversionSuccess: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.updateMallData();
        ty.NotificationCenter.listen(ddz.EventType.CONVERSION_SUCCESS, this.onConversionSuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.DIAMOND_INSUFFICIENT, this.diamondInsufficient, this);
      },
      updateMallData: function updateMallData() {
        var _m_coinList = hall.gameWorld.model.m_coinList;
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
        var resultArr = [];
        if (_m_coinList.length <= 0) return;
        for (var i = 0; i < _m_coinList.length; i++) {
          var addMap = {};
          addMap.coin = _m_coinList[i].m_price_diamond * _m_coinList[i].m_price;
          addMap.diamond = _m_coinList[i].m_price;
          addMap.m_id = _m_coinList[i].m_id;
          resultArr.push(addMap);
        }
        var window = this.tableView.getComponent("ddz_tableView");
        window.setDataArray(resultArr);
      },
      onConversionSuccess: function onConversionSuccess(num) {
        var that = this;
        ty.Timer.setTimer(this, function() {
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CONVERSION_STATE, true);
        }, 1.5, 0, 0);
      },
      diamondInsufficient: function diamondInsufficient() {
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CONVERSION_STATE, true);
      },
      onClickCenterButton: function onClickCenterButton() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "mallInvite" ]);
        var shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondHall;
        ddz.Share.shareWithType(shareType);
      },
      backAction: function backAction() {
        ddz.LOGD(null, "file = [MallScene] fun = [backAction]");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var sceneName = "Ddz";
        hall.GlobalFuncs.popScene();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ceda2vgo/tI1ZjN/zIyYUbF", "MatchInfo");
    "use strict";
    hall.MatchData = cc.Class({
      ctor: function ctor() {
        this.fees = null;
        this.playMode = "0";
        this.matchId = "0";
        this.roomId = "0";
        this.matchName = "0";
        this.taskDesc = "0";
        this.onlineCount = 0;
        this.matchType = "0";
        this.record = null;
        this.desInfo = null;
        this.rewardRank = null;
      },
      parseData: function parseData(data) {
        this.fees = data["fees"];
        this.playMode = data["play_mode"];
        this.matchId = data["matchId"];
        this.roomId = data["roomId"];
        this.matchName = data["name"];
        this.taskDesc = data["taskDesc"];
        this.onlineCount = data["onlineCount"];
        this.matchType = data["type"];
        this.record = data["record"];
        this.rewardRank = data["rewardRank"];
      },
      isRecordExist: function isRecordExist() {
        var ret = false;
        for (var key in this.record) ret = true;
        return this.record && ret;
      }
    });
    hall.MatchInfo = cc.Class({
      _TAG: "hall.MatchInfo",
      ctor: function ctor() {
        hall.LOGD(this._TAG, "in ctor");
        this.matchArray = {};
        this.matchDesMap = {};
        this.curMatchAddition = null;
      },
      setCurrentMatchId: function setCurrentMatchId(matchId) {
        this.curMatchId = matchId;
      },
      getMatchStageDes: function getMatchStageDes() {
        var des = "";
        if (this.curMatchAddition && this.curMatchAddition.matchId) {
          var desInfo = this.matchDesMap[this.curMatchAddition.matchId.toString()];
          if (desInfo && desInfo.stages) for (var key in desInfo.stages) if (desInfo.stages[key].index == this.curMatchAddition.stageIndex) {
            des = 1 == desInfo.stages[key].riseUserCount ? "决赛" : "前" + desInfo.stages[key].riseUserCount + "晋级";
            break;
          }
        }
        return des;
      },
      setCurMatchAdditionInfo: function setCurMatchAdditionInfo(additionInfo) {
        this.curMatchAddition || (this.curMatchAddition = {
          matchId: 0,
          roomId: 0,
          stageIndex: 0,
          score: 0,
          rankName: "90/90"
        });
        for (var key in this.curMatchAddition) additionInfo[key] && (this.curMatchAddition[key] = additionInfo[key]);
      },
      getCurrentMatchData: function getCurrentMatchData() {
        return this.curMatchId ? this.matchArray[this.curMatchId.toString()] : null;
      },
      addMatchDesInfo: function addMatchDesInfo(desInfo) {
        this.matchDesMap[desInfo.matchId.toString()] = desInfo;
      },
      getMatchDesByMatchId: function getMatchDesByMatchId(matchId) {
        var matchDes = null;
        matchDes = this.matchDesMap[matchId.toString()];
        return matchDes;
      },
      parseMatchListInfo: function parseMatchListInfo(matchList) {
        this.matchArray = {};
        if (matchList) for (var i = 0; i < matchList.length; i++) {
          var match = new hall.MatchData();
          match.parseData(matchList[i]);
          this.matchArray[match.matchId.toString()] = match;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchListScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5070RMeZxFybZxWkyOs5ve", "MatchListScene");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        tableView: {
          default: null,
          type: cc.Node
        },
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        personalAssets: {
          default: null,
          type: cc.Node
        },
        colorbgOver: {
          default: null,
          type: cc.Node
        },
        ddz_cell_matchlist: cc.Prefab,
        match_enter: cc.Prefab,
        leftCellX: -275,
        rightCellX: 275
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        this.cellHeight = 170;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.content = this.scrollView.content;
        ty.NotificationCenter.listen(ddz.EventType.ASYNC_COMMON_ARENA_MATCH, this.onMatchList, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_DES, this.showMatchInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_MATCHING, this.showColorBgOver, this);
        ty.NotificationCenter.listen(ddz.EventType.CLICK_MATCHING_ITEM, this.onClickMatchItem, this);
        ty.NotificationCenter.listen(ddz.EventType.OPEN_BANNER, this.playBanner, this);
        hall.MsgFactory.getArenaMatchList(ty.SystemInfo.gameId);
        this.setPersonalAssets();
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playBanner(bc);
      },
      playBanner: function playBanner(bc) {
        var winnerCount = ddz.matchModel.getCurWinnerCount();
        if (bc.start) {
          if (winnerCount >= bc.start) {
            var pw = this.personalAssets.getComponent(cc.Widget);
            pw.bottom = 265;
            var sw = this.scrollView.getComponent(cc.Widget);
            sw.bottom = 494;
            hall.adManager.canShowListSceneBanner = true;
            this.showBannerAd();
            bc.delay && bc.delay > 0 && ty.Timer.setTimer(this, this.showBannerAd, bc.delay);
          }
        } else {
          var pw = this.personalAssets.getComponent(cc.Widget);
          pw.bottom = 265;
          var sw = this.scrollView.getComponent(cc.Widget);
          sw.bottom = 494;
          hall.adManager.canShowListSceneBanner = true;
          this.showBannerAd();
          bc.delay && bc.delay > 0 && ty.Timer.setTimer(this, this.showBannerAd, bc.delay);
        }
      },
      showBannerAd: function showBannerAd() {
        hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
      },
      onClickMatchItem: function onClickMatchItem(matchId) {
        this.clickedMatchId = matchId;
      },
      showColorBgOver: function showColorBgOver() {
        this.colorbgOver.active = true;
      },
      showMatchInfo: function showMatchInfo(matchInfo) {
        if (this.clickedMatchId != matchInfo.matchId) return;
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        var nofityW = cc.instantiate(this.match_enter);
        this.node.addChild(nofityW);
        var window = nofityW.getComponent("ddz_window_match_enter");
        window.updateByMatchData(matchInfo);
        this.clickedMatchId = -1;
      },
      onMatchList: function onMatchList() {
        var matchList = [];
        for (var key in hall.ME.matchInfo.matchArray) matchList.push(hall.ME.matchInfo.matchArray[key]);
        this.updateRoomList(matchList);
      },
      updateRoomList: function updateRoomList(roomInfo) {
        this.content.removeAllChildren();
        this.content.height = roomInfo.length * this.cellHeight;
        if (roomInfo.length > 0) for (var i = 0; i < roomInfo.length; i++) {
          var cell = cc.instantiate(this.ddz_cell_matchlist);
          var com = cell.getComponent("ddz_cell_matchlist");
          com.addDataWithObject(roomInfo[i]);
          cell.x = 0;
          cell.y = -i * this.cellHeight - this.cellHeight / 2;
          this.content.addChild(cell);
        }
      },
      setPersonalAssets: function setPersonalAssets() {
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
      },
      backAction: function backAction() {
        ddz.LOGD(null, "file = [RoomListScene] fun = [backAction]");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var sceneName = "Ddz";
        hall.GlobalFuncs.popScene();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3faf36B7wBC4qvsQ82Er+FE", "MatchModel");
    "use strict";
    ddz.ShareRecord = {
      "00000": {
        leftCount: 0,
        pointId: "0000"
      }
    };
    ddz.ArenaToSharePoint = {
      6790: "arenaPoint1",
      6791: "arenaPoint1",
      6792: "arenaPoint1",
      6793: "arenaPoint1"
    };
    var matchDefaultCfg = {
      roomId: 6789
    };
    var delayTime = 3;
    ddz.matchModel = {
      LAST_REWARD_DATE: "last_reward_Date",
      LAST_FAIL_DATE: "LAST_FAIL_DATE",
      FAIL_NUMBER_LIST: "FAIL_NUMBER_LIST",
      LAST_RANK_WEEK: "last_rank_week",
      SHOW_LOGIN_REWARD: "show_login_reward",
      MATCH_REWARD_DES: "match_reward_des",
      UPDATE_NOTIFY_INFO: "update_notify_info",
      ONHIDE_DATE: "onhide_date",
      isGameFlow: false,
      isDiZhuWin: false,
      isStartMatch: false,
      currentGameMode: "default",
      arenaReviveStageCount: 3,
      isShowingRevive: false,
      canShowMatchRevivalPanel: false,
      revivalShareKey: "",
      new_gift_reward: null,
      getMatchDes: function getMatchDes(roomId, matchId) {
        var pars = {
          cmd: "room",
          params: {
            action: "match_des",
            gameId: 6,
            roomId: roomId || matchDefaultCfg.roomId
          }
        };
        matchId && (pars.params["matchId"] = matchId);
        hall.MsgFactory._sendCmd(pars);
      },
      matchSignin: function matchSignin(roomId, matchId, feeIndex) {
        roomId = roomId || matchDefaultCfg.roomId;
        matchId = matchId || 0;
        var that = this;
        var signinFun = function signinFun() {
          var index = 0;
          "undefined" != typeof feeIndex && (index = feeIndex);
          var pars = {
            cmd: "room",
            params: {
              action: "signin",
              gameId: 6,
              roomId: roomId,
              signinParams: {
                matchId: matchId,
                feeIndex: feeIndex
              }
            }
          };
          hall.MsgFactory._sendCmd(pars);
          that._curWaitInfo && (that._curWaitInfo.stageIndex = 1);
          ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        };
        if (roomId == matchDefaultCfg.roomId) {
          if (this._curDesInfo && "async_upgrade_hero_match" == this._curDesInfo.type) {
            var fees = this._curDesInfo.fees.concat();
            var oi = fees.indexOf("免费");
            oi > -1 && fees.splice(oi, 1);
            oi = fees.indexOf("免费报名");
            oi > -1 && fees.splice(oi, 1);
            if (fees.length > 0) {
              var feesStr = fees.join("、");
              var btns = [ {
                title: "取消",
                callFunc: function callFunc() {}
              }, {
                title: "开始",
                callFunc: function callFunc() {
                  signinFun();
                }
              } ];
              feesStr = feesStr.replace("钻石", "<img src='dda_button_diamond_black' width=42 height=34 /> ");
              ddz.GlobalFuncs.showNormalTipsWindow("使用" + feesStr + "开始闯关", btns, "提示");
            } else signinFun();
          }
        } else signinFun();
      },
      matchResume: function matchResume(roomId, matchId) {
        roomId = roomId || matchDefaultCfg.roomId;
        matchId = matchId || 0;
        var pars = {
          cmd: "room",
          params: {
            action: "resume",
            gameId: 6,
            roomId: roomId,
            matchId: matchId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      matchGiveUp: function matchGiveUp(roomId, matchId) {
        roomId = roomId || matchDefaultCfg.roomId;
        var pars = {
          cmd: "room",
          params: {
            action: "match_giveup",
            gameId: 6,
            roomId: roomId
          }
        };
        matchId && (pars.params.matchId = matchId);
        hall.MsgFactory._sendCmd(pars);
      },
      matchSave: function matchSave(roomId, matchId) {
        var pars = {
          cmd: "room",
          params: {
            action: "save",
            gameId: 6,
            roomId: roomId
          }
        };
        matchId && (pars.params["matchId"] = matchId);
        hall.MsgFactory._sendCmd(pars);
      },
      matchChallenge: function matchChallenge(roomId, matchId) {
        var pars = {
          cmd: "room",
          params: {
            action: "match_challenge",
            gameId: 6,
            roomId: roomId || matchDefaultCfg.roomId
          }
        };
        matchId && (pars.params["matchId"] = matchId);
        hall.MsgFactory._sendCmd(pars);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
      },
      matchBack: function matchBack(roomId, matchId) {
        var pars = {
          cmd: "room",
          params: {
            action: "match_back",
            gameId: 6,
            roomId: roomId || matchDefaultCfg.roomId
          }
        };
        matchId && (pars.params.matchId = matchId);
        hall.MsgFactory._sendCmd(pars);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
      },
      matchBackNextLevel: function matchBackNextLevel(roomId, matchId, nextLevel) {
        var pars = {
          cmd: "room",
          params: {
            action: "match_back_next_level",
            gameId: 6,
            roomId: roomId || matchDefaultCfg.roomId
          }
        };
        matchId && (pars.params.matchId = matchId);
        nextLevel && (pars.params.nextLevel = nextLevel);
        hall.MsgFactory._sendCmd(pars);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
      },
      matchUpdate: function matchUpdate() {
        var pars = {
          cmd: "room",
          params: {
            action: "update",
            gameId: 6,
            roomId: matchDefaultCfg.roomId
          }
        };
        hall.MsgFactory._sendCmd(pars);
      },
      getStageIndex: function getStageIndex() {
        return this._stageIndex;
      },
      parseChallenge: function parseChallenge(value) {
        !value.error && (hall.ME.matchInfo.getCurrentMatchData() && value.matchId == hall.ME.matchInfo.getCurrentMatchData().matchId || hall.ME.matchInfo.curMatchAddition && value.matchId == hall.ME.matchInfo.curMatchAddition.matchId) && this.showMatching();
        ty.NotificationCenter.trigger(ddz.EventType.ACTION_CHALLENGE, value);
      },
      onMatchWait: function onMatchWait(stateValue) {
        var des = hall.ME.matchInfo.getMatchDesByMatchId(ddz.matchModel._curWaitInfo.matchId);
        if (des.type && des.type.indexOf("common_arena_match") < 0) return;
        if (1 == stateValue) {
          var preFabPath = "prefabs/match/ddz_arena_start";
          ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var com = preFabNode.getComponent("ddz_arena_start");
            var matchDes = hall.ME.matchInfo.getMatchDesByMatchId(ddz.matchModel._curWaitInfo.matchId);
            com.showArenaStageProgress(ddz.matchModel._curWaitInfo.stageIndex, matchDes.stages, false);
          });
        }
        4 == stateValue && ddz.matchModel.matchChallenge(ddz.matchModel._curWaitInfo.roomId, ddz.matchModel._curWaitInfo.matchId);
      },
      showMatching: function showMatching() {
        var preFabPath = "ani/ddz_matching/Matching";
        var comName = "DdzMatching";
        ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var com = preFabNode.getComponent(comName);
          com.clearMessageList();
          com.playAni(true);
          ty.NotificationCenter.trigger(ddz.EventType.SHOW_MATCHING);
          ty.NotificationCenter.trigger(ddz.EventType.HIDE_DDZ_MAIN);
        });
      },
      showArenaReviveWindow: function showArenaReviveWindow(matchDes, stageIndex) {
        hall.LOGW("", "++++++++++++showArenaReviveWindow++++++++++++" + ddz.matchModel.canShowMatchRevivalPanel);
        if (ddz.matchModel.canShowMatchRevivalPanel) {
          var matchCondition = ddz.GlobalFuncs.getFailCondition("arena", ddz.GlobalFuncs.checkFailCount("arena"));
          hall.LOGW("", "++++++++++++matchCondition++++++++++++" + matchCondition);
          if (matchCondition) {
            ddz.GlobalFuncs.showRevivalWindow(matchCondition, "arena");
            return;
          }
        }
        if (ddz.Share.isMatchShare) {
          ddz.Share.isMatchShare = false;
          return;
        }
        ddz.matchModel.isShowingRevive || ddz.matchRevivalPanel ? ty.NotificationCenter.trigger(ddz.EventType.SHOW_MATCH_REVIVE) : ddz.GlobalFuncs.showArenaReviveWindow(matchDes, stageIndex);
      },
      parseWait: function parseWait(value) {
        hall.LOGW("", "++++++++++++parseWait++++++++++++" + JSON.stringify(value));
        this._curWaitInfo = value;
        ddz.Share.shareKeywordReplace.stageIndex = value.stageIndex;
        var state = this._curWaitInfo.state;
        var preFabPath = "";
        var comName = "";
        var gameFlow = this._curWaitInfo.gameFlow;
        var isReConnect = this._curWaitInfo.reConnect;
        var matchDes = hall.ME.matchInfo.getMatchDesByMatchId(this._curWaitInfo.matchId);
        var currentMatchData = hall.ME.matchInfo.getCurrentMatchData();
        if (matchDes && matchDes.type.indexOf("common_arena_match") > -1) {
          hall.LOGD("wait0000", JSON.stringify(this._curWaitInfo));
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
          switch (state) {
           case 1:
           case 2:
            break;

           case 3:
            var timerWaitArenaConfig = function() {
              var arenaConfig = ddz.gameModel.getArenaMatchConfigJson();
              if (arenaConfig) {
                var shareTypePoint = arenaConfig[ddz.matchModel._curWaitInfo.matchId.toString()]["reviveSharePoint"];
                ddz.gameModel.shareToCheckReward(shareTypePoint);
              }
            }.bind(this);
            ty.Timer.setTimer(cc.director, timerWaitArenaConfig, .1, 0);
          }
          var pausetime = 0;
          hall.GlobalFuncs.isInAtScene("TableScene") && 4 == state && (pausetime = delayTime);
          3 == state && (pausetime = .5);
          var timerWait = function() {
            if (4 == state) {
              var curScene = cc.director.getScene();
              if (true == ddz.matchModel._curWaitInfo.isLevelUp) {
                preFabPath = "prefabs/match/ddz_arena_levelup";
                ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
                hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
                  var com = preFabNode.getComponent("ddz_arena_levelup");
                  com.setMatchDes(matchDes);
                  com.setRankString(ddz.matchModel._curWaitInfo.rankName);
                  com.showArenaStageProgress(ddz.matchModel._curWaitInfo.stageIndex, matchDes.stages, true);
                });
              }
            }
            3 == state && ddz.matchModel.showArenaReviveWindow(matchDes, ddz.matchModel._curWaitInfo.stageIndex);
            ty.NotificationCenter.trigger(ddz.EventType.RECEIVE_MATCH_WAIT_STATE, state);
          }.bind(this);
          ty.Timer.setTimer(cc.director, timerWait, pausetime, 0);
          ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, function() {
            ty.Timer.cancelTimer(cc.director, timerFunc);
            ty.NotificationCenter.ignore(ddz.EventType.GAME_HIDE, this);
          }, this);
          hall.ME.matchInfo.setCurMatchAdditionInfo(this._curWaitInfo);
          return;
        }
        this._stageIndex = this._curWaitInfo.stageIndex;
        ddz.friendModel.isEnterTable && ddz.MsgFactory.saveMatch();
        if (3 == state) {
          ddz.matchResultPanel && ddz.matchResultPanel.shut();
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
          preFabPath = "ani/ddz_matching/Matching";
          comName = "DdzMatching";
          ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var com = preFabNode.getComponent(comName);
            com.playAni(true);
            ty.NotificationCenter.trigger(ddz.EventType.HIDE_DDZ_MAIN);
          });
        }
        if (hall.GlobalFuncs.isInAtScene("TableScene") && (2 == state || 4 == state)) {
          if (ddz.matchModel.isGameFlow) return;
          if (ddz.matchResultPanel) {
            ddz.LOGD(null, "已经存在面板,不要重复弹出!");
            return;
          }
          var isLevelUp = 2 == state;
          if (isLevelUp && !gameFlow) {
            preFabPath = "prefabs/match/ddz_success";
            comName = "ddz_success";
          } else {
            preFabPath = "prefabs/match/ddz_fail";
            comName = "ddz_fail";
          }
          var stageIndex = this._curWaitInfo.stageIndex - 2;
          stageIndex < 0 && (stageIndex = 0);
          var timerFunc = function() {
            if (ddz.matchResultPanel) return;
            var curScene = cc.director.getScene();
            var tableScene = curScene.children[0].getComponent("DdzTableScene");
            if (tableScene && tableScene.tableInfo().ftInfo) return;
            ty.NotificationCenter.ignore(ddz.EventType.GAME_HIDE, this.onGameHide, this);
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              var com = preFabNode.getComponent(comName);
              if ("ddz_success" == comName) {
                com.progress.getComponent("ddz_progress").setProgress(stageIndex, isLevelUp);
                com.resultTitle.getComponent("ddz_resultTitle").setTitle(stageIndex, isLevelUp);
              } else {
                var gindex = ddz.matchModel.getStageIndex() - 1;
                gameFlow ? ddz.matchModel.isDiZhuWin ? com.gameFlowOver(gindex, "因队友托管，可重闯本关") : com.gameFlowOver(gindex, "托管不记录成绩,请重闯本关") : 0 == gindex ? com.over(gindex) : com.setDiamondCount(gindex);
              }
              ddz.matchResultPanel = com;
              ddz.matchResultPanel.showResults(false);
              isReConnect && ddz.matchResultPanel.showResults(true);
            });
          }.bind(this);
          timerFunc();
          ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, function() {
            ty.Timer.cancelTimer(cc.director, timerFunc);
            ty.NotificationCenter.ignore(ddz.EventType.GAME_HIDE, this);
          }, this);
        }
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_WAIT_INFO, ddz.matchModel.getStageIndex());
      },
      getCurWaitInfo: function getCurWaitInfo() {
        return this._curWaitInfo;
      },
      cleanWaitInfo: function cleanWaitInfo() {
        this._curWaitInfo && (this._curWaitInfo = null);
      },
      parseGiveUp: function parseGiveUp(value) {
        this._curWaitInfo = null;
        if (this.waitSignin) {
          ty.NotificationCenter.trigger(ddz.EventType.MATCH_GIVE_UP, value);
          this.matchSignin();
          this.waitSignin = null;
        }
      },
      parseOver: function parseOver(value) {
        if (ddz.matchModel.isGameFlow) return;
        this._curOverInfo = value;
        var preFabPath;
        var comName;
        var that = this;
        if (ddz.matchResultPanel) {
          ddz.LOGD(null, "已经存在面板,不要重复弹出!");
          that._curWaitInfo = null;
          that._stageIndex = 0;
          ty.UserInfo.loc = "0.0.0.0";
          return;
        }
        var matchDes = hall.ME.matchInfo.matchDesMap[this._curOverInfo.matchId.toString()];
        if (matchDes && matchDes.type.indexOf("common_arena_match") > -1) {
          ddz.matchModel.currentGameMode = "default";
          if (this._curOverInfo.reason == ddz.MATCH_REASON.WIN) {
            preFabPath = "prefabs/match/ddz_arena_result_win";
            comName = "ddz_arena_result_win";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              ddz.arenaResultPanel = preFabNode.getComponent(comName);
              ddz.arenaResultPanel.setOverInfo(that._curOverInfo);
            });
          } else {
            preFabPath = "prefabs/match/ddz_arena_result_lose";
            comName = "ddz_arena_result_lose";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              ddz.arenaResultPanel = preFabNode.getComponent(comName);
              ddz.arenaResultPanel.setOverInfo(that._curOverInfo);
            });
          }
          return;
        }
        var resultFunc = function resultFunc() {
          if (that._curOverInfo.reason == ddz.MATCH_REASON.WIN) {
            preFabPath = "prefabs/match/ddz_congratulation";
            comName = "ddz_congratulation";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              that._curWaitInfo = null;
              that._stageIndex = 0;
              ty.UserInfo.loc = "0.0.0.0";
              ddz.matchResultPanel = preFabNode.getComponent(comName);
              ddz.matchResultPanel.setMcountDetail(that._curOverInfo.mcount);
              if (ddz.gameModel.isAcceptGameWin) {
                ddz.matchResultPanel.showResults(false);
                ddz.gameModel.isAcceptGameWin = false;
              } else ddz.matchResultPanel.showResults(true);
            });
          } else {
            preFabPath = "prefabs/match/ddz_fail";
            comName = "ddz_fail";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              var com = preFabNode.getComponent(comName);
              ddz.matchResultPanel = com;
              com.over(ddz.matchModel.getStageIndex() - 1);
              that._curWaitInfo = null;
              ty.UserInfo.loc = "0.0.0.0";
              if (ddz.gameModel.isAcceptGameWin) {
                ddz.matchResultPanel.showResults(false);
                ddz.gameModel.isAcceptGameWin = false;
              } else ddz.matchResultPanel.showResults(true);
            });
          }
        };
        var curDay = hall.GlobalTimer.getCurDay();
        ty.UserInfo.lastUpdateTgDate && ty.UserInfo.lastUpdateTgDate != curDay ? ty.UserInfo.tgCount = 1 : ty.UserInfo.tgCount += 1;
        ty.UserInfo.lastUpdateTgDate = curDay;
        ddz.gameModel.setTongGuanCount(ty.UserInfo.tgCount);
        resultFunc();
      },
      getCurOverInfo: function getCurOverInfo() {
        return this._curOverInfo;
      },
      parseMatchInfo: function parseMatchInfo(value) {
        this._curUpdateInfo = value;
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MATCH_INFO);
      },
      getCurUpdateInfo: function getCurUpdateInfo() {
        return this._curUpdateInfo;
      },
      getCurWinnerCount: function getCurWinnerCount() {
        var histories = this._curDesInfo.histories;
        if (histories) {
          var winnerCount = histories.winnerCount;
          if (winnerCount) return winnerCount;
          return 0;
        }
        return 0;
      },
      parseDes: function parseDes(value) {
        this._curDesInfo = value;
        ddz.Share.shareKeywordReplace.curWinnerCount = this.getCurWinnerCount();
        hall.ME.matchInfo.addMatchDesInfo(value);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MATCH_DES, value);
        var histories = value.histories;
        hall.LOGD(this._TAG, "parseDes -------------------------" + JSON.stringify(histories));
        var couponCount = hall.ME.udataInfo.m_couponCount;
        var exchangedCoupon = hall.ME.udataInfo.m_exchangedCoupon;
        var sumReward = couponCount + exchangedCoupon;
        sumReward /= 100;
        ddz.Share.shareKeywordReplace.curSumReward = sumReward;
        ddz.Share.shareKeywordReplace.selfTotalBonus = sumReward;
        ddz.Share.shareKeywordReplace.selfAllWinnerCount = histories.winnerCount;
        if (debugMode) return;
        ddz.GlobalFuncs.upDateRankData(sumReward + "");
      },
      getCurDes: function getCurDes() {
        return this._curDesInfo;
      },
      parseMatchList: function parseMatchList(value) {
        this._curMatchListInfo = value["matches"];
        ty.NotificationCenter.trigger(ddz.EventType.RECIVE_MATCH_LIST_INFO);
      },
      getMatchListInfo: function getMatchListInfo() {
        return this._curMatchListInfo;
      },
      parse: function parse(value) {
        switch (value.result.action) {
         case "match_des":
          this.parseDes(value.result);
          break;

         case "wait":
          this.parseWait(value.result);
          break;

         case "over":
          this.parseOver(value.result);
          break;

         case "match_giveup":
          value.error && 1 != value.error.code && hall.MsgBoxManager.showToast({
            title: value.error.info + ";错误码:" + value.error.code
          });
          this.parseGiveUp(value.result);
          break;

         case "update":
          this.parseMatchInfo(value.result);
          break;

         case "lottery":
          this.parseLottery(value.result);
          break;

         case "signin":
          if (value.error) if (7 == value.error.code) {
            var todoTaskMsg = {
              action: "pop_info_wnd",
              params: {
                des: "fuhaoBuyFailed-你的钻石不够啦\n邀请好友进入游戏可以得钻石哟～"
              }
            };
            hall.ToDoTask.runOneTask(todoTaskMsg);
          } else hall.MsgBoxManager.showToast({
            title: value.error.info
          });
          this.parseSignInInfo(value);
          break;

         case ddz.EventType.ACTION_SAVE:
          this.parseSave(value.result);
          break;

         case ddz.EventType.ACTION_RESUME:
          this.checkMsgState(value);
          this.parseResume(value.result);
          break;

         case ddz.EventType.ACTION_CHALLENGE:
          this.parseChallenge(value.result);
          break;

         case "match_back":
          value.error ? hall.MsgBoxManager.showToast({
            title: value.error.info
          }) : value.result.nextStageIndex > value.result.stageIndex ? 1 == value.result.stageIndex && 2 == value.result.nextStageIndex ? hall.MsgBoxManager.showToast({
            title: "恭喜你,晋级成功!"
          }) : hall.MsgBoxManager.showToast({
            title: "恭喜你,跳关成功!"
          }) : value.result.nextStageIndex == value.result.stageIndex && hall.MsgBoxManager.showToast({
            title: "恭喜你,复活成功!"
          });
          ty.NotificationCenter.trigger("arena_match_back", value);
          break;

         case "rank":
          hall.ME.matchInfo.setCurMatchAdditionInfo(value.result);
          ty.NotificationCenter.trigger(ddz.EventType.MACH_RANK_CHANGE, value.result);
          break;

         case "enter_queue":
          this.parseQueue(value.result);
          break;

         case "leave_queue":
          this.parseLeaveQueue(value.result);
        }
      },
      checkMsgState: function checkMsgState(msg) {
        msg && msg.error && msg.error.code && 0 != msg.error.code ? ty.NotificationCenter.trigger("signin_fail", msg) : ty.NotificationCenter.trigger("signin_success", msg);
      },
      parseSave: function parseSave(result) {
        if (1 === result.save) {
          this._curWaitInfo = null;
          ddz.MsgFactory.getMatchRecords();
          ty.NotificationCenter.trigger(ddz.EventType.SAVE_MATCH_SUCCESS, result);
          ddz.friendModel.isEnterTable && ddz.friendModel.enterFTTable(ddz.Share.shareKeywordReplace.inviteFriendID);
        } else ddz.friendModel.isEnterTable = false;
      },
      parseResume: function parseResume(result) {
        if (1 === result.save) {
          var waitInfo = JSON.parse(result.wati);
          this.parseWait(waitInfo.result);
          ddz.gameModel._matchRecords = null;
          hall.LOGW("===", "====parseResume====" + JSON.stringify(waitInfo.result));
        }
        if (!this.isStartMatch) return;
        if (this._curWaitInfo) if (2 == this._curWaitInfo.state) this.matchChallenge(); else if (1 == this._curWaitInfo.stageIndex) {
          this.waitSignin = true;
          this.matchGiveUp();
        } else this.showGetDiamondWindow(this, this._curWaitInfo.stageIndex); else this.matchSignin();
        this.isStartMatch = false;
      },
      parseLottery: function parseLottery(result) {
        this._curLotteryInfo = result;
        ty.NotificationCenter.trigger(ddz.EventType.CHANE_COUNT_LABEL, false);
      },
      getCurLotteryInfo: function getCurLotteryInfo() {
        return this._curLotteryInfo;
      },
      parseQueue: function parseQueue(result) {
        this._queueInfo = result;
        result.signs && 1 == result.signs && hall.GlobalFuncs.onEnterQueue();
      },
      getCurQueueInfo: function getCurQueueInfo() {
        return this._queueInfo;
      },
      parseLeaveQueue: function parseLeaveQueue(result) {
        if (result.playMode) {
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
          hall.GlobalFuncs.gotoRoomListScene();
        } else -1 == result.reason && hall.GlobalFuncs.gotoDdz();
      },
      parseSignInInfo: function parseSignInInfo(value) {
        this.checkMsgState(value);
      },
      getDiamondCountNeeded: function getDiamondCountNeeded() {
        var guan = ddz.matchModel.getStageIndex() - 1;
        var desInfo = ddz.matchModel.getCurDes();
        if (desInfo && desInfo.detailStages) {
          var stageInfo = desInfo.detailStages;
          if (stageInfo && stageInfo.length > guan) {
            var des = stageInfo[guan];
            if (des && des.count) return des.count;
          }
        }
        return "1";
      },
      showGetDiamondWindow: function showGetDiamondWindow(manager, guans) {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = manager;
          var buttonS = "";
          var diamondCount = hall.ME.udataInfo.diamondCount;
          var count = ddz.matchModel.getDiamondCountNeeded();
          var tipS = "<color=#1A6951>使用 </c><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + count + " 可继续挑战本关\n已有</color><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + diamondCount + "</color>";
          buttonS = diamondCount >= count ? "使用" : "分享";
          var rightSrc = "dda_button_diamond";
          "分享" == buttonS && (rightSrc = "");
          var testArray = [ {
            title: "重闯第一关",
            bottomType: 0
          }, {
            title: buttonS,
            right: rightSrc,
            bottomType: 1
          } ];
          window.setTitleContentAndButtons("提示", tipS, testArray);
        });
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        var reultType = ddz.Share.resultType;
        if (shareType == ddz.Share.onShareType.clickStatShareTypeMainRestartWindow) {
          switch (reultType) {
           case 1:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请分享到微信群哦~"
            });
            break;

           case 2:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请不要频繁分享到一个群~"
            });
          }
          ddz.Share.resultType = 0;
        }
      },
      showBack: function showBack() {
        if (this._curWaitInfo) return true;
        if (ddz.gameModel._matchRecords) return true;
        return false;
      },
      checkOldVersion: function checkOldVersion() {
        if ("async_upgrade_hero_match" == this._curDesInfo.type && "免费" == this._curDesInfo.fees[0]) return true;
        return false;
      },
      startMatchProgress: function startMatchProgress() {
        hall.LOGD("", "file = [MatchModel] fun = [startMatchProgress]" + JSON.stringify(this._curWaitInfo) + "==" + JSON.stringify(ddz.gameModel._matchRecords));
        if (this._curWaitInfo && 6789 == this._curWaitInfo.matchId) {
          if (2 == this._curWaitInfo.state) this.matchChallenge(); else if (1 == this._curWaitInfo.stageIndex) if (this.checkOldVersion()) this.matchSignin(); else {
            ddz.matchModel.waitSignin = true;
            ddz.matchModel.matchGiveUp();
          } else this.showGetDiamondWindow(this, this._curWaitInfo.stageIndex);
          return;
        }
        if (ddz.gameModel._matchRecords) {
          this.isStartMatch = true;
          ddz.MsgFactory.resumeMatch();
          return;
        }
        this.matchSignin();
      },
      onClickLeftButton: function onClickLeftButton(event) {
        ty.NotificationCenter.ignore(ddz.EventType.UPDATE_SHARE_STATE, this);
        this.waitSignin = true;
        this.matchGiveUp();
      },
      onClickRightButton: function onClickRightButton(event) {
        ty.NotificationCenter.ignore(ddz.EventType.UPDATE_SHARE_STATE, this);
        var diamondCount = hall.ME.udataInfo.diamondCount;
        var count = ddz.matchModel.getDiamondCountNeeded();
        diamondCount >= count ? this.matchBack() : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeMainRestartWindow);
      },
      testOver: function testOver() {
        var _curOverInfo = {
          cmd: "room",
          result: {
            action: "over",
            gameId: 6,
            roomId: 67901e3,
            matchId: 6792,
            userId: 10070,
            rank: 46,
            info: "比赛：5元红包赛\n名次：第21名\n奖励：7500金币\n奖励已发放，请您查收。",
            reason: 1,
            rewardDesc: "7500金币",
            rewards: [ {
              icon: "user:chip",
              name: "金币",
              count: 7500,
              iconPath: "http://ddz.dl.tuyoo.com/cdn37/hall/pdt/imgs/goods_t300k_2.png"
            }, {
              icon: "user:diamond",
              name: "钻石",
              count: 7500,
              iconPath: "http://ddz.dl.tuyoo.com/cdn37/hall/pdt/imgs/goods_t300k_2.png"
            } ],
            feeIndex: 0,
            date: "2018-05-08",
            time: "00:53",
            mname: "5元红包赛",
            mcount: 90
          }
        };
        var preFabPath = "prefabs/match/ddz_arena_result_win";
        var comName = "ddz_arena_result_win";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          ddz.arenaResultPanel = preFabNode.getComponent(comName);
          ddz.arenaResultPanel.setOverInfo(_curOverInfo.result);
        });
      },
      testSignin: function testSignin() {
        ddz.matchModel.matchSignin(6790, 6793, 0);
      },
      testArenaWin: function testArenaWin() {
        var over = {
          cmd: "room",
          result: {
            action: "over",
            gameId: 6,
            roomId: 67901e3,
            matchId: 6791,
            userId: 10070,
            rank: 6,
            info: "比赛：1元红包赛\n名次：第6名\n奖励：3000金币+0.01元\n奖励已发放，请您查收。",
            reason: 1,
            rewardDesc: "3000金币+0.01元",
            rewards: [ {
              icon: "user:chip",
              name: "金币",
              count: 3e3,
              iconPath: "http://ddz.dl.tuyoo.com/cdn37/hall/pdt/imgs/goods_t300k_2.png"
            }, {
              icon: "user:coupon",
              name: "红包券",
              count: 1,
              iconPath: "http://ddz.dl.tuyoo.com/cdn37/hall/item/imgs/coupon_1.png"
            } ],
            feeIndex: 0,
            date: "2018-05-11",
            time: "15:39",
            mname: "1元红包赛",
            mcount: 90
          }
        };
        this._curOverInfo = over.result;
        var preFabPath = "prefabs/match/ddz_arena_result_win";
        var comName = "ddz_arena_result_win";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var com = preFabNode.getComponent(comName);
          com.setOverInfo(that._curOverInfo);
        });
      },
      testStart: function testStart() {
        var preFabPath = "prefabs/match/ddz_arena_start";
        ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var match_des = {
            action: "match_des",
            gameId: 6,
            roomId: 67901e3,
            matchId: 6791,
            userId: 10070,
            name: "1元红包赛",
            desc: "满90人开赛，等待时间短，轮转速度快。\n9轮1局瑞士移位决出所有名次。",
            type: "async_common_arena_match",
            fees: [ {
              desc: "1钻石",
              canPay: false
            }, {
              desc: "1000金币",
              canPay: true
            } ],
            ranks: [ {
              start: 1,
              end: 1,
              desc: "1元"
            }, {
              start: 2,
              end: 2,
              desc: "6000金币+0.02元"
            }, {
              start: 3,
              end: 3,
              desc: "4000金币+0.02元"
            }, {
              start: 4,
              end: 6,
              desc: "3000金币+0.01元"
            }, {
              start: 7,
              end: 12,
              desc: "2000金币"
            }, {
              start: 13,
              end: 21,
              desc: "1500金币"
            }, {
              start: 22,
              end: 33,
              desc: "200金币"
            }, {
              start: 34,
              end: 45,
              desc: "500金币"
            } ],
            stages: [ {
              index: 1,
              name: "90进75",
              riseUserCount: 75,
              totalUserCount: 90,
              canBack: 0,
              backFee: "",
              backFeeCount: 0
            }, {
              index: 2,
              name: "75进60",
              riseUserCount: 60,
              totalUserCount: 75,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 3,
              name: "60进45",
              riseUserCount: 45,
              totalUserCount: 60,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 4,
              name: "45进33",
              riseUserCount: 33,
              totalUserCount: 45,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 5,
              name: "33进21",
              riseUserCount: 21,
              totalUserCount: 33,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 6,
              name: "21进12",
              riseUserCount: 12,
              totalUserCount: 21,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 7,
              name: "12进6",
              riseUserCount: 6,
              totalUserCount: 12,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 8,
              name: "6进3",
              riseUserCount: 3,
              totalUserCount: 6,
              canBack: 1,
              backFee: "1个钻石",
              backFeeCount: 1
            }, {
              index: 9,
              name: "决赛",
              riseUserCount: 1,
              totalUserCount: 3,
              canBack: 0,
              backFee: "",
              backFeeCount: 0
            } ],
            histories: {
              playCount: 9,
              crownCount: 1,
              bestRank: 1,
              records: [ {
                time: 1525688021,
                desc: "第2名，奖励6000金币+0.02元"
              }, {
                time: 1525688477,
                desc: "第3名，奖励4000金币+0.02元"
              }, {
                time: 1525690482,
                desc: "第1名，奖励1元"
              } ]
            },
            condition: 90,
            timeRange: "20分钟",
            matchIntroduce: "本比赛采用快速赛赛制",
            saveInfo: {
              record: {},
              needResume: 0
            }
          };
          var com = preFabNode.getComponent("ddz_arena_start");
          com.showArenaStageProgress(1, match_des.stages, true);
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  MatchRankProgressScript: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "735b4aWvOhAV69RxrI45V1b", "MatchRankProgressScript");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        subPrefab: cc.Prefab
      },
      onLoad: function onLoad() {},
      initWithPars: function initWithPars(forwardIndex, stages_P, playAni) {
        this._forwardIndex = forwardIndex;
        this._stages = stages_P;
        var startIndex = this._forwardIndex - 1 - 1;
        startIndex < 0 && (startIndex = 0);
        var endIndex = startIndex + 4;
        if (endIndex > this._stages.length) {
          endIndex = this._stages.length;
          startIndex = endIndex - 4;
          startIndex < 0 && (startIndex = 0);
        }
        var lsLen = this._stages.length;
        var stage, stageNode, obj, viewtype, needShowRight, stageCom;
        for (var i = endIndex - 1; i >= startIndex; i--) {
          stage = this._stages[i];
          stageNode = this.createNewStage();
          stageNode.parent = this.node;
          viewtype = stage.index < this._forwardIndex ? 1 : 0;
          needShowRight = i < lsLen - 1 && i == endIndex - 1;
          obj = {
            numLeft: stage.totalUserCount,
            numRight: stage.riseUserCount,
            type: viewtype,
            listLen: lsLen,
            needShowLeft: i == startIndex,
            needShowRight: needShowRight
          };
          stageCom = stageNode.getComponent("ProgressBarSub");
          stageCom.initWith(obj);
          stage.index == this._forwardIndex && playAni && stageCom.forward();
        }
      },
      createNewStage: function createNewStage() {
        var stageNode;
        stageNode = cc.instantiate(this.subPrefab);
        return stageNode;
      },
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {} ],
  MsgBoxManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8299Pf1bFB1ois/+uajAgc", "MsgBoxManager");
    "use strict";
    hall.MsgBoxManager = {
      showToast: function showToast(msg) {
        ddz.toastNode && ddz.toastNode.closeAction();
        var preFabPath = "prefabs/match/ddz_toast_cell";
        cc.loader.loadRes(preFabPath, function(err, prefab) {
          var prefabNode = cc.instantiate(prefab);
          cc.director.getScene().addChild(prefabNode, 888888);
          ddz.GlobalFuncs.setToCenter(prefabNode);
          ddz.toastNode = prefabNode.getComponent("ddz_toast_cell");
          ddz.toastNode.setTitleWithString(msg.title);
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  MsgCache: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d064n82HBA95B7NvcJEVxF", "MsgCache");
    "use strict";
    ddz.msgCache = {
      needCacheMsg: {
        "table_call:ready": null,
        "table_call:game_ready": null,
        "table_call:next": null,
        "table_call:smilies": null,
        "table_call:call": null,
        "table_call:game_start": null,
        "table_call:card": null,
        "table_call:rb": null,
        "table_call:game_win": null,
        "table_call:wild_card": null
      },
      blocked: true,
      msgQueue: [],
      pushMsg: function pushMsg(msg) {
        var msgKey = msg.cmd;
        msg.result && msg.result.action && (msgKey = msgKey + ":" + msg.result.action);
        this.needCacheMsg.hasOwnProperty(msgKey) ? this.msgQueue.push(msg) : hall.GlobalFuncs.isInAtScene("TableScene") && "room:wait" == msgKey ? this.msgQueue.push(msg) : ty.TCP.triggerMsg(msg);
      },
      triggerFristMsg: function triggerFristMsg() {
        if (this.msgQueue.length > 0) {
          var msg = this.msgQueue.shift();
          ty.TCP.triggerMsg(msg);
        }
      },
      dump: function dump() {
        while (this.msgQueue.length > 0) {
          var msg = this.msgQueue.shift();
          ty.TCP.triggerMsg(msg);
        }
        this.blocked = false;
      }
    };
    cc._RF.pop();
  }, {} ],
  MsgFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9fae2MvW2xIYIHhcPVk5pWc", "MsgFactory");
    "use strict";
    hall.MsgFactory = {
      _TAG: "hall.MsgFactory",
      _sendCmd: function _sendCmd(json) {
        json.params || (json.params = {});
        json.params.userId = json.params.userId || ty.UserInfo.userId;
        json.params.gameId = json.params.gameId || ty.SystemInfo.hallId;
        json.params.clientId = ty.SystemInfo.clientId;
        ty.TCP.sendMsg(json);
      },
      getUserInfo: function getUserInfo(gameId) {
        hall.LOGD(this._TAG, "getUserInfo");
        null != gameId && "undefined" != typeof gameId || (gameId = ty.SystemInfo.hallId);
        hall.LOGD(this._TAG, "getUserInfo gameId = " + gameId);
        var params = {
          cmd: ty.EventType.CMD_USER_INFO,
          params: {
            gameId: gameId
          }
        };
        this._sendCmd(params);
      },
      getUserRewardInfo: function getUserRewardInfo() {
        hall.LOGD(this._TAG, "getUserRewardInfo");
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "list",
            typeid: 1
          }
        };
        this._sendCmd(params);
      },
      getSystemMessageInfo: function getSystemMessageInfo() {
        hall.LOGD(this._TAG, "getSystemMessageInfo");
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "m_list",
            typeid: 2
          }
        };
        this._sendCmd(params);
      },
      getTimeStamp: function getTimeStamp() {
        hall.LOGD(this._TAG, "getTimeStamp");
        var params = {
          cmd: ddz.EventType.CMD_USER,
          params: {
            action: "sync_timestamp"
          }
        };
        this._sendCmd(params);
      },
      getQuickStart: function getQuickStart(userId, gameId, roomId, apiver, sessionIndex, isBringInCoin, innerTable, tableId, mixId, play_mode) {
        var data = {
          userId: userId,
          gameId: gameId,
          apiver: apiver
        };
        var params = {
          cmd: ddz.EventType.CMD_TABLE_QUICKSTART,
          params: data
        };
        "undefined" != typeof sessionIndex && null != sessionIndex && (data["sessionIndex"] = sessionIndex);
        "undefined" != typeof roomId && null != roomId && (data["roomId"] = roomId);
        tableId && (data["tableId"] = tableId);
        "undefined" != typeof innerTable && null != innerTable && (data["innerTable"] = innerTable);
        "undefined" != typeof isBringInCoin && null != isBringInCoin && (data["buyin"] = isBringInCoin);
        "undefined" != typeof mixId && null != mixId && (data["mixId"] = mixId);
        "undefined" != typeof play_mode && null != play_mode && (data["play_mode"] = play_mode);
        this._sendCmd(params);
      },
      getQuickStartParams: function getQuickStartParams(params) {
        var params = {
          cmd: ddz.EventType.CMD_TABLE_QUICKSTART,
          params: params
        };
        this._sendCmd(params);
      },
      getGameData: function getGameData(gameId) {
        var params = {
          cmd: ddz.EventType.CMD_GAME_DATA,
          params: {
            gameId: gameId
          }
        };
        this._sendCmd(params);
      },
      getMsgSendData: function getMsgSendData(pagenum) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "msg_send_list",
            pagenum: pagenum
          }
        };
        this._sendCmd(params);
      },
      getMsgReceiveData: function getMsgReceiveData(pagenum) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "msg_receive_list",
            pagenum: pagenum
          }
        };
        this._sendCmd(params);
      },
      getSysMsgData: function getSysMsgData() {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "sys_msg_list"
          }
        };
        this._sendCmd(params);
      },
      setRankSign: function setRankSign(str) {
        var params = {
          cmd: ddz.EventType.CMD_RANK,
          params: {
            action: "sign",
            rankKey: "hall.jewel",
            content: str
          }
        };
        this._sendCmd(params);
      },
      sendMsgData: function sendMsgData(otherId, msg) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "msg_send",
            to_uid: otherId,
            msg: msg
          }
        };
        this._sendCmd(params);
      },
      getUnreadMsg: function getUnreadMsg() {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "sys_unread"
          }
        };
        this._sendCmd(params);
      },
      deleteRecMsgData: function deleteRecMsgData(index) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "del_msg_recv",
            id: index
          }
        };
        this._sendCmd(params);
      },
      deleteSendMsgData: function deleteSendMsgData(index) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "del_msg_send",
            id: index
          }
        };
        this._sendCmd(params);
      },
      getCoinRank: function getCoinRank() {
        var params = {
          cmd: ddz.EventType.CMD_RANK,
          params: {
            action: "list",
            rankKey: "110000001"
          }
        };
        this._sendCmd(params);
      },
      getRebateRank: function getRebateRank() {
        var params = {
          cmd: ddz.EventType.CMD_RANK,
          params: {
            action: "list",
            rankKey: "hall.period.winchip.1605"
          }
        };
        this._sendCmd(params);
      },
      getJewelRank: function getJewelRank() {
        var params = {
          cmd: ddz.EventType.CMD_RANK,
          params: {
            action: "list",
            rankKey: "hall.jewel"
          }
        };
        this._sendCmd(params);
      },
      getUserNameById: function getUserNameById(targetId) {
        var params = {
          cmd: ddz.EventType.CMD_USER,
          params: {
            action: "get_name",
            targetUserId: targetId
          }
        };
        this._sendCmd(params);
      },
      soldJewel: function soldJewel(count) {
        var params = {
          cmd: ddz.EventType.CMD_STORE,
          params: {
            action: "jewel_sell",
            count: count
          }
        };
        this._sendCmd(params);
      },
      handSoldJewel: function handSoldJewel(count, toUid) {
        var params = {
          cmd: ddz.EventType.CMD_STORE,
          params: {
            action: "jewel_give",
            count: count,
            to_uid: toUid
          }
        };
        this._sendCmd(params);
      },
      conversionCoin: function conversionCoin(prodId) {
        var params = {
          cmd: ddz.EventType.CMD_STORE,
          params: {
            action: "buy",
            prodId: prodId
          }
        };
        this._sendCmd(params);
      },
      getNewVIPInfo: function getNewVIPInfo() {
        var params = {
          cmd: ddz.EventType.CMD_NEW_VIP,
          params: {
            gameId: ty.SystemInfo.gameId,
            action: "simpleVipInfo"
          }
        };
        this._sendCmd(params);
      },
      getLoginReward: function getLoginReward() {
        var params = {
          cmd: ddz.EventType.CMD_GET_NSLOGIN_REWARD,
          params: {
            gameId: ty.SystemInfo.gameId,
            rewardtype: 1
          }
        };
        this._sendCmd(params);
      },
      getNewUserReward: function getNewUserReward() {
        var params = {
          cmd: ddz.EventType.CMD_NEW_USER_REWARD,
          params: {
            gameId: ty.SystemInfo.gameId,
            actionType: 1,
            action: "receive"
          }
        };
        this._sendCmd(params);
      },
      getStoreInfo: function getStoreInfo(action) {
        hall.LOGD(this._TAG, "发送获取商店信息请求... action = " + action);
        var params = {
          cmd: ddz.EventType.CMD_STORE_INFO,
          params: {
            action: action
          }
        };
        this._sendCmd(params);
      },
      getBagInfo: function getBagInfo() {
        var params = {
          cmd: ddz.EventType.CMD_BAG_INFO,
          params: {
            action: "update"
          }
        };
        this._sendCmd(params);
      },
      getEveryTaskInfo: function getEveryTaskInfo(gameId, action) {
        var params = {
          cmd: ddz.EventType.CMD_EVERYTASK,
          params: {
            gameId: gameId,
            action: action
          }
        };
        this._sendCmd(params);
      },
      getPersonalMsg: function getPersonalMsg(gameId) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            gameId: gameId || ty.SystemInfo.gameId,
            action: "private_update",
            pagenum: 0
          }
        };
        this._sendCmd(params);
      },
      getMessageReward: function getMessageReward(msgid) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            action: "m_receive",
            typeid: 2,
            msgid: msgid
          }
        };
        this._sendCmd(params);
      },
      getGlobalMsg: function getGlobalMsg(gameId) {
        var params = {
          cmd: ddz.EventType.CMD_MESSAGE,
          params: {
            gameId: gameId || ty.SystemInfo.gameId,
            action: "global_update",
            pagenum: 0
          }
        };
        this._sendCmd(params);
      },
      sendHeartBeat: function sendHeartBeat(argument) {
        var cmd = {
          cmd: ty.EventType.HEART_BEAT,
          params: {
            deviceId: ty.SystemInfo.deviceId
          }
        };
        this._sendCmd(cmd);
      },
      getHallInfo: function getHallInfo(gameId) {
        var cmd = {
          cmd: ddz.EventType.CMD_HALL_INFO,
          params: {
            gameId: gameId || ty.SystemInfo.gameId
          }
        };
        this._sendCmd(cmd);
      },
      getArenaMatchList: function getArenaMatchList(gameId) {
        hall.LOGD("getArenaMatchList", "123456");
        var cmd = {
          cmd: ddz.EventType.CMD_GAME,
          params: {
            action: ddz.EventType.ASYNC_COMMON_ARENA_MATCH,
            gameId: gameId || ty.SystemInfo.gameId
          }
        };
        this._sendCmd(cmd);
      },
      bindUser: function bindUser() {
        var cmd = {
          cmd: ty.EventType.CMD_BIND_USER,
          params: {
            authorCode: ty.UserInfo.authorCode
          }
        };
        this._sendCmd(cmd);
      },
      getGdata: function getGdata() {
        var cmd = {
          cmd: ddz.EventType.CMD_GAME_DATA,
          params: {
            authorCode: ty.UserInfo.authorCode
          }
        };
        this._sendCmd(cmd);
      },
      bindGame: function bindGame(gameId) {
        var cmd = {
          cmd: ty.EventType.CMD_BIND_GAME,
          params: {
            gameId: gameId,
            authorCode: ty.UserInfo.authorCode
          }
        };
        this._sendCmd(cmd);
      },
      getHeadPics: function getHeadPics(gameId) {
        var cmd = {
          cmd: ddz.EventType.CMD_GET_HEAD_PICS,
          params: {
            gameId: gameId
          }
        };
        this._sendCmd(cmd);
      },
      roomAction: function roomAction(action, tableId, data) {
        var tmp = {
          action: action,
          gameId: ddz.GameId,
          customTableId: tableId,
          roomId: hall.CUSTOM_ROOMID
        };
        if (data) for (var key in data) tmp[key] = data[key];
        var params = {
          cmd: ddz.EventType.CMD_ROOM,
          params: tmp
        };
        this._sendCmd(params);
      },
      customTableAction: function customTableAction(action, data) {
        var tmp = {
          action: action,
          gameId: ty.SystemInfo.gameId
        };
        if (data) for (var key in data) tmp[key] = data[key];
        var params = {
          cmd: ddz.EventType.CMD_CUSTOMTABLE,
          params: tmp
        };
        this._sendCmd(params);
      },
      sendChatMsg: function sendChatMsg(roomId, tableId, seatId, msg, isFace, voiceIndex) {
        isFace;
        if ("" == msg) return;
        var params = {
          cmd: ddz.EventType.CMD_TABLE_CHAT,
          params: {
            roomId: roomId,
            tableId: tableId,
            seatId: seatId,
            gameId: ddz.GameId,
            msg: msg,
            isFace: isFace,
            voiceIdx: voiceIndex
          }
        };
        hall.MsgFactory._sendCmd(params);
      }
    };
    cc._RF.pop();
  }, {} ],
  MsgInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59fb8QnyzVA2ZD1LTwYfPpm", "MsgInfo");
    "use strict";
    hall.MsgInfo = cc.Class({
      ctor: function ctor() {
        this.m_sysInfo = [];
        this.m_receiveInfo = [];
        this.m_sendInfo = [];
        this.m_jewelData = null;
        this.m_msgTipData = [];
        this.m_coinListData = null;
      },
      parseSysInfo: function parseSysInfo(data) {
        data && (this.m_sysInfo = data);
      },
      parseReceiveInfo: function parseReceiveInfo(data) {
        data && (this.m_receiveInfo = data);
      },
      parseSendInfo: function parseSendInfo(data) {
        data && (this.m_sendInfo = data);
      },
      parseJewelData: function parseJewelData(data) {
        data && (this.m_jewelData = data);
      },
      parseCoinData: function parseCoinData(data) {
        data && (this.m_coinListData = data);
      },
      praseModultTip: function praseModultTip(data) {
        return;
        var msg;
      }
    });
    cc._RF.pop();
  }, {} ],
  NormalInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01279vYHztFNJh2ADNSKWeC", "NormalInfo");
    "use strict";
    hall.NormalInfo = cc.Class({
      ctor: function ctor() {
        this.m_isNewUser = false;
        this.m_type = "";
        this.m_snsToken = "";
        this.m_snsExpires = 0;
        this.m_snsTradeNo = "";
        this.userId = 0;
        this.m_authCode = "";
        this.m_authInfo = "";
        this.m_passWord = "";
        this.m_levelTitle = "";
        this.m_fangyan = 0;
        this.m_localCoin = 0;
        this.m_gold = 0;
        this.m_chip = 0;
        this.m_diamondCount = [];
        this.m_state = 0;
        this.m_location = [];
        this.m_reward = [];
        this.m_dayinfo = [ [], [], [] ];
        this.m_strCity = "";
        this.gameId = 0;
        this.dayfirst = 0;
        this.htmlRaffle = "";
        this.code = 0;
        this.needreg = 0;
        this.uInfo = "";
        this.m_eType = -1;
        this.clientid = "";
      }
    });
    cc._RF.pop();
  }, {} ],
  NormalRoomInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95748Jrlp9Np66ByrVLAqaS", "NormalRoomInfo");
    "use strict";
    ddz.NormalRoomInfo = cc.Class({
      ctor: function ctor() {
        var info = arguments[0];
        this.least = 0;
        this.minQuickStartChip = 0;
        this.config = 0;
        this.id = 0;
        this.condition = "";
        this.subdesc = "";
        this.name = "";
        this.nameurl = "";
        this.entry = "";
        this.give_total = 0;
        this.give_coupon = 0;
        info && this.parserInfo(info);
      },
      parserInfo: function parserInfo(info) {
        this.least = info["least"];
        this.minQuickStartChip = info["minQuickStartChip"];
        this.config = info["config"];
        this.id = info["id"];
        this.condition = info["condition"];
        this.subdesc = info["subdesc"];
        this.name = info["name"];
        this.nameurl = info["nameurl"];
        this.entry = info["entry"];
        this.count = info["least"];
        var tbbox = info["tbbox"];
        tbbox && (this.give_total = tbbox["pt"]);
        info["showInfo"] && this.parseShowInfo(info["showInfo"]);
        info["mixId"] && (this.mixId = info["mixId"]);
        this.play_mode = info["play_mode"];
        info["userCount"] && (this.userCount = info["userCount"]);
      },
      parseShowInfo: function parseShowInfo(showInfo) {
        this.gameDes = showInfo["gameDes"];
        this.showName = showInfo["name"];
      }
    });
    cc._RF.pop();
  }, {} ],
  NotificationCenter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62e403S/OpC1rWjuGnXZJVo", "NotificationCenter");
    "use strict";
    console.log("NotificationCenter loaded");
    ty.NotificationCenter = {
      events: {},
      listen: function listen(eName, handler, scope) {
        this.events[eName] = this.events[eName] || [];
        this.events[eName].push({
          scope: scope || this,
          handler: handler
        });
      },
      ignore: function ignore(eName, handler, scope) {
        scope = scope || this;
        var fns = this.events[eName];
        if (!fns) return;
        this.events[eName] = fns.filter(function(fn) {
          return fn.scope != scope || fn.handler != handler;
        });
      },
      ignoreScope: function ignoreScope(scope) {
        for (var msg in this.events) {
          var obs = this.events[msg];
          obs && (this.events[msg] = obs.filter(function(fn) {
            if (fn.scope != scope) return true;
            hall.LOGD(null, "ty.NotificationCenter : remove listener by Scope: " + msg);
            return false;
          }));
        }
      },
      trigger: function trigger(eventName, params) {
        var fns = this.events[eventName];
        if (!fns) return;
        var fn;
        for (var i = 0; i < fns.length; i++) {
          fn = fns[i];
          fn.handler.call(fn.scope, params);
        }
      }
    };
    cc._RF.pop();
  }, {} ],
  PlayerPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a966/Fkt1Ma7lus1oP7o80", "PlayerPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "h5.playPlayerNode";
      },
      initWithPar: function initWithPar(bLeft, bTop, playContrl, index) {
        this._bLeft = bLeft;
        this._bTop = bTop;
        this._playController = playContrl;
        this._userInfo = null;
        this._playedCards = [];
        this._leftTime = -1;
        this._index = index;
        this.reset();
      },
      properties: {
        avatar: cc.Node,
        lblMsg: cc.Label,
        lblNum: cc.Label,
        lblNumBg: cc.Sprite,
        aniJingDeng: cc.Node,
        lblTimer: cc.Label,
        cardNode: cc.Node,
        waitTimer: cc.Node,
        chatButton: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.SHOW_GAME_WIN_ANI, this.onShoGameWinAni, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.onGameHide, this);
        this.chatButton.node.on("click", this.onChatButton, this);
        this._cardBaseScale = .52;
      },
      onRemoveAni: function onRemoveAni() {
        this.aniJingDeng.removeFromParent();
      },
      onGameHide: function onGameHide() {},
      onChatButton: function onChatButton() {
        ddz.LOGD(null, "onChatButton index = " + this._index);
        this._userInfo && this._playController.clickChatButton(this._index);
      },
      getAvatarCom: function getAvatarCom() {
        return this.avatar.getComponent("Avatar");
      },
      getIsFriend: function getIsFriend() {
        return this._playController.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND;
      },
      getIsGold: function getIsGold() {
        return this._playcontroller.tableInfo().getSceneType() == ddz.Enums.SceneType.NORMAL;
      },
      onShoGameWinAni: function onShoGameWinAni(dizhuWin) {
        var dizhuIndex = this._playController._tableState.normalInfo.m_dizhu;
        var myIndex = this.getMyIndex();
        var widx = 0;
        var aniName;
        if (dizhuWin) if (myIndex == dizhuIndex) aniName = "shengli"; else {
          aniName = "shibai";
          widx = 1;
        } else if (myIndex == dizhuIndex) {
          aniName = "shibai";
          widx = 1;
        } else aniName = "shengli";
      },
      hideAll: function hideAll() {
        this.avatar.active = false;
        this.setChatButtonActive(false);
        this.waitTimer.active = false;
        this.setLblMsg(" ");
        this.stopJingDengAni();
      },
      setChatButtonActive: function setChatButtonActive(isAvtive) {
        this.chatButton.node.active = isAvtive;
      },
      start: function start() {},
      reset: function reset(force) {
        this.hideAll();
        !force && this.getIsFriend() || (this._userInfo = null);
        this._leftTime = -1;
        this.setLblNum("");
        this.lblNumBg.setVisible(false);
        this.stopJingDengAni();
        this.clearCards();
        if (force) {
          this.getIsFriend() && (this.avatar.active = true);
          this.getAvatarCom().resetAvatar();
          this.getAvatarCom().setPlayerName("");
        } else if (this.getIsFriend()) this.avatar.active = true; else {
          this.getAvatarCom().resetAvatar();
          this.getAvatarCom().setPlayerName("");
        }
      },
      setPrepareVisible: function setPrepareVisible(bVisible) {
        this.setLblMsg(bVisible ? "已准备" : " ");
      },
      clearCards: function clearCards() {
        this.cardNode.scale = .52;
        var cardCom;
        while (this._playedCards.length > 0) {
          cardCom = this._playedCards.pop();
          this._playController.returnCard(cardCom.node);
        }
      },
      getMyIndex: function getMyIndex() {
        var myIndex;
        myIndex = this._bTop ? ddz.GlobalFuncs.getTopIndex(this._playController._mySeatIndex) : this._bLeft ? ddz.GlobalFuncs.getPreIndex(this._playController._mySeatIndex) : ddz.GlobalFuncs.GetNextIndex(this._playController._mySeatIndex);
        return myIndex;
      },
      refreshAvatarForeFriend: function refreshAvatarForeFriend(origin) {
        this.initData();
        this.avatar.active = true;
        var dizhuIndex = this._playController._tableState.normalInfo.m_dizhu;
        var myIndex = this.getMyIndex();
        var that = this;
        var nextCallBack = function nextCallBack() {
          var isDiZhu = myIndex == dizhuIndex;
          if (isDiZhu) {
            var to_pos = that._playController.getEmoPos(myIndex);
            origin ? that._playController.showDizhuHatOrigin(to_pos) : that._playController.showDizhuHat(to_pos);
          }
        };
        requestAnimationFrame(nextCallBack);
        this.refreshCardsNum();
      },
      refreshAvatarForeFriendOrigin: function refreshAvatarForeFriendOrigin() {
        this.avatar.active = true;
        var dizhuIndex = this._playController._tableState.normalInfo.m_dizhu;
        var that = this;
        var nextCallBack = function nextCallBack() {
          var myIndex = that.getMyIndex();
          var isDiZhu = myIndex == dizhuIndex;
          if (isDiZhu) {
            var to_pos = that._playController.getEmoPos(myIndex);
            that._playController.showDizhuHatOrigin(to_pos);
          }
        };
        requestAnimationFrame(nextCallBack);
      },
      initData: function initData() {
        if (this._userInfo) return;
        this._bTop ? this._userInfo = this._playController._topSeatinfo.model.user_info : this._userInfo = this._bLeft ? this._playController._leftSeatinfo.model.user_info : this._playController._rightSeatinfo.model.user_info;
      },
      refreshWithUserInfo: function refreshWithUserInfo() {
        this.hideAll();
        this.initData();
        if (!this._userInfo) return;
        this.avatar.active = true;
        this.getIsFriend();
        var slice_name = hall.GlobalFuncs.SliceStringToLength(this._userInfo.udataInfo.m_name, 10);
        this.getAvatarCom().setPlayerName(slice_name);
        var url = this._userInfo.udataInfo.m_purl;
        url.length > 0 && this.getAvatarCom().setAvatarUrl(url);
      },
      getUserInfo: function getUserInfo() {
        var data = {};
        data.url = this._userInfo.udataInfo.m_purl;
      },
      showJiaodz: function showJiaodz(call) {
        var name;
        var audioName = this.getIsMale() ? "man_" : "female_";
        var grab = this._playController._tableInfo.config.m_grab;
        if (1 == grab) if (this._playController._mDizhuCalled) {
          name = call > 0 ? "抢地主" : "不抢";
          audioName += call > 0 ? "rob_dizhu" : "not_rob";
        } else {
          name = call > 0 ? "叫地主" : "不叫";
          audioName += call > 0 ? "call_dizhu" : "not_call";
        } else {
          name = call > 0 ? call + "分" : "不叫";
          audioName += call > 0 ? call + "_point" : "not_call";
        }
        this.setLblMsg(name);
        ddz.LOGD(this._TAG, "audioName=" + audioName);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[audioName], false);
      },
      showJiaodzOnlyNumber: function showJiaodzOnlyNumber(call) {
        var name;
        var grab = this._playController._tableInfo.config.m_grab;
        if (1 == grab) ; else {
          if (-1 == call) return;
          name = call > 0 ? call + "分" : "不叫";
        }
        this.setLblMsg(name);
      },
      showCards: function showCards(cardNums, bDizhu) {
        cardNums.length > 0 && this._addCardsIntoContainer(cardNums, true, bDizhu);
      },
      refreshCardsNum: function refreshCardsNum(widthOutAudioEffect) {
        var seat_info;
        seat_info = this._bTop ? this._playController._topSeatinfo : this._bLeft ? this._playController._leftSeatinfo : this._playController._rightSeatinfo;
        var leftNum = seat_info.model.m_card.length;
        this.changeShowLeftNum(leftNum);
        leftNum < 3 && !this.aniJingDeng.active && this.playJingDengAni();
        if (!widthOutAudioEffect) {
          var path;
          var sexStr = this.getIsMale() ? "man_" : "female_";
          2 == leftNum ? path = sexStr + "I_got_left_two_cards" : 1 == leftNum && (path = sexStr + "I_got_left_one_cards");
          if (path) {
            ddz.LOGD(null, "playEffect=" + path);
            ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[path], false);
          }
        }
      },
      changeShowLeftNum: function changeShowLeftNum(leftNum) {
        this.setLblNum("" + leftNum);
        this.lblNumBg.setVisible(true);
      },
      playJingDengAni: function playJingDengAni() {
        this.aniJingDeng.active = true;
        var animationCom = this.aniJingDeng.getComponent(cc.Animation);
        var ani = animationCom.getAnimationState("jingdeng_anim");
        ani.play();
      },
      stopJingDengAni: function stopJingDengAni() {
        this.aniJingDeng.active = false;
      },
      _addCardsIntoContainer: function _addCardsIntoContainer(cardNums, bSort, bDizhu, withAni) {
        this.clearCards();
        var len = cardNums.length;
        var breakline = ddz.PLAYED_CARDS_MAXINLINE;
        var card, cardCom;
        for (var i = 0; i < len; i++) {
          card = this._playController.createNewCard(cardNums[i]);
          cardCom = card.getComponent("Card");
          cardCom.showMask(false);
          this._playedCards.push(cardCom);
        }
        bSort && this._playedCards.sort(ddz.GlobalFuncs.SortCardFunc);
        var container = this.cardNode;
        var cardSize = ddz.CARD_BIG_SIZE;
        var splitWidth = 60;
        var px, py;
        var startPosX = 0;
        if (!this._bLeft) {
          startPosX = ((len < breakline ? len : breakline) - 1) * splitWidth + cardSize.width;
          startPosX += 20;
        }
        var canShowTag;
        for (var index = 0; index < len; index++) {
          cardCom = this._playedCards[index];
          card = cardCom.node;
          px = index % breakline * splitWidth - startPosX;
          py = 56 * -Math.floor(index / breakline);
          card.setPosition(px, py);
          card.parent = container;
          card.zIndex = index;
          canShowTag = ddz.GlobalFuncs.canShowTag(breakline, len, index);
          cardCom.showTag(canShowTag);
          cardCom.setDiZhuTag(bDizhu && canShowTag);
        }
        withAni && ddz.GlobalFuncs.showDropEffect(this._cardBaseScale, container);
      },
      setLblMsg: function setLblMsg(val) {
        if (!cc.isValid(this.lblMsg)) return;
        if (val) {
          this.lblMsg.node.active = true;
          this.lblMsg.string = val;
        } else this.lblMsg.node.active = false;
      },
      setLblNum: function setLblNum(val) {
        if (!cc.isValid(this.lblNum)) return;
        if (val) {
          this.lblNum.node.active = true;
          try {
            this.lblNum.string = val;
          } catch (e) {
            hall.LOGE("setLblNum error:", val);
          }
        } else this.lblNum.node.active = false;
      },
      setClockVisible: function setClockVisible(bVisible, time) {
        this.clearCards();
        this.setLblMsg(" ");
        bVisible ? this.showTimer(time) : this.hideTimer();
      },
      showTimer: function showTimer(valTime) {
        if (!cc.isValid(this.lblTimer)) return;
        this._leftTime = valTime;
        this.waitTimer.active = true;
        this.lblTimer.string = this._leftTime ? this._leftTime + "" : " ";
        this.unscheduleAllCallbacks();
        this.schedule(function() {
          this._leftTime--;
          if (this._leftTime < 0) {
            this.hideTimer();
            return;
          }
          if (0 == this._leftTime && this.getIsFriend()) {
            this.lblTimer.string = "0";
            this.unscheduleAllCallbacks();
            return;
          }
          this.lblTimer.string = this._leftTime ? this._leftTime + "" : " ";
        }, 1, this);
      },
      hideTimer: function hideTimer() {
        this.unscheduleAllCallbacks();
        this.waitTimer.active = false;
      },
      getIsMale: function getIsMale() {
        if (this._userInfo && this._userInfo.udataInfo) return this._userInfo.udataInfo.m_sex == ddz.Enums.PlayerSexEnum.SEX_MALE;
        return true;
      },
      playCards: function playCards(cardNums, bDizhu) {
        ddz.LOGD(this._TAG, "playCards");
        var len = cardNums.length;
        if (len <= 0) {
          this.setLblMsg(ddz.MSG_TEXT_BUCHU);
          var filename = this.getIsMale() ? "man_no" : "female_no";
          ddz.LOGD(this._TAG, "playEffect=" + filename);
          ddz.AudioHelper.playEffect(ddz.EffectPath_mp3[filename], false);
          return;
        }
        var card_types = ddz.RobotGlobal.judgeType(cardNums, false);
        this._playController.playAnimationSoundByCardType(card_types[0], this.getIsMale());
        this.setLblMsg(" ");
        this._addCardsIntoContainer(cardNums, false, bDizhu, true);
        this.refreshCardsNum();
      },
      playTopCards: function playTopCards(cardNums, bDizhu) {
        ddz.LOGD(this._TAG, "playTopCards");
        this.setLblMsg(" ");
        this._addCardsIntoContainer(cardNums, false, bDizhu);
        this.refreshCardsNum(true);
      },
      onDestroy: function onDestroy() {
        this._playController = null;
        this._userInfo = null;
        this._playedCards = null;
        ty.NotificationCenter.ignoreScope(this);
        this.hideTimer();
      }
    });
    cc._RF.pop();
  }, {} ],
  PlayingNetMsg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fb34jOOVRDCbrru4sZelx6", "PlayingNetMsg");
    "use strict";
    ddz.PlayingNetMsg = cc.Class({
      ctor: function ctor() {
        this._TAG = "ddz.PlayingNetMsg";
        this._playController = arguments[0];
        this._setListenMsg();
      },
      destroy: function destroy() {
        ty.NotificationCenter.ignoreScope(this);
      },
      _setListenMsg: function _setListenMsg() {
        ty.NotificationCenter.listen(ddz.EventType.RECIVE_QUICK_START, this.onQuickStart, this);
        ty.NotificationCenter.listen(ddz.EventType.RECIVE_TABLE_INFO, this.onTableInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MULTI, this.onUpdateMulti, this);
        ty.NotificationCenter.listen(ddz.EventType.MSG_TABLE_CALL, this._onTableCall, this);
        ty.NotificationCenter.listen(ddz.EventType.MSG_TODO_QUICK_START, this.onTodoTaskQuickStart, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_DUIJU_LIUSHUI, this.onHistory, this);
      },
      user: function user() {
        return this._playController;
      },
      onTodoTaskQuickStart: function onTodoTaskQuickStart(params) {
        if (this.user()._resultController) {
          this.user()._resultController._destroy();
          this.user()._reset();
        }
      },
      onHistory: function onHistory() {
        hall.GlobalFuncs.onHistory();
      },
      _isAction: function _isAction(actionSrc, dst) {
        return actionSrc == dst;
      },
      onTableInfo: function onTableInfo(argument) {
        hall.LOGW("", "========onTableInfo=========state======" + argument.stat.state);
        var playscene = this.user();
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
        var info = argument;
        var tableinfo = playscene.tableInfo();
        var oldScenType = playscene.tableInfo().getSceneType();
        tableinfo.parseTableInfo(info);
        var newSceneType = playscene.tableInfo().getSceneType();
        null != oldScenType && oldScenType != ddz.Enums.SceneType.FRIEND && newSceneType == ddz.Enums.SceneType.FRIEND && playscene.toFriend();
        if (newSceneType == ddz.Enums.SceneType.FRIEND) {
          playscene.changeBg(1);
          playscene._reset();
        }
        ddz.LOGD("", "file = [PlayingNetMsg] fun = [onTableInfo] type = " + playscene.tableInfo().getSceneType());
        "wild" == info["playMode"] ? playscene.setType(ddz.Enums.PlayType.PLAY_TYPE_LAIZI) : 0 == info["config"]["grab"] ? playscene.setType(ddz.Enums.PlayType.PLAY_TYPE_JINGDIAN) : playscene.setType(ddz.Enums.PlayType.PLAY_TYPE_HUANLE);
        info.hasOwnProperty("stat") && playscene.updateTableState(info);
        ddz.LOGD(this._TAG, "in _onTableInfo");
        playscene._refreshMultipleLabel(false, true, info["ftInfo"] && playscene._tableState.normalInfo.m_call > -1);
        playscene._setCardsTipVisible(false);
        var key = "seat" + playscene._mySeatIndex;
        playscene.parseMySeatInfo(info[key]);
        var curScene = cc.director.getScene();
        "TableScene" != curScene.name || info[key].isLimit || wx.getSetting({
          success: function success(res) {
            res.authSetting["scope.userInfo"] || hall.loginBtnManager.showTableAuthorizeBtn();
          }
        });
        this._parsePartnerInfo(info);
        var state = playscene._tableState.normalInfo.m_state;
        if (playscene._friendPanel) {
          playscene.tableInfo().disbind ? playscene._friendPanel.refreshDisbindState(playscene.tableInfo().disbind) : playscene._friendPanel.deleteDisbindState();
          playscene._friendPanel.refresh();
          playscene._friendPanel.setBtnInviteState(!Boolean(playscene._leftSeatinfo.hasData && playscene._rightSeatinfo.hasData));
        }
        ddz.gameModel.getNewRedBagReward();
        if (state == ddz.Enums.TableState.TABLEDSTAT_IDLE) {
          playscene.isMode(ddz.Enums.PlayMode.PLAY_MODE_REPLAY) ? playscene.changeBg(1) : playscene.tableInfo().getSceneType() != ddz.Enums.SceneType.FRIEND && ddz.MsgFactory.getReady(playscene.tableInfo().roomId(), playscene.tableInfo().tableId(), playscene._mySeatIndex);
          if (newSceneType == ddz.Enums.SceneType.MATCH && playscene._leftSeatinfo.hasData && playscene._rightSeatinfo.hasData) {
            ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
            playscene.showStage(ddz.matchModel.getStageIndex());
          }
        } else {
          if (newSceneType == ddz.Enums.SceneType.MATCH) {
            ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
            playscene.changeBg(ddz.matchModel.getStageIndex());
          }
          ddz.LOGD(this._TAG, "is reconnect.......");
          playscene._isOnReady = true;
          if (state == ddz.Enums.TableState.TABLEDSTAT_PLAYING) {
            playscene.changePlayerAvatar(false);
            playscene._startPlay();
            playscene.isLaizi() && (playscene._changeLaiZi = true);
          } else state == ddz.Enums.TableState.TABLEDSTAT_CALLING && playscene._startJiaodz();
          var nowop = playscene._tableState.normalInfo.m_nowop;
          var isMyTurn = nowop == playscene._mySeatIndex;
          var leftTime = playscene._tableInfo.config.m_optime - playscene._tableInfo.config.m_passtime;
          playscene.tableInfo().getSceneType() == ddz.Enums.SceneType.FRIEND && (leftTime = ddz.FriendOpTimeOut);
          if (isMyTurn) {
            state == ddz.Enums.TableState.TABLEDSTAT_PLAYING ? playscene._operateController.showPlay(playscene._resetTopCardType()) : state == ddz.Enums.TableState.TABLEDSTAT_CALLING && playscene.updateJiaodzFromTableInfo();
            playscene._operateController.setClockVisible(true, leftTime);
          } else {
            playscene._operateController.hideAll();
            var con = nowop == ddz.GlobalFuncs.GetNextIndex(playscene._mySeatIndex) ? playscene._rightPlayerController : playscene._leftPlayerController;
            con.setClockVisible(true, leftTime);
          }
          playscene.showTopCards();
          ty.NotificationCenter.trigger(ddz.EventType.USE_NEW_CARD_NOTE);
          playscene._initMyCards();
          playscene._resetExtraCards();
          if (state == ddz.Enums.TableState.TABLEDSTAT_PLAYING) {
            playscene._flipExtraCards(false, true);
            playscene.showBaseLaiZi();
          }
          playscene._refreshCardsLayer();
          playscene._resetTopCardType(!isMyTurn);
          if (1 == playscene._mySeatinfo.model.m_robot) {
            ddz.LOGD(this._TAG, "托管状态 _tableInfo");
            playscene.setIsInTrust(true);
          }
          playscene.hideStage();
        }
        if (playscene.tableInfo().getSceneType() == ddz.Enums.SceneType.ARENA) {
          ty.NotificationCenter.trigger(ddz.EventType.REMOVE_MATCHING);
          playscene._arenaPanel && playscene._arenaPanel.refreshShow();
        }
        ddz.msgCache.dump();
      },
      _parsePartnerInfo: function _parsePartnerInfo(info) {
        var playscene = this.user();
        var nextId = ddz.GlobalFuncs.GetNextIndex(playscene._mySeatIndex);
        var rkey = "seat" + nextId;
        var seatInfo = info[rkey];
        if (info.hasOwnProperty(rkey)) {
          ddz.LOGD(this._TAG, "parse right user info in tableInfo");
          var ruid = seatInfo["uid"];
          if (0 != ruid) {
            playscene._rightSeatinfo.parseSeatInfo(seatInfo, nextId);
            playscene._rightPlayerController.refreshWithUserInfo();
            playscene._rightSeatinfo.model.m_state == ddz.Enums.SeatState.SEATDZSTAT_READY && playscene._rightPlayerController.setPrepareVisible(true);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
              pos: "right",
              type: "sit"
            });
          } else {
            playscene._rightPlayerController.reset(true);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
              pos: "right",
              type: "leave"
            });
          }
        } else ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
          pos: "right",
          type: "none"
        });
        var preIndex = ddz.GlobalFuncs.getPreIndex(playscene._mySeatIndex);
        var lkey = "seat" + preIndex;
        seatInfo = null;
        if (info.hasOwnProperty(lkey)) {
          seatInfo = info[lkey];
          ddz.LOGD(this._TAG, "parse left user info in tableInfo");
          var luid = seatInfo["uid"];
          if (0 != luid) {
            playscene._leftSeatinfo.parseSeatInfo(seatInfo, preIndex);
            playscene._leftPlayerController.refreshWithUserInfo();
            playscene._leftSeatinfo.model.m_state == ddz.Enums.SeatState.SEATDZSTAT_READY && playscene._leftPlayerController.setPrepareVisible(true);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
              pos: "left",
              type: "sit"
            });
          } else {
            playscene._leftPlayerController.reset(true);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
              pos: "left",
              type: "leave"
            });
          }
        } else ty.NotificationCenter.trigger(ddz.EventType.UPDATE_PLAYER_INFO, {
          pos: "left",
          type: "none"
        });
        playscene._friendPanel && playscene._friendPanel.setBtnInviteState(!Boolean(playscene._leftSeatinfo.hasData && playscene._rightSeatinfo.hasData));
      },
      onQuickStart: function onQuickStart(argument) {
        var result = argument;
        this.user()._roomId = result["roomId"];
        var seatId = result["seatId"];
        ddz.LOGD(this._TAG, "on quick start in play controller...seatId = " + seatId);
        if (null != seatId && "undefined" != typeof seatId && 0 != seatId) {
          this.user()._mySeatIndex = seatId;
          ddz.tableChatModel.mySeatId = seatId;
        } else ddz.LOGD(this._TAG, "SEATID in msg quickstart ERROR - " + seatId);
      },
      onUpdateMulti: function onUpdateMulti(params) {
        ddz.LOGD(this._TAG, "更新倍数");
        this.user()._refreshMultipleLabel(params[0], params[1]);
      },
      _onTableCall: function _onTableCall(argument) {
        var playscene = this.user();
        if (playscene.isMode(ddz.Enums.PlayMode.PLAY_MODE_SINGLE)) return;
        if (0 == playscene.tableInfo().tableId()) return;
        if (playscene.isStatus(ddz.Enums.PlayStatus.PLAY_STATUS_GAMEOVER)) return;
        var check = argument;
        if ("undefined" != typeof check["error"]) {
          var errorMsg = check["error"]["info"];
          if ("undefined" == typeof errorMsg) return;
          ddz.LOGD(this._TAG, "error msg is = " + errorMsg);
          hall.MsgBoxManager.showToast({
            title: errorMsg
          });
          return;
        }
        false == playscene.isReplay();
        var result = argument["result"];
        var action = result["action"];
        ddz.LOGD(null, "on table call in play controller: " + JSON.stringify(argument));
        result.hasOwnProperty("stat") && playscene.updateTableState(result);
        if (this._isAction(action, "ready")) playscene.onActionReady(result["seatId"]); else if (this._isAction(action, "game_ready")) playscene.onActionGameReady(result); else if (this._isAction(action, "next")) playscene.onActionNext(result); else if (this._isAction(action, "smilies")) playscene.onActionChat(result); else if (this._isAction(action, "call")) playscene.onActionCall(result); else if (this._isAction(action, "game_start")) playscene.onActionGameStart(result); else if (this._isAction(action, "card")) playscene.onActionCard(result); else if (this._isAction(action, "rb")) {
          playscene.onActionRb(result);
          ddz.LOGD(null, this._TAG, "action == rb");
        } else if (this._isAction(action, "game_win")) {
          ddz.LOGD(this._TAG, "action == game_win");
          playscene.onActionGameWin(result);
        } else if (this._isAction(action, "wild_card")) {
          ddz.LOGD(this._TAG, "action == wild_card");
          playscene.onActionWildCard(result);
        } else if (this._isAction(action, "ft_req_disbind")) {
          ddz.LOGD(this._TAG, "action == ft_req_disbind" + JSON.stringify(result));
          ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_REQ_DISBIND, result);
        } else if (this._isAction(action, "ft_req_disbind_answer")) {
          ddz.LOGD(this._TAG, "action == ft_req_disbind_answer" + JSON.stringify(result));
          ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_REQ_DISBIND_ANSWER, result);
        } else if (this._isAction(action, "ft_req_disbind_result")) {
          ddz.LOGD(this._TAG, "action == ft_req_disbind_result" + JSON.stringify(result));
          ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_REQ_DISBIND_RESULT, result);
        } else if (this._isAction(action, "ft_disbind")) {
          ddz.LOGD(this._TAG, "action == ft_disbind" + JSON.stringify(result));
          ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_DISBIND, result);
        } else if (this._isAction(action, "newCardNote")) {
          ddz.LOGD(this._TAG, "action == newCardNote" + JSON.stringify(result));
          playscene.onActionCardNote(result);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ProgressBarSub: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0cd3aWaHRGdYx4eepbO1RJ", "ProgressBarSub");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        ptLeft: cc.Sprite,
        ptRight: cc.Sprite,
        txtLeft: cc.Label,
        txtRight: cc.Label,
        lineMask: cc.Mask,
        lineDarkR: cc.Mask,
        spFrameLight: cc.SpriteFrame,
        spFrameDark: cc.SpriteFrame
      },
      initWith: function initWith(obj) {
        this._type = obj["type"];
        this._numLeft = obj["numLeft"];
        this._numRight = obj["numRight"];
        this._needShowLeft = obj["needShowLeft"];
        this._needShowRight = obj["needShowRight"];
        this.txtLeft.string = this._numLeft + "";
        this.txtRight.string = this._numRight + "";
        this.ptLeft.node.active = this._needShowLeft;
        this.lineDarkR.node.active = this._needShowRight;
        if (0 == this._type) {
          this.lineMask.node.width = 0;
          this.ptRight.spriteFrame = this.spFrameDark;
        } else if (1 == this._type) {
          this.lineMask.node.width = 70;
          this.ptRight.spriteFrame = this.spFrameLight;
        }
      },
      reset: function reset() {
        this._type = 0;
        this._numLeft = 0;
        this._numRight = 0;
        this._needShowLeft = false;
        this._needShowRight = false;
        this.ptLeft.node.active = false;
        this.lineDarkR.node.active = false;
        this.lineMask.width = 0;
        this.ptRight.spriteFrame = this.spFrameDark;
      },
      forward: function forward() {
        var that = this;
        var ani = this.getComponent(cc.Animation);
        var aniState = ani.getAnimationState("forward");
        aniState.once("finished", function() {
          that.ptRight.spriteFrame = that.spFrameLight;
          ty.NotificationCenter.trigger(ddz.EventType.STAGE_FORWARD, that._numRight);
        }, this);
        aniState.play();
      }
    });
    cc._RF.pop();
  }, {} ],
  PropagateInterface: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98521xzfURGVaqRPaKxuEHl", "PropagateInterface");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    ty.PropagateInterface = {
      getShareConfigInfo: function getShareConfigInfo(reqObj) {
        "object" != ("undefined" === typeof reqObj ? "undefined" : _typeof(reqObj)) && (reqObj = {});
        var timeStamp = new Date().getTime();
        reqObj.act = "api.getShareConfig";
        reqObj.time = timeStamp;
        reqObj.game_mark = ty.SystemInfo.cloudid + "-" + ty.SystemInfo.gameId;
        debugMode && (reqObj.ext_type = "test");
        var signStr = this.getConfigSignStr(reqObj);
        var paramStrList = [];
        for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
        paramStrList.push("sign=" + signStr);
        var finalUrl = ty.SystemInfo.shareManagerUrl + "?" + paramStrList.join("&");
        var successcb = function successcb(ret) {
          ddz.gameModel.saveShareConfigFromHttp(ret.retmsg);
          ty.NotificationCenter.trigger(ty.EventType.GET_SHARE_CONFIG_SUCCESS, ret);
        };
        var failcb = function failcb(ret) {
          ty.NotificationCenter.trigger(ty.EventType.GET_SHARE_CONFIG_FAIL, ret);
        };
        ty.HttpUtil.httpGet({
          url: finalUrl
        }, successcb, failcb);
      },
      getSingleShareConfigInfo: function getSingleShareConfigInfo(reqObj) {
        "object" != ("undefined" === typeof reqObj ? "undefined" : _typeof(reqObj)) && (reqObj = {});
        var timeStamp = new Date().getTime();
        reqObj.act = "api.getShareConfig";
        reqObj.time = timeStamp;
        reqObj.game_mark = ty.SystemInfo.cloudid + "-" + ty.SystemInfo.gameId;
        debugMode && (reqObj.ext_type = "test");
        var signStr = this.getConfigSignStr(reqObj);
        var paramStrList = [];
        for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
        paramStrList.push("sign=" + signStr);
        var finalUrl = ty.SystemInfo.shareManagerUrl + "?" + paramStrList.join("&");
        var successcb = function successcb(ret) {
          var shareObj = ret.retmsg;
          delete shareObj["shareExt"];
          ty.NotificationCenter.trigger(ty.EventType.GET_SHARE_SINGLE_CONFIG_SUCCESS, shareObj);
        };
        var failcb = function failcb(ret) {
          ty.NotificationCenter.trigger(ty.EventType.GET_SHARE_SINGLE_CONFIG_FAIL, ret);
        };
        ty.HttpUtil.httpGet({
          url: finalUrl
        }, successcb, failcb);
      },
      getUserFeatureInfo: function getUserFeatureInfo() {
        var _url = "https://iploc.ywdier.com/api/iploc5/search/city";
        wx.request({
          url: _url,
          success: function success(res) {
            200 == res.statusCode && ty.NotificationCenter.trigger(ty.EventType.GET_USER_FEATURE_SUCCESS, res);
          },
          fail: function fail(res) {
            ty.NotificationCenter.trigger(ty.EventType.GET_USER_FEATURE_SUCCESS, res);
          }
        });
      },
      getShareValueConfig: function getShareValueConfig() {
        var timeStamp = new Date().getTime();
        var reqObj = {};
        reqObj.act = "api.getUserFeature";
        reqObj.time = 153248531;
        reqObj.cloud_id = ty.SystemInfo.cloudid;
        reqObj.game_id = ty.SystemInfo.gameId;
        reqObj.user_id = 10003;
        var signStr = this.getConfigSignStr(reqObj);
        hall.LOGE("", "file = [PropagateInterface] fun = [getShareValueConfig] _sign = " + JSON.stringify(signStr));
        var paramStrList = [];
        for (var key in reqObj) paramStrList.push(key + "=" + reqObj[key]);
        paramStrList.push("sign=" + signStr);
        var finalUrl = "https://analy.ywdier.com/?" + paramStrList.join("&");
        var successcb = function successcb(ret) {
          ty.NotificationCenter.trigger(ty.EventType.GET_USER_FEATURE_SUCCESS, ret);
        };
        var failcb = function failcb(ret) {
          ty.NotificationCenter.trigger(ty.EventType.GET_USER_FEATURE_FAIL, ret);
        };
        ty.HttpUtil.httpGet({
          url: finalUrl
        }, successcb, failcb);
      },
      getConfigSignStr: function getConfigSignStr(reqObj) {
        var sortedKeys = Object.keys(reqObj).sort();
        var signStr = "";
        for (var i = 0; i < sortedKeys.length; i++) {
          var key = sortedKeys[i];
          if ("act" == key || "sign" == key) continue;
          signStr += key + "=" + reqObj[key];
        }
        var finalSign = hall.hex_md5("market.tuyoo.com-api-" + signStr + "-market.tuyoo-api") || "";
        return finalSign;
      }
    };
    cc._RF.pop();
  }, {} ],
  QrOption: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31a20/vMyFF+qQQNJd+rqs7", "QrOption");
    "use strict";
    ddz.QrOption = cc.Class({
      ctor: function ctor() {
        this.OP_TYPE = {
          BIND_INVITE: 1,
          BIND_QUDAO: 2
        };
        this.quDaoMap = [];
      },
      withQrCode: function withQrCode(scene) {
        var sa = [ 1047, 1048, 1049 ];
        return sa.indexOf(scene) > -1;
      },
      runOption: function runOption(parStr, scene) {
        if (!parStr) return;
        var val = parStr.replace(".html", "");
        val = decodeURIComponent(val);
        var pars = val.split(",");
        var op = parseInt(pars.shift());
        switch (op) {
         case this.OP_TYPE.BIND_INVITE:
          this.bindInvite(pars, scene);
          break;

         case this.OP_TYPE.BIND_QUDAO:
          this.bindQuDao(pars, scene);
        }
      },
      setQuDao: function setQuDao(arr) {
        this.quDaoMap = arr;
      },
      bindInvite: function bindInvite(pars, scene) {
        var from = parseInt(pars[0]);
        if (from) {
          ddz.gameModel.bindInviteCode_ID(from);
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, from ]);
        }
      },
      bindQuDao: function bindQuDao(pars, scene) {
        var from = parseInt(pars[0]);
        from && ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, from ]);
      }
    });
    cc._RF.pop();
  }, {} ],
  QuickStartModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31188FSS85F4oZwMemQ3zl8", "QuickStartModel");
    "use strict";
    ddz.quickStartModel = {
      cache: null,
      _mixId: null,
      _roomId: null,
      parse: function parse(value) {
        this.cache = value.result;
        this.cache.hasOwnProperty("mixId") && (this._mixId = this.cache["mixId"]);
        this.cache.hasOwnProperty("roomId") && (this._roomId = this.cache["roomId"]);
        ty.NotificationCenter.trigger(ddz.EventType.RECIVE_QUICK_START, value.result);
      },
      getMixId: function getMixId() {
        return this._mixId;
      },
      getRoomId: function getRoomId() {
        return this._roomId;
      },
      clean: function clean() {
        this.cache = null;
      }
    };
    cc._RF.pop();
  }, {} ],
  RebateRankInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a334dJgQhxCTIL8anNLyg6R", "RebateRankInfo");
    "use strict";
    hall.RebateRankInfo = cc.Class({
      ctor: function ctor() {
        this.m_leftTime = 0;
        this.m_rank = "";
        this.m_totalWin = 0;
        this.m_reward = "";
        this._showHelp = "";
        this._rankDate = [];
        this._rewardDesc = "";
        this._rewardConf = [];
        this.m_rankInfo = null;
      },
      parase: function parase(data) {
        if (!data) return;
        this.m_leftTime = data["leftTime"];
        this._rankDate = data["rankDatas"];
        this._rewardConf = data["showRewardConf"];
        this._showHelp = data["showHelp"];
        this.m_rank = data["rankInfo"];
        this.m_rankInfo = data["myRankInfo"];
      }
    });
    cc._RF.pop();
  }, {} ],
  RechargeScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7fccc6mv8JA37iX9x6KseIm", "RechargeScene");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        tableView: {
          default: null,
          type: cc.Node
        },
        personalAssets: {
          default: null,
          type: cc.Node
        },
        conversionSuccess: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.updateMallData();
      },
      updateMallData: function updateMallData() {
        var _m_diamondList = hall.gameWorld.model.m_diamondList;
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
        var resultArr = [];
        if (_m_diamondList.length <= 0) return;
        for (var i = 0; i < _m_diamondList.length; i++) {
          var addMap = {};
          addMap.m_diamond = _m_diamondList[i].m_price_diamond;
          addMap.m_mallet = _m_diamondList[i].m_price;
          addMap.m_id = _m_diamondList[i].m_id;
          addMap.m_name = _m_diamondList[i].m_name;
          resultArr.push(addMap);
        }
        var window = this.tableView.getComponent("ddz_tableView");
        window.setDataArray(resultArr);
      },
      backAction: function backAction() {
        ddz.LOGD(null, "file = [MallScene] fun = [backAction]");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var sceneName = "Ddz";
        hall.GlobalFuncs.popScene();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Recharge: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d12f4DOU/pOGIrJn9gQsegS", "Recharge");
    "use strict";
    ty.Recharge = {
      createOrder: function createOrder(id, prodPrice, name, prodCount) {
        var data = {};
        data.prodId = id;
        data.prodPrice = prodPrice;
        data.chargeType = "wxapp.iap";
        data.gameId = ty.SystemInfo.gameId || ty.SystemInfo.hallId;
        data.prodName = name;
        data.prodCount = prodCount;
        data.appInfo = {};
        ty.TuyooSDK.rechargeOrder(data);
      },
      orderCallFunc: function orderCallFunc(url, platformOrderId, chargeCoin) {
        var local_uuid = hall.GlobalFuncs.getLocalUuid();
        var _chargeCoin = chargeCoin;
        wx.request({
          url: url,
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: {
            userId: ty.UserInfo.userId,
            appId: ty.SystemInfo.appId,
            wxAppId: ty.SystemInfo.wxAppId,
            clientId: ty.SystemInfo.clientId,
            imei: "null",
            uuid: local_uuid,
            platformOrderId: platformOrderId
          },
          method: "POST",
          success: function success(results) {
            ty.NotificationCenter.trigger(ddz.EventType.CHARGE_SUCCESS, _chargeCoin);
            var tips = "购买成功";
            var str = "<img src='ddz_button_diamond'/><color=#FFFFFF> " + _chargeCoin + "</c>";
            ddz.GlobalFuncs.playShareZuanShi(_chargeCoin, tips, str);
          },
          fail: function fail(params) {},
          complete: function complete(params) {}
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  RecordManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "65c5cMMRjJEg66CWH8fo7By", "RecordManager");
    "use strict";
    hall.AudioRecordManager = cc.Class({
      ctor: function ctor() {
        this._recorder = null;
        this._defaultTime = 15;
        this._cancel = false;
      },
      initManager: function initManager() {
        if (wx.hasOwnProperty("getRecorderManager")) {
          this._recorder = wx.getRecorderManager();
          this._recorder.onStart(function() {
            ty.NotificationCenter.trigger(ddz.EventType.START_RECORD);
          });
          var that = this;
          this._recorder.onStop(function(res) {
            hall.LOGD(null, "record file : " + res.tempFilePath);
            if (that._cancel) {
              var fs = wx.getFileSystemManager();
              fs.unlinkSync(res.tempFilePath);
            } else ty.NotificationCenter.trigger(ddz.EventType.STOP_RECORD, res.tempFilePath);
          });
          this._recorder.onError(function(res) {
            ty.NotificationCenter.trigger(ddz.EventType.ERROR_RECORD);
            hall.LOGE(null, res.errMsg);
          });
        } else hall.LOGE(null, "version is too old to suport record! please update your wechat!");
      },
      startRecord: function startRecord(time) {
        time = time || this._defaultTime;
        if (!this._recorder) return;
        hall.LOGD(null, "startRecord:" + time);
        this._cancel = false;
        this._recorder.start({
          duration: 1e3 * time,
          sampleRate: 48e3,
          numberOfChannels: 2,
          encodeBitRate: 64e3,
          format: ddz.recordFileType
        });
      },
      pauseRecord: function pauseRecord() {
        this._recorder.pause();
      },
      resumeRecord: function resumeRecord() {
        this._recorder.resume();
      },
      stop: function stop(cancel) {
        this._cancel = cancel;
        this._recorder.stop();
      }
    });
    cc._RF.pop();
  }, {} ],
  RobotGlobal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8576zW74FEQYMI55Cjf/3x", "RobotGlobal");
    "use strict";
    ddz.RobotGlobal = ddz.RobotGlobal || {};
    ddz.RobotGlobal.rocketWin = function(cards) {
      cards.sort(function(c1, c2) {
        return c1 - c2;
      });
      var len = cards.length;
      if (53 == cards[len - 1] && 52 == cards[len - 2]) {
        if (2 == cards.length) return true;
        var left = cards.slice(0, len - 2);
        var types = ddz.RobotGlobal.judgeType(left, true);
        if (types.length > 0) return true;
      }
      return false;
    };
    ddz.RobotGlobal.judgeType = function(cards_arr, bLzChangable) {
      if (0 == cards_arr.length) return [];
      var cards = cards_arr.slice(0);
      var len = cards.length;
      var laiziCnt = 0;
      if (!bLzChangable) for (var i = 0; i < len; i++) if (cards[i] > 53) {
        cards[i] -= 54;
        ++laiziCnt;
      }
      var dicarr = this._getPointCountDicArray(cards);
      var lz_obj = this.getLaiziObject(dicarr);
      var newarr = this._fillDicarr(dicarr);
      return ddz.AITypeJudger(cards, dicarr, newarr, lz_obj, laiziCnt);
    };
    ddz.RobotGlobal._fillDicarr = function(dicarr) {
      dicarr.sort(ddz.GlobalFuncs._sortByPoint);
      dicarr.reverse();
      var newarr = [];
      var start = 14;
      for (var index = 0; index < dicarr.length; index++) {
        var point = dicarr[index].point;
        if (point > 14) break;
        var i = 0;
        for (i = start; i > point; i--) newarr.push({
          point: i,
          count: 0,
          cards: []
        });
        newarr.push(dicarr[index]);
        start = point - 1;
        if (index == dicarr.length - 1 && start >= 0) for (i = start; i >= 0; i--) newarr.push({
          point: i,
          count: 0,
          cards: []
        });
      }
      return newarr;
    };
    ddz.RobotGlobal._getPointCountDicArray = function(arr) {
      var cdic = {};
      var key;
      for (var i = 0; i < arr.length; i++) {
        var num = arr[i];
        var pos = ddz.GlobalFuncs.numberToValue(num);
        num > 53 && (pos = 15);
        key = "" + pos;
        var value = cdic[key];
        if (value) {
          value.count++;
          value.cards.push(num);
        } else {
          value = {
            count: 1,
            cards: [ num ]
          };
          cdic[key] = value;
        }
      }
      for (key in cdic) {
        var cards = cdic[key].cards;
        if (cards.length > 1) {
          cards.sort(function(c1, c2) {
            return c1 - c2;
          });
          cards.reverse();
        }
      }
      var return_arr = [];
      for (key in cdic) return_arr.push({
        point: parseInt(key),
        count: cdic[key].count,
        cards: cdic[key].cards
      });
      return return_arr;
    };
    ddz.RobotGlobal.getLaiziObject = function(dicarr) {
      dicarr.sort(ddz.GlobalFuncs._sortByPoint);
      var lz_obj = null;
      var tmp = dicarr[dicarr.length - 1];
      if (null != tmp && 15 == tmp.point) {
        lz_obj = {
          count: tmp.count,
          point: tmp.point,
          cards: tmp.cards
        };
        tmp.count = 0;
        tmp.point = ddz.GlobalFuncs.pointToValue(lz_obj.cards[0] - 54);
        tmp.cards = [];
      } else lz_obj = {
        count: 0,
        point: -1,
        cards: []
      };
      return lz_obj;
    };
    ddz.RobotGlobal.getSubPCArray = function(pcarray) {
      return pcarray.filter(function(item) {
        return item.count > 0;
      });
    };
    ddz.RobotGlobal.getPCArrayByPoint = function(cards) {
      var arr = ddz.RobotGlobal._getPointCountDicArray(cards);
      return ddz.RobotGlobal.getSubPCArray(arr);
    };
    ddz.RobotGlobal.sortByPoint = function(o1, o2) {
      return o1.point - o2.point;
    };
    ddz.RobotGlobal.sortByCount = function(o1, o2) {
      return o2.count - o1.count;
    };
    ddz.RobotGlobal.sortByLength = function(o1, o2) {
      return o2.len - o1.len;
    };
    ddz.RobotGlobal.findAvailableContinousDevide = function(newarr, cell_count, lz_obj) {
      var return_arr = [];
      for (var index = 0; index < 11; index++) {
        var lz_use = 0;
        var curIndex = 0;
        var cards = [];
        var point = -1;
        while (curIndex <= 11 - index) {
          var sub_index = index + curIndex;
          var tmp = newarr[sub_index];
          point = tmp.point;
          var need = cell_count - tmp.count;
          if (need > 0) {
            var remainLzCnt = lz_obj.count - lz_use;
            if (remainLzCnt < need) break;
            lz_use += need;
            var n = ddz.GlobalFuncs.getLaiziNumByValue(point);
            for (var j = 0; j < need; j++) cards.push(n);
            cards = cards.concat(tmp.cards);
          } else for (var i = 0; i < cell_count; i++) cards.push(tmp.cards[i]);
          curIndex++;
        }
        var clen = cards.length;
        if (clen >= 5) {
          lz_obj.count -= lz_use;
          var oneResult = {
            index: index - 1,
            len: curIndex,
            cards: cards
          };
          return_arr.push(oneResult);
        }
      }
      if (return_arr.length <= 0) return {
        index: -1,
        len: 0,
        cards: []
      };
      return_arr.sort(this._sortByLength);
      return return_arr[0];
    };
    ddz.RobotGlobal.findWinCardsFromArray = function(type, array) {
      ddz.LOGD(null, "in find win cards from arrary");
      var len = array.length;
      var tmpArr = this._getPointCountDicArray(array);
      tmpArr.sort(ddz.GlobalFuncs._sortByPoint);
      var lz_obj = this.getLaiziObject(tmpArr);
      if (type.getType() == ddz.Enums.PaixingType.ROCKET) return [];
      var return_arr = [];
      if (this.rocketWin(array, true)) {
        return_arr.push([ 52, 53 ]);
        var leftCards = array.slice(0, len - 2);
        tmpArr = this._getPointCountDicArray(leftCards);
        tmpArr.sort(ddz.GlobalFuncs._sortByPoint);
      }
      switch (type.getType()) {
       case ddz.Enums.PaixingType.SINGLE_CARD:
        return return_arr.concat(this.findWinSingle(type, tmpArr, lz_obj));

       case ddz.Enums.PaixingType.DOUBLE_CARD:
        return return_arr.concat(this.findWinDouble(type, tmpArr, lz_obj));

       case ddz.Enums.PaixingType.THREE_CARD:
       case ddz.Enums.PaixingType.THREE_ONE_CARD:
       case ddz.Enums.PaixingType.THREE_TWO_CARD:
        return return_arr.concat(this.findWinThree(type, tmpArr, lz_obj));

       case ddz.Enums.PaixingType.BOMB_CARD:
        return return_arr.concat(this.findWinBomb(type, tmpArr, lz_obj));

       case ddz.Enums.PaixingType.BOMB_TWO_CARD:
       case ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD:
        var bombexts = this.findWinBomb(type, tmpArr, lz_obj);
        return_arr = return_arr.concat(bombexts);
        var bombs = this.findBomb(tmpArr, lz_obj);
        return_arr = return_arr.concat(bombs);
        return return_arr;

       case ddz.Enums.PaixingType.SHUNZI_CARD:
       case ddz.Enums.PaixingType.LIANDUI_CARD:
       case ddz.Enums.PaixingType.AIRCRAFT_CARD:
       case ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD:
       case ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD:
        return return_arr.concat(this.findWinContinous(type, tmpArr, lz_obj));

       default:
        return return_arr;
      }
    };
    ddz.RobotGlobal.findWinSingle = function(type, pc, lz_obj) {
      var return_arr = [];
      var needSingleJoker = true;
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        t.point > type.getPoint() && 1 == t.count && return_arr.push([ t.cards[0] ]);
      }
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        t.point > type.getPoint() && (2 == t.count || 3 == t.count) && return_arr.push([ t.cards[0] ]);
      }
      if (lz_obj.count >= 1) {
        var realPoint = ddz.GlobalFuncs.numberToValue(lz_obj.cards[0]);
        realPoint > type.getPoint() && return_arr.push([ lz_obj.cards[0] ]);
      }
      var bombs = this.findBomb(pc, lz_obj);
      return_arr = return_arr.concat(bombs);
      this.findRocket(pc) && return_arr.push([ 52, 53 ]);
      return return_arr;
    };
    ddz.RobotGlobal.findWinDouble = function(type, pc, lz_obj) {
      ddz.LOGD(null, "find win double......in robots");
      var return_arr = [];
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        t.point > type.getPoint() && 2 == t.count && return_arr.push([ t.cards[0], t.cards[1] ]);
      }
      if (lz_obj.count >= 1) {
        for (var nIndex = 0; nIndex < pc.length; nIndex++) {
          var t = pc[nIndex];
          if (t.point > type.getPoint() && 1 == t.count) {
            if (13 == t.point || 14 == t.point) continue;
            var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
            return_arr.push([ t.cards[0], newCount ]);
          }
        }
        if (2 == lz_obj.count || 3 == lz_obj.count) {
          var realPoint = ddz.GlobalFuncs.numberToValue(lz_obj.cards[0]);
          realPoint > type.getPoint() && return_arr.push([ lz_obj.cards[0], lz_obj.cards[1] ]);
        }
      }
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        t.point > type.getPoint() && 3 == t.count && return_arr.push([ t.cards[0], t.cards[1] ]);
      }
      var bombs = this.findBomb(pc, lz_obj);
      return_arr = return_arr.concat(bombs);
      this.findRocket(pc) && return_arr.push([ 52, 53 ]);
      return return_arr;
    };
    ddz.RobotGlobal.copyOnePCObj = function(dest, src) {
      dest.count = src.count;
      dest.point = src.point;
      dest.cards = [];
      if (src.count <= 0) return;
      for (var i = 0; i < src.count; i++) dest.cards.push(src.cards[i]);
    };
    ddz.RobotGlobal.copyPCArr = function(dest, src) {
      ddz.LOGD(null, "复制pcArr");
      for (var nIndex = 0; nIndex < src.length; nIndex++) {
        var pcObj = {};
        ddz.RobotGlobal.copyOnePCObj(pcObj, src[nIndex]);
        dest.push(pcObj);
      }
    };
    ddz.RobotGlobal.findWinThree = function(type, pc, lz_obj) {
      ddz.LOGD(null, "find win three......in robots");
      var return_arr = [];
      var t_type = type.getType();
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        if (t.point > type.getPoint() && 3 == t.count) {
          var tmp = [ t.cards[0], t.cards[1], t.cards[2] ];
          if (t_type == ddz.Enums.PaixingType.THREE_ONE_CARD) {
            var extra = this.findMinSingle(lz_obj, pc, 1, [ t.point ], true);
            extra.length > 0 ? tmp.push(extra[0]) : tmp = [];
          } else if (t_type == ddz.Enums.PaixingType.THREE_TWO_CARD) {
            var extra = this.findMinDouble(lz_obj, pc, 1, [ t.point ], true);
            tmp = extra.length > 0 ? tmp.concat(extra[0]) : [];
          }
          tmp.length > 0 && return_arr.push(tmp);
        }
      }
      var lz_objTmp = {};
      this.copyOnePCObj(lz_objTmp, lz_obj);
      for (var nIndex = 0; nIndex < pc.length; nIndex++) {
        var t = pc[nIndex];
        if (t.point > type.getPoint() && 2 == t.count && (1 == lz_obj.count || 2 == lz_obj.count || 3 == lz_obj.count)) {
          var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
          var tmp = [ t.cards[0], t.cards[1], newCount ];
          lz_obj.count--;
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.THREE_ONE_CARD) {
            var extra = this.findMinSingle(lz_obj, pc, 1, [ t.point ], true);
            extra.length > 0 ? tmp.push(extra[0]) : tmp = [];
          } else if (t_type == ddz.Enums.PaixingType.THREE_TWO_CARD) {
            var extra = this.findMinDouble(lz_obj, pc, 1, [ t.point ], true);
            tmp = extra.length > 0 ? tmp.concat(extra[0]) : [];
          }
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      this.copyOnePCObj(lz_obj, lz_objTmp);
      for (var nIndex = 0; nIndex < pc.length; nIndex++) {
        var t = pc[nIndex];
        if (t.point > type.getPoint() && 1 == t.count && (2 == lz_obj.count || 3 == lz_obj.count)) {
          if (13 == t.point || 14 == t.point) continue;
          var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
          var tmp = [ t.cards[0], newCount, newCount ];
          lz_obj.count -= 2;
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.THREE_ONE_CARD) {
            var extra = this.findMinSingle(lz_obj, pc, 1, [ t.point ], true);
            extra.length > 0 ? tmp.push(extra[0]) : tmp = [];
          } else if (t_type == ddz.Enums.PaixingType.THREE_TWO_CARD) {
            var extra = this.findMinDouble(lz_obj, pc, 1, [ t.point ], true);
            tmp = extra.length > 0 ? tmp.concat(extra[0]) : [];
          }
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      this.copyOnePCObj(lz_obj, lz_objTmp);
      if (3 == lz_obj.count) {
        var realPoint = ddz.GlobalFuncs.numberToValue(lz_obj.cards[0]);
        if (realPoint > type.getPoint()) {
          var tmp = [ lz_obj.cards[0], lz_obj.cards[1], lz_obj.cards[2] ];
          lz_obj.count -= 3;
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.THREE_ONE_CARD) {
            var extra = this.findMinSingle(lz_obj, pc, 1, [], true);
            extra.length > 0 ? tmp.push(extra[0]) : tmp = [];
          } else if (t_type == ddz.Enums.PaixingType.THREE_TWO_CARD) {
            var extra = this.findMinDouble(lz_obj, pc, 1, [], true);
            tmp = extra.length > 0 ? tmp.concat(extra[0]) : [];
          }
          tmp.length > 0 && return_arr.push(tmp);
        }
      }
      this.copyOnePCObj(lz_obj, lz_objTmp);
      var bombs = this.findBomb(pc, lz_obj);
      return_arr = return_arr.concat(bombs);
      this.findRocket(pc) && return_arr.push([ 52, 53 ]);
      return return_arr;
    };
    ddz.RobotGlobal.getBombType = function(type) {
      if (4 != type.getCount()) return "notBomb";
      var t_type = type.getType();
      var lzcnt = type.getLaiziCnt();
      if (t_type == ddz.Enums.PaixingType.BOMB_CARD) {
        if ("undefined" == typeof lzcnt || lzcnt <= 0) return "normalBomb";
        if (4 == lzcnt) return "pureLzBomb";
        return "softBomb";
      }
      return "notBomb";
    };
    ddz.RobotGlobal.findWinBomb = function(type, pc, lz_obj) {
      var return_arr = [];
      var t_type = type.getType();
      var bombType = this.getBombType(type);
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        if (4 == t.count) {
          var tmp = [ t.cards[0], t.cards[1], t.cards[2], t.cards[3] ];
          if (t_type == ddz.Enums.PaixingType.BOMB_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinSingle(lz_obj, pc, 2, [ t.point ], true);
              tmp = extra.length > 0 ? tmp.concat(extra) : [];
            }
          } else if (t_type == ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinDouble(lz_obj, pc, 2, [ t.point ], true);
              if (extra.length > 0) {
                tmp = tmp.concat(extra[0]);
                tmp = tmp.concat(extra[1]);
              } else tmp = [];
            }
          } else t_type == ddz.Enums.PaixingType.BOMB_CARD ? "pureLzBomb" == bombType ? tmp = [] : "softBomb" == bombType || ("normalBomb" == bombType ? t.point <= type.getPoint() && (tmp = []) : tmp = []) : tmp = [];
          tmp.length > 0 && return_arr.push(tmp);
        }
      }
      var lz_objTmp = {};
      this.copyOnePCObj(lz_objTmp, lz_obj);
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        if (3 == t.count && lz_obj.count >= 1 && lz_obj.count < 4) {
          var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
          var tmp = [ t.cards[0], t.cards[1], t.cards[2], newCount ];
          lz_obj.count -= 1;
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.BOMB_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinSingle(lz_obj, pc, 2, [ t.point ], true);
              tmp = extra.length > 0 ? tmp.concat(extra) : [];
            }
          } else if (t_type == ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinDouble(lz_obj, pc, 2, [ t.point ], true);
              if (extra.length > 0) {
                tmp = tmp.concat(extra[0]);
                tmp = tmp.concat(extra[1]);
              } else tmp = [];
            }
          } else t_type == ddz.Enums.PaixingType.BOMB_CARD ? "pureLzBomb" == bombType ? tmp = [] : "softBomb" == bombType ? t.point <= type.getPoint() && (tmp = []) : tmp = ("normalBomb" == bombType, 
          []) : tmp = [];
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        if (2 == t.count && lz_obj.count >= 2 && lz_obj.count <= 3) {
          var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
          var tmp = [ t.cards[0], t.cards[1], newCount, newCount ];
          lz_obj.count -= 2;
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.BOMB_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinSingle(lz_obj, pc, 2, [ t.point ], true);
              tmp = extra.length > 0 ? tmp.concat(extra) : [];
            }
          } else if (t_type == ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinDouble(lz_obj, pc, 2, [ t.point ], true);
              if (extra.length > 0) {
                tmp = tmp.concat(extra[0]);
                tmp = tmp.concat(extra[1]);
              } else tmp = [];
            }
          } else t_type == ddz.Enums.PaixingType.BOMB_CARD ? "pureLzBomb" == bombType ? tmp = [] : "softBomb" == bombType ? t.point <= type.getPoint() && (tmp = []) : tmp = ("normalBomb" == bombType, 
          []) : tmp = [];
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      for (var i = 0; i < pc.length; i++) {
        var t = pc[i];
        if (1 == t.count && 3 == lz_obj.count) {
          if (13 == t.point || 14 == t.point) continue;
          var newCount = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
          var tmp = [ t.cards[0], newCount, newCount, newCount ];
          lz_obj.count -= 3;
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.BOMB_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinSingle(lz_obj, pc, 2, [ t.point ], true);
              tmp = extra.length > 0 ? tmp.concat(extra) : [];
            }
          } else if (t_type == ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD) {
            if (t.point > type.getPoint()) {
              var extra = this.findMinDouble(lz_obj, pc, 2, [ t.point ], true);
              if (extra.length > 0) {
                tmp = tmp.concat(extra[0]);
                tmp = tmp.concat(extra[1]);
              } else tmp = [];
            }
          } else t_type == ddz.Enums.PaixingType.BOMB_CARD ? "pureLzBomb" == bombType ? tmp = [] : "softBomb" == bombType ? t.point <= type.getPoint() && (tmp = []) : tmp = ("normalBomb" == bombType, 
          []) : tmp = [];
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      if (4 == lz_obj.count) {
        var realPoint = ddz.GlobalFuncs.numberToValue(lz_obj.cards[0]);
        if (t_type == ddz.Enums.PaixingType.BOMB_CARD) return_arr.push([ lz_obj.cards[0], lz_obj.cards[1], lz_obj.cards[2], lz_obj.cards[3] ]); else if (realPoint > type.getPoint()) {
          var tmp = [ lz_obj.cards[0], lz_obj.cards[1], lz_obj.cards[2], lz_obj.cards[3] ];
          lz_obj.count -= 4;
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          lz_obj.cards.pop();
          if (t_type == ddz.Enums.PaixingType.BOMB_TWO_CARD) {
            var extra = this.findMinSingle(lz_obj, pc, 2, [], true);
            tmp = extra.length > 0 ? tmp.concat(extra) : [];
          } else if (t_type == ddz.Enums.PaixingType.BOMB_TWO_TWO_CARD) {
            var extra = this.findMinDouble(lz_obj, pc, 2, [], true);
            if (extra.length > 0) {
              tmp = tmp.concat(extra[0]);
              tmp = tmp.concat(extra[1]);
            } else tmp = [];
          }
          tmp.length > 0 && return_arr.push(tmp);
          this.copyOnePCObj(lz_obj, lz_objTmp);
        }
      }
      this.findRocket(pc) && return_arr.push([ 52, 53 ]);
      return return_arr;
    };
    ddz.RobotGlobal.findWinContinous = function(type, pc, lz_obj) {
      ddz.LOGD(null, "find win continious, type :" + type.getType() + " point " + type.getPoint() + " count " + type.getCount());
      var continue_count;
      var cell_count;
      var t_type = type.getType();
      switch (t_type) {
       case ddz.Enums.PaixingType.SHUNZI_CARD:
        continue_count = type.getCount();
        cell_count = 1;
        break;

       case ddz.Enums.PaixingType.LIANDUI_CARD:
        continue_count = type.getCount() / 2;
        cell_count = 2;
        break;

       case ddz.Enums.PaixingType.AIRCRAFT_CARD:
        continue_count = type.getCount() / 3;
        cell_count = 3;
        break;

       case ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD:
       case ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD:
        continue_count = Math.floor(type.getCount() / 4);
        cell_count = 3;
      }
      var return_arr = [];
      var newarr = this._fillDicarr(pc);
      newarr.reverse();
      for (var index = 0; index + continue_count <= newarr.length - 3; index++) {
        var point = newarr[index].point;
        if (point <= type.getPoint()) continue;
        for (var laiziMax = 0; laiziMax <= lz_obj.count; laiziMax++) {
          var cards = [];
          var exc = [];
          var lz_used = 0;
          var sub_index = 0;
          while (sub_index < continue_count) {
            var tmp = newarr[index + sub_index];
            var tmp_cards = tmp.cards;
            if (tmp.count >= cell_count) for (var i = 0; i < cell_count; i++) cards.push(tmp_cards[i]); else {
              var need = cell_count - tmp.count;
              if (!(need == laiziMax && lz_obj.count - lz_used >= need)) {
                cards = [];
                break;
              }
              cards = cards.concat(tmp.cards);
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
              for (var i = 0; i < need; i++) cards.push(n);
              lz_used += need;
            }
            exc.push(tmp.point);
            sub_index++;
          }
          if (cards.length > 0) {
            if (t_type == ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD || t_type == ddz.Enums.PaixingType.AIRCRAFT_DOUBLE_CARD) {
              var newlz = {
                point: lz_obj.point,
                count: lz_obj.count - lz_used,
                cards: lz_obj.cards
              };
              var extra = t_type == ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD ? this.findMinSingle(newlz, pc, continue_count, exc, true) : this.findMinDouble(newlz, pc, continue_count, exc, true);
              if (extra.length > 0) if (t_type == ddz.Enums.PaixingType.AIRCRAFT_SINGLE_CARD) cards = cards.concat(extra); else for (var i = 0; i < continue_count && extra[i]; i++) cards = cards.concat(extra[i]); else cards = [];
            }
            cards.length > 0 && return_arr.push(cards);
          }
        }
      }
      var bombs = this.findBomb(pc, lz_obj);
      return_arr = return_arr.concat(bombs);
      this.findRocket(pc) && return_arr.push([ 52, 53 ]);
      return return_arr;
    };
    ddz.RobotGlobal.findBomb = function(pcArray, lz_obj) {
      var return_arr = [];
      for (var laiziMax = 0; laiziMax <= lz_obj.count; laiziMax++) {
        var newarr = this._fillDicarr(pcArray);
        for (var i = newarr.length - 1; i >= 2; i--) {
          var t = newarr[i];
          var need = 4 - t.count;
          if (need == laiziMax && need < 4 && need <= lz_obj.count) {
            var cards = t.cards.slice(0);
            var n = ddz.GlobalFuncs.getLaiziNumByValue(t.point);
            for (var j = 0; j < need; j++) cards.push(n);
            return_arr.push(cards);
          }
        }
      }
      if (4 == lz_obj.count) {
        var c = lz_obj.cards[0];
        return_arr.push([ c, c, c, c ]);
      }
      return return_arr;
    };
    ddz.RobotGlobal.findRocket = function(pcArray) {
      var bking = false;
      var rking = false;
      for (var i = pcArray.length - 1; i >= 0; i--) {
        var t = pcArray[i];
        t && 14 == t.point ? rking = true : t && 13 == t.point && (bking = true);
        if (rking && bking) break;
      }
      var ret = bking && rking;
      return ret;
    };
    ddz.RobotGlobal.findMinSingle = function(pLaizi, pcArray, count, ex, bDivide) {
      var newarr = pcArray.slice(0);
      newarr.sort(this._sortByPoint);
      var returnArr = [];
      for (var i = 0; i < newarr.length; i++) {
        var t = newarr[i];
        if (1 != t.count || bDivide && ex.indexOf(t.point) >= 0 || 15 == t.point) continue;
        returnArr.push(t.cards[0]);
        if (returnArr.length >= count) return returnArr;
      }
      if (bDivide) for (var i = 0; i < newarr.length; i++) {
        var t = newarr[i];
        if (t.count > 1 && ex.indexOf(t.point) < 0) {
          var cards = t.cards;
          for (var j = 0; j < cards.length; j++) {
            returnArr.push(cards[j]);
            if (returnArr.length >= count) return returnArr;
          }
        }
      }
      return [];
    };
    ddz.RobotGlobal.findMinDouble = function(pLaizi, pcArray, count, ex, bDivide) {
      var newarr = pcArray.slice(0);
      var returnArr = [];
      var laizi_use = 0;
      for (var i = 0; i < newarr.length; i++) {
        var t = newarr[i];
        if (2 != t.count || bDivide && ex.indexOf(t.point) >= 0 || 15 == t.point) continue;
        returnArr.push([ t.cards[0], t.cards[1] ]);
        if (returnArr.length >= count) return returnArr;
      }
      if (null != pLaizi && pLaizi.count > 0) for (var i = 0; i < newarr.length; i++) {
        var t = newarr[i];
        if (15 != t.point && 1 == t.count && (ex.indexOf(t.point) < 0 || !bDivide)) {
          returnArr.push([ t.cards[0], ddz.GlobalFuncs.getLaiziNumByValue(t.point) ]);
          laizi_use++;
          if (returnArr.length >= count) {
            pLaizi.count -= laizi_use;
            return returnArr;
          }
          if (laizi_use >= pLaizi.count) break;
        }
      }
      if (bDivide) for (var i = 0; i < newarr.length; i++) {
        var t = newarr[i];
        if (3 == t.count && ex.indexOf(t.point) < 0) {
          var cards = t.cards;
          returnArr.push([ cards[0], cards[1] ]);
          if (returnArr.length >= count) {
            pLaizi.count -= laizi_use;
            return returnArr;
          }
        }
      }
      if (null != pLaizi && pLaizi.count - laizi_use > 1) {
        returnArr.push([ pLaizi.cards[0], pLaizi.cards[1] ]);
        laizi_use += 2;
        if (returnArr.length >= count) {
          pLaizi.count -= laizi_use;
          return returnArr;
        }
      }
      return [];
    };
    ddz.RobotGlobal.findAvailableAircraft = function(newarrpara, lz_obj) {
      var newarr = [];
      this.copyPCArr(newarr, newarrpara);
      var resultObj = this.findAvailableContinous(newarr, 3, lz_obj);
      var return_arr = resultObj.cards;
      for (var i = 0; i < return_arr.length; i++) {
        var num = return_arr[i];
        var point = ddz.GlobalFuncs.numberToValue(num);
        newarr[point].count = 0;
        newarr[point].cards = [];
      }
      var len = return_arr.length;
      if (len > 0) {
        var pairs = this.findMinDouble(lz_obj, newarr, len / 3, [], false);
        var p_length = pairs.length;
        if (p_length > 0) {
          for (var k = 0; k < p_length; k++) return_arr = return_arr.concat(pairs[k]);
          return return_arr;
        }
        var singles = this.findMinSingle(lz_obj, newarr, len / 3, [], false);
        if (singles.length > 0) {
          return_arr = return_arr.concat(singles);
          return return_arr;
        }
      }
      return return_arr;
    };
    ddz.RobotGlobal.findAvailableContinous = function(newarr, cell_count, lz_obj) {
      var index_report = -1;
      for (var index = 0; index < 11; index++) {
        var lz_use = 0;
        var i = 0;
        var cards = [];
        var point = -1;
        while (i <= 11 - index) {
          var sub_index = index + i;
          var tmp = newarr[sub_index];
          var need = cell_count - tmp.count;
          if (need < 0) break;
          lz_use += need;
          if (lz_use > lz_obj.count) {
            lz_use -= need;
            break;
          }
          point = tmp.point;
          if (need > 0) {
            var n = ddz.GlobalFuncs.getLaiziNumByValue(point);
            for (var j = 0; j < need; j++) cards.push(n);
          }
          cards = cards.concat(tmp.cards);
          i++;
        }
        var clen = cards.length;
        if (clen >= 5) {
          lz_obj.count -= lz_use;
          return {
            index: index - 1,
            len: i,
            cards: cards
          };
        }
      }
      return {
        index: -1,
        len: 0,
        cards: []
      };
    };
    ddz.RobotGlobal.findAvailableThree = function(newarrpara, lz_obj) {
      var newarr = [];
      this.copyPCArr(newarr, newarrpara);
      var return_arr = [];
      var index;
      var tmp;
      var cards = [];
      var leftArr;
      for (index = 0; index < 13; index++) {
        tmp = newarr[index];
        if (3 == tmp.count) break;
      }
      if (index < 13) {
        var midResult = newarr[index];
        return_arr = return_arr.concat(midResult.cards);
        newarr[index].cards = [];
        newarr[index].count = 0;
      } else {
        for (index = 0; index < 13; index++) {
          tmp = newarr[index];
          var need = 3 - tmp.count;
          if (need < 0) continue;
          if (need <= lz_obj.count) {
            cards = tmp.cards.slice(0);
            if (need > 0) {
              var n = ddz.GlobalFuncs.getLaiziNumByValue(tmp.point);
              for (var i = 0; i < need; i++) cards.push(n);
            }
            return_arr = return_arr.concat(cards);
            tmp.cards = [];
            tmp.count = 0;
            lz_obj.count -= need;
            break;
          }
        }
        if (13 == index) return [];
      }
      var pairs = this.findMinDouble(lz_obj, newarr, 1, [], false);
      if (pairs.length > 0) return_arr = return_arr.concat(pairs[0]); else {
        var singles = this.findMinSingle(lz_obj, newarr, 1, [], false);
        singles.length > 0 && (return_arr = return_arr.concat(singles[0]));
      }
      return return_arr;
    };
    cc._RF.pop();
  }, {} ],
  RoomListModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a07ahLqfdFFozEy350N8y2", "RoomListModel");
    "use strict";
    ddz.roomListModel = {};
    cc._RF.pop();
  }, {} ],
  RoomListScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2c8a4G8blNEboghIzGJgmfL", "RoomListScene");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        tableView: {
          default: null,
          type: cc.Node
        },
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        personalAssets: {
          default: null,
          type: cc.Node
        },
        conversionSuccess: {
          default: null,
          type: cc.Prefab
        },
        cellHeight: 165,
        ddz_cell_roomlist: cc.Prefab,
        leftCellX: -156,
        rightCellX: 156
      },
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.isOnStart = false;
        this.play_mode;
        this.content = this.scrollView.content;
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_HALL_INFO, this.onHallInfo, this);
        hall.MsgFactory.getHallInfo(ty.SystemInfo.gameId);
        ty.NotificationCenter.listen(ddz.EventType.SAVE_MATCH_SUCCESS, this.onSaveMatch, this);
        ty.NotificationCenter.listen(ddz.EventType.OPEN_BANNER, this.playBanner, this);
        this.setPersonalAssets();
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playBanner(bc);
      },
      playBanner: function playBanner(bc) {
        var winnerCount = ddz.matchModel.getCurWinnerCount();
        if (bc) if (bc.start) {
          if (winnerCount >= bc.start) {
            var bottomNode = this.node.getChildByName("quicklyBtn");
            var bw = bottomNode.getComponent(cc.Widget);
            bw.bottom = 320;
            var pw = this.personalAssets.getComponent(cc.Widget);
            pw.bottom = 265;
            var sw = this.scrollView.getComponent(cc.Widget);
            sw.bottom = 494;
            hall.adManager.canShowListSceneBanner = true;
            this.showBannerAd();
            bc.delay && bc.delay > 0 && ty.Timer.setTimer(this, this.showBannerAd, bc.delay);
          }
        } else {
          var bottomNode = this.node.getChildByName("quicklyBtn");
          var bw = bottomNode.getComponent(cc.Widget);
          bw.bottom = 320;
          var pw = this.personalAssets.getComponent(cc.Widget);
          pw.bottom = 265;
          var sw = this.scrollView.getComponent(cc.Widget);
          sw.bottom = 494;
          hall.adManager.canShowListSceneBanner = true;
          this.showBannerAd();
          bc.delay && bc.delay > 0 && ty.Timer.setTimer(this, this.showBannerAd, bc.delay);
        }
      },
      showBannerAd: function showBannerAd() {
        hall.adManager.canShowListSceneBanner && hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
      },
      setPlayMode: function setPlayMode(_play_mode) {
        this._play_mode = _play_mode;
      },
      onHallInfo: function onHallInfo() {
        var roomInfo = hall.gameWorld.getRoomsByType(ddz.Enums.PlayType.PLAY_TYPE_JINGDIAN);
        this.chip_room_length = roomInfo.length;
        var laiRoomInfo = hall.gameWorld.getRoomsByType(ddz.Enums.PlayType.PLAY_TYPE_LAIZI);
        var roomInfo = roomInfo.concat(laiRoomInfo);
        roomInfo[0].play_mode && (this.play_mode = roomInfo[0].play_mode);
        this.isOnStart = false;
        this.updateRoomList(roomInfo);
      },
      updateRoomList: function updateRoomList(roomInfo) {
        hall.LOGW("", "file = [RoomListScene] fun = [updateRoomList] this.play_mode = " + JSON.stringify(this.play_mode));
        this.content.removeAllChildren();
        this.scrollView.content.height = Math.ceil(roomInfo.length / 2) * this.cellHeight;
        var isOnce = true;
        if (roomInfo.length > 0) {
          for (var i = 0; i < roomInfo.length; i++) {
            var cell = cc.instantiate(this.ddz_cell_roomlist);
            var com = cell.getComponent("ddz_cell_roomlist");
            com.addDataWithObject(roomInfo[i]);
            com.index = i;
            cell.x = i % 2 == 0 ? this.leftCellX : this.rightCellX;
            cell.y = -Math.floor(i / 2) * this.cellHeight - this.cellHeight / 2 - 5;
            this.content.addChild(cell);
            if ("123" == roomInfo[i].play_mode) {
              var _chip = hall.ME.getChip();
              if (isOnce && _chip <= roomInfo[i].minQuickStartChip) {
                isOnce = false;
                var index = 0;
                i > 0 && (index = i - 1);
                ty.NotificationCenter.trigger(ddz.EventType.UPDATE_ROOMLIST_KUANG, index);
              }
            }
          }
          if (isOnce) {
            var _index = roomInfo.length - 1;
            this.chip_room_length > 0 && (_index = this.chip_room_length - 1);
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_ROOMLIST_KUANG, _index);
          }
        }
      },
      onClickCenterButton: function onClickCenterButton() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondHall;
        ddz.Share.shareWithType(shareType);
      },
      setPersonalAssets: function setPersonalAssets() {
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
      },
      onSaveMatch: function onSaveMatch() {
        if (this.isOnStart) {
          this.isOnStart = false;
          var _gameId = ty.SystemInfo.gameId || ty.SystemInfo.hallId;
          hall.MsgFactory.getQuickStart(ty.UserInfo.userId, _gameId, null, hall.staticSystemInfo.version, null, null, null, null, null, this.play_mode);
        }
      },
      quickBegan: function quickBegan() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "roomListClick", "快速开始" ]);
        if (ddz.matchModel.getCurWaitInfo()) {
          this.isOnStart = true;
          ddz.MsgFactory.saveMatch();
        } else {
          this.isOnStart = false;
          var _gameId = ty.SystemInfo.gameId || ty.SystemInfo.hallId;
          hall.MsgFactory.getQuickStart(ty.UserInfo.userId, _gameId, null, hall.staticSystemInfo.version, null, null, null, null, null, this.play_mode);
        }
      },
      backAction: function backAction() {
        ddz.LOGD(null, "file = [RoomListScene] fun = [backAction]");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var sceneName = "Ddz";
        hall.GlobalFuncs.popScene();
      },
      onDestroy: function onDestroy() {
        this._playMode = null;
        ty.NotificationCenter.ignoreScope(this);
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  SeatInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "853d8AaOcVFq4VJyzpgc5/B", "SeatInfo");
    "use strict";
    require("HallUserInfo");
    ddz.SeatInfo = cc.Class({
      ctor: function ctor() {
        this.model = {
          m_state: ddz.Enums.SeatState.SEATDZSTAT_WAIT,
          m_bIsTuoguan: 0,
          m_call: -1,
          m_show: 0,
          m_tbc: 0,
          m_tbt: 0,
          m_mscore: 0,
          m_buyinChip: 0,
          m_mrank: 0,
          m_robot: 0,
          m_card: [],
          user_info: new hall.HallUserInfo(),
          m_ownroom_data: {
            plays: 0,
            wins: 0,
            bombs: 0,
            lords: 0
          },
          m_cardNote: 0,
          m_playinfo_chip: {}
        };
        this.hasData = false;
        ddz.LOGD(null, "ctor in new ddz.SeatInfo");
      },
      isUserId: function isUserId(userId) {
        return this.model.user_info.normalInfo.userId == userId;
      },
      sex: function sex() {
        return this.model.user_info.udataInfo.m_sex;
      },
      _dumpCards: function _dumpCards() {
        var s = "";
        var cards = this.model.m_card;
        for (var i = 0; i < cards.length; i++) {
          s += cards[i];
          s += " ";
        }
        ddz.LOGD(null, s);
      },
      resetCardsWithLaizi: function resetCardsWithLaizi(lz_point, lz_number) {
        var cards = this.model.m_card;
        var point;
        for (var i = 0; i < cards.length; i++) {
          point = ddz.GlobalFuncs.numberToPoint(cards[i]);
          point == lz_point && (cards[i] = lz_number);
        }
      },
      playCards: function playCards(cards) {
        var my_cards = this.model.m_card;
        for (var i = 0; i < cards.length; i++) {
          var c1 = cards[i];
          var index = -1;
          for (var j = 0; j < my_cards.length; j++) {
            var c2 = my_cards[j];
            if (c1 == c2 || c1 > 53 && c2 > 53) {
              index = j;
              break;
            }
          }
          index >= 0 && my_cards.splice(index, 1);
        }
      },
      playCardsInFriend: function playCardsInFriend(cards) {
        ddz.LOGW("playCardsInFriend", "cards.length:" + cards.length + ";this.model.m_card.length:" + this.model.m_card.length);
        if (cards && cards.length && this.model && this.model.m_card) {
          var len = this.model.m_card.length - cards.length;
          len < 0 && (len = 0);
          this.model.m_card.length = len;
        }
      },
      destroy: function destroy() {
        this.model = null;
        ddz.LOGD(null, "destroy in ddz.SeatInfo");
      },
      parseSeatInfo: function parseSeatInfo(seat, seatIndex) {
        if (!seat) return;
        if (0 == seat["uid"]) {
          this.clean();
          this.hasData = false;
          return;
        }
        var model = this.model;
        model.user_info.parseAsPlayer(seat);
        "undefined" != typeof seat["state"] && (model.m_state = seat["state"]);
        "undefined" != typeof seat["seatState"] && (model.m_state = seat["seatState"]);
        "undefined" != typeof seat["robot"] && (model.m_bIsTuoguan = seat["robot"]);
        if ("undefined" != typeof seat["playinfo_chip"]) {
          model.m_playinfo = seat["playinfo_chip"];
          model.m_playinfo_type = "chip";
        }
        if ("undefined" != typeof seat["playinfo_friend"]) {
          model.m_playinfo = seat["playinfo_friend"];
          model.m_playinfo_type = "friend";
        }
        if ("undefined" != typeof seat["playinfo_chuangguan"]) {
          model.m_playinfo = seat["playinfo_chuangguan"];
          model.m_playinfo_type = "chuangguan";
        }
        if ("undefined" != typeof seat["playinfo_match"]) {
          model.m_playinfo = seat["playinfo_match"];
          model.m_playinfo_type = "match";
        }
        "undefined" != typeof seat["fuhao_user_info"] && (model.fuhao_user_info = seat["fuhao_user_info"]);
        model.m_call = seat["call"];
        model.m_show = seat["show"];
        model.m_tbc = seat["tbc"];
        model.m_tbt = seat["tbt"];
        model.m_mscore = seat["mscore"];
        if (seat.hasOwnProperty("buyinChip")) {
          model.m_buyinChip = seat["buyinChip"];
          ty.NotificationCenter.trigger(ddz.EventType.BUY_CHIP_CHANEG, seatIndex);
        }
        model.m_mrank = seat["mrank"];
        model.m_robot = seat["robot"];
        "undefined" != typeof seat["card"] && (model.m_card = seat["card"]);
        var roomdata = seat["ownroom_data"];
        roomdata && (model.m_ownroom_data = roomdata);
        model.m_cardNote = seat["cardNote"];
        this.hasData = true;
      },
      clean: function clean() {
        var model = this.model;
        model.m_state = ddz.Enums.SeatState.SEATDZSTAT_WAIT;
        model.m_bIsTuoguan = 0;
        model.m_call = -1;
        model.m_show = 0;
        model.m_tbtotal = 0;
        model.m_tbplayed = 0;
        model.m_iMatchScore = 0;
        model.m_iMatchRank = 0;
        model.m_robot = 0;
        model.m_card = [];
        model.user_info = new hall.HallUserInfo();
        this.hasData = false;
        ddz.LOGD(null, "clean in ddz.SeatInfo");
      },
      setShowCards: function setShowCards() {
        this.model["m_show"] = 2;
      },
      setNotShowCards: function setNotShowCards() {
        this.model["m_show"] = 0;
      },
      isShowCard: function isShowCard() {
        return this.model["m_show"] > 0;
      },
      starHeadId: function starHeadId() {
        return this.model.user_info.gdataInfo.starHeadId();
      }
    });
    cc._RF.pop();
  }, {
    HallUserInfo: "HallUserInfo"
  } ],
  SeceneTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "529cbFclihE6KyG2p/qizuj", "SeceneTest");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankSprite: cc.Sprite
      },
      onLoad: function onLoad() {
        var openDataContext = ddz.GlobalFuncs.getOpenData();
        var sharedCanvas = openDataContext.canvas;
        sharedCanvas.width = 512;
        sharedCanvas.height = 1024;
        if (!openDataContext) return;
        openDataContext.postMessage({
          method: "showGroupRank",
          pageIndex: 1
        });
        var main = function main() {
          var texture = new cc.Texture2D();
          texture.initWithElement(sharedCanvas);
          texture.handleLoadedTexture();
          var spriteFrame = new cc.SpriteFrame(texture);
          this.rankSprite.spriteFrame = spriteFrame;
        };
        ty.Timer.setTimer(this, main, 1 / 60);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ServerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "349c75O6ldCe4GIccxCr0iK", "ServerManager");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        txtServer: cc.EditBox,
        btnChange: cc.Button,
        btnReset: cc.Button,
        txtFTID: {
          default: null,
          type: cc.EditBox
        },
        userIdlabel: cc.Label,
        onLaunchParamsLabel: cc.Label,
        onShowParamsLabel: cc.Label,
        qrSprite: cc.Sprite,
        txtShareType: cc.EditBox,
        txtShareSchemeId: cc.EditBox
      },
      onLoad: function onLoad() {
        var that = this;
        var serPath = hall.GlobalFuncs.ReadStringFromLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, "");
        this.btnChange.node.on("click", function(evet) {
          hall.GlobalFuncs.setInLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, that.txtServer.string);
          ty.TuyooSDK.wechatLogin();
        });
        this.btnReset.node.on("click", function(evet) {
          that.txtServer.string = "";
          hall.GlobalFuncs.setInLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, "");
          hall.MsgBoxManager.showToast({
            title: "服务器地址已重置"
          });
        });
        ddz.LOGD(null, "当前的SDK地址:" + serPath);
        this.txtServer.string = serPath;
        ty.NotificationCenter.listen(ty.EventType.GET_SHARE_SINGLE_CONFIG_SUCCESS, this.onShowShareWin, this);
      },
      onEnterTable: function onEnterTable() {
        var ftid = this.txtFTID.string;
        "20180407" == ftid ? ty.NotificationCenter.trigger(ddz.EventType.CHANGE_DEBUG_MODE, false) : ddz.friendModel.enterFriendTable(ftid);
      },
      testWithString: function testWithString() {
        this.userIdlabel.string = "userId  :   " + ty.UserInfo.userId;
        var sceneInfo = wx.getLaunchOptionsSync();
        this.onLaunchParamsLabel.string = "Launch：  " + JSON.stringify(sceneInfo);
        var onShowString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ONSHOW_PARAMS, "");
        this.onShowParamsLabel.string = "onShow :  " + onShowString;
      },
      onBtnQRCode: function onBtnQRCode() {
        var sdkPath = ty.SystemInfo.loginUrl;
        debugMode && (sdkPath = hall.GlobalFuncs.ReadStringFromLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, ty.SystemInfo.loginUrl));
        var local_uuid = hall.GlobalFuncs.getLocalUuid();
        var val = this.txtFTID.string;
        var parsArr = val.split("|");
        var pars = {
          appId: ty.SystemInfo.appId,
          wxAppId: ty.SystemInfo.wxAppId,
          clientId: ty.SystemInfo.clientId,
          imei: "null",
          uuid: local_uuid,
          width: parseInt(parsArr[0]),
          b64: "true",
          path: parsArr[1]
        };
        var serPath = sdkPath + "open/v6/user/Getwxacode";
        hall.LOGD(null, "qrcode,params:" + JSON.stringify(pars));
        hall.LOGD(null, "qrcode,serverPath:" + serPath);
        var that = this;
        wx.request({
          url: serPath,
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: pars,
          method: "POST",
          success: function success(params) {
            hall.LOGD(null, "qrcode success, params:" + JSON.stringify(params));
            var b64Str = params.data.result.img;
            var fs = wx.getFileSystemManager();
            var filePath = wx.env.USER_DATA_PATH + "/qr.png";
            fs.writeFileSync(filePath, b64Str, "base64");
            cc.loader.load({
              url: filePath,
              type: "png"
            }, function(err, texture) {
              err || (that.qrSprite.spriteFrame = new cc.SpriteFrame(texture));
            });
          },
          fail: function fail(params) {},
          complete: function complete(params) {}
        });
      },
      onTestSingleShare: function onTestSingleShare() {
        var shareType = this.txtShareType.string;
        var shareSchemeId = this.txtShareSchemeId.string;
        var obj = {
          share_type: shareType,
          config_id: shareSchemeId
        };
        ty.PropagateInterface.getSingleShareConfigInfo(obj);
      },
      onShowShareWin: function onShowShareWin(obj) {
        this.onLaunchParamsLabel.string = JSON.stringify(obj);
        var shareCfg = obj[this.txtShareType.string][0];
        ddz.Share.shareWithType(this.txtShareType.string, null, null, shareCfg);
      },
      resetFailCount: function resetFailCount() {
        ddz.gameModel.setTempDataWithArenaFailTime(0);
        ddz.gameModel.setTempDataWithMatchFailTime(0);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ServerStateManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7aeddqjseFMO7e6H9lXT/8l", "ServerStateManager");
    "use strict";
    require("HttpUtil");
    ty.ServerStateManager = {
      checkServerState: function checkServerState(callBack) {
        var header = {
          "content-type": "application/x-www-form-urlencoded"
        };
        var configObj = {
          url: ty.SystemInfo.loginUrl + "open/v4/sdk/util/gameserver/status/query",
          header: header,
          postData: {
            appId: ty.SystemInfo.appId
          }
        };
        ty.HttpUtil.httpPost(configObj, "POST", function(res) {
          1 == res.data.result.code ? hall.GlobalFuncs.showPopWinByPreFab("prefabs/withdrawalMaintain", function(preFabNode) {
            var lbl = preFabNode.getChildByName("label");
            lbl.getComponent(cc.Label).string = res.data.result.info;
          }) : callBack();
        }, function(res) {
          callBack();
        });
      }
    };
    cc._RF.pop();
  }, {
    HttpUtil: "HttpUtil"
  } ],
  Share: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      cc._RF.push(module, "ee0fdYHP2JCGoKMaD5jMG7p", "Share");
      "use strict";
      var crypto = require("crypto");
      ddz.Share = {
        LAST_SHARE_TIME: "LAST_SHARE_TIME",
        LAST_LOGIN_TIME: "LAST_LOGIN_TIME",
        SHARETICKETS_LIST: "SHARETICKETS_LIST",
        LAST_SHARE_TIMELIST: "LAST_SHARE_TIMELIST",
        YESTERDAY_SHARE_NUMBER: "YESTERDAY_SHARE_NUMBER",
        shareQuery: "",
        unSensitivePersonage: 0,
        sharePoint: 0,
        shareType: "",
        isOnShare: false,
        isMatchShare: false,
        shareTicket: "",
        resultType: 0,
        shareWithType: function shareWithType(type, successCallBackFun, failCallBackFun, testCfg) {
          type == ddz.Share.onShareType.clickStatShareTypeRevial && (ddz.Share.isMatchShare = true);
          var shareMap = ddz.gameModel.shareConfig;
          if (!shareMap) return;
          var shareDetail = shareMap[type];
          var shareCfg = shareDetail[hall.GlobalFuncs.getShareRandomNumberWithShareList(shareDetail)];
          testCfg && (shareCfg = testCfg);
          var shareTitle = hall.GlobalFuncs.replaceKeyWordInString(shareCfg.shareContent);
          var query = "inviteCode=" + ty.UserInfo.userId + "&sourceCode=" + type + "&imageType=" + shareCfg.shareSchemeId + "&inviteName=" + ty.UserInfo.userName;
          if (shareDetail.query) {
            ddz.Share.shareQuery = shareDetail.query;
            var queryString = hall.GlobalFuncs.replaceKeyWordInString(shareDetail.query);
            query = query + "&" + queryString;
          } else ddz.Share.shareQuery = "";
          shareDetail.unSensitivePersonage ? ddz.Share.unSensitivePersonage = shareDetail.unSensitivePersonage : ddz.Share.unSensitivePersonage = 0;
          var shareImage = shareCfg.sharePicUrl;
          if (shareCfg.extraAdd && shareCfg.extraAdd.length && shareCfg.extraAdd.length > 0) {
            var callBackF = function callBackF(imageUrl) {
              ddz.Share.shareImformation(type, shareCfg, shareTitle, imageUrl, query, shareDetail.sharePoint, successCallBackFun, failCallBackFun);
            };
            ddz.Share.getShareImageWithShareMap(0, shareCfg.extraAdd, shareImage, callBackF);
          } else ddz.Share.shareImformation(type, shareCfg, shareTitle, shareImage, query, shareDetail.sharePoint, successCallBackFun, failCallBackFun);
        },
        getShareImageWithShareMap: function getShareImageWithShareMap(nowIndex, extraAdd, imageUrl, callBackF) {
          var tempCavas = wx.createCanvas();
          tempCavas.width = 360;
          tempCavas.height = 288;
          var context = tempCavas.getContext("2d");
          var image = wx.createImage();
          image.src = imageUrl;
          image.onload = function(event) {
            var ima = event.target;
            context.drawImage(ima, 0, 0);
            var preTextWidth = 0;
            var preTextHeight = 0;
            var preX = 0;
            var preY = 0;
            while (nowIndex < extraAdd.length) {
              var extraMap = extraAdd[nowIndex];
              if ("text" == extraMap.type) {
                var textInformation = extraMap.textInformation;
                var text = hall.GlobalFuncs.replaceKeyWordInString(textInformation.textformatString);
                context.font = textInformation.fontSize + "px Arial";
                -1 == textInformation.textColorRGB.indexOf("#") && (textInformation.textColorRGB = "#" + textInformation.textColorRGB);
                context.fillStyle = textInformation.textColorRGB;
                context.textAlign = textInformation.textAlign.replace("middle", "center");
                var textX = parseInt(textInformation.originPointX);
                textX < 0 && (-1 == textX ? textX = preX - preTextWidth / 2 : -2 == textX && (textX = preX + preTextWidth / 2));
                var textY = parseInt(textInformation.originPointY);
                if (textY < 0) {
                  -1 == textY && (textY = preY - preTextHeight / 2);
                  -2 == textY && (textY = preY + preTextHeight / 2);
                }
                context.fillText(text, textX, textY);
                preTextWidth = context.measureText(text).width;
                preTextHeight = context.measureText(text).height;
                preX = textX;
                preY = textY;
                nowIndex++;
              } else if ("image" == extraMap.type) {
                var imageInformation = extraMap.imageInformation;
                var sunImage = wx.createImage();
                "avatar" == imageInformation.addImageUrl ? sunImage.src = ty.UserInfo.userPic : sunImage.src = imageInformation.addImageUrl;
                sunImage.originPointX = parseInt(imageInformation.originPointX);
                sunImage.originPointY = parseInt(imageInformation.originPointY);
                sunImage.sizeWidth = parseInt(imageInformation.sizeWidth);
                sunImage.sizeHeight = parseInt(imageInformation.sizeHeight);
                if (imageInformation.shape && 2 == imageInformation.shape) {
                  context.beginPath();
                  context.arc(sunImage.originPointX + sunImage.sizeWidth / 2, sunImage.originPointY + sunImage.sizeHeight / 2, sunImage.sizeWidth / 2, 0, 2 * Math.PI);
                  context.stroke();
                  context.clip();
                }
                sunImage.onload = function(event) {
                  var img = event.target;
                  context.drawImage(img, img.originPointX, img.originPointY, img.sizeWidth, img.sizeHeight);
                  var tempFilePath = tempCavas.toTempFilePathSync({
                    x: 0,
                    y: 0,
                    width: tempCavas.width,
                    height: tempCavas.height,
                    destWidth: tempCavas.width,
                    destHeight: tempCavas.height
                  });
                  callBackF && callBackF(tempFilePath);
                };
                sunImage.onerror = function(event) {
                  var img = event.target;
                  hall.LOGW("==", "============加载头像失败===========" + sunImage.src + "====" + imageInformation.addImageUrl + "====");
                  var tempFilePath = tempCavas.toTempFilePathSync({
                    x: 0,
                    y: 0,
                    width: tempCavas.width,
                    height: tempCavas.height,
                    destWidth: tempCavas.width,
                    destHeight: tempCavas.height
                  });
                  callBackF && callBackF(tempFilePath);
                };
                return;
              }
            }
            var tempFilePath = tempCavas.toTempFilePathSync({
              x: 0,
              y: 0,
              width: tempCavas.width,
              height: tempCavas.height,
              destWidth: tempCavas.width,
              destHeight: tempCavas.height
            });
            callBackF && callBackF(tempFilePath);
          };
          image.onerror = function(event) {
            var img = event.target;
            hall.LOGW("==", "============加载底图失败===========" + img.src);
          };
        },
        shareImformation: function shareImformation(type, shareCfg, titleString, imageUrl, query, sharePoint, successCallBackFun, failCallBackFun) {
          ddz.Share.shareType = type;
          ddz.Share.sharePoint = sharePoint;
          ddz.Share.isOnShare = true;
          ddz.Share.resultType = 0;
          ddz.Share.shareTicket = "";
          var sharePointId = shareCfg.sharePointId;
          var shareSchemeId = shareCfg.shareSchemeId;
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShareAction, [ sharePointId, 1, shareSchemeId ]);
          type == ddz.Share.onShareType.clickStatShareTypeInviteFriend && ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeInviteFriendClick, [ ddz.Share.shareKeywordReplace.inviteFriendID ]);
          wx.shareAppMessage({
            title: titleString,
            imageUrl: imageUrl,
            query: query,
            success: function success(result) {
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShareAction, [ sharePointId, 2, shareSchemeId ]);
              type == ddz.Share.onShareType.clickStatShareTypeInviteFriend && ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeInviteFriendSuccess, [ ddz.Share.shareKeywordReplace.inviteFriendID ]);
              type == ddz.Share.onShareType.clickStatShareTypeGiveProp && ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeGiveProp, [ ddz.Share.shareKeywordReplace.inviteTreasureID ]);
              successCallBackFun && successCallBackFun(result);
              hall.LOGW(null, "shareAppMessage+++++++++++++++++" + JSON.stringify(result));
              if (!result.shareTickets || !result.shareTickets[0]) {
                ddz.Share.resultType = ddz.Share.ShareState.isNotAGroupChat;
                ddz.Share.shareTicket = "";
                return;
              }
              ddz.Share.shareTicket = result.shareTickets[0];
            },
            fail: function fail() {
              failCallBackFun && failCallBackFun();
              ddz.Share.isMatchShare = false;
              ddz.Share.resultType = ddz.Share.ShareState.failToShare;
              hall.LOGD(null, JSON.stringify(arguments));
            },
            complete: function complete() {}
          });
        },
        shareResults: function shareResults(winloses) {
          var shareMap = ddz.gameModel.shareConfig;
          shareMap || (shareMap = ddz.Share.shareConfig.share);
          var type = ddz.Share.onShareType.clickStatShareTypeShareResults;
          var shareDetail = shareMap[type];
          shareDetail.unSensitivePersonage ? ddz.Share.unSensitivePersonage = shareDetail.unSensitivePersonage : ddz.Share.unSensitivePersonage = 0;
          var shareCfg = shareDetail[hall.GlobalFuncs.getRandomNumberBefore(shareDetail.length)];
          var titleString = hall.GlobalFuncs.replaceKeyWordInString(shareCfg.shareContent);
          var imageType = shareCfg.sharePointId + "_" + shareCfg.shareSchemeId;
          var tempCanvas = wx.createCanvas();
          tempCanvas.width = 360;
          tempCanvas.height = 288;
          var context = tempCanvas.getContext("2d");
          var callBack = function callBack() {
            var tempFilePath = tempCanvas.toTempFilePathSync({
              x: 0,
              y: 0,
              width: tempCanvas.width,
              height: tempCanvas.height,
              destWidth: tempCanvas.width,
              destHeight: tempCanvas.height
            });
            var query = "inviteCode=" + ty.UserInfo.userId + "&sourceCode=" + type + "&imageType=" + imageType + "&inviteName=" + ty.UserInfo.userName;
            if (shareDetail.query) {
              var queryString = hall.GlobalFuncs.replaceKeyWordInString(shareDetail.query);
              query = query + "&" + queryString;
            }
            ddz.Share.shareImformation(ddz.Share.onShareType.clickStatShareTypeShareResults, shareCfg, titleString, tempFilePath, query);
          };
          var image = wx.createImage();
          image.src = shareCfg.sharePicUrl;
          var avatars = ddz.detailsModel.avatars;
          var nicknNames = ddz.detailsModel.nickNames;
          var scores = ddz.detailsModel.sumScores;
          var _info = [];
          for (var i = 0; i < 3; i++) {
            var player_info = {};
            player_info.avatar = avatars[i];
            player_info.nicknName = nicknNames[i];
            player_info.score = scores[i];
            _info.push(player_info);
          }
          _info.sort(function(a, b) {
            return b.score - a.score;
          });
          hall.LOGW("", "==========分享排序================" + JSON.stringify(_info));
          image.onload = function(event) {
            context.drawImage(image, 0, 0);
            context.font = "25px Arial";
            var imageIndex = 0;
            for (var j = 0; j < 3; j++) {
              var height = 70 + 72 * j;
              context.fillStyle = "#202020";
              context.textAlign = "left";
              _info[j].nicknName ? context.fillText(hall.GlobalFuncs.SliceStringToLength(_info[j].nicknName, 7), 150, height) : context.fillText("你的好友", 150, height);
              context.textAlign = "right";
              if (_info[j].score > 0) {
                context.fillStyle = "#fd5051";
                context.fillText("+" + _info[j].score + "分", 325, height);
              } else {
                context.fillStyle = "#1593c1";
                context.fillText(_info[j].score + "分", 325, height);
              }
              var avatarImage = wx.createImage();
              _info[j].avatar ? avatarImage.src = _info[j].avatar : avatarImage.src = "res/raw-assets/resources/table/nopack/ddz_avatar_default.png";
              avatarImage.toY = 35 + 72 * j;
              avatarImage.onload = function(event) {
                var img = event.target;
                context.drawImage(img, 85, img.toY, 50, 50);
                imageIndex++;
                imageIndex >= 3 && callBack();
              };
              avatarImage.onerror = function(event) {
                imageIndex++;
                imageIndex >= 3 && callBack();
              };
            }
          };
        },
        shareWindowTips: function shareWindowTips(_shareType) {},
        playAnimationAfterShareWithType: function playAnimationAfterShareWithType() {
          hall.LOGW("", "file = [Share] fun = [playAnimationAfterShareWithType]");
          var toDayList = hall.GlobalTimer.getCurDayList();
          var lastShareTimeList = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.LAST_SHARE_TIMELIST, []);
          if (toDayList.toString() != lastShareTimeList.toString()) {
            toDayList[0] == lastShareTimeList[0] && toDayList[1] == lastShareTimeList[1] && (toDayList[2] == lastShareTimeList[2] + 1 ? hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.YESTERDAYSHARE, true) : hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.YESTERDAYSHARE, false));
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.LAST_SHARE_TIMELIST, toDayList);
          }
          if (ddz.Share.resultType == ddz.Share.ShareState.failToShare) {
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_STATE, ddz.Share.shareType);
            return;
          }
          if (ddz.Share.shareType == ddz.Share.onShareType.clickStatShareTypeRankList && ddz.Share.shareTicket && "" != ddz.Share.shareTicket) {
            hall.GlobalFuncs.gotoRank(ddz.Share.shareTicket);
            ddz.Share.shareType = "";
            ddz.Share.resultType = 0;
            return;
          }
          if ((!ddz.Share.sharePoint || 0 == ddz.Share.sharePoint) && ddz.Share.shareType != ddz.Share.onShareType.clickStatShareTypeRevial) {
            ddz.Share.shareType = "";
            ddz.Share.resultType = 0;
            return;
          }
          if (1 == ddz.Share.unSensitivePersonage && ddz.Share.shareType != ddz.Share.onShareType.clickStatShareTypeRevial) {
            this.endWithSuccessShare();
            return;
          }
          if (!ddz.Share.shareTicket || "" == ddz.Share.shareTicket) {
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_STATE, ddz.Share.shareType);
            this.shareWindowTips(ddz.Share.shareType);
            return;
          }
          if (2 == ddz.Share.unSensitivePersonage && ddz.Share.shareType != ddz.Share.onShareType.clickStatShareTypeRevial) {
            this.endWithSuccessShare();
            return;
          }
          var that = this;
          hall.LOGW("", "file = [Share] fun = [playAnimationAfterShareWithType] shareTicket = " + JSON.stringify(ddz.Share.shareTicket));
          wx.getShareInfo({
            shareTicket: ddz.Share.shareTicket,
            success: function success(result) {
              var shareKey;
              if (ddz.Share.shareType == ddz.Share.onShareType.clickStatShareTypeRevial) {
                shareKey = ddz.matchModel.revivalShareKey;
                ddz.Share.getShareResultWithKey(result, shareKey);
              } else {
                shareKey = ddz.Share.sharePoint + "";
                ddz.Share.getShareResultWithKey(result, shareKey);
              }
            },
            fail: function fail() {
              ddz.Share.resultType = ddz.Share.ShareState.failToGetShareTicket;
              ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_STATE, ddz.Share.shareType);
              that.shareWindowTips(ddz.Share.shareType);
              hall.LOGE("", "====getShareInfo=fail=====" + JSON.stringify(arguments));
            },
            complete: function complete() {}
          });
        },
        getShareResultWithKey: function getShareResultWithKey(result, shareKey) {
          var iv = result.iv;
          var encryptedData = result.encryptedData;
          var reultString = ddz.Share.decrypt(ty.UserInfo.wxgame_session_key, iv, encryptedData);
          var informationMap = JSON.parse(reultString);
          var openGId = informationMap.openGId;
          var toDay = hall.GlobalTimer.getCurDay();
          var lastShareTime = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.LAST_SHARE_TIME, "");
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          var shareTicketsDic = {};
          if (toDay != lastShareTime) {
            shareTicketsDic[shareKey] = [ openGId ];
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.SHARETICKETS_LIST, JSON.stringify(shareTicketsDic));
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.LAST_SHARE_TIME, toDay);
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 1);
          } else {
            shareNumber++;
            hall.GlobalFuncs.setInLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, shareNumber);
            var shareTickets = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.SHARETICKETS_LIST, "");
            shareTicketsDic = JSON.parse(shareTickets);
            if (shareTicketsDic && shareTicketsDic[shareKey] && shareTicketsDic[shareKey].length) {
              var shareList = shareTicketsDic[shareKey];
              if (shareList.indexOf(openGId) > -1) {
                ddz.Share.resultType = ddz.Share.ShareState.repetitionGroupChat;
                ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_STATE, ddz.Share.shareType);
                this.shareWindowTips(ddz.Share.shareType);
                ddz.Share.shareTicket = "";
                return;
              }
              shareList.push(openGId);
              hall.GlobalFuncs.setInLocalStorage(ddz.Share.SHARETICKETS_LIST, JSON.stringify(shareTicketsDic));
            } else {
              shareTicketsDic[shareKey] = [ openGId ];
              hall.GlobalFuncs.setInLocalStorage(ddz.Share.SHARETICKETS_LIST, JSON.stringify(shareTicketsDic));
            }
          }
          this.endWithSuccessShare();
        },
        getOpenGid: function getOpenGid(shareTicket, _boxUserId) {
          var _openGid = "";
          var encryFunc = function encryFunc(result) {
            var iv = result.iv;
            var encryptedData = result.encryptedData;
            var reultString = ddz.Share.decrypt(ty.UserInfo.wxgame_session_key, iv, encryptedData);
            var informationMap = JSON.parse(reultString);
            var openGId = informationMap.openGId;
            _openGid = openGId;
            ddz.gameModel.isBringVersion || ddz.gameModel.getBoxReward(parseInt(_boxUserId), ty.SystemInfo.treasureID, _openGid);
            hall.LOGW("", "file = [Share] fun = [getOpenGid] _openGid = " + JSON.stringify(_openGid));
          };
          wx.getShareInfo({
            shareTicket: shareTicket,
            success: function success(result) {
              encryFunc(result);
            },
            fail: function fail() {
              hall.LOGW("", "file = [Share] fun = [getOpenGid] fail ");
              ddz.gameModel.isBringVersion || ddz.gameModel.getBoxReward(parseInt(_boxUserId), ty.SystemInfo.treasureID, _openGid);
            },
            complete: function complete() {}
          });
        },
        decrypt: function decrypt(key, iv, crypted) {
          crypted = new Buffer(crypted, "base64");
          iv = new Buffer(iv, "base64");
          key = new Buffer(key, "base64");
          var decipher = crypto.createDecipheriv("aes-128-cbc", key, iv);
          var decoded = decipher.update(crypted, "binary", "utf8");
          decoded += decipher.final("utf8");
          return decoded;
        },
        endWithSuccessShare: function endWithSuccessShare() {
          ddz.Share.resultType = ddz.Share.ShareState.sucessShare;
          ddz.Share.shareType != ddz.Share.onShareType.clickStatShareTypeRevial && ddz.gameModel.shareToGetreward(ddz.Share.sharePoint);
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SHARE_STATE, ddz.Share.shareType);
          this.shareWindowTips(ddz.Share.shareType);
        },
        onShareType: {
          clickStatShareTypeMainTips: "clickStatShareTypeMainTips",
          clickStatShareTypeCongratulation: "clickStatShareTypeCongratulation",
          clickStatShareTypeWithDraw: "clickStatShareTypeWithDraw",
          clickStatShareCash: "clickStatShareCash",
          clickStatShareTypeShareButton: "clickStatShareTypeShareButton",
          clickStatShareTypeRankList: "clickStatShareTypeRankList",
          clickStatShareTypeGetDiamondFail: "clickStatShareTypeGetDiamondFail",
          clickStatShareTypeGetDiamondFailSix: "clickStatShareTypeGetDiamondFailSix",
          clickStatShareTypeGetDiamondFailWindow: "clickStatShareTypeGetDiamondFailWindow",
          clickStatShareTypeMainRestartWindow: "clickStatShareTypeMainRestartWindow",
          clickStatShareTypeGetDiamondHall: "clickStatShareTypeGetDiamondHall",
          clickStatShareTypeInviteFriend: "clickStatShareTypeInviteFriend",
          clickStatShareTypeShareResults: "clickStatShareTypeShareResults",
          clickStatShareTypeRevial: "clickStatShareTypeRevial",
          clickStatShareTypeWinAward: "clickStatShareTypeWinAward",
          clickStatShareTypeFailDamage: "clickStatShareTypeFailDamage",
          clickStatShareTypeInviteNewFriend: "clickStatShareTypeInviteNewFriend",
          clickStatShareTypeArenaLose: "clickStatShareTypeArenaLose",
          clickStatShareTypeArenaWin: "clickStatShareTypeArenaWin",
          clickStatShareTypeGongZhongHaoCard: "clickStatShareTypeGongZhongHaoCard",
          clickStatShareTypeGongZhongHaoMenu: "clickStatShareTypeGongZhongHaoMenu",
          clickStatShareTypeGoldHighPower: "clickStatShareTypeGoldHighPower",
          clickStatShareTypeGoldSpring: "clickStatShareTypeGoldSpring",
          clickStatShareTypeGoldWinStreak: "clickStatShareTypeGoldWinStreak",
          clickStatShareTypeGoldHighTotal: "clickStatShareTypeGoldHighTotal",
          clickStatShareTypeMatchFirst: "clickStatShareTypeMatchFirst",
          clickStatShareTypeMatchSecond: "clickStatShareTypeMatchSecond",
          clickStatShareTypeMatchThird: "clickStatShareTypeMatchThird",
          clickStatShareTypeFirstWithDraw: "clickStatShareTypeGongZhongHaoMenu",
          clickStatShareTypeWithChip: "clickStatShareTypeWithChip",
          clickStatShareTypeGetRedPacket: "clickStatShareTypeGetRedPacket",
          clickStatShareTypeAlms: "clickStatShareTypeAlms",
          clickStatShareTypeGiveProp: "clickStatShareTypeGiveProp",
          clickStatShareTypeSeekHelpFriend: "clickStatShareTypeSeekHelpFriend",
          clickStatShareTypeCustomsSuccess: "clickStatShareTypeCustomsSuccess",
          clickStatShareTypeNewUserGifts: "clickStatShareTypeNewUserGifts",
          clickStatShareTypeSkipCustom: "clickStatShareTypeSkipCustom",
          clickStatShareTypeSkipCustomNewer: "clickStatShareTypeSkipCustomNewer"
        },
        clickStatShareType: {
          clickStatShareTypeShareButton: "004",
          clickStatShareTypeGetDiamondHall: "005",
          clickStatShareTypeGetDiamondFail: "006",
          clickStatShareTypeMainTips: "007",
          clickStatShareTypeWithDraw: "008",
          clickStatShareTypeCongratulation: "009",
          clickStatShareTypeRankList: "010",
          clickStatShareTypeMatchFirst: "011",
          clickStatShareTypeMatchSecond: "012",
          clickStatShareTypeMatchThird: "013",
          clickStatShareTypeInviteNewFriend: "014",
          clickStatShareTypeArenaLose: "015",
          clickStatShareTypeArenaWin: "016",
          clickStatShareTypeRevial: "017",
          clickStatShareTypeGoldHighPower: "018",
          clickStatShareTypeGoldSpring: "019",
          clickStatShareTypeGoldWinStreak: "020",
          clickStatShareTypeGoldHighTotal: "021",
          clickStatShareTypeInviteFriend: "022",
          clickStatShareTypeShareResults: "023",
          clickStatShareTypeSeekHelpFriend: "058",
          clickStatShareTypeGiveProp: "071",
          clickStatShareTypeCustomsSuccess: "098",
          clickStatShareTypeGetDiamondFailSix: "099",
          clickStatShareTypeNewUserGifts: "100",
          clickStatShareTypeGongZhongHaoCard: "101",
          clickStatShareTypeGongZhongHaoMenu: "102",
          clickStatShareTypeWithChip: "147",
          clickStatShareTypeGetRedPacket: "148",
          clickStatShareTypeSkipCustom: "280",
          clickStatShareTypeSkipCustomNewer: "282",
          clickStatShareCash: "4",
          clickStatShareTypeWinAward: "12",
          clickStatShareTypeFailDamage: "13",
          clickStatShareTypeFirstWithDraw: "26",
          clickStatShareTypeAlms: "29",
          clickStatShareTypeGetDiamondFailWindow: 29,
          clickStatShareTypeMainRestartWindow: 29
        },
        shareKeywordReplace: {
          wechatName: "。",
          allWinnerCount: "0",
          bonusTotal: "0",
          withDrawMoney: "0",
          lastWinnerCount: "0",
          lastBonusOnly: "0",
          curWinnerCount: "0",
          curBonusOnly: "0",
          curBonusOnlyChip: "0",
          selfTotalBonus: 0,
          selfAllWinnerCount: 0,
          inviteFriendID: "10001",
          totalRound: 0,
          displayName: "经典",
          goodCard: "标准",
          goldWinReward: "0",
          surpassPercent: 0,
          arenaWinRewardMoney: "0",
          arenaWinRewardChip: "0",
          arenaRanking: 0,
          repeatNumber: 1,
          stageIndex: 1,
          hadNumber: 0,
          diamondPicture: "<img src='dda_button_diamond' height=34 width=42/>",
          redDiamondPicture: "<img src='ddz_diamond_red' height=34 width=42/>",
          coinPicture: "<img src='ddz_main_chip' height=48 width=48/>",
          inviteTreasureID: "0",
          newerTreasureID: "0"
        },
        SharePointType: {
          firstFail: 67890001,
          userGroup: 67890002,
          tongGuan: 67890003,
          redPacket: 67890003,
          arenaPoint1: 67890005,
          arenaPoint2: 67890006,
          arenaPoint3: 67890007,
          arenaPoint4: 67890008,
          gongZhongHaoCard: 67890009,
          gongZhongHaoMenu: 67890010,
          lottery: 67890003,
          alms: 67890013,
          firstWithDraw: 67890012,
          withChip: 67890003,
          getRedPacket: 67890015,
          boxShare: 67890016,
          shareFriend: 67890017,
          customsSuccess: 67890018,
          failSix: 67890003,
          firstUseJiPaiQi: 67890020,
          adGetJiPaiQi: 67890021,
          getDayFirstLogin: 67890022,
          failDiamond: 67890023,
          skipCustom: 67890024,
          addApplet: 67890025,
          failWindw: 67890026,
          mainRestart: 67890027
        },
        ShareState: {
          isNotAGroupChat: 1,
          repetitionGroupChat: 2,
          sucessShare: 3,
          exShare: 4,
          failToGetShareTicket: 5,
          failToShare: 6
        },
        resurgenceConfig: {
          arenaMatch: {
            oldUser: [ {
              stageIndexMin: 1,
              stageIndexMax: 3,
              failCondition: [ {
                failCountMin: 1,
                failCountMax: 1,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "晋级失败\n观看广告即可免费复活",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 2,
                failCountMax: 4,
                resurgenceCondition: {
                  conditionType: "share",
                  requestCount: 1
                },
                title: "提示",
                content: "晋级失败\n分享游戏给朋友即可免费复活",
                buttonText1: "分享",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 5,
                failCountMax: 20,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "晋级失败\n观看广告即可免费复活",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              } ]
            } ],
            newUser: [ {
              stageIndexMin: 1,
              stageIndexMax: 3,
              failCondition: [ {
                failCountMin: 1,
                failCountMax: 2,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "晋级失败\n观看广告即可免费复活",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 3,
                failCountMax: 5,
                resurgenceCondition: {
                  conditionType: "share",
                  requestCount: 1
                },
                title: "提示",
                content: "晋级失败\n分享游戏给朋友即可免费复活",
                buttonText1: "分享",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 6,
                failCountMax: 20,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "晋级失败\n观看广告即可免费复活",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              } ]
            } ]
          },
          fightMatch: {
            oldUser: [ {
              stageIndexMin: 2,
              stageIndexMax: 3,
              failCondition: [ {
                failCountMin: 1,
                failCountMax: 1,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "观看广告即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 2,
                failCountMax: 4,
                resurgenceCondition: {
                  conditionType: "share",
                  requestCount: 1
                },
                title: "提示",
                content: "分享游戏给朋友即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "分享",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 5,
                failCountMax: 10,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "观看广告即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              } ]
            }, {
              stageIndexMin: 4,
              stageIndexMax: 5,
              failCondition: [ {
                failCountMin: 1,
                failCountMax: 1,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 2,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "看repeatNumber次广告可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告(hadNumber/repeatNumber)",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 2,
                failCountMax: 4,
                resurgenceCondition: {
                  conditionType: "share",
                  requestCount: 3
                },
                title: "提示",
                content: "分享游戏到repeatNumber个群即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "邀请好友(hadNumber/repeatNumber)",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 5,
                failCountMax: 10,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 3,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "看repeatNumber次广告可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告(hadNumber/repeatNumber)",
                buttonText2: "点击放弃>"
              } ]
            } ],
            newUser: [ {
              stageIndexMin: 2,
              stageIndexMax: 5,
              failCondition: [ {
                failCountMin: 1,
                failCountMax: 2,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "观看广告即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 3,
                failCountMax: 5,
                resurgenceCondition: {
                  conditionType: "share",
                  requestCount: 1
                },
                title: "提示",
                content: "分享游戏给朋友即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "分享",
                buttonText2: "点击放弃>"
              }, {
                failCountMin: 6,
                failCountMax: 20,
                resurgenceCondition: {
                  conditionType: "ad",
                  requestCount: 1,
                  adIds: [ "adunit-8bde7ac62d379503" ]
                },
                title: "提示",
                content: "观看广告即可免费复活\n继续挑战第stageIndex关",
                buttonText1: "观看广告复活",
                buttonText2: "点击放弃>"
              } ]
            } ]
          }
        },
        shareMoments: {
          invite: [ {
            backUrl: "share_moments/share_moments_invite0.jpg",
            bottomType: "type0"
          }, {
            backUrl: "share_moments/share_moments_invite1.jpg",
            bottomType: "type0"
          }, {
            backUrl: "share_moments/share_moments_invite2.jpg",
            bottomType: "type0"
          }, {
            backUrl: "share_moments/share_moments_invite3.jpg",
            bottomType: "type0"
          } ],
          showy_highPower: [ {
            backUrl: "share_moments/share_moments_showy_highPower.jpg",
            bottomType: "type1"
          } ],
          showy_highTotal: [ {
            backUrl: "share_moments/share_moments_showy_highTotal.jpg",
            bottomType: "type1"
          } ],
          showy_spring: [ {
            backUrl: "share_moments/share_moments_showy_spring.jpg",
            bottomType: "type1"
          } ],
          showy_winningStreak: [ {
            backUrl: "share_moments/share_moments_showy_winningStreak.jpg",
            bottomType: "type1"
          } ],
          bottomType: {
            type0: {
              bottomUrl: "share_moments/shareTo_moments_bottom2.png",
              bottomHeight: 254,
              qrCenterX: 508,
              qrCenterY: 987,
              qrRadius: 87,
              avatarRadius: 39
            },
            type1: {
              bottomUrl: "share_moments/shareTo_moments_bottom.jpg",
              bottomHeight: 182,
              qrCenterX: 530,
              qrCenterY: 1028,
              qrRadius: 72,
              avatarRadius: 32
            }
          }
        }
      };
      wx.onShareAppMessage(function(result) {
        var type = ddz.Share.onShareType.clickStatShareTypeShareButton;
        var shareMap = ddz.gameModel.shareConfig;
        if (!shareMap) return;
        var shareDetail = shareMap.clickStatShareTypeShareButton;
        var shareCfg = shareDetail[hall.GlobalFuncs.getRandomNumberBefore(shareDetail.length)];
        var shareTitle = hall.GlobalFuncs.replaceKeyWordInString(shareCfg.shareContent);
        var imageUrl = shareCfg.sharePicUrl;
        var sharePointId = shareCfg.sharePointId;
        var shareSchemeId = shareCfg.shareSchemeId;
        var query;
        if (shareDetail.query) {
          var queryString = hall.GlobalFuncs.replaceKeyWordInString(shareDetail.query);
          query = "inviteCode=" + ty.UserInfo.userId + "&sourceCode=" + type + "&imageType=" + shareSchemeId + "&inviteName=" + ty.UserInfo.userName + "&" + queryString;
        } else query = "inviteCode=" + ty.UserInfo.userId + "&sourceCode=" + type + "&imageType=" + shareSchemeId + "&inviteName=" + ty.UserInfo.userName;
        shareDetail.unSensitivePersonage ? ddz.Share.unSensitivePersonage = shareDetail.unSensitivePersonage : ddz.Share.unSensitivePersonage = 0;
        ddz.Share.shareType = type;
        ddz.Share.sharePoint = shareDetail.sharePoint;
        ddz.Share.isOnShare = true;
        ddz.Share.resultType = 0;
        ddz.Share.shareTicket = "";
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShareAction, [ sharePointId, 1, shareSchemeId ]);
        return {
          title: shareTitle,
          imageUrl: imageUrl,
          query: query,
          success: function success(shareTickets, groupMsgInfos) {
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShareAction, [ sharePointId, 2, shareSchemeId ]);
            hall.LOGD(null, "onShareAppMessage+++++++++++++++++" + JSON.stringify(shareTickets));
          },
          fail: function fail() {
            hall.LOGD(null, JSON.stringify(arguments));
          },
          complete: function complete() {}
        };
      });
      cc._RF.pop();
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 47,
    crypto: 56
  } ],
  SingleReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6924fSrkThHrb1a3SszXOyi", "SingleReward");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "singleReward";
      },
      properties: {
        rewardSpr: cc.Sprite,
        rewardDes: cc.RichText
      },
      onLoad: function onLoad() {},
      setRewardInfo: function setRewardInfo(rewardInfo) {
        this.rewardType = "coin";
        if ("user:chip" == rewardInfo.icon) {
          this.rewardType = "coin";
          this.setRewardDes("coin", rewardInfo.count);
          ddz.Share.shareKeywordReplace.arenaWinRewardChip = rewardInfo.count;
        } else if (rewardInfo.icon = "user:coupon") {
          this.rewardType = "coupon";
          this.setRewardDes("coupon", rewardInfo.count / 100 + "元");
          ddz.Share.shareKeywordReplace.arenaWinRewardMoney = rewardInfo.count / 100;
        }
        this.setRewardSpr(this.rewardType, rewardInfo.iconPath);
      },
      setRewardDes: function setRewardDes(type, num) {
        this.rewardDes.string = "coin" == type ? "<img src='ddz_coin_white' height=30 width=30/><color=#ffffff> " + num + "</color>" : "<color=#ffffff>" + num + "</color>";
      },
      setRewardSpr: function setRewardSpr(type, url) {
        var spritePic = "";
        var self = this;
        if ("coin" == type) {
          spritePic = "ddz_mall_coin_icon_mall";
          cc.loader.loadRes("table/ddz_mall", cc.SpriteAtlas, function(err, atlas) {
            var frame = atlas.getSpriteFrame(spritePic);
            self.rewardSpr.spriteFrame = frame;
          });
        } else if ("coupon" == type) {
          spritePic = "ddz_mall_redpackage_icon_mall";
          cc.loader.loadRes("table/ddz_mall", cc.SpriteAtlas, function(err, atlas) {
            var frame = atlas.getSpriteFrame(spritePic);
            self.rewardSpr.spriteFrame = frame;
          });
        } else url && ty.SystemInfo.getImageWithURL(url, this.rewardSpr);
      }
    });
    cc._RF.pop();
  }, {} ],
  StoreItemInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82589EgrxZLhrN6FK4UGGeM", "StoreItemInfo");
    "use strict";
    hall.StoreItemInfo = cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.StoreItemInfo";
        this.m_name = "";
        this.m_price = "";
        this.m_pic = "";
        this.m_discount = [];
        this.m_tag = "";
        this.m_nameurl = "";
        this.m_id = "";
        this.m_priceurl = "";
        this.m_desc = "";
        this.m_buy_type = "";
        this.m_price_diamond = "";
        this.m_exchange_rate = -1;
        this.m_tags = {
          sale: 0,
          discount: 0,
          hot: 0
        };
        hall.LOGD(this._TAG, "ctor");
      },
      destroy: function destroy() {
        hall.LOGD(this._TAG, "destroy");
      },
      parseStoreItemInfo: function parseStoreItemInfo(json) {
        this.m_name = json["name"];
        this.m_price = json["price"];
        this.m_pic = json["pic"];
        this.m_discount = json["discount"];
        this.m_tag = json["tag"];
        this.m_nameurl = json["nameurl"];
        this.m_id = json["id"];
        this.m_priceurl = json["priceurl"];
        this.m_desc = json["desc"];
        this.m_buy_type = json["buy_type"];
        this.m_price_diamond = json["price_diamond"];
        this.m_exchange_rate = json["exchange_rate"];
        var tags = json["tags"];
        tags && (this.m_tags = tags);
        var cost = json["cost"];
        cost && (this.m_cost = cost);
      }
    });
    cc._RF.pop();
  }, {} ],
  SystemInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2d85gezntAJbTMvT+uUb2I", "SystemInfo");
    "use strict";
    console.log("SystemInfo loaded");
    ty.SystemInfo = {
      DEBUG_SER_KEY: "DEBUG_SER_KEY",
      clientId: "H5_5.1_weixin.weixin.0-hall6.weixin.rich",
      clientIdInt: 23142,
      cloudid: 24,
      version: 6.995,
      loginUrl: "https://openrich.nalrer.cn/",
      deviceId: "wechatGame",
      wxAppId: "wxbfebdafc2fc60b54",
      appId: 9999,
      hallId: 9999,
      gameId: 6,
      tableBgMusicVolume: .4,
      cdnPath: "https://richqn.nalrer.cn/dizhu/",
      remotePackPath: "remote_res/res633.zip",
      m_server_ip: "https://cbi.touch4.me/api/bilog5/text",
      shareManagerUrl: "https://market.touch4.me/",
      shareImagePath: "",
      shareImageType: "",
      shareTicket: "",
      ftID: "",
      treasureID: "",
      mostImgCount: 40,
      imageDicArray: [],
      imageDic: {},
      bsgsCitys: [ "北京", "上海", "广州", "深圳", "杭州", "成都" ],
      getImageWithURL: function getImageWithURL(urlStringO, nowSprite) {
        var urlString = hall.hex_md5(urlStringO);
        var setOldSize = function setOldSize(nowSprite, texture) {
          var oldSize = cc.size(nowSprite.node.width, nowSprite.node.height);
          nowSprite.spriteFrame = texture;
          nowSprite.node.setContentSize(oldSize);
        };
        if (ty.SystemInfo.imageDic[urlString]) if (ty.SystemInfo.imageDic[urlString].texture) setOldSize(nowSprite, ty.SystemInfo.imageDic[urlString].texture); else if (ty.SystemInfo.imageDic[urlString].textureArray) ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite); else {
          ty.SystemInfo.imageDic[urlString].textureArray = [];
          ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite);
        } else {
          ty.SystemInfo.imageDic[urlString] = {};
          ty.SystemInfo.imageDic[urlString].textureArray = [];
          ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite);
          if (ty.SystemInfo.imageDicArray.length >= ty.SystemInfo.mostImgCount) {
            var tempURL = ty.SystemInfo.imageDicArray[0];
            ty.SystemInfo.imageDic[tempURL] = null;
            delete ty.SystemInfo.imageDic[tempURL];
            ty.SystemInfo.imageDicArray.splice(0, 1);
          }
          ty.SystemInfo.imageDicArray.push(urlString);
          var _index = 0;
          var loadImage = function loadImage() {
            var txImage = wx.createImage();
            txImage.src = urlStringO;
            txImage.onload = function(event) {
              hall.LOGW("", "file = [SystemInfo] fun = [loadImage] 加载成功");
              var texture = new cc.Texture2D();
              texture.initWithElement(txImage);
              texture.handleLoadedTexture();
              ty.SystemInfo.imageDic[urlString].texture = new cc.SpriteFrame(texture);
              var tempA = ty.SystemInfo.imageDic[urlString].textureArray;
              for (var i = 0; i < tempA.length; i++) {
                var sprit = tempA[i];
                sprit && setOldSize(sprit, ty.SystemInfo.imageDic[urlString].texture);
              }
            };
            txImage.onerror = function(event) {
              hall.LOGW("", "file = [SystemInfo] fun = [loadImage] 加载失败");
              _index++;
              _index < 4 && ty.Timer.setTimer(cc.director, function() {
                loadImage();
              }, 1, 1, 0);
            };
          };
          loadImage();
        }
      },
      getImageWithURLBig: function getImageWithURLBig(urlStringO, nowSprite) {
        ddz.LOGD("", "file = [SystemInfo] fun = [getImageWithURLBig] urlStringO = " + urlStringO);
        var urlStr_2 = urlStringO;
        var jpg_index = urlStringO.indexOf(".jpg");
        if (-1 == jpg_index) {
          var index = urlStringO.indexOf("/132");
          index > 0 && (urlStr_2 = urlStr_2.replace("/132", "/0"));
        }
        var urlString = hall.hex_md5(urlStr_2);
        var setOldSize = function setOldSize(nowSprite, texture) {
          var oldSize = cc.size(nowSprite.node.width, nowSprite.node.height);
          nowSprite.spriteFrame = texture;
          nowSprite.node.setContentSize(oldSize);
        };
        if (ty.SystemInfo.imageDic[urlString]) if (ty.SystemInfo.imageDic[urlString].texture) setOldSize(nowSprite, ty.SystemInfo.imageDic[urlString].texture); else if (ty.SystemInfo.imageDic[urlString].textureArray) ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite); else {
          ty.SystemInfo.imageDic[urlString].textureArray = [];
          ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite);
        } else {
          ty.SystemInfo.imageDic[urlString] = {};
          ty.SystemInfo.imageDic[urlString].textureArray = [];
          ty.SystemInfo.imageDic[urlString].textureArray.push(nowSprite);
          if (ty.SystemInfo.imageDicArray.length >= ty.SystemInfo.mostImgCount) {
            var tempURL = ty.SystemInfo.imageDicArray[0];
            ty.SystemInfo.imageDic[tempURL] = null;
            delete ty.SystemInfo.imageDic[tempURL];
            ty.SystemInfo.imageDicArray.splice(0, 1);
          }
          ty.SystemInfo.imageDicArray.push(urlString);
          var _index = 0;
          var loadImage = function loadImage() {
            var txImage = wx.createImage();
            txImage.src = urlStr_2;
            txImage.onload = function(event) {
              hall.LOGW("", "file = [SystemInfo] fun = [loadImage] 加载成功");
              var texture = new cc.Texture2D();
              texture.initWithElement(txImage);
              texture.handleLoadedTexture();
              ty.SystemInfo.imageDic[urlString].texture = new cc.SpriteFrame(texture);
              var tempA = ty.SystemInfo.imageDic[urlString].textureArray;
              for (var i = 0; i < tempA.length; i++) {
                var sprit = tempA[i];
                sprit && setOldSize(sprit, ty.SystemInfo.imageDic[urlString].texture);
              }
            };
            txImage.onerror = function(event) {
              hall.LOGW("", "file = [SystemInfo] fun = [loadImage] 加载失败");
              _index++;
              _index < 4 && ty.Timer.setTimer(cc.director, function() {
                loadImage();
              }, 1, 1, 0);
            };
          };
          loadImage();
        }
      }
    };
    cc._RF.pop();
  }, {} ],
  TCP: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22b836X3FhKRqW9C3TDzUSK", "TCP");
    "use strict";
    console.log("TCP loaded");
    var noShowLogMsgs = [ "room_online_info", "heart_beat" ];
    var setTCP_FAIL = function setTCP_FAIL() {
      ty.TCP.connectStatus = ty.TCP.CONNECT_STATUS_FAIL;
    };
    ty.TCP = {
      CONNECT_STATUS_OK: 1,
      CONNECT_STATUS_OPENING: 2,
      CONNECT_STATUS_CLOSING: 3,
      CONNECT_STATUS_FAIL: 0,
      connectStatus: 0,
      isTimerInited: false,
      tickCount: 0,
      connect: function connect(url) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeTCP_Start, [ url ]);
        var self = this;
        if (ty.TCP.connectStatus == ty.TCP.CONNECT_STATUS_OK) return;
        if (ty.TCP.connectStatus == ty.TCP.CONNECT_STATUS_OPENING) return;
        ty.TCP.connectStatus = ty.TCP.CONNECT_STATUS_OPENING;
        wx.connectSocket({
          url: url
        });
        wx.onSocketOpen(function(res) {
          hall.LOGD(null, "TCP webSocket opened...");
          ty.TCP.connectStatus = ty.TCP.CONNECT_STATUS_OK;
          ty.NotificationCenter.trigger(ty.EventType.TCP_OPENED);
          ty.TCP.isTimerInited || (ty.TCP.isTimerInited = true);
          ty.Timer.setTimer(cc.director, self.timerSchedule, 1);
        });
        wx.onSocketError(function(res) {
          hall.LOGD(null, "TCP webSocket error...");
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeTCP_Failed, [ url ]);
          setTCP_FAIL();
          ty.NotificationCenter.trigger(ty.EventType.TCP_ERROR);
        });
        wx.onSocketClose(function(res) {
          hall.LOGD(null, "WebSocket 已关闭！");
          setTCP_FAIL();
          ty.NotificationCenter.trigger(ty.EventType.TCP_CLOSE);
        });
        wx.onSocketMessage(function(res) {
          if (hall.onHide) return;
          var content = self.decodeMessage(res["data"]);
          if (null == content || "0000" == content) return;
          var time = new Date();
          var msgStr = time + "[Receive TCP Msg]: " + unescape(content.replace(/\\u/gi, "%u"));
          var strJson = content.substr(0, content.length - 0);
          if (null != strJson && strJson.length > 0) {
            var _json = JSON.parse(strJson);
            -1 == noShowLogMsgs.indexOf(_json.cmd) && hall.LOGD(null, msgStr);
            ddz.msgCache.pushMsg(_json);
          }
        });
      },
      triggerMsg: function triggerMsg(msg) {
        msg.cmd == ddz.EventType.MSG_LED && (msg.result.gameId = 9999);
        ty.NotificationCenter.trigger(ty.EventType.TCP_RECEIVE, msg);
      },
      decodeMessage: function decodeMessage(data) {
        if ("undefined" != typeof ArrayBuffer && data instanceof ArrayBuffer) {
          var databytes = new Uint8Array(data);
          var content = "";
          for (var i = 0, len = databytes.length; i < len; i++) {
            var tmpc = String.fromCharCode(databytes[i]);
            content += tmpc;
          }
          return content;
        }
        var data = hall.GlobalFuncs.base64decodeRaw(data);
        var mask = data.slice(0, 4);
        data = data.slice(4);
        for (var i = 0, len = data.length; i < len; i++) {
          var charcode = data[i];
          charcode ^= mask[i % 4];
          data[i] = charcode;
        }
        var result = hall.GlobalFuncs._utf8_decode(data);
        return result;
      },
      timerSchedule: function timerSchedule() {
        ty.TCP.tickCount = (ty.TCP.tickCount + 1) % 3;
        2 == ty.TCP.tickCount && hall.MsgFactory.sendHeartBeat();
        ty.TCP.reConnet();
      },
      reConnet: function reConnet() {
        if (hall.onHide) return;
        if (ty.TCP.connectStatus == ty.TCP.CONNECT_STATUS_FAIL) {
          ty.NotificationCenter.trigger(ty.EventType.TCP_RECONNECT);
          ty.TCP.connect(ty.SystemInfo.webSocketUrl);
        }
      },
      sendMsg: function sendMsg(data) {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) return;
        var msgStr = JSON.stringify(data);
        if (-1 == noShowLogMsgs.indexOf(data.cmd)) {
          var time = new Date();
          hall.LOGD(time, "TCP sendMsg:" + msgStr);
        }
        wx.sendSocketMessage({
          data: msgStr,
          success: function success(params) {},
          fail: function fail(params) {
            var errMsg = arguments[0];
            if (errMsg && "sendSocketMessage:fail taskID not exist" === errMsg["errMsg"]) {
              wx.closeSocket();
              setTCP_FAIL();
            }
            hall.LOGD(null, "TCP sendMsg fail:" + JSON.stringify(arguments));
          },
          complete: function complete(params) {}
        });
      },
      close: function close() {
        ty.TCP.connectStatus = ty.TCP.CONNECT_STATUS_CLOSING;
        wx.closeSocket();
        setTCP_FAIL();
        hall.LOGD(null, "TCP close..............");
      }
    };
    cc._RF.pop();
  }, {} ],
  TableChatModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61f66zGL3lH8LrBDlMT7zdX", "TableChatModel");
    "use strict";
    ddz.tableChatModel = {
      tableMsgMap: {
        1: [],
        2: [],
        3: []
      },
      mySeatId: 0,
      msgPlayers: {},
      playingPlayers: [],
      parseTableChat: function parseTableChat(argument) {
        var seatId = parseInt(argument.result.seatId);
        var msgType = parseInt(argument.result.isFace);
        seatId == this.mySeatId;
        if (2 == msgType) {
          var msgs = this.tableMsgMap[seatId];
          var msg = argument.result.msg;
          cc.sys.os == cc.sys.OS_IOS && (msg = msg.replace(/\r|\n/g, ""));
          msgs.push(msg);
          this.playMsg(seatId);
        } else 0 == msgType && ty.NotificationCenter.trigger(ddz.EventType.SHOW_TABLE_CHAT, argument.result);
      },
      getMsgBySeatId: function getMsgBySeatId(seatId) {
        var msgs = this.tableMsgMap[seatId];
        var msg = null;
        msgs.length > 0 && (msg = msgs.pop());
        return msg;
      },
      getMsgCountBySeatId: function getMsgCountBySeatId(seatId) {
        var msgs = this.tableMsgMap[seatId];
        return msgs.length;
      },
      getMsgPlayer: function getMsgPlayer(seatId) {
        var player = wx.createInnerAudioContext();
        player.autoplay = false;
        player.loop = false;
        player.volume = 1;
        player.obeyMuteSwitch = true;
        var fs = wx.getFileSystemManager();
        player.onEnded(function(res) {
          ty.NotificationCenter.trigger(ddz.EventType.END_PLAY_TABLE_CHAT, seatId);
          fs.unlinkSync(player.src);
          ddz.tableChatModel.getMsgCountBySeatId(seatId) > 0 && ddz.tableChatModel.playMsg(seatId);
          ddz.tableChatModel.removePlayerFromPlayingList(player);
          player.destroy();
        });
        return player;
      },
      playMsg: function playMsg(seatId) {
        var msg = ddz.tableChatModel.getMsgBySeatId(seatId);
        if (msg) {
          ty.NotificationCenter.trigger(ddz.EventType.START_PLAY_TABLE_CHAT, seatId);
          var player = ddz.tableChatModel.getMsgPlayer(seatId);
          var filePath = wx.env.USER_DATA_PATH + "/seat_" + seatId + "_msg." + ddz.recordFileType;
          var fs = wx.getFileSystemManager();
          var revertFile = function revertFile() {
            fs.writeFileSync(filePath, msg, "base64");
            hall.LOGW(null, "本地音频文件:" + filePath);
            player.src = filePath;
            player.play();
            ddz.tableChatModel.playingPlayers.push(player);
          };
          fs.access({
            path: filePath,
            success: function success() {
              fs.unlinkSync(filePath);
              revertFile();
            },
            fail: function fail() {
              revertFile();
            }
          });
        }
      },
      removePlayerFromPlayingList: function removePlayerFromPlayingList(player) {
        var index = this.playingPlayers.indexOf(player);
        this.playingPlayers.splice(index, 1);
      },
      replay: function replay() {
        var player;
        for (var i = 0; i < this.playingPlayers.length; i++) {
          player = this.playingPlayers[i];
          player.play();
        }
      },
      clear: function clear() {
        var msgs;
        for (var i in this.tableMsgMap) {
          msgs = this.tableMsgMap[i];
          msgs.length = 0;
        }
        this.playingPlayers.length = 0;
      }
    };
    cc._RF.pop();
  }, {} ],
  TableInfoModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "09ad4jRmkpPbq22aIB/2IuH", "TableInfoModel");
    "use strict";
    ddz.tableInfoModel = {
      cache: null,
      parse: function parse(value) {
        this.cache = value.result;
        ddz.matchModel.isGameFlow = false;
        ty.NotificationCenter.trigger(ddz.EventType.RECIVE_TABLE_INFO, value.result);
      },
      clean: function clean() {
        this.cache = null;
      }
    };
    cc._RF.pop();
  }, {} ],
  TableInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a99c5BtCWdDdqTed1dpmBdx", "TableInfo");
    "use strict";
    ddz._TableInfo = cc.Class({
      ctor: function ctor() {
        this.config = {
          m_mincoin: 0,
          m_maxseat: 0,
          m_sfee: 0,
          m_base: 0,
          m_maxcoin: 0,
          m_coin2chip: 0,
          m_optime: 0,
          m_grab: 1,
          m_basemulti: 0,
          m_roommulti: 1,
          m_untiCheat: 0,
          m_autoChange: 0,
          m_passtime: 0,
          m_tbbox: 0,
          m_isMingPai: 0,
          m_optimedis: "",
          m_maxMulti: 0,
          m_couponrule: ""
        };
        this.complain = {
          m_nComplainFee: -1,
          m_nComplainCompensation: -1,
          m_strComplainGameNum: ""
        };
        this.normal = {
          m_tableId: 0,
          m_roomId: 0,
          m_name: "",
          m_pwd: ""
        };
        this.m_boxConfig = [ {
          windoubles: "12",
          isHaveCoupon: 0,
          boxType: "青铜宝箱"
        }, {
          windoubles: "24",
          isHaveCoupon: 0,
          boxType: "白银宝箱"
        }, {
          windoubles: "48",
          isHaveCoupon: 1,
          boxType: "黄金宝箱"
        }, {
          windoubles: "",
          isHaveCoupon: 1,
          boxType: "春天宝箱"
        } ];
        this.ftInfo = null;
        this.typeName = null;
        this.smiliesConf = null;
        this.mCardNote = null;
        this.isMatch = 0;
        this.matchNote = null;
        this.m_customTableId = 0;
        this.nameList = [];
        this.disbind = null;
        this.roomName = "";
        this.playMode = "";
        this.seats = [];
        hall.LOGD(null, "in ctor new ddz.TableInfo");
      },
      getSceneType: function getSceneType() {
        var type = null;
        switch (this.typeName) {
         case "async_common_arena_match":
          type = ddz.Enums.SceneType.ARENA;
          break;

         case "async_upgrade_hero_match":
          type = ddz.Enums.SceneType.MATCH;
          break;

         case "dizhu_friend":
          type = ddz.Enums.SceneType.FRIEND;
          break;

         case "dizhu_normal":
          type = ddz.Enums.SceneType.NORMAL;
        }
        return type;
      },
      roomId: function roomId() {
        return this.normal.m_roomId;
      },
      tableId: function tableId() {
        return this.normal.m_tableId;
      },
      getConfig: function getConfig(tag) {
        return this.config[tag];
      },
      destroy: function destroy() {
        this.config = null;
        this.complain = null;
        this.normal = null;
        this.mCardNote = null;
        this.typeName = null;
        this.nameList = [];
        this.disbind = null;
        if (this.ftInfo) {
          this.ftInfo.cleanup();
          this.ftInfo = null;
        }
        hall.LOGD(null, "destroy in ddz.TableInfo");
      },
      parseConfigInfo: function parseConfigInfo(json) {
        var config = this.config;
        config.m_mincoin = json["mincoin"];
        config.m_maxseat = json["maxseat"];
        config.m_maxMulti = json["maxMulti"];
        config.m_sfee = json["sfee"];
        config.m_base = json["base"];
        config.m_maxcoin = json["maxcoin"];
        config.m_coin2chip = json["coin2chip"];
        config.m_optime = json["optime"];
        config.m_grab = json["grab"];
        config.m_basemulti = json["basemulti"];
        config.m_roommulti = json["roommulti"];
        config.m_untiCheat = json["untiCheat"];
        config.m_autoChange = json["autoChange"];
        config.m_passtime = json["passtime"];
        config.m_tbbox = json["tbbox"];
        config.m_isMingPai = json["isMingPai"];
        config.m_optimedis = json["optimedis"];
        2 >= config.m_passtime && (config.m_passtime = 5);
        config.m_couponrule = json["couponrule"];
      },
      parseNormalInfo: function parseNormalInfo(info) {
        var normal = this.normal;
        normal.m_tableId = info["tableId"];
        normal.m_roomId = info["roomId"];
        normal.m_name = info["name"];
        normal.m_pwd = info["pwd"];
        hall.LOGD(null, "parseNormalInfo in ddz.TableInfo");
      },
      parseTableInfo: function parseTableInfo(json) {
        if (json.hasOwnProperty("info")) {
          hall.LOGD(null, "parseNormalInfo...");
          this.parseNormalInfo(json["info"]);
        }
        this.isMatch = json["isMatch"];
        if (json.hasOwnProperty("config")) {
          hall.LOGD(null, "parseConfigInfo...");
          this.parseConfigInfo(json["config"]);
        }
        var customTableId = json["customTableId"];
        json.hasOwnProperty("customTableId") && (this.m_customTableId = customTableId);
        this.smiliesConf = json["smiliesConf"];
        json.hasOwnProperty("cardNote") && (this.mCardNote = json["cardNote"]);
        json.hasOwnProperty("boxConfig") && (this.m_boxConfig = json["boxConfig"]);
        if (json.hasOwnProperty("ftInfo")) {
          this.ftInfo || (this.ftInfo = new ddz.FtInfo());
          this.ftInfo.parseTableInfo(json);
        }
        if (json.hasOwnProperty("seat1")) {
          this.nameList = [ json["seat1"].name, json["seat2"].name, json["seat3"].name ];
          this.seats = [];
          this.seats = [ json["seat1"], json["seat2"], json["seat3"] ];
        }
        json.hasOwnProperty("disbind") && (this.disbind = json.disbind);
        json.hasOwnProperty("mixId") && (this.mixId = json.mixId);
        json.hasOwnProperty("roomName") && (this.roomName = json.roomName);
        json.hasOwnProperty("playMode") && (this.playMode = json.playMode);
        this.typeName = json.typeName;
        ty.NotificationCenter.trigger(ddz.EventType.TABLE_INFO_CHAGE, this);
      },
      parseComplain: function parseComplain(result) {
        var complain = this.complain;
        var gamenum = result["gameNum"];
        gamenum && (complain.m_strComplainGameNum = gamenum);
        var com = result["complain"];
        if (com) {
          complain.m_nComplainFee = com["fee"] || -1;
          complain.m_nComplainCompensation = com["compensation"] || -1;
        }
      },
      Reset: function Reset() {
        var config = this.config;
        config.m_base = 0;
        config.m_grab = 0;
        config.m_roommulti = 1;
        config.m_untiCheat = 0;
        config.m_tbbox = 0;
        config.m_isMingPai = 0;
        this.matchNote = null;
        this.isMatch = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  TableState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce6bc576LlDAKgtLD7aBCu3", "TableState");
    "use strict";
    ddz._TableState = cc.Class({
      ctor: function ctor() {
        this.normalInfo = {
          m_state: ddz.Enums.TableState.TABLEDSTAT_IDLE,
          m_matchpcnt: 0,
          m_nowop: 0,
          m_banker: 0,
          m_ccrc: 0,
          m_dizhu: 0,
          m_topseat: 0,
          m_call: -1,
          m_bomb: 0,
          m_chuntian: 0,
          m_show: 1,
          m_super: 1,
          m_bcmulti: 1,
          m_cardLaizi: -1,
          m_grabCard: -1,
          m_rangpaiMulti: -1,
          m_rangpai: 0,
          m_kickoutCard: []
        };
        this.objectInfo = {
          m_baseCard: [],
          m_topCard: []
        };
        this.m_laiziNumber = -1;
        this.m_bUpdatebcMulti = false;
        hall.LOGD(null, "ctor in new ddz._TableState");
      },
      setLaizi: function setLaizi(lz_point) {
        hall.LOGD(null, "in table state, set lz value " + lz_point);
        this.normalInfo.m_cardLaizi = lz_point;
        this.m_laiziNumber = ddz.GlobalFuncs.getLaiziNumByPoint(lz_point);
      },
      destroy: function destroy() {
        this.normalInfo = null;
        this.objectInfo = null;
        hall.LOGD(null, "destroy in ddz._TableState");
      },
      parseTableState: function parseTableState(result) {
        if (!result) return;
        var tmp = this.normalInfo;
        var oldCall = tmp.m_call;
        var oldBomb = tmp.m_bomb;
        var oldShow = tmp.m_show;
        var oldSuper = tmp.m_super;
        var oldbcmulti = tmp.m_bcmulti;
        tmp.m_state = result["state"];
        tmp.m_nowop = result["nowop"];
        tmp.m_ccrc = result["ccrc"];
        tmp.m_dizhu = result["dizhu"];
        tmp.m_topseat = result["topseat"];
        tmp.m_call = result["call"];
        tmp.m_bomb = result["bomb"];
        tmp.m_show = result["show"];
        tmp.m_super = result["super"];
        tmp.m_bcmulti = result["bcmulti"];
        tmp.m_chuntian = result["chuntian"];
        tmp.m_grabCard = result["grabCard"];
        tmp.m_rangpaiMulti = result["rangpaiMulti"];
        tmp.m_rangpai = result["rangpai"];
        tmp.m_bcmulti != oldbcmulti && (this.m_bUpdatebcMulti = true);
        tmp.m_kickoutCard = result["kickoutCard"] || [];
        var anim, updateMulti, params;
        if (tmp.m_call != oldCall && tmp.m_call >= 1) {
          anim = true;
          updateMulti = true;
          params = [ anim, updateMulti ];
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MULTI, params);
        }
        if (tmp.m_bomb != oldBomb) {
          hall.LOGD(null, "倍数改变 炸弹");
          anim = true;
          updateMulti = true;
          params = [ anim, updateMulti ];
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MULTI, params);
        }
        if (tmp.m_show != oldShow) {
          hall.LOGD(null, "倍数改变 明牌");
          anim = true;
          updateMulti = true;
          params = [ anim, updateMulti ];
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MULTI, params);
        }
        if (tmp.m_super != oldSuper) {
          hall.LOGD(null, "倍数改变 超级加倍");
          anim = true;
          updateMulti = true;
          params = [ anim, updateMulti ];
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MULTI, params);
        }
        if (true == this.m_bUpdatebcMulti && tmp.m_state == ddz.Enums.TableState.TABLEDSTAT_PLAYING) {
          hall.LOGD(null, "倍数改变 底牌加倍");
          anim = true;
          updateMulti = true;
          params = [ anim, updateMulti ];
          ty.NotificationCenter.trigger(ddz.EventType.UPDATE_MULTI, params);
        }
        result.hasOwnProperty("wildcard") && this.setLaizi(result["wildcard"]);
        result.hasOwnProperty("basecard") && (this.objectInfo.m_baseCard = result["basecard"]);
        result.hasOwnProperty("topcard") && (this.objectInfo.m_topCard = result["topcard"]);
        hall.LOGD(null, "parseTableState in ddz._TableState");
      },
      Reset: function Reset() {
        var tmp = this.normalInfo;
        tmp.m_state = ddz.Enums.TableState.TABLEDSTAT_IDLE;
        tmp.m_matchpcnt = 0;
        tmp.m_nowop = 0;
        tmp.m_banker = 0;
        tmp.m_ccrc = 0;
        tmp.m_dizhu = -1;
        tmp.m_topseat = 0;
        tmp.m_call = -1;
        tmp.m_bomb = 0;
        tmp.m_chuntian = 1;
        tmp.m_show = 1;
        tmp.m_super = 1;
        tmp.m_bcmulti = 1;
        tmp.m_grabCard = -1;
        tmp.m_rangpaiMulti = -1;
        tmp.m_rangpai = 0;
        tmp.m_cardLaizi = -1;
        this.objectInfo.m_baseCard = [];
        this.objectInfo.m_topCard = [];
        this.m_laiziNumber = -1;
        hall.LOGD(null, "Reset in ddz._TableState");
      },
      calcMulti: function calcMulti() {
        var multi = 1;
        var info = this.normalInfo;
        multi *= info.m_call;
        var dipai = info.m_bcmulti;
        dipai > 1 && (multi *= dipai);
        var mingpai = info.m_show;
        mingpai > 1 && (multi *= 2);
        var zhadan = info.m_bomb;
        var b;
        if (zhadan >= 1) {
          b = Math.pow(2, zhadan);
          multi *= b;
        }
        var chuntian = info.m_chuntian;
        chuntian > 1 && (multi *= chuntian);
        return multi;
      }
    });
    cc._RF.pop();
  }, {} ],
  ThroughModule: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7fe3aBObiJLkqVzqgelbKxm", "ThroughModule");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        lblDiFen: cc.Label,
        game_result: cc.Prefab,
        boxBtn: cc.Button,
        box_donghua: cc.Node,
        boxSprite: cc.Sprite,
        boxSpriteFrame: [ cc.SpriteFrame ],
        box_up: cc.Node,
        aniDiFen: cc.Label,
        lblDiFen_1: cc.Label,
        fanbei: cc.Node
      },
      ctor: function ctor() {},
      setTableScene: function setTableScene(val) {
        this._tableScene = val;
      },
      betScoreChangeAni: function betScoreChangeAni() {
        this.aniDiFen.node.active = true;
        this.fanbei.active = true;
        var _defen = this.lblDiFen.string;
        this.lblDiFen_1.string = _defen;
        var index = _defen.indexOf("倍");
        _defen = _defen.substring(0, index);
        this.aniDiFen.string = 2 * _defen + "倍";
        this.aniDiFen.node.y = 100;
        this.aniDiFen.node.stopAllActions();
        var to_pos = this.fanbei.getPosition();
        var pos_y = (to_pos.y + 120) / 1.2;
        var pos_y_1 = (to_pos.y + 120) / 1.5;
        var from_pos = cc.p(0, pos_y_1);
        var midPoint = cc.p(-120, to_pos.y);
        var controlPoints1 = [ from_pos, midPoint, to_pos ];
        var bezierToDst1 = cc.bezierTo(.5, controlPoints1);
        var tableinfo = this._tableScene.tableInfo();
        var boxConfig = tableinfo.m_boxConfig;
        var boxType = "";
        if (boxConfig && boxConfig.length && boxConfig.length > 0) for (var i = 0; i < boxConfig.length; i++) "" != boxConfig[i].windoubles && boxConfig[i].windoubles <= 2 * _defen && (boxType = boxConfig[i].boxType);
        var that = this;
        this.aniDiFen.node.runAction(cc.sequence(bezierToDst1, cc.callFunc(function() {
          that.aniDiFen.node.active = false;
          that.lblDiFen.string = 2 * _defen + "倍";
          var ani = that.fanbei.getComponent(cc.Animation);
          var anim = ani.getAnimationState("times_anination");
          anim.once("finished", function() {
            that.setBoxType(boxType);
          });
          anim.play();
        }, that)));
      },
      updateMultiple: function updateMultiple(baseScore, multiple) {
        this.fanbei.active = true;
        this.lblDiFen.string = multiple + "倍";
        this.boxBtn.node.active = true;
        var tableinfo = this._tableScene.tableInfo();
        var boxConfig = tableinfo.m_boxConfig;
        var boxType = "";
        if (boxConfig && boxConfig.length && boxConfig.length > 0) for (var i = 0; i < boxConfig.length; i++) "" != boxConfig[i].windoubles && boxConfig[i].windoubles <= multiple && (boxType = boxConfig[i].boxType);
        this.setBoxType(boxType);
        if (!this.isOnce) {
          this.isOnce = true;
          var tips = "打高倍赢宝箱";
          hall.GlobalFuncs.onBubbleTips(this.boxBtn.node, tips, -40, -60, 15);
        }
      },
      setBoxType: function setBoxType(type) {
        if (type != this.boxType) {
          this.boxType = type;
          var com = this.box_up.getComponent("box_up");
          com.setBoxSprite(type);
        }
        switch (type) {
         case "青铜宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[0];
          break;

         case "白银宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[1];
          break;

         case "黄金宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[2];
          break;

         case "春天宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[3];
        }
      },
      onLoad: function onLoad() {
        ddz.LOGD("", "file = [ThroughModule] fun = [onLoad]");
        this.boxType = "";
        ty.NotificationCenter.listen(ddz.EventType.GAME_READY, this._onGameReady, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
        ty.NotificationCenter.listen(ddz.EventType.SET_BOX_TYPE, this.setBoxType, this);
        ty.NotificationCenter.listen(ddz.EventType.BET_SCORE_CHANGE_ANI, this.betScoreChangeAni, this);
      },
      onRemoveAni: function onRemoveAni() {
        var ani = this.box_donghua.getComponent(cc.Animation);
        var anim_1 = ani.getAnimationState("box_doudong");
        anim_1 && anim_1.stop();
        var ani = this.fanbei.getComponent(cc.Animation);
        var anim = ani.getAnimationState("times_anination");
        anim && anim.stop();
      },
      _onGameReady: function _onGameReady() {},
      onClickBoxBtn: function onClickBoxBtn() {
        hall.GlobalFuncs.onbetBoxAbstract();
      },
      showResult: function showResult(result) {
        ddz.LOGD("", "file = [ThorughModule] fun = [showResult] 闯关赛显示结算页面");
        this._tableScene._reset();
        if (!this._gameResult) {
          var game_result_wnd = cc.instantiate(this.game_result);
          cc.director.getScene().addChild(game_result_wnd);
          this._gameResult = game_result_wnd.getComponent("ddz_game_result_through");
          this._gameResult.setTableScene(this._tableScene);
        }
        this._gameResult.show(result);
        var mySeatIndex = this._tableScene._mySeatIndex;
        if (mySeatIndex == result.stat.dizhu) {
          var saveCardsString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ORIGINCARDS, "");
          var saveCardsDic = JSON.parse(saveCardsString);
          var cards = saveCardsDic.myCards;
          var baseCards = saveCardsDic.baseCard;
          cards = cards.concat(baseCards);
          var saveDic = {
            myCards: cards,
            baseCard: baseCards
          };
          hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.ORIGINCARDS, JSON.stringify(saveDic));
        }
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this._tableScene = null;
      },
      reset: function reset() {
        this.lblDiFen.string = "";
        this.isOnce = false;
        this.boxBtn.node.active = false;
        this.boxSprite.spriteFrame = this.boxSpriteFrame[2];
        this.aniDiFen.node.active = false;
      },
      update: function update(dt) {},
      onBack: function onBack() {}
    });
    cc._RF.pop();
  }, {} ],
  Timer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23169a2zMxPEJq/oQlE/UNg", "Timer");
    "use strict";
    ty.Timer = {
      setTimer: function setTimer(obj, callback, interval, repeatNum, delay) {
        obj && obj._TAG && hall.LOGD("ty.Timer", "----------in setTimer----------" + (obj._TAG ? obj._TAG : ""));
        var scheduler = cc.director.getScheduler();
        var paused = false;
        var times = null != repeatNum ? repeatNum : cc.macro.REPEAT_FOREVER;
        scheduler.schedule(callback, obj, interval, repeatNum, delay, paused);
      },
      cancelTimer: function cancelTimer(obj, callback) {
        obj && obj._TAG && hall.LOGD("ty.Timer", "----------in cancelTimer ---------" + (obj._TAG ? obj._TAG : ""));
        var scheduler = cc.director.getScheduler();
        scheduler.unschedule(callback, obj);
      },
      isScheduledTimer: function isScheduledTimer(obj, callback) {
        obj && obj._TAG && hall.LOGD("ty.Timer", "----------in isScheduledTimer ---------" + (obj._TAG ? obj._TAG : ""));
        var scheduler = cc.director.getScheduler();
        return scheduler.isScheduled(callback, obj);
      }
    };
    cc._RF.pop();
  }, {} ],
  ToDoTasks: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2dbd2fNCjpPFqIqAEel8u0S", "ToDoTasks");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.ToDoTasks";
        hall.LOGD(this._TAG, " in ctor");
        this._taskStatk = null;
        this._currentTask = null;
        this.actionMap = {};
        this._taskStatk = [];
        this.actionMap["bind_snsid_360"] = this.runOldUserBindSns;
        this.actionMap["nslogin_reward"] = this.runEverydayLogin;
        this.actionMap["flip_card"] = this.runFlipCardTask;
        this.actionMap["pop_active_wnd"] = this.runPopActivityWnd;
        this.actionMap["pop_lottery_wnd"] = this.runPopLotteryWnd;
        this.actionMap["pop_pay_order"] = this.runPopPayOrder;
        this.actionMap["rep_sence_activity"] = this.runReplaceSceneToActivity;
        this.actionMap["set_exit_wnd"] = this.runSetExitWndInf;
        this.actionMap["pop_info_wnd"] = this.runPopInforWnd;
        this.actionMap["pop_tip"] = this.runPopTips;
        this.actionMap["quick_start"] = this.runQuickStart;
        this.actionMap["pop_order_info"] = this.runPopBuy;
        this.actionMap["bind_phone"] = this.runPopBindPhone;
        this.actionMap["quick_start_tip"] = this.runQuickStartTip;
        this.actionMap["issue_start_chip"] = this.runIssueStartChip;
        this.actionMap["pop_member_try"] = this.runPopVipExperienceWnd;
        this.actionMap["pop_order"] = this.runSimplePopOrder;
        this.actionMap["pop_first_recharge"] = this._runPopFirstCharge;
        this.actionMap["pop_subscribe_wnd"] = this.runGotoAttention;
        this.actionMap["login_wx_subscribe"] = this.showerweima;
        this.actionMap["show_rewards"] = this.tipsForShowReward;
      },
      destroy: function destroy() {},
      runTasks: function runTasks() {
        if (!this._currentTask) {
          this._taskStatk = hall.gameWorld.model.m_todoTask.taskVec;
          this.runNextTask();
        }
      },
      runNextTask: function runNextTask() {
        this._currentTask && (this._currentTask = null);
        if (0 == this._taskStatk.length) return;
        var nextTask = this._taskStatk.shift();
        this._currentTask = nextTask;
        this.runOneTask(nextTask);
      },
      runOneTask: function runOneTask(oneTask) {
        hall.LOGD(this._TAG, "runOneTask");
        if (null != oneTask && "undefined" != typeof oneTask && "undefined" != typeof oneTask["action"] && "undefined" != typeof oneTask["params"]) {
          hall.LOGD(this._TAG, " run runOneTask-------------------------action:" + oneTask["action"] + "====" + _typeof(this.actionMap[oneTask["action"]]));
          if ("undefined" != typeof this.actionMap[oneTask["action"]]) {
            this.curActinFun = this.actionMap[oneTask["action"]];
            this.curActinFun(oneTask["params"]);
            this.curActinFun = null;
          } else {
            hall.LOGD(this._TAG, "This action is undefined! action:" + oneTask["action"]);
            hall.ToDoTask.runNextTask();
          }
        } else {
          hall.LOGD(this._TAG, "This action is undefined or cmd is error!");
          hall.ToDoTask.runNextTask();
        }
      },
      runPopVipExperienceWnd: function runPopVipExperienceWnd() {
        hall.ToDoTask.runNextTask();
      },
      runEverydayLogin: function runEverydayLogin(params) {
        var subclick = params["sub_action_click"];
        if (subclick && "pop_first_recharge" == subclick["action"]) {
          var task = new hall._TodoTask();
          task.parseTask(subclick);
          hall.gameWorld.model.m_todoTask.taskVec.push(task);
        }
        var data = params["rewardstate"];
        if (data instanceof Array) {
          hall.ME.loginInfo.parse(params);
          ty.NotificationCenter.trigger(hall.EventType.UPDATE_EVERYDAYLOGIN);
          return;
        }
        hall.ToDoTask.runNextTask();
      },
      runFlipCardTask: function runFlipCardTask(params) {
        hall.LOGD(this._TAG, " run runFlipCardTask-----------------------");
      },
      runQuickStartTip: function runQuickStartTip(params) {
        hall.LOGD(this._TAG, " run runQuickStartTip-----------------------");
        hall.ToDoTask.runNextTask();
      },
      runIssueStartChip: function runIssueStartChip(params) {
        if (hall.fuckstart) return;
        hall.fuckstart = true;
        hall.ToDoTask.runNextTask();
      },
      runPopActivityWnd: function runPopActivityWnd(params) {
        hall.LOGD(this._TAG, " run runPopActivityWnd-----------------------");
        hall.ToDoTask.runNextTask();
      },
      runPopLotteryWnd: function runPopLotteryWnd(params) {
        hall.LOGD(this._TAG, " run runPopLotteryWnd-----------------------");
      },
      runPopPayOrder: function runPopPayOrder(result) {
        "exchange" == result["buy_type"];
      },
      runOldUserBindSns: function runOldUserBindSns(params) {
        hall.LOGD(this._TAG, " run runReplaceSceneToActivity-----------------------");
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_BIND_USER_SNS, params);
      },
      runReplaceSceneToActivity: function runReplaceSceneToActivity(params) {
        hall.LOGD(this._TAG, " run runReplaceSceneToActivity-----------------------");
        hall.ToDoTask.runNextTask();
      },
      runSetExitWndInf: function runSetExitWndInf(params) {},
      runPopInforWnd: function runPopInforWnd(params) {
        hall.LOGD("", "file = [ToDoTasks] fun = [runPopInforWnd] params = " + JSON.stringify(params));
        this._currentTask = null;
        var desc = params["des"];
        var sub = params["sub_action"];
        var arr = [];
        if (desc) {
          arr = desc.split("-");
          if ("fuhaoBuyFailed" == arr[0]) {
            ty.NotificationCenter.trigger(ddz.EventType.DIAMOND_INSUFFICIENT);
            ddz.GlobalFuncs.showDiamondInsufficient(arr[1]);
            return;
          }
        }
        var testArray = [ {
          title: "确定"
        } ];
        var that = this;
        if (sub) {
          var subaction = sub["action"];
          if ("quick_start" == subaction) {
            this.onClickRightButton = function() {
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "gotoRecommendRoom", sub["params"].roomName ]);
              hall.MsgFactory.getQuickStartParams(sub["params"]);
            };
            this.onClickLeftButton = function() {
              var curScene = cc.director.getScene();
              if ("TableScene" == curScene.name) {
                var tableScene = curScene.children[0].getComponent("DdzTableScene");
                var tableinfo = tableScene.tableInfo();
                var _mixID = tableinfo.mixId;
                ddz.MsgFactory.getRoomLeave(tableinfo.roomId(), tableinfo.tableId(), tableScene._mySeatIndex, _mixID);
              }
            };
            var str = "确定";
            if (sub["params"].roomName && "" != sub["params"].roomName) {
              str = "去" + sub["params"].roomName;
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "recommendRoom", sub["params"].roomName ]);
            }
            testArray = [ {
              title: "取消"
            }, {
              title: str
            } ];
          }
        }
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var tips = desc;
          window.setTitleContentAndButtons("提示", tips, testArray);
        });
      },
      runPopTips: function runPopTips(params) {
        this._currentTask = null;
        params && params.text && "" != params.text && hall.MsgBoxManager.showToast({
          title: params.text
        });
      },
      runQuickStart: function runQuickStart(params) {
        hall.LOGD(this._TAG, "run runQuickStart-----------------------");
        var roomid = params["roomid"];
        hall.GlobalFuncs.gotoDdzTable();
        ty.NotificationCenter.trigger(hall.EventType.MSG_TODO_QUICK_START, params);
        hall.ToDoTask.runNextTask();
      },
      runPopBindPhone: function runPopBindPhone(params) {
        hall.LOGD(this._TAG, "run runPopBindPhone-----------------------");
      },
      runPopBuy: function runPopBuy(params) {
        this._currentTask = null;
        var sub = params["sub_action"];
        if (sub) {
          var that = this;
          var subaction = sub["action"];
          if ("pop_pay_order" == subaction) {
            this.onClickRightButton = function() {
              hall.MsgFactory.conversionCoin(sub["params"].id);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "roomListGoldExchange", sub["params"].tip ]);
            };
            var _callFunc = function _callFunc() {
              var curScene = cc.director.getScene();
              if ("TableScene" == curScene.name) {
                var tableScene = curScene.children[0].getComponent("DdzTableScene");
                var tableinfo = tableScene.tableInfo();
                var _mixID = tableinfo.mixId;
                ddz.MsgFactory.getRoomLeave(tableinfo.roomId(), tableinfo.tableId(), tableScene._mySeatIndex, _mixID);
              }
            };
            this.onClickLeftButton = function() {
              _callFunc();
            };
            this.tipsOnClose = function() {
              _callFunc();
            };
            var preFabPath = "prefabs/ddz_window_tips";
            var comName = "ddz_tipsWindow";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              var window = preFabNode.getComponent(comName);
              window.parentScene = that;
              var _tip = sub["params"].tip;
              var tips = "<color=#1A6951>兑换</c><img src='ddz_coin_green' height=40 width=40/><color=#1A6951> " + _tip + "</c>";
              var _titile = sub["params"].price + "兑换";
              var testArray = [ {
                title: "取消"
              }, {
                title: _titile,
                left: "dda_button_diamond"
              } ];
              window.setTitleContentAndButtons("金币不足", tips, testArray);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "roomListDiamondInsufficient", sub["params"].tip ]);
            });
          }
        }
        hall.ToDoTask.runNextTask();
      },
      runGotoAttention: function runGotoAttention(params) {
        hall.LOGD(this._TAG, "run runGotoAttention----------------------- params = " + JSON.stringify(params));
        var desc = params["desc"] || params["des"];
        var tip = params["tip"];
        var layer = new h5.GotoAttentionLayer(desc, tip);
        var curScene = cc.director.getRunningScene();
        curScene.addChild(layer, 99);
        hall.ToDoTask.runNextTask();
      },
      runSimplePopOrder: function runSimplePopOrder(params) {
        this._currentTask = null;
        var desc = params["desc"];
        var sub = params["sub_action"];
        if (sub) {
          var that = this;
          var subaction = sub["action"];
          if ("pop_pay_order" == subaction) {
            this.onClickRightButton = function() {
              hall.MsgFactory.conversionCoin(sub["params"].id);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "roomListGoldExchange", sub["params"].tip ]);
            };
            var _callFunc = function _callFunc() {
              var curScene = cc.director.getScene();
              if ("TableScene" == curScene.name) {
                var tableScene = curScene.children[0].getComponent("DdzTableScene");
                var tableinfo = tableScene.tableInfo();
                var _mixID = tableinfo.mixId;
                ddz.MsgFactory.getRoomLeave(tableinfo.roomId(), tableinfo.tableId(), tableScene._mySeatIndex, _mixID);
              }
            };
            this.onClickLeftButton = function() {
              _callFunc();
            };
            this.tipsOnClose = function() {
              _callFunc();
            };
            var preFabPath = "prefabs/ddz_window_tips";
            var comName = "ddz_tipsWindow";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              var window = preFabNode.getComponent(comName);
              window.parentScene = that;
              var _tip = sub["params"].tip;
              var tips = "<color=#1A6951>兑换</c><img src='ddz_coin_green' height=40 width=40/><color=#1A6951> " + _tip + "</c>";
              var _titile = sub["params"].price + "兑换";
              var testArray = [ {
                title: "取消"
              }, {
                title: _titile,
                left: "dda_button_diamond"
              } ];
              window.setTitleContentAndButtons("金币不足", tips, testArray);
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "roomListDiamondInsufficient", sub["params"].tip ]);
            });
          }
        } else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ "roomListDiamondInsufficient" ]);
          var preFabPath = "prefabs/ddz_window_tips";
          var comName = "ddz_tipsWindow";
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var window = preFabNode.getComponent(comName);
            window.parentScene = that;
            var tips = "你的金币不足进入房间,请充值后再尝试,谢谢!";
            var testArray = [ {
              title: "取消"
            }, {
              title: "确定"
            } ];
            window.setTitleContentAndButtons("金币不足", tips, testArray);
          });
        }
      },
      _runPopFirstCharge: function _runPopFirstCharge(params) {
        var sub = params["sub_action"];
        var action = null;
        while (sub) {
          if ("pop_pay_order" == sub["action"]) break;
          var params = sub["params"];
          sub = params ? params["sub_action"] : null;
        }
        sub && (hall.gameWorld.firstChargeItem = sub["params"]);
        hall.ToDoTask.runNextTask();
      },
      showerweima: function showerweima() {
        document.getElementById("coverContainer").style.display = "block";
        hall.ToDoTask.runNextTask();
      },
      tipsForShowReward: function tipsForShowReward(params) {
        hall.LOGD(this._TAG, "run tipsForShowReward----------------------- params = " + JSON.stringify(params));
      },
      onClickLeftButton: function onClickLeftButton() {},
      onClickCenterButton: function onClickCenterButton() {}
    });
    cc._RF.pop();
  }, {} ],
  TodoTaskVec: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "304b7iYXiNJL6NTUhtGE5fd", "TodoTaskVec");
    "use strict";
    cc.Class({
      ctor: function ctor() {
        this.gameId = 0;
        this.userId = 0;
        this.exitPopWndType = 0;
        this.taskVec = [];
      },
      destroy: function destroy() {},
      parseTodoTask: function parseTodoTask(result) {
        if ("undefined" != typeof result) {
          this.gameId = result["gameId"];
          this.userId = result["userId"];
          var vec = this.taskVec;
          var tasks = result["tasks"];
          for (var i = 0, len = tasks.length; i < len; i++) {
            var task = new hall.TodoTask();
            task.parseTask(tasks[i]);
            vec.push(task);
          }
          hall.ToDoTask.runTasks();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  TodoTask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb8764A7DxBIISckj4vdJyJ", "TodoTask");
    "use strict";
    hall.TodoTask = cc.Class({
      ctor: function ctor() {
        this["action"] = "";
        this["params"] = {};
      },
      destroy: function destroy() {},
      parseTask: function parseTask(json) {
        "undefined" != typeof json["action"] && (this["action"] = json["action"]);
        "undefined" != typeof json["params"] && (this["params"] = json["params"]);
      }
    });
    cc._RF.pop();
  }, {} ],
  TuyooSDK: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ffa4zWgiVDSrJvXpLtCt9X", "TuyooSDK");
    "use strict";
    console.log("TuyooSDK loaded");
    ty.TuyooSDK = {
      SESSION_KEY: "TU_SESSION_STORAGE",
      login: function login() {
        ddz.LOGW("", "file = [TuyooSDK] fun = [login]");
        ty.ServerStateManager.checkServerState(function() {
          wx.getSetting({
            success: function success(res) {
              if (res.authSetting["scope.userInfo"]) wx.getUserInfo({
                withCredentials: true,
                success: function success(res) {
                  hall.LOGW(null, "wx login success .. res:" + JSON.stringify(res));
                  ty.wxUserInfo = true;
                  if (ty.wxLoginCode) {
                    ty.TuyooSDK.loginTuyooWithCode(ty.wxLoginCode, res.userInfo, res.iv, res.encryptedData);
                    ty.wxLoginCode = null;
                  }
                },
                fail: function fail(res) {
                  if (ty.wxLoginCode) {
                    ddz.LOGD("", "file = [TuyooSDK] fun = [login] res = " + JSON.stringify(res));
                    ty.TuyooSDK.loginTuyooWithCode(ty.wxLoginCode, res.userInfo, res.iv, res.encryptedData);
                    ty.wxLoginCode = null;
                  }
                }
              }); else if (ty.wxLoginCode) {
                ty.TuyooSDK.loginTuyooWithCode(ty.wxLoginCode);
                ty.wxLoginCode = null;
              }
            },
            fail: function fail() {
              if (ty.wxLoginCode) {
                ty.TuyooSDK.loginTuyooWithCode(ty.wxLoginCode);
                ty.wxLoginCode = null;
              }
            }
          });
        });
      },
      wechatLogin: function wechatLogin() {
        ty.ServerStateManager.checkServerState(function() {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginStartOther, []);
          wx.login({
            success: function success(params) {
              hall.LOGD(null, "wx login success, params:" + JSON.stringify(params));
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginSuccessOther, [ params.code ]);
              params.code && wx.getSetting({
                success: function success(res) {
                  res.authSetting["scope.userInfo"] ? wx.getUserInfo({
                    withCredentials: true,
                    success: function success(res) {
                      hall.LOGW(null, "wx login success .. res:" + JSON.stringify(res));
                      var data = {};
                      data.url = res.userInfo.avatarUrl;
                      data.name = res.userInfo.nickName;
                      ty.NotificationCenter.trigger(ddz.EventType.UPDATE_SELF_HEAD_IMAGE, data);
                      ty.TuyooSDK.loginTuyooWithCode(params.code, res.userInfo, res.iv, res.encryptedData);
                    },
                    fail: function fail(res) {
                      ty.TuyooSDK.loginTuyooWithCode(params.code, res.userInfo, res.iv, res.encryptedData);
                    }
                  }) : ty.TuyooSDK.loginTuyooWithCode(params.code);
                },
                fail: function fail() {
                  ty.TuyooSDK.loginTuyooWithCode(params.code);
                }
              });
            },
            fail: function fail(params) {
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginFailedOther, []);
              hall.LOGD(null, "wx login fail, params:" + JSON.stringify(params));
            },
            complete: function complete(params) {}
          });
        });
      },
      wechatLoginDebug: function wechatLoginDebug() {
        ty.ServerStateManager.checkServerState(function() {
          wx.login({
            success: function success(params) {
              hall.LOGD(null, "wx login success, params:" + JSON.stringify(params));
              if (params.code) {
                var code = params.code;
                ddz.GlobalFuncs.getUserInfo();
                var checkUserInfo = function checkUserInfo() {
                  var openDataContext = wx.getOpenDataContext();
                  var sharedCanvas = openDataContext.canvas;
                  var context = sharedCanvas.getContext("2d");
                  if (context.hasOwnProperty("game_getUserInfo")) {
                    ty.Timer.cancelTimer(cc.director, checkUserInfo);
                    var userInfo = context["game_getUserInfo"];
                    ty.TuyooSDK.loginTuyooWithCode(code, userInfo);
                  }
                };
                ty.Timer.setTimer(cc.director, checkUserInfo, 1 / 60);
              }
            },
            fail: function fail(params) {
              hall.LOGD(null, "wx login fail, params:" + JSON.stringify(params));
            },
            complete: function complete(params) {}
          });
        });
      },
      loginWithOutAuthorization: function loginWithOutAuthorization(code) {
        ddz.GlobalFuncs.getUserInfo();
        var MAX_COUNT = 120;
        var curCount = 0;
        var checkUserInfo = function checkUserInfo() {
          var openDataContext = wx.getOpenDataContext();
          var sharedCanvas = openDataContext.canvas;
          if (sharedCanvas && sharedCanvas.hasOwnProperty("2d")) {
            var context = sharedCanvas.getContext("2d");
            if (context.hasOwnProperty("game_getUserInfo")) {
              ty.Timer.cancelTimer(cc.director, checkUserInfo);
              var userInfo = context["game_getUserInfo"];
              ty.TuyooSDK.loginTuyooWithCode(code, userInfo);
              ty.wxLoginCode = null;
            }
          } else ty.TuyooSDK.login();
        };
        checkUserInfo();
      },
      loginTuyooWithCode: function loginTuyooWithCode(code, userInfo, iv, encryptedData) {
        wx.showShareMenu({
          withShareTicket: true
        });
        var gender = null;
        userInfo && (gender = userInfo.gender);
        var local_uuid = hall.GlobalFuncs.getLocalUuid();
        hall.LOGW("local_uuid:", "file = [TuyooSDK] fun = [loginTuyooWithCode] local_uuid = " + local_uuid);
        var sdkPath = ty.SystemInfo.loginUrl;
        debugMode = hall.GlobalFuncs.ReadBoolFromLocalStorage(ddz.gameModel.DEBUG_MODE, debugMode);
        debugMode && (sdkPath = hall.GlobalFuncs.ReadStringFromLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, ty.SystemInfo.loginUrl));
        var _nickName = "未设置";
        if (userInfo && userInfo.nickName) {
          ddz.Share.shareKeywordReplace.wechatName = userInfo.nickName;
          _nickName = userInfo.nickName;
        }
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeLoginSDKStart, [ code, local_uuid, _nickName ]);
        var _avatarUrl = null;
        userInfo && (_avatarUrl = userInfo.avatarUrl);
        var postData = {
          appId: ty.SystemInfo.appId,
          wxAppId: ty.SystemInfo.wxAppId,
          clientId: ty.SystemInfo.clientId,
          snsId: "wxapp:" + code,
          uuid: local_uuid,
          scene_id: ty.UserInfo.scene_id || 0,
          scene_param: ty.UserInfo.scene_param || "",
          invite_id: ty.UserInfo.invite_id || 0
        };
        gender && (postData.gender = gender);
        _avatarUrl && (postData.avatarUrl = _avatarUrl);
        userInfo && userInfo.avatarUrl && (postData.avatarUrl = userInfo.avatarUrl);
        userInfo && userInfo.nickName && (postData.nickName = userInfo.nickName);
        iv && (postData.iv = iv);
        encryptedData && (postData.encryptedData = encryptedData);
        hall.LOGW("==Login===", "====tempData===== URL = " + JSON.stringify(sdkPath + "open/v6/user/LoginBySnsIdNoVerify"));
        hall.LOGW("==Login===", "====tempData===== postData = " + JSON.stringify(postData));
        wx.request({
          url: sdkPath + "open/v6/user/LoginBySnsIdNoVerify",
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: postData,
          method: "POST",
          success: function success(params) {
            hall.LOGD(null, "tuyoo login success, params:" + JSON.stringify(params));
            var checkData = params.data;
            if (checkData.error && 1 == checkData.error.code) {
              ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeLoginSDKFailed, [ code, local_uuid, _nickName, checkData.error ]);
              return;
            }
            var result = checkData.result;
            ty.UserInfo.userId = result.userId;
            ty.UserInfo.userName = result.userName;
            ty.UserInfo.userPic = result.purl;
            ty.UserInfo.authorCode = result.authorCode;
            ty.UserInfo.wxgame_session_key = result.wxgame_session_key;
            hall.LOGD(null, "userId:" + ty.UserInfo.userId + " userName:" + ty.UserInfo.userName + " userPic:" + ty.UserInfo.userPic);
            ty.PropagateInterface.getUserFeatureInfo();
            ty.PropagateInterface.getShareConfigInfo();
            ty.PropagateInterface.getShareValueConfig();
            var token = result.token;
            hall.LOGD(null, "token:" + token);
            wx.setStorage({
              key: ty.TuyooSDK.SESSION_KEY,
              data: token
            });
            ty.NotificationCenter.trigger(ty.EventType.MSG_LOGIN_SUCCESS);
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeLoginSDKSuccess, [ code, local_uuid, _nickName, result.userId ]);
            var ip = result.tcpsrv.ip;
            var port = result.tcpsrv.wsport || result.tcpsrv.port;
            var webSocketUrl;
            webSocketUrl = sdkPath.indexOf("170") > -1 || sdkPath.indexOf("https://") > -1 ? "wss://" + ip + "/" : "ws://" + ip + ":" + port.toString() + "/";
            hall.LOGD(null, "webSocketUrl:" + webSocketUrl);
            ty.SystemInfo.webSocketUrl = webSocketUrl;
            ty.TCP.connect(ty.SystemInfo.webSocketUrl);
            var toDayList = hall.GlobalTimer.getCurDayList();
            var lastLoginTime = hall.GlobalFuncs.ReadStringFromLocalStorage("LAST_LOGIN_TIME", []);
            if (toDayList.toString() != lastLoginTime.toString()) {
              if (toDayList[0] == lastLoginTime[0] && toDayList[1] == lastLoginTime[1]) if (toDayList[2] == lastLoginTime[2] + 1) {
                ddz.continuousLogin = true;
                hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.CONTINUOUSLOGIN, true);
              } else hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.CONTINUOUSLOGIN, false);
              hall.GlobalFuncs.setInLocalStorage("LAST_LOGIN_TIME", toDayList);
            }
            var lastShareTimeList = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.LAST_SHARE_TIMELIST, []);
            toDayList.toString() != lastShareTimeList.toString() && toDayList[0] == lastShareTimeList[0] && toDayList[1] == lastShareTimeList[1] && (toDayList[2] == lastShareTimeList[2] + 1 ? hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.YESTERDAYSHARE, true) : hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.YESTERDAYSHARE, false));
          },
          fail: function fail(params) {
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeLoginSDKFailed, [ code, local_uuid, _nickName ]);
            hall.LOGD(null, "tuyoo login fail, params:" + JSON.stringify(params));
          },
          complete: function complete(params) {}
        });
      },
      rechargeOrder: function rechargeOrder(params) {
        var local_uuid = hall.GlobalFuncs.getLocalUuid();
        var sdkPath = ty.SystemInfo.loginUrl;
        debugMode = hall.GlobalFuncs.ReadBoolFromLocalStorage(ddz.gameModel.DEBUG_MODE, debugMode);
        debugMode && (sdkPath = hall.GlobalFuncs.ReadStringFromLocalStorage(ty.SystemInfo.DEBUG_SER_KEY, ty.SystemInfo.loginUrl));
        wx.request({
          url: sdkPath + "open/v4/pay/order",
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: {
            userId: ty.UserInfo.userId,
            appId: ty.SystemInfo.appId,
            wxAppId: ty.SystemInfo.wxAppId,
            clientId: ty.SystemInfo.clientId,
            imei: "null",
            uuid: local_uuid,
            prodId: params.prodId,
            prodName: params.prodName,
            prodCount: params.prodCount || 1,
            prodPrice: params.prodPrice,
            chargeType: params.chargeType,
            gameId: params.gameId,
            appInfo: params.appInfo,
            mustcharge: params.mustcharge || 1
          },
          method: "POST",
          success: function success(params) {
            hall.LOGW(null, "tuyoo rechargeOrder success, params:" + JSON.stringify(params));
            var results = params.data.result;
            if (0 == results.code) {
              var chargeInfo = results.chargeInfo;
              var chargeData = chargeInfo.chargeData;
              var notifyUrl = chargeData.notifyUrl;
              var platformOrderId = chargeData.platformOrderId;
              hall.LOGW(null, "tuyoo rechargeOrder success 创建订单成功, chargeData.mustcharge =" + chargeData.mustcharge);
              chargeData && 1 == chargeData.mustcharge ? wx.requestMidasPayment({
                mode: chargeData.mode,
                env: chargeData.env,
                offerId: chargeData.offerId,
                buyQuantity: 10 * chargeInfo.chargeTotal,
                platform: chargeData.platform,
                currencyType: "CNY",
                zoneId: chargeData.zoneId,
                success: function success(params) {
                  ty.Recharge.orderCallFunc(notifyUrl, platformOrderId, chargeInfo.chargeCoin);
                },
                fail: function fail(params) {
                  hall.LOGW(null, "米大师支付 fail params = " + JSON.stringify(params));
                }
              }) : chargeData && 0 == chargeData.mustcharge && ty.Recharge.orderCallFunc(notifyUrl, platformOrderId, chargeInfo.chargeCoin);
            } else 1 == results.code ? hall.MsgBoxManager.showToast({
              title: results.info
            }) : 3 == results.code && hall.MsgBoxManager.showToast({
              title: "微信小程序登陆验证失败!"
            });
          },
          fail: function fail(params) {
            hall.MsgBoxManager.showToast({
              title: "购买失败!"
            });
          },
          complete: function complete(params) {}
        });
      },
      getSystemType: function getSystemType(fun) {
        wx.getSystemInfo({
          success: function success(result) {
            ty.SystemInfo.deviceInfo = result;
            var model = result.model;
            var isiPhone = model.indexOf("iPhone") >= 0;
            var windowHeight = result.windowHeight;
            var resultType = 0;
            if (isiPhone) resultType = 812 == windowHeight ? ty.UserInfo.SYSTEMTYPE.iPhoneXType : 736 == windowHeight ? ty.UserInfo.SYSTEMTYPE.iPhone7P8PType : ty.UserInfo.SYSTEMTYPE.iphoneOtherType; else {
              var isvivo85 = model.indexOf("vivo Y85A") >= 0;
              resultType = isvivo85 ? ty.UserInfo.SYSTEMTYPE.ANDROIDVIVO85 : ty.UserInfo.SYSTEMTYPE.ANDROIDOther;
            }
            ty.UserInfo.systemType = resultType;
            ty.UserInfo.wechatType = result.version;
            ty.UserInfo.model = result.model;
            ty.UserInfo.system = result.system;
            fun && fun(result);
          },
          fail: function fail() {},
          complete: function complete() {}
        });
      }
    };
    wx.onShow(function(result) {
      hall.LOGW("", "+++++++++++++++++onShow+++++++++++++++++" + JSON.stringify(result));
      hall.onHide = false;
      var date = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.ONHIDE_DATE);
      var date2 = new Date().getTime();
      var timeGap = date2 - date;
      timeGap < 6e4 && ty.NotificationCenter.trigger(ddz.EventType.CHANGE_TO_SHOW_FROM_HODE, timeGap);
      ddz.AudioHelper.rePlayMusic();
      ty.UserInfo.onShowParam = result;
      var scene = result.scene;
      var query = result.query;
      var queryS = hall.GlobalFuncs.replaceToStringWithDic(query);
      ty.UserInfo.scene_id = scene || 0;
      ty.UserInfo.scene_param = query.from || "";
      ty.UserInfo.invite_id = query.inviteCode || 0;
      ty.SystemInfo.shareTicket = "";
      ty.SystemInfo.ftID = "";
      ty.SystemInfo.treasureID = "";
      if (query && query.sourceCode) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, query.inviteCode, ddz.Share.clickStatShareType[query.sourceCode], query.imageType, "CardActive" ]);
        if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeInviteFriend) {
          var ftID = query.ftID ? query.ftID : "";
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeInviteFriendCardClick, [ ftID, query.inviteCode ]);
        }
        if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeGiveProp) {
          var treasureID = query.treasureID ? query.treasureID : "";
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeGivePropClick, [ treasureID, query.inviteCode ]);
        }
        if (query && query.ftID && !ddz.Share.isOnShare) {
          ddz.Share.shareKeywordReplace.inviteFriendID = query.ftID;
          ty.SystemInfo.ftID = query.ftID;
        } else if (query && query.treasureID && !ddz.Share.isOnShare) {
          ddz.Share.shareKeywordReplace.inviteTreasureID = query.treasureID;
          ty.SystemInfo.treasureID = query.treasureID;
        } else if (query.sourceCode == ddz.Share.onShareType.clickStatShareTypeRankList && !ddz.Share.isOnShare && 1044 == scene) {
          var shareTicket = result.shareTicket;
          shareTicket && (ty.SystemInfo.shareTicket = shareTicket);
        }
      } else ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeUserFrom, [ scene, query.from, query.appid, "CardActive" ]);
      if (1074 == scene && query && "fuhao_guanfang" == query.from) if (query.topage && "fuli" == query.topage) {
        ddz.isClickShareReward = true;
        ddz.gameModel.getDayInviteReward();
      } else ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.gongZhongHaoCard); else 1035 == scene && query && "fuhao_guanfang" == query.from ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.gongZhongHaoMenu) : 1104 == scene && ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.addApplet);
      if (ddz.needReLogin) {
        ty.TuyooSDK.wechatLogin();
        ddz.needReLogin = null;
      }
      ddz.tableChatModel.replay();
    });
    wx.onHide(function() {
      ty.UserInfo.scene_id = 0;
      ty.UserInfo.onShowParam = null;
      hall.onHide = true;
      var date = new Date().getTime();
      hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.ONHIDE_DATE, date);
      ty.NotificationCenter.trigger(ddz.EventType.GAME_HIDE);
      hall.LOGW("", "+++++++++++++++++onHide+++++++++++++++++");
      ddz.friendModel.isEnterTable = false;
      ty.TCP.close();
    });
    var getNetSuccess = function getNetSuccess(res) {
      res.hasOwnProperty("isConnected") ? hall.netIsConnected = res.isConnected : res.hasOwnProperty("errMsg") ? hall.netIsConnected = "getNetworkType:ok" == res.errMsg : hall.netIsConnected = "none" != res.networkType;
      hall.networkType = res.networkType;
      hall.LOGD("onNetworkStatusChange", "hall.netIsConnected:" + hall.netIsConnected + ";hall.networkType:" + hall.networkType);
    };
    wx.getNetworkType({
      success: getNetSuccess
    });
    wx.onNetworkStatusChange(getNetSuccess);
    wx.onError(function(res) {
      var d = new Date();
      var errMsg = res.message;
      ty.BiLog.uploadLogTimely(errMsg);
    });
    cc._RF.pop();
  }, {} ],
  UserHeartBeat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9379b9hJQFGXbBsrQiYOm0r", "UserHeartBeat");
    "use strict";
    hall.UserHeartBeat = cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.UserHeartBeat";
        this.heartbeat = 6;
        hall.LOGD(this._TAG, "in ctor");
      },
      destroy: function destroy() {
        0 != this.heartbeat && this.stopTimeCount();
        hall.LOGD(this._TAG, "in destroy");
      },
      Update: function Update(time) {
        if (0 != time && time != this.heartbeat) {
          0 != this.heartbeat && this.stopTimeCount();
          this.heartbeat = time;
          this.startTimeCount();
        }
        hall.LOGD(this._TAG, "in Update");
      },
      startTimeCount: function startTimeCount() {
        hall.LOGD(this._TAG, "in startTimeCount");
      },
      stopTimeCount: function stopTimeCount() {
        hall.LOGD(this._TAG, "in stopTimeCount");
      },
      HeartBeat: function HeartBeat(dt) {
        hall.LOGD(this._TAG, "in HeartBeat");
      }
    });
    cc._RF.pop();
  }, {} ],
  UserInfoGdata: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7605Hre0RI67wZRfuY1irb", "UserInfoGdata");
    "use strict";
    hall.UserInfoGdata = cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.UserInfoGdata";
        this.m_matchscores = 0;
        this.m_marsscore = 0;
        this.m_lastlogin = 0;
        this.m_gold = 0;
        this.m_level = 0;
        this.m_title = "";
        this.m_chip = 0;
        this.m_nextexp = 0;
        this.m_maxwinchip = 0;
        this.m_maxweekdoubles = 0;
        this.m_oboxtimes = 0;
        this.m_referrerSwitch = 1;
        this.m_robotloc = "";
        this.m_winrate = {};
        this.m_exp = 0;
        this.m_slams = 0;
        this.m_losechips = 0;
        this.m_winchips = 0;
        this.m_canSetReferrer = false;
        this.m_nslogin = 0;
        this.m_experience = [];
        this.m_loginsum = -1;
        this.m_charm = 0;
        this.m_dashifen = null;
        this.m_skillScoreInfo = null;
        this.m_starHeadId = -1;
        this.m_winchipstats = [];
        this.m_kinstats = [];
        hall.LOGD(this._TAG, "in ctor");
      },
      destroy: function destroy() {
        hall.LOGD(this._TAG, "in destroy");
      },
      randomSetStarHeadId: function randomSetStarHeadId(sex) {
        this.m_starHeadId = Math.floor(3 * Math.random());
      },
      starHeadId: function starHeadId() {
        this.m_starHeadId < 0 && this.randomSetStarHeadId();
        return this.m_starHeadId;
      },
      parseGdata: function parseGdata(gdata) {
        hall.LOGD(this._TAG, "=======gdata begin========" + JSON.stringify(gdata));
        if ("undefined" != typeof gdata) {
          this.m_matchscores = gdata["matchscores"];
          this.m_marsscore = gdata["marsscore"];
          this.m_lastlogin = gdata["lastlogin"];
          this.m_gold = gdata["gold"];
          this.m_level = gdata["level"];
          this.m_title = gdata["title"];
          this.m_chip = gdata["chip"];
          this.m_nextexp = gdata["nextexp"];
          this.m_maxweekdoubles = gdata["maxweekdoubles"];
          this.m_maxwinchip = gdata["maxwinchip"];
          this.m_oboxtimes = gdata["oboxtimes"];
          this.m_referrerSwitch = gdata["referrerSwitch"];
          this.m_robotloc = gdata["robotloc"];
          this.m_exp = gdata["exp"];
          this.m_slams = gdata["slams"];
          this.m_losechips = gdata["losechips"];
          this.m_winchips = gdata["winchips"];
          this.m_canSetReferrer = gdata["canSetReferrer"];
          this.m_nslogin = gdata["nslogin"];
          this.m_loginsum = gdata["loginsum"];
          this.m_charm = gdata["charm"];
          this.m_winchipstats = gdata["winchip_stats"];
          this.m_kinstats = gdata["king_stats"];
          if ("undefined" != typeof gdata["winrate"]) {
            var winrateObj = JSON.parse(gdata["winrate"]);
            for (var j in winrateObj) "undefined" != typeof winrateObj[j] && (this.m_winrate[j] = winrateObj[j]);
          }
          if ("undefined" != typeof gdata["dashifen"]) {
            this.m_dashifen = null;
            this.m_dashifen = gdata["dashifen"];
          }
        }
        -1 == this.m_starHeadId && this.randomSetStarHeadId(0);
        hall.LOGD(this._TAG, "=======gdata end========");
      }
    });
    cc._RF.pop();
  }, {} ],
  UserInfoUData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "114f9DZMpxNHqpB1kJkcQtF", "UserInfoUData");
    "use strict";
    hall.UserInfoUData = cc.Class({
      ctor: function ctor() {
        this._TAG = "hall.UserInfoUData";
        this.m_snsId = "";
        this.m_name = "";
        this.m_idcardno = "";
        this.m_truename = "";
        this.m_snsinfo = "";
        this.m_payCount = 0;
        this.m_detect_phonenumber = "";
        this.m_vip = 0;
        this.m_vipInfo = {
          level: 0
        };
        this.m_sex = 0;
        this.m_source = "";
        this.m_state = 0;
        this.m_isbind = 0;
        this.m_phonenumber = "";
        this.m_purl = "";
        this.m_isBeauty = false;
        this.m_address = "";
        this.m_pdevid = {};
        this.m_chip = 0;
        this.m_coin = 0;
        this.m_diamond = 0;
        this.m_jewel = 0;
        this.m_couponCount = 0;
        this.m_exchangedCoupon = 0;
        this.diamondInfo = {};
        this.diamondCount = 0;
        this.jiPaiQiCount = 0;
        this.m_dayang = 0;
        this.m_email = "";
        this.m_mdevid = "";
        this.m_set_name_sum = -1;
        this.m_youkuvip = false;
        this.m_verified = false;
        this.m_bindMobil = "";
        this.m_wxSubscribe = 0;
        hall.LOGD(this._TAG, "in ctor");
      },
      parse: function parse(json) {
        hall.LOGD(this._TAG, "=======udata begin========" + JSON.stringify(json));
        this.m_snsId = json["snsId"];
        this.m_name = json["name"];
        this.m_idcardno = json["idcardno"];
        this.m_truename = json["truename"];
        this.m_payCount = json["payCount"];
        this.m_detect_phonenumber = json["detect_phonenumber"];
        this.m_vip = json["vip"];
        this.m_sex = json["sex"];
        this.m_source = json["source"];
        this.m_state = json["state"];
        this.m_isbind = json["isbind"];
        this.m_jewel = json["jewel"];
        json["vipInfo"]["level"] < 0 && (json["vipInfo"]["level"] = 0);
        json["vipInfo"]["level"] > 9 && (json["vipInfo"]["level"] = 9);
        this.m_vipInfo = json["vipInfo"];
        var snsinfo = json["snsinfo"];
        this.m_snsinfo = snsinfo;
        if (snsinfo) try {
          hall.LOGD("@@@@", snsinfo);
          var snsobj = JSON.parse(snsinfo);
          this.m_youkuvip = !!snsobj["vip"];
          cc.sys.os == cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "javaOnGotUserInfo", "(Ljava/lang/String;)V", snsinfo);
        } catch (error) {
          cc.error(error);
        }
        var bindMobile = json["bindMobile"];
        null != bindMobile && "undefined" != typeof bindMobile && (this.m_bindMobil = bindMobile);
        var phonenumber = json["phonenumber"];
        null != phonenumber && "undefined" != typeof phonenumber && (this.m_phonenumber = phonenumber);
        this.m_purl = json["purl"];
        this.m_isBeauty = json["isBeauty"];
        "" == this.m_purl && (this.m_purl = "http://ddz.image.tuyoo.com/avatar/head_360_08.png");
        hall.LOGD(this._TAG, "UDATA purl is " + this.m_purl);
        this.m_address = json["address"];
        this.m_pdevid = json["pdevid"];
        this.m_coin = json["coin"];
        this.m_chip = json["chip"];
        this.m_diamond = json["diamond"];
        this.m_couponCount = json["coupon"];
        this.m_exchangedCoupon = json["exchangedCoupon"];
        this.m_dayang = json["dayang"];
        this.m_email = json["email"];
        this.m_mdevid = json["mdevid"];
        this.m_set_name_sum = json["set_name_sum"];
        this.m_wxSubscribe = json["wxSubscribe"];
        ty.NotificationCenter.trigger(ty.EventType.UPDATE_UER_INFO, hall.ME);
        hall.LOGD(this._TAG, "=======udata success========");
        ddz.GlobalFuncs.upDateRankDataChip(this.m_chip + "");
      }
    });
    cc._RF.pop();
  }, {} ],
  UserInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "165bdiZnGFFmKiOZRds/0M+", "UserInfo");
    "use strict";
    console.log("UserInfo loaded");
    ty.UserInfo = {
      userId: 0,
      userName: "TuWechatGame",
      userPic: "",
      authorCode: "",
      systemType: 0,
      wechatType: "6.6.1",
      model: "未知设备",
      system: "iOS 10.0.1",
      loc: "",
      scene_id: 0,
      scene_param: "",
      invite_id: 0,
      onShowParam: null,
      isInBSGS: true,
      ip: "",
      tgCount: 0,
      matchFailCount: 0,
      arenaFailCount: 0,
      SYSTEMTYPE: {
        iphoneOtherType: 1,
        iPhoneXType: 2,
        ANDROIDOther: 3,
        iPhone7P8PType: 4,
        ANDROIDVIVO85: 5
      },
      clickStatEventType: {
        clickStatEventTypeUserFrom: 99990001,
        clickStatEventTypeShareAction: 99990002,
        clickStatEventTypeShowAdBtn: 99990003,
        clickStatEventTypeClickShowQRCode: 99990004,
        clickStatEventTypeClickAdBtn: 99990007,
        clickStatEventTypeClickDirectToMiniGameSuccess: 99990005,
        clickStatEventTypeClickDirectToMiniGameFail: 99990006,
        clickStatEventTypeShowWindow: 67890031,
        clickStatEventTypeButtonClick: 67890032,
        clickStatEventTypeWxLoginStart: 10001,
        clickStatEventTypeWxLoginSuccess: 10002,
        clickStatEventTypeWxLoginFailed: 10003,
        clickStatEventTypeAuthorizationStart: 10004,
        clickStatEventTypeAuthorizationSuccess: 10005,
        clickStatEventTypeAuthorizationFailed: 10006,
        clickStatEventTypeLoginSDKStart: 10007,
        clickStatEventTypeLoginSDKSuccess: 10008,
        clickStatEventTypeLoginSDKFailed: 10009,
        clickStatEventTypeTCP_Start: 10010,
        clickStatEventTypeTCP_Success: 10011,
        clickStatEventTypeTCP_Failed: 10012,
        clickStatEventTypeWxLoginStartOther: 10013,
        clickStatEventTypeWxLoginSuccessOther: 10014,
        clickStatEventTypeWxLoginFailedOther: 10015,
        clickStatEventTypeResourceDownload: 10016,
        clickStatEventTypeResourceDownloadSuccess: 10017,
        clickStatEventTypeResourceDownloadFail: 10018,
        clickStatEventTypeNewVersionDownloadFail: 10019,
        clickStatEventTypeLoadingUI: 10020,
        clickStatEventTypeFriendRoomCreateClick: 67890018,
        clickStatEventTypeFriendRoomDissolveClick: 67890019,
        clickStatEventTypeFriendRoomDuiju: 67890020,
        clickStatEventTypeInviteFriendClick: 67890021,
        clickStatEventTypeInviteFriendSuccess: 67890022,
        clickStatEventTypeInviteFriendCardClick: 67890023,
        clickStatEventTypeInviteFriendCardSuccess: 67890024,
        clickStatEventTypeStartFriendGame: 67890025,
        clickStatEventTypeEndFriendGame: 67890026,
        clickStatEventTypeStartFriendFail: 67890027,
        clickStatEventTypeStartFriendTime: 67890028,
        clickStatEventTypeWatchVideo: 67890036,
        clickStatEventTypeGiveProp: 67890037,
        clickStatEventTypeGivePropClick: 67890038,
        clickStatEventTypeGivePropSuccess: 67890039,
        clickStatEventTypeEndGiveProp: 67890040,
        clickStatEventTypeOpenHelpBox: 67890041,
        clickStatEventTypeSelfDirectToMiniGameSuccess: 99990042,
        clickStatEventTypeSelfDirectToMiniGameFail: 99990043
      }
    };
    cc._RF.pop();
  }, {} ],
  award_tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "21575ixQ45GA6ZUOUq5NvfN", "award_tips");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        coloseButton: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        this.isAction = true;
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("awad_tips_show");
        anim1.on("finished", function() {
          this.isAction = false;
        }, this);
        anim1.play();
      },
      playEndAnimation: function playEndAnimation() {
        this.node.destroy();
      },
      onClose: function onClose(event) {
        if (this.isAction) return;
        this.isAction = true;
        this.playEndAnimation();
      },
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {} ],
  betBoxAbstract: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb7bc7GCyBJ0ZSMQslsVQ7u", "betBoxAbstract");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tipsNode_1: cc.Node,
        tipsNode_2: cc.Node,
        tipsNode_3: cc.Node,
        tipsNode_4: cc.Node
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.CLOSE_BETBOXABSTRACT, this.onClose, this);
      },
      setParentScene: function setParentScene(params) {
        this.parentScene = params;
      },
      updateInfo: function updateInfo() {
        if (this.parentScene) {
          var tableinfo = this.parentScene.tableInfo();
          var boxConfig = tableinfo.m_boxConfig;
          ddz.LOGD("", "file = [betBoxAblstract] fun = [updateInfo] boxConfig = " + JSON.stringify(boxConfig));
          if (boxConfig && boxConfig.length && boxConfig.length > 0) for (var i = 0; i < boxConfig.length; i++) if (this["tipsNode_" + (i + 1)]) {
            var com = this["tipsNode_" + (i + 1)].getComponent("boxTipsNode");
            com.setBoxTips(boxConfig[i].windoubles, boxConfig[i].boxType, i);
          }
        }
      },
      onClose: function onClose() {
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this.parentScene = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  boot: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3b55kLfuBA1qUAeHgfw+ue", "boot");
    "use strict";
    var BuyCenter = require("BuyCenter");
    var ToDoTasks = require("ToDoTasks");
    var HallGameWorld = require("HallGameWorld");
    var UserInfo = require("HallUserInfo");
    require("DdzAudioHelper");
    require("GlobalTimer");
    require("RecordManager");
    hall.ME = new UserInfo();
    hall.gameWorld = new HallGameWorld();
    hall.staticSystemInfo = {
      version: 1
    };
    hall.ToDoTask = new ToDoTasks();
    hall.BuyCenter = new BuyCenter();
    hall.GlobalTimer.boot();
    hall.recorder = new hall.AudioRecordManager();
    hall.recorder.initManager();
    var mute = hall.GlobalFuncs.ReadBoolFromLocalStorage(ddz.SETTING_MUTE_KEY, false);
    if (mute) {
      ddz.AudioHelper.setMusicVolume(0);
      ddz.AudioHelper.setEffectsVolume(0);
    } else {
      var music_vol = hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.SETTING_MUSIC_KEY, .5);
      ddz.AudioHelper.setMusicVolume(music_vol);
      var effect_vol = hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.SETTING_EFFECT_KEY, 1);
      ddz.AudioHelper.setEffectsVolume(effect_vol);
    }
    hall.CUSTOM_ROOMID = 6201;
    hall.HAS_MAIL_KEY = "has_mail";
    hall.LOCAL_UUID_KEY = "LOCAL_UUID_KEY";
    hall.LAST_GET_REWARD_DAY = "LAST_GET_REWARD_DAY";
    ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginStart, []);
    wx.login({
      success: function success(params) {
        hall.LOGD(null, "wx login success, params:" + JSON.stringify(params));
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginSuccess, [ params.code ]);
        if (params.code) {
          ty.wxLoginCode = params.code;
          ty.NotificationCenter.trigger(ty.EventType.WX_LOGIN_SUCCESS);
        }
      },
      fail: function fail(params) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeWxLoginFailed, []);
        hall.LOGD(null, "wx login fail, params:" + JSON.stringify(params));
      },
      complete: function complete(params) {}
    });
    cc._RF.pop();
  }, {
    BuyCenter: "BuyCenter",
    DdzAudioHelper: "DdzAudioHelper",
    GlobalTimer: "GlobalTimer",
    HallGameWorld: "HallGameWorld",
    HallUserInfo: "HallUserInfo",
    RecordManager: "RecordManager",
    ToDoTasks: "ToDoTasks"
  } ],
  boxTipsNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2c541TAMJ1GmJ20gp3FBmrE", "boxTipsNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        betLabel: cc.Label,
        boxText: cc.RichText,
        boxSprite: cc.Sprite,
        boxSpriteFrame: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {},
      setBoxTips: function setBoxTips(windoubles, desc, index) {
        this.boxText.string = "黄金宝箱" == desc || "春天宝箱" == desc ? "<color=#1A6951>" + desc + "</c><br/><color=#F64E50><size=23> (内含红包)</c>" : "<color=#1A6951>" + desc + "</c>";
        if ("" == windoubles) {
          this.betLabel.string = "春天";
          this.boxSprite.spriteFrame = this.boxSpriteFrame[3];
        } else {
          this.betLabel.string = windoubles + "倍";
          this.boxSprite.spriteFrame = this.boxSpriteFrame[index];
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  box_up: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "790bbpMzfZFToVeafB/1VMX", "box_up");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        boxSprite_1: cc.Sprite,
        boxSprite_2: cc.Sprite,
        boxSpriteFrame: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
      },
      setBoxSprite: function setBoxSprite(box_type) {
        this.node.active = true;
        switch (box_type) {
         case "青铜宝箱":
          this.boxSprite_1.spriteFrame = this.boxSpriteFrame[2];
          this.boxSprite_2.spriteFrame = this.boxSpriteFrame[0];
          break;

         case "白银宝箱":
          this.boxSprite_1.spriteFrame = this.boxSpriteFrame[0];
          this.boxSprite_2.spriteFrame = this.boxSpriteFrame[1];
          break;

         case "黄金宝箱":
          this.boxSprite_1.spriteFrame = this.boxSpriteFrame[1];
          this.boxSprite_2.spriteFrame = this.boxSpriteFrame[2];
          break;

         case "春天宝箱":
          this.boxSprite_1.spriteFrame = this.boxSpriteFrame[2];
          this.boxSprite_2.spriteFrame = this.boxSpriteFrame[3];
        }
        var ani = this.node.getComponent(cc.Animation);
        var anim1 = ani.getAnimationState("box_up");
        var that = this;
        anim1.once("finished", function() {
          that.node.active = false;
        });
        anim1.play();
      },
      onRemoveAni: function onRemoveAni() {
        var ani = this.node.getComponent(cc.Animation);
        var anim_1 = ani.getAnimationState("box_up");
        anim_1.stop();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      },
      onClose: function onClose() {}
    });
    cc._RF.pop();
  }, {} ],
  choosePlayMode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1598wVUH1I46vuAAa8jwrZ", "choosePlayMode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "choosePlayMode";
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        closeBtn: {
          default: null,
          type: cc.Button
        },
        whileBottom: cc.Node,
        playModeBtn_1: {
          default: null,
          type: cc.Button
        },
        playModeBtn_2: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        this.isAction = true;
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
        var that = this;
        anim1.on("finished", function() {
          that.isAction = false;
        }, this);
      },
      playEndAnimation: function playEndAnimation() {
        this.isAction = false;
        this.node.destroy();
      },
      choosePlayMode: function choosePlayMode(event, type) {
        switch (type) {
         case "jingdian":
          hall.GlobalFuncs.gotoRoomListScene(1);
          break;

         case "laizi":
          hall.GlobalFuncs.gotoRoomListScene(2);
        }
      },
      onClose: function onClose(event) {
        if (this.isAction) return;
        this.playEndAnimation();
      }
    });
    cc._RF.pop();
  }, {} ],
  collectDeskTop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b4655/yhx5BXLWcLHcdaSwJ", "collectDeskTop");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "collectDeskTop";
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        closeBtn: {
          default: null,
          type: cc.Button
        },
        hand: cc.Node,
        yindao: cc.Prefab
      },
      onLoad: function onLoad() {
        this.isAction = true;
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.hand.y = backButtonH - 50);
        var that = this;
        anim1.on("finished", function() {
          that.isAction = false;
          that.yindaoAni = cc.instantiate(this.yindao);
          that.hand.addChild(that.yindaoAni);
          var ani = that.yindaoAni.getComponent(cc.Animation);
          var clipName = ani.getClips()[0].name;
          var anim = ani.getAnimationState(clipName);
          anim.once("finished", function() {});
          anim.play();
        }, this);
      },
      playEndAnimation: function playEndAnimation() {
        this.isAction = false;
        this.yindaoAni && this.yindaoAni.removeFromParent();
        this.node.destroy();
      },
      onClose: function onClose(event) {
        if (this.isAction) return;
        this.playEndAnimation();
      }
    });
    cc._RF.pop();
  }, {} ],
  conversionSuccess: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75ec8soNHxJfLolNaGddEn6", "conversionSuccess");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        coinText: {
          default: null,
          type: cc.RichText
        },
        tipsText: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {},
      updateInfo: function updateInfo(num) {
        var str = "<img src='ddz_coin_white'/><color=#FFFFFF> " + num + "</c>";
        this.coinText.string = str;
      },
      updateTipsText: function updateTipsText(str) {
        this.tipsText.string = str;
      },
      updateCoinText: function updateCoinText(str) {
        this.coinText.string = str;
      },
      updateDiamondCount: function updateDiamondCount(num) {
        this.tipsText.string = "领奖成功";
        var str = "<img src='ddz_button_diamond'/><color=#FFFFFF> + " + num + "</c>";
        this.coinText.string = str;
        ty.Timer.setTimer(this, function() {
          if (ddz.tipsNode) {
            ddz.tipsNode.removeFromParent();
            ddz.tipsNode = null;
          }
        }, 1.5, 0, 0);
      },
      removeTips: function removeTips() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_arena_levelup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34f4fFWTjdLAK7LgiNyaeHF", "ddz_arena_levelup");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        continueBtn: cc.Button,
        continueBtnLabel: cc.RichText,
        rankLabel: cc.RichText,
        rankBaseLabel: cc.RichText,
        saveBtn: cc.Button,
        aniNode: cc.Node,
        progressNode: cc.Node
      },
      onLoad: function onLoad() {
        this.actionCount = 1;
        this.timeLeft = 5;
        this.continueBtnLabel.string = "<color=#FFFFFF>进入下一轮（" + this.timeLeft + "）</c>";
        ty.Timer.setTimer(this, this.timeCount, 1, 5, 0);
        var ani = this.aniNode.getComponent(cc.Animation);
        ani.play("chenggongjinji");
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.shutSelf, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_CHALLENGE, this.shutSelf, this);
        ty.NotificationCenter.listen(ddz.EventType.SAVE_MATCH_SUCCESS, this.saveMatchSuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.ARENA_BACK_TO_SCENE, this.shutSelf, this);
      },
      setRankString: function setRankString(rankString) {
        var ret = rankString.split("/");
        this.rankLabel.string = "<color=#FDE755>" + ret[0] + "</color>";
        this.rankBaseLabel.string = "<color=#FFFDDA>/" + ret[1] + "</color>";
      },
      showArenaStageProgress: function showArenaStageProgress(curStage, stages, playani) {
        ty.Timer.setTimer(this, function() {
          var scr = this.progressNode.getComponent("MatchRankProgressScript");
          scr.initWithPars(curStage - 1, stages, playani);
        }, .36, 0, 0);
      },
      setMatchDes: function setMatchDes(matchDes) {
        this.matchDes = matchDes;
      },
      saveMatchSuccess: function saveMatchSuccess(value) {
        var saveInfo = value.saveInfo;
        var matchId = value.matchId;
        var matchDes = hall.ME.matchInfo.getMatchDesByMatchId(matchId);
        var stageString = "轮次: " + saveInfo.stageIndex + "/" + matchDes.stages.length;
        var scoreString = "积分: " + saveInfo.mscore;
        var preFabPath = "prefabs/ddz_window_save_match_result";
        ddz.AudioHelper.playMusic(ddz.MusicPath_mp3.table_background_music, true, ty.SystemInfo.tableBgMusicVolume);
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var com = preFabNode.getComponent("ddz_window_save_match_result");
          com.updateByMatchInfo([ stageString, scoreString ]);
        });
      },
      shutSelf: function shutSelf() {
        ty.NotificationCenter.trigger(ddz.EventType.HIDE_DDZ_MAIN);
        ty.Timer.cancelTimer(this, this.timeCount);
        ty.NotificationCenter.ignoreScope(this);
        this.node.removeFromParent();
      },
      timeCount: function timeCount() {
        this.timeLeft--;
        if (this.timeLeft <= 0) {
          this.continueBtnLabel.string = "<color=#FFFFFF>进入下一轮</c>";
          this.onContinueClick();
        } else this.continueBtnLabel.string = "<color=#FFFFFF>进入下一轮（" + this.timeLeft + "）</c>";
      },
      onButtonClick: function onButtonClick(event, type) {
        ty.Timer.cancelTimer(this, this.timeCount);
        "continue" == type ? this.onContinueClick() : "save" == type && this.onSaveClick();
        this.continueBtn.interactable = false;
        this.saveBtn.interactable = false;
      },
      onContinueClick: function onContinueClick() {
        this.continueBtnLabel.string = "<color=#FFFFFF>进入下一轮</c>";
        if (this.matchDes) {
          ddz.matchModel.matchChallenge(this.matchDes.roomId, this.matchDes.matchId);
          this.matchDes = null;
        }
      },
      onSaveClick: function onSaveClick() {
        this.continueBtnLabel.string = "<color=#FFFFFF>进入下一轮</c>";
        if (this.matchDes) {
          ddz.matchModel.matchSave(this.matchDes.roomId, this.matchDes.matchId);
          this.matchDes = null;
        }
      },
      shut: function shut() {
        ty.Timer.cancelTimer(this, this.timeCount);
        ty.NotificationCenter.ignoreScope(this);
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_arena_result_lose: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6447c89L1I1p8e3HoygDXf", "ddz_arena_result_lose");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        rankLable: cc.Label,
        shareBtn: cc.Button,
        onceMoreBtn: cc.Button,
        aniNode: cc.Node,
        btnBack: cc.Button
      },
      onLoad: function onLoad() {
        ddz.matchModel.isShowingRevive = false;
        ddz.Share.isMatchShare = false;
        ty.NotificationCenter.listen("signin_fail", this.onSigninFail, this);
        ty.NotificationCenter.listen("signin_success", this.onSigninSuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.RECEIVE_MATCH_WAIT_STATE, this.onMatchWait, this);
        var ani = this.aniNode.getComponent(cc.Animation);
        ani.play("zaijiezaili");
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.btnBack.node.y = backButtonH);
      },
      onSigninFail: function onSigninFail(value) {},
      onSigninSuccess: function onSigninSuccess() {},
      showTipsWindow: function showTipsWindow(tipsString, buttonStr) {
        var preFabPath = "prefabs/ddz_window_normal";
        var comName = "ddz_window_normal";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          var tiString = "邀请好友";
          buttonStr && (tiString = buttonStr);
          window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tipsString + "</c>", [ {
            title: tiString,
            callFunc: function callFunc() {}
          } ]);
        });
      },
      setOverInfo: function setOverInfo(overInfo) {
        this.overInfo = overInfo;
        this.rankLable.string = "第" + overInfo.rank + "名";
        ddz.Share.shareKeywordReplace.arenaRanking = overInfo.rank;
        ddz.matchModel.cleanWaitInfo();
      },
      updateRankLabel: function updateRankLabel(rankRewards) {},
      onClickShare: function onClickShare() {
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeArenaLose);
      },
      onClickOnceMore: function onClickOnceMore() {
        ddz.matchModel.matchSignin(this.overInfo.roomId, this.overInfo.matchId, 0);
      },
      removeAni: function removeAni() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        this.node.removeFromParent();
      },
      onClickBack: function onClickBack() {
        this.removeAni();
        ty.NotificationCenter.ignoreScope(this);
        this.shut();
        hall.GlobalFuncs.popScene();
        ty.NotificationCenter.trigger(ddz.EventType.ARENA_BACK_TO_SCENE);
      },
      onMatchWait: function onMatchWait(state) {
        ddz.matchModel.onMatchWait(state);
        this.removeAni();
        ty.NotificationCenter.ignoreScope(this);
        this.node.destroy();
      },
      shut: function shut() {
        ddz.arenaResultPanel = null;
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_arena_result_win: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c739ec/KeZH6rmZN1rbc6yw", "ddz_arena_result_win");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        rankLable: cc.Label,
        rankLable_2: cc.Label,
        rankOuter: cc.Label,
        shareBtn: cc.Button,
        onceMoreBtn: cc.Button,
        aniNode: cc.Node,
        twoRewardsArea: cc.Node,
        oneRewardArea: cc.Node,
        reward1: cc.Node,
        reward2: cc.Node,
        reward0: cc.Node,
        btnBack: cc.Button
      },
      onLoad: function onLoad() {
        ddz.matchModel.isShowingRevive = false;
        ddz.Share.isMatchShare = false;
        ty.NotificationCenter.listen("signin_success", this.onSigninSuccess, this);
        ty.NotificationCenter.listen(ddz.EventType.RECEIVE_MATCH_WAIT_STATE, this.onMatchWait, this);
        var ani = this.aniNode.getComponent(cc.Animation);
        ani.play("qiansan");
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.btnBack.node.y = backButtonH);
      },
      setOverInfo: function setOverInfo(overInfo) {
        this.overInfo = overInfo;
        ddz.Share.shareKeywordReplace.arenaRanking = overInfo.rank;
        if (overInfo.rank <= 3) {
          this.rankLable.node.active = true;
          this.rankLable_2.node.active = false;
          this.rankLable.string = overInfo.rank;
        } else {
          this.rankLable.node.active = false;
          this.rankLable_2.node.active = true;
          this.rankLable_2.string = overInfo.rank;
        }
        this.rankOuter.string = overInfo.rank >= 10 ? "第    名" : "第   名";
        var rewards = overInfo.rewards;
        if (rewards) {
          if (1 == rewards.length) {
            this.twoRewardsArea.active = false;
            this.oneRewardArea.active = true;
            var sr = this.reward0.getComponent("SingleReward");
            sr.setRewardInfo(rewards[0]);
          }
          if (rewards.length >= 2) {
            this.twoRewardsArea.active = true;
            this.oneRewardArea.active = false;
            var sr1 = this.reward1.getComponent("SingleReward");
            sr1.setRewardInfo(rewards[0]);
            var sr2 = this.reward2.getComponent("SingleReward");
            sr2.setRewardInfo(rewards[1]);
          }
          if (1 == overInfo.rank) {
            var rwd;
            for (var i = 0; i < rewards.length; i++) {
              rwd = rewards[i];
              (rwd.icon = "user:coupon") && ddz.GlobalFuncs.noteToFriend("arena", parseInt(rwd.count / 100));
            }
          }
        }
        ddz.matchModel.cleanWaitInfo();
      },
      onSigninFail: function onSigninFail(value) {
        this.showTipsWindow(value.error.info, "确定");
      },
      showTipsWindow: function showTipsWindow(tipsString, buttonStr) {
        var preFabPath = "prefabs/ddz_window_normal";
        var comName = "ddz_window_normal";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          var tiString = "分享";
          buttonStr && (tiString = buttonStr);
          window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tipsString + "</c>", [ {
            title: tiString,
            callFunc: function callFunc() {}
          } ]);
        });
      },
      onSigninSuccess: function onSigninSuccess() {},
      onClickShare: function onClickShare() {
        var ranking = this.overInfo.rank;
        1 == ranking ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeMatchFirst) : 2 == ranking ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeMatchSecond) : 3 == ranking ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeMatchThird) : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeArenaWin);
      },
      onClickOnceMore: function onClickOnceMore() {
        ddz.matchModel.matchSignin(this.overInfo.roomId, this.overInfo.matchId, 0);
      },
      removeAni: function removeAni() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        this.node.removeFromParent();
      },
      onClickBack: function onClickBack() {
        this.removeAni();
        ty.NotificationCenter.ignoreScope(this);
        this.shut();
        hall.GlobalFuncs.popScene();
        ty.NotificationCenter.trigger(ddz.EventType.ARENA_BACK_TO_SCENE);
      },
      onMatchWait: function onMatchWait(state) {
        ddz.matchModel.onMatchWait(state);
        this.removeAni();
        ty.NotificationCenter.ignoreScope(this);
        this.node.destroy();
      },
      shut: function shut() {
        ddz.arenaResultPanel = null;
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_arena_start: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f129e6viyxJdJAWdchDEPkX", "ddz_arena_start");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      properties: {
        progressNode: cc.Node
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.ACTION_CHALLENGE, this.delayDestroy, this);
      },
      showArenaStageProgress: function showArenaStageProgress(stages, curStage, playani) {
        var scr = this.progressNode.getComponent("MatchRankProgressScript");
        scr.initWithPars(stages, curStage, playani);
      },
      delayDestroy: function delayDestroy() {
        ty.Timer.setTimer(this, this.shutSelf, .05, 1, 0);
      },
      shutSelf: function shutSelf() {
        ty.Timer.cancelTimer(this, this.shutSelf);
        ty.NotificationCenter.ignoreScope(this);
        this.node && this.node.destroy();
      },
      shut: function shut() {
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_avatar_window: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fb02/iVaJNWqLa0A8GQ6wW", "ddz_avatar_window");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "ddz_avatar_window";
      },
      properties: {
        avatarWidth: 102,
        avatarHeight: 102,
        lblName: cc.Label,
        sumScore: cc.Label,
        avatar: cc.Node,
        firstSpr: cc.Node
      },
      onLoad: function onLoad() {},
      setSumScore: function setSumScore(score) {
        this.sumScore.string = score > 0 ? "+" + score : score;
      },
      setFirstSpr: function setFirstSpr(isActive) {
        this.firstSpr.active = isActive;
      },
      setPlayerInfo: function setPlayerInfo(url, name, myIndex) {
        if (url) {
          this.node.active = true;
          var com = this.avatar.getComponent("Avatar");
          myIndex ? ddz.gameModel.isLimit ? com.setAvatarUrl(url) : com.setAvatarUrl() : com.setAvatarUrl(url);
          this.lblName.string = name;
          com.hideNameDisplay();
        } else this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_bannerResurgence: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a10afWirvRK6a3Yt450rdcf", "ddz_bannerResurgence");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnText: cc.Label,
        closeAdBtn: cc.Button,
        yindao: cc.Node
      },
      onLoad: function onLoad() {
        this.closeAdBtn.interactable = false;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.closeAdBtn.node.y = backButtonH);
        this.updateBtnTextTimer();
        hall.adManager.showResurgenceBannerAd("adunit-811cc4e234425489");
        var ani = this.yindao.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {});
        anim.play();
      },
      updateBtnTextTimer: function updateBtnTextTimer() {
        var bc = ddz.gameModel.getBannerResurgenceConfigJson();
        var timer = 15;
        bc && bc.delay && (timer = bc.delay);
        this.setBtnSize(timer);
        var that = this;
        var callBack = function callBack() {
          timer--;
          if (timer <= 0) {
            ty.Timer.cancelTimer(that, function() {});
            that.closeAdBtn.interactable = true;
            that.setBtnSize("关闭广告");
          } else that.setBtnSize(timer);
        };
        ty.Timer.setTimer(this, callBack, 1);
      },
      setBtnSize: function setBtnSize(_string) {
        this.btnText.string = _string;
        var size = this.closeAdBtn.node.getContentSize();
        size.width = "关闭广告" == _string ? 160 : 80;
        this.closeAdBtn.node.setContentSize(size);
        this.btnText.node.x = size.width / 2;
      },
      onClickCenterBtn: function onClickCenterBtn() {
        var matchCondition = ddz.GlobalFuncs.getFailCondition("match", ddz.GlobalFuncs.checkFailCount("match"));
        if (matchCondition) {
          var _toNext = matchCondition.resurgenceCondition.toNext;
          if (_toNext) {
            ddz.matchModel.matchBackNextLevel();
            this.onClose();
            return;
          }
          var needCount = ddz.matchModel.getDiamondCountNeeded();
          ddz.waitGetRevial = {
            type: "waitRecive",
            curCount: 0,
            needCount: needCount
          };
          var needCountR = ddz.waitGetRevial.needCount;
          for (var i = 0; i < needCountR; i++) ddz.gameModel.shareToGetreward(ddz.waitGetRevial.sharePoint || ddz.Share.SharePointType.firstFail);
          this.onClose();
        } else this.onClose();
      },
      onClose: function onClose() {
        ddz.bannerResurgenceWindow = null;
        var ani = this.yindao.getComponent(cc.Animation);
        ani.stop();
        this.yindao.removeFromParent();
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_banner_close: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c3ebEHYAdOjLw5MwLqbkYW", "ddz_banner_close");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      onBannerClose: function onBannerClose() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "banner", "close" ]);
        hall.adManager.destroyWidthBannerAd();
        this.onClose();
      },
      updatePos: function updatePos(posx, posy) {
        this.node.x = posx;
        this.node.y = posy;
      },
      onClose: function onClose() {
        this.node.destroy();
        ddz.bannerCloseBtn = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_boot: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74ee79dIjZJ/Y/1Y0CuFMYn", "ddz_boot");
    "use strict";
    require("AIRobot");
    require("QrOption");
    ddz.LOGD = function(tag, msg) {
      if (!debugMode) return;
      var logStr = "ddz : " + msg;
      tag && (logStr = tag + "ddz : " + msg);
      console.log(logStr);
    };
    ddz.LOGW = function(tag, msg) {
      if (!debugMode) return;
      var logStr = "ddz : " + msg;
      tag && (logStr = tag + "ddz : " + msg);
      console.warn(logStr);
    };
    ddz.AI = new ddz.AIRobot();
    ddz.qrCodeOption = new ddz.QrOption();
    ty.TuyooSDK.getSystemType();
    ddz.GameId = 6;
    ddz.CardInfoTag = 0;
    ddz.FriendOpTimeOut = 30;
    ddz.recordFileType = "mp3";
    ddz.SETTING_MUTE_KEY = "setting_mute";
    ddz.SETTING_MUSIC_KEY = "setting_music";
    ddz.SETTING_EFFECT_KEY = "setting_effect";
    ddz.LOCAL_VERSION_KEY = "LOCAL_VERSION_KEY";
    ddz.Enums = ddz.Enums || {};
    ddz.Enums.SceneType = {
      NORMAL: 0,
      MATCH: 1,
      FRIEND: 2,
      ARENA: 3
    };
    ddz.Enums.GameStatus = {
      GAME_STATUS_UNKNOWN: -1,
      GAME_STATUS_LOADING: 0,
      GAME_STATUS_IN_HALL: 1,
      GAME_STATUS_CHOOSE_ROOM: 2,
      GAME_STATUS_BEGIN: 3,
      GAME_STATUS_READY: 4,
      GAME_STATUS_JIAODIZHU: 5,
      GAME_STATUS_PLAYING: 6,
      GAME_STATUS_END: 7
    };
    ddz.Enums.CardSize = {
      CARD_SIZE_BIG: 1,
      CARD_SIZE_MIDDLE: 2,
      CARD_SIZE_SMALL: 3
    };
    ddz.Enums.CardColor = {
      CARD_COLOR_HEITAO: 4,
      CARD_COLOR_HONGTAO: 3,
      CARD_COLOR_CAOHUA: 2,
      CARD_COLOR_FANGPIAN: 1
    };
    ddz.Enums.CardType = {
      CARD_TYPE_NORMAL: 1,
      CARD_TYPE_KING: 2,
      CARD_TYPE_LAIZI: 3
    };
    ddz.Enums.PlayMode = {
      PLAY_MODE_NET: 1,
      PLAY_MODE_SINGLE: 2,
      PLAY_MODE_MATCH: 3,
      PLAY_MODE_REPLAY: 4
    };
    ddz.Enums.PlayType = {
      PLAY_TYPE_JINGDIAN: 1,
      PLAY_TYPE_HUANLE: 2,
      PLAY_TYPE_MATCH: 3,
      PLAY_TYPE_LAIZI: 4,
      PLAY_TYPE_ERREN: 5
    };
    ddz.Enums.PlayStatus = {
      PLAY_STATUS_PREPARE: 1,
      PLAY_STATUS_JIAODZ: 2,
      PLAY_STATUS_PLAYING: 3,
      PLAY_STATUS_GAMEOVER: 5
    };
    ddz.Enums.SeatState = {
      SEATDZSTAT_WAIT: 10,
      SEATDZSTAT_READY: 20,
      SEATDZSTAT_PLAYING: 30
    };
    ddz.Enums.TableState = {
      TABLEDSTAT_IDLE: 10,
      TABLEDSTAT_CALLING: 15,
      TABLEDSTAT_ITEM: 17,
      TABLEDSTAT_PLAYING: 20
    };
    ddz.Enums.UserType = {
      GUEST_USER: 0,
      EMAIL_USER: 1,
      THIRD_USER: 2,
      PHONE_USER: 3,
      ERROR_USER: 4,
      LOCAL_USER: 5,
      GUEST_USER_OLD: 6,
      TUYOO_USER: 7
    };
    ddz.Enums.PlayCardsTip = {
      PLAYCARDSTIP_ILLEGAL: 0,
      PLAYCARDSTIP_NOCARD: 1,
      PLAYCARDSTIP_PLAY: 2
    };
    ddz.Enums.PlayerSexEnum = {
      SEX_MALE: 0,
      SEX_FEMALE: 1
    };
    ddz.Enums.PaixingType = {
      SINGLE_CARD: 1,
      DOUBLE_CARD: 2,
      THREE_CARD: 3,
      BOMB_CARD: 4,
      THREE_ONE_CARD: 5,
      THREE_TWO_CARD: 6,
      BOMB_TWO_CARD: 7,
      BOMB_TWO_TWO_CARD: 8,
      SHUNZI_CARD: 9,
      LIANDUI_CARD: 10,
      AIRCRAFT_CARD: 11,
      AIRCRAFT_SINGLE_CARD: 12,
      AIRCRAFT_DOUBLE_CARD: 13,
      ROCKET: 14,
      ERROR_CARD: 15
    };
    ddz.SESSIONINDEX_JINGDIAN = 0;
    ddz.SESSIONINDEX_HUANLE = 1;
    ddz.SESSIONINDEX_MATCH = 2;
    ddz.SESSIONINDEX_LAIZI = 3;
    ddz.SESSIONINDEX_ERREN = 4;
    ddz.CARD_BIG_SIZE = cc.size(142, 204);
    ddz.CARD_MIDDLE_SIZE = cc.size(86, 106);
    ddz.CARD_SMALL_SIZE = cc.size(44, 61);
    ddz.PLAYED_CARDS_MAXINLINE = 6;
    ddz.CHAT_COOLING_TIMER_LEFT = -1;
    ddz.CHAT_COOLING_TIMER_RIGHT = -1;
    ddz.CARD_MAX_INTERVAL = .5;
    ddz.CARD_MIN_INTERVAL = .387;
    ddz.CARD_MIDDLE_INTERVAL = .45;
    ddz.SINGLE_SCORE_BASE = 1;
    ddz.MAX_SEAT_COUNT = 3;
    ddz.CLOCK_ANIMATION_SECOND = 5;
    ddz.BUCHU_BUTTON_KEY = "buchu";
    ddz.RECHOOSE_BUTTON_KEY = "rechoose";
    ddz.TISHI_BUTTON_KEY = "tishi";
    ddz.PLAY_BUTTON_KEY = "play";
    ddz.MSG_TEXT_BUCHU = "不出";
    ddz.ROLE_ACTION = {
      CHANGTAI: "changtai",
      SHENGLI: "shengli",
      SHIBAI: "shibai",
      SIKAO: "sikao"
    };
    ddz.MATCH_REASON = {
      WIN: 1,
      FAIL: 0
    };
    ddz.LOCATION_SIGN = {
      LEFT: 12,
      RIGHT: 11,
      SELF: 10
    };
    ddz.PlayMode = {
      classify: "123",
      happy: "happy",
      change: "huan3cards",
      power: "wild",
      quick_power: "quick_laizi"
    };
    ddz.constellationConfig = [ "白羊座", "金牛座", "双子座", "巨蟹座", "狮子座", "处女座", "天秤座", "天蝎座", "射手座", "摩羯座", "水瓶座", "双鱼座" ];
    ddz.cityConfig = {
      "北京市": [ {
        "市级": "东城区"
      }, {
        "市级": "西城区"
      }, {
        "市级": "崇文区"
      }, {
        "市级": "宣武区"
      }, {
        "市级": "朝阳区"
      }, {
        "市级": "丰台区"
      }, {
        "市级": "石景山区"
      }, {
        "市级": "海淀区"
      }, {
        "市级": "门头沟区"
      }, {
        "市级": "房山区"
      }, {
        "市级": "通州区"
      }, {
        "市级": "顺义区"
      }, {
        "市级": "昌平区"
      }, {
        "市级": "大兴区"
      }, {
        "市级": "平谷区"
      }, {
        "市级": "怀柔区"
      }, {
        "市级": "密云县"
      }, {
        "市级": "延庆县"
      } ],
      "天津市": [ {
        "市级": "和平区"
      }, {
        "市级": "河东区"
      }, {
        "市级": "河西区"
      }, {
        "市级": "南开区"
      }, {
        "市级": "河北区"
      }, {
        "市级": "红桥区"
      }, {
        "市级": "塘沽区"
      }, {
        "市级": "汉沽区"
      }, {
        "市级": "大港区"
      }, {
        "市级": "东丽区"
      }, {
        "市级": "西青区"
      }, {
        "市级": "津南区"
      }, {
        "市级": "北辰区"
      }, {
        "市级": "武清区"
      }, {
        "市级": "宝坻区"
      }, {
        "市级": "宁河县"
      }, {
        "市级": "静海县"
      }, {
        "市级": "蓟县"
      } ],
      "河北省": [ {
        "市级": "石家庄市"
      }, {
        "市级": "唐山市"
      }, {
        "市级": "秦皇岛市"
      }, {
        "市级": "邯郸市"
      }, {
        "市级": "邢台市"
      }, {
        "市级": "保定市"
      }, {
        "市级": "张家口市"
      }, {
        "市级": "承德市"
      }, {
        "市级": "沧州市"
      }, {
        "市级": "廊坊市"
      }, {
        "市级": "衡水市"
      } ],
      "山西省": [ {
        "市级": "太原市"
      }, {
        "市级": "大同市"
      }, {
        "市级": "阳泉市"
      }, {
        "市级": "长治市"
      }, {
        "市级": "晋城市"
      }, {
        "市级": "朔州市"
      }, {
        "市级": "忻州市"
      }, {
        "市级": "吕梁市"
      }, {
        "市级": "晋中市"
      }, {
        "市级": "临汾市"
      }, {
        "市级": "运城市"
      } ],
      "内蒙古": [ {
        "市级": "呼和浩特市"
      }, {
        "市级": "赤峰市"
      }, {
        "市级": "呼伦贝尔市"
      }, {
        "市级": "兴安盟"
      }, {
        "市级": "通辽市"
      }, {
        "市级": "锡林郭勒盟"
      }, {
        "市级": "乌兰察布盟"
      }, {
        "市级": "伊克昭盟"
      }, {
        "市级": "巴彦淖尔盟"
      }, {
        "市级": "阿拉善盟"
      } ],
      "辽宁省": [ {
        "市级": "沈阳市"
      }, {
        "市级": "抚顺市"
      }, {
        "市级": "本溪市"
      }, {
        "市级": "丹东市"
      }, {
        "市级": "锦州市"
      }, {
        "市级": "营口市"
      }, {
        "市级": "阜新市"
      }, {
        "市级": "辽阳市"
      }, {
        "市级": "盘锦市"
      }, {
        "市级": "铁岭市"
      }, {
        "市级": "朝阳市"
      }, {
        "市级": "葫芦岛市"
      } ],
      "吉林省": [ {
        "市级": "长春市"
      }, {
        "市级": "辽源市"
      }, {
        "市级": "通化市"
      }, {
        "市级": "白山市"
      }, {
        "市级": "松原市"
      }, {
        "市级": "白城市"
      }, {
        "市级": "延边"
      } ],
      "黑龙江省": [ {
        "市级": "哈尔滨市"
      }, {
        "市级": "鹤岗市"
      }, {
        "市级": "双鸭山市"
      }, {
        "市级": "大庆市"
      }, {
        "市级": "伊春市"
      }, {
        "市级": "七台河市"
      }, {
        "市级": "牡丹江市"
      }, {
        "市级": "黑河市"
      }, {
        "市级": "绥化市"
      }, {
        "市级": "大兴安岭"
      } ],
      "上海市": [ {
        "市级": "浦东新区"
      }, {
        "市级": "徐汇区"
      }, {
        "市级": "黄浦区"
      }, {
        "市级": "杨浦区"
      }, {
        "市级": "虹口区"
      }, {
        "市级": "闵行区"
      }, {
        "市级": "长宁区"
      }, {
        "市级": "普陀区"
      }, {
        "市级": "宝山区"
      }, {
        "市级": "静安区"
      }, {
        "市级": "闸北区"
      }, {
        "市级": "卢湾区"
      }, {
        "市级": "松江区"
      }, {
        "市级": "嘉定区"
      }, {
        "市级": "南汇区"
      }, {
        "市级": "金山区"
      }, {
        "市级": "青浦区"
      }, {
        "市级": "奉贤区"
      }, {
        "市级": "崇明县"
      } ],
      "江苏省": [ {
        "市级": "南京市"
      }, {
        "市级": "常州市"
      }, {
        "市级": "苏州市"
      }, {
        "市级": "南通市"
      }, {
        "市级": "连云港市"
      }, {
        "市级": "淮阴市"
      }, {
        "市级": "盐城市"
      }, {
        "市级": "扬州市"
      }, {
        "市级": "镇江市"
      }, {
        "市级": "泰州市"
      }, {
        "市级": "宿迁市"
      } ],
      "浙江省": [ {
        "市级": "杭州市"
      }, {
        "市级": "嘉兴市"
      }, {
        "市级": "湖州市"
      }, {
        "市级": "绍兴市"
      }, {
        "市级": "金华市"
      }, {
        "市级": "衢州市"
      }, {
        "市级": "舟山市"
      }, {
        "市级": "台州市"
      }, {
        "市级": "丽水市"
      } ],
      "安徽省": [ {
        "市级": "合肥市"
      }, {
        "市级": "淮南市"
      }, {
        "市级": "马鞍山市"
      }, {
        "市级": "淮北市"
      }, {
        "市级": "铜陵市"
      }, {
        "市级": "安庆市"
      }, {
        "市级": "黄山市"
      }, {
        "市级": "滁州市"
      }, {
        "市级": "阜阳市"
      }, {
        "市级": "宿州市"
      }, {
        "市级": "六安市"
      }, {
        "市级": "宣城市"
      }, {
        "市级": "巢湖市"
      }, {
        "市级": "池州市"
      } ],
      "福建省": [ {
        "市级": "福州市"
      }, {
        "市级": "莆田市"
      }, {
        "市级": "泉州市"
      }, {
        "市级": "漳州市"
      }, {
        "市级": "龙岩"
      }, {
        "市级": "三明市"
      }, {
        "市级": "南平市"
      } ],
      "江西省": [ {
        "市级": "南昌市"
      }, {
        "市级": "九江市"
      }, {
        "市级": "新余市"
      }, {
        "市级": "鹰潭市"
      }, {
        "市级": "赣州市"
      }, {
        "市级": "宜春市"
      }, {
        "市级": "上饶市"
      }, {
        "市级": "吉安市"
      }, {
        "市级": "抚州市"
      } ],
      "山东省": [ {
        "市级": "济南市"
      }, {
        "市级": "枣庄市"
      }, {
        "市级": "东营市"
      }, {
        "市级": "烟台市"
      }, {
        "市级": "潍坊市"
      }, {
        "市级": "济宁市"
      }, {
        "市级": "泰安市"
      }, {
        "市级": "威海市"
      }, {
        "市级": "日照市"
      }, {
        "市级": "莱芜市"
      }, {
        "市级": "临沂市"
      }, {
        "市级": "德州市"
      }, {
        "市级": "聊城市"
      }, {
        "市级": "滨州"
      }, {
        "市级": "菏泽"
      } ],
      "河南省": [ {
        "市级": "郑州市"
      }, {
        "市级": "洛阳市"
      }, {
        "市级": "平顶山市"
      }, {
        "市级": "安阳市"
      }, {
        "市级": "鹤壁市"
      }, {
        "市级": "新乡市"
      }, {
        "市级": "焦作市"
      }, {
        "市级": "濮阳市"
      }, {
        "市级": "许昌市"
      }, {
        "市级": "漯河市"
      }, {
        "市级": "三门峡市"
      }, {
        "市级": "南阳市"
      }, {
        "市级": "商丘市"
      }, {
        "市级": "信阳市"
      }, {
        "市级": "周口市"
      }, {
        "市级": "驻马店"
      } ],
      "湖北省": [ {
        "市级": "武汉市"
      }, {
        "市级": "宜昌市"
      }, {
        "市级": "襄樊市"
      }, {
        "市级": "鄂州市"
      }, {
        "市级": "荆门市"
      }, {
        "市级": "孝感市"
      }, {
        "市级": "荆州市"
      }, {
        "市级": "黄冈市"
      }, {
        "市级": "咸宁市"
      }, {
        "市级": "恩施"
      } ],
      "湖南省": [ {
        "市级": "长沙市"
      }, {
        "市级": "衡阳市"
      }, {
        "市级": "邵阳市"
      }, {
        "市级": "岳阳市"
      }, {
        "市级": "常德市"
      }, {
        "市级": "张家界市"
      }, {
        "市级": "益阳市"
      }, {
        "市级": "郴州市"
      }, {
        "市级": "永州市"
      }, {
        "市级": "怀化市"
      }, {
        "市级": "娄底地区"
      }, {
        "市级": "湘西"
      } ],
      "广东省": [ {
        "市级": "广州市"
      }, {
        "市级": "珠海市"
      }, {
        "市级": "汕头市"
      }, {
        "市级": "佛山市"
      }, {
        "市级": "江门市"
      }, {
        "市级": "湛江市"
      }, {
        "市级": "茂名市"
      }, {
        "市级": "肇庆市"
      }, {
        "市级": "惠州市"
      }, {
        "市级": "梅州市"
      }, {
        "市级": "汕尾市"
      }, {
        "市级": "河源市"
      }, {
        "市级": "阳江市"
      }, {
        "市级": "清远市"
      }, {
        "市级": "东莞市"
      }, {
        "市级": "中山市"
      }, {
        "市级": "潮州市"
      }, {
        "市级": "揭阳市"
      }, {
        "市级": "云浮市"
      } ],
      "广西": [ {
        "市级": "南宁市"
      }, {
        "市级": "梧州市"
      }, {
        "市级": "北海市"
      }, {
        "市级": "防城港市"
      }, {
        "市级": "钦州市"
      }, {
        "市级": "贵港市"
      }, {
        "市级": "玉林市"
      }, {
        "市级": "崇左市"
      }, {
        "市级": "来宾市"
      }, {
        "市级": "贺州市"
      }, {
        "市级": "百色市"
      }, {
        "市级": "河池市"
      } ],
      "海南省": [ {
        "市级": "海口市"
      }, {
        "市级": "三亚市"
      } ],
      "重庆市": [ {
        "市级": "万州区"
      }, {
        "市级": "涪陵区"
      }, {
        "市级": "渝中区"
      }, {
        "市级": "大渡口区"
      }, {
        "市级": "江北区"
      }, {
        "市级": "沙坪坝区"
      }, {
        "市级": "九龙坡区"
      }, {
        "市级": "南岸区"
      }, {
        "市级": "北碚区"
      }, {
        "市级": "万盛区"
      }, {
        "市级": "双桥区"
      }, {
        "市级": "渝北区"
      }, {
        "市级": "巴南区"
      }, {
        "市级": "长寿县"
      }, {
        "市级": "綦江县"
      }, {
        "市级": "潼南县"
      }, {
        "市级": "铜梁县"
      }, {
        "市级": "大足县"
      }, {
        "市级": "荣昌县"
      }, {
        "市级": "璧山县"
      }, {
        "市级": "梁平县"
      }, {
        "市级": "城口县"
      }, {
        "市级": "丰都县"
      }, {
        "市级": "垫江县"
      }, {
        "市级": "武隆县"
      }, {
        "市级": "忠县"
      }, {
        "市级": "开县"
      }, {
        "市级": "云阳县"
      }, {
        "市级": "奉节县"
      }, {
        "市级": "巫山县"
      }, {
        "市级": "巫溪县"
      }, {
        "市级": "黔江"
      }, {
        "市级": "石柱"
      }, {
        "市级": "秀山"
      }, {
        "市级": "酉阳"
      }, {
        "市级": "彭水"
      }, {
        "市级": "江津市"
      }, {
        "市级": "合川市"
      }, {
        "市级": "永川市"
      }, {
        "市级": "南川市"
      } ],
      "四川省": [ {
        "市级": "成都市"
      }, {
        "市级": "泸州市"
      }, {
        "市级": "德阳市"
      }, {
        "市级": "绵阳市"
      }, {
        "市级": "广元市"
      }, {
        "市级": "遂宁市"
      }, {
        "市级": "内江市"
      }, {
        "市级": "乐山市"
      }, {
        "市级": "南充市"
      }, {
        "市级": "宜宾市"
      }, {
        "市级": "广安市"
      }, {
        "市级": "达川地区"
      }, {
        "市级": "雅安地区"
      }, {
        "市级": "阿坝"
      }, {
        "市级": "甘孜"
      }, {
        "市级": "凉山"
      }, {
        "市级": "巴中地区"
      }, {
        "市级": "眉山地区"
      }, {
        "市级": "资阳地区"
      }, {
        "北京市": "贵州省",
        "市级": "贵阳市"
      }, {
        "市级": "铜仁"
      }, {
        "市级": "黔西南"
      }, {
        "市级": "毕节"
      }, {
        "市级": "安顺"
      }, {
        "市级": "黔东南"
      }, {
        "市级": "黔南"
      }, {
        "北京市": "云南省",
        "市级": "昆明市"
      }, {
        "市级": "昭通"
      }, {
        "市级": "楚雄"
      }, {
        "市级": "红河"
      }, {
        "市级": "文山"
      }, {
        "市级": "思茅市"
      }, {
        "市级": "西双版纳"
      }, {
        "市级": "大理"
      }, {
        "市级": "保山"
      }, {
        "市级": "德宏"
      }, {
        "市级": "丽江"
      }, {
        "市级": "怒江"
      }, {
        "市级": "迪庆"
      }, {
        "市级": "临沧"
      }, {
        "北京市": "西藏",
        "市级": "拉萨市"
      }, {
        "市级": "日喀则"
      }, {
        "市级": "那曲"
      }, {
        "市级": "阿里"
      }, {
        "市级": "林芝"
      }, {
        "北京市": "陕西省",
        "市级": "西安市"
      }, {
        "市级": "咸阳市"
      }, {
        "市级": "渭南市"
      }, {
        "市级": "延安市"
      }, {
        "市级": "汉中市"
      }, {
        "市级": "安康"
      }, {
        "市级": "商洛"
      }, {
        "市级": "榆林"
      } ],
      "甘肃省": [ {
        "市级": "兰州市"
      }, {
        "市级": "天水市"
      }, {
        "市级": "酒泉"
      }, {
        "市级": "张掖"
      }, {
        "市级": "武威"
      }, {
        "市级": "定西"
      }, {
        "市级": "陇南"
      }, {
        "市级": "平凉"
      }, {
        "市级": "庆阳"
      }, {
        "市级": "临夏"
      }, {
        "市级": "甘南"
      } ],
      "青海省": [ {
        "市级": "西宁市"
      }, {
        "市级": "黄南"
      }, {
        "市级": "海南"
      }, {
        "市级": "果洛"
      }, {
        "市级": "玉树"
      }, {
        "市级": "海西"
      } ],
      "宁夏": [ {
        "市级": "银川市"
      }, {
        "市级": "固原"
      }, {
        "市级": "中卫市"
      } ],
      "新疆": [ {
        "市级": "乌鲁木齐市"
      }, {
        "市级": "哈密地区"
      }, {
        "市级": "昌吉"
      }, {
        "市级": "博尔塔拉"
      }, {
        "市级": "巴音郭楞"
      }, {
        "市级": "阿克苏"
      }, {
        "市级": "克孜勒苏柯尔克孜"
      }, {
        "市级": "喀什"
      }, {
        "市级": "和田"
      }, {
        "市级": "伊犁"
      }, {
        "市级": "塔城"
      }, {
        "市级": "阿勒泰"
      } ]
    };
    cc._RF.pop();
  }, {
    AIRobot: "AIRobot",
    QrOption: "QrOption"
  } ],
  ddz_bubble_tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d994IlcTBIOI4BrmBn4lB4", "ddz_bubble_tips");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bgSpr: cc.Sprite,
        tips: cc.Label,
        bgSpriteFrame: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {},
      setTips: function setTips(str, isTable) {
        this.tips.string = str;
        var t_size = this.tips.node.getContentSize();
        var size = this.bgSpr.node.getContentSize();
        var _interval = 35;
        if (isTable) {
          _interval = 15;
          this.bgSpr.spriteFrame = this.bgSpriteFrame[1];
          this.tips.node.y = -6;
        }
        size.width = t_size.width + _interval;
        this.bgSpr.node.setContentSize(size);
        ty.Timer.setTimer(this, this.closeAction, 5);
      },
      closeAction: function closeAction() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_buttonList_2: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f66fR8deJF0Kd+iuSrBMRa", "ddz_buttonList_2");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        buttonBgList: [ cc.SpriteFrame ],
        topButton: {
          default: null,
          type: cc.Button
        },
        topRichText: {
          default: null,
          type: cc.RichText
        },
        bottomButton: {
          default: null,
          type: cc.Button
        },
        bottomRichText: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        this.topCallFunc || (this.topCallFunc = function() {
          hall.LOGW("====", "====topCallFunc===");
        });
        this.bottomCallFunc || (this.bottomCallFunc = function() {
          hall.LOGW("====", "====bottomCallFunc===");
        });
        this.topButton.node.on("click", this.topButtonCallFunc, this);
        this.bottomButton.node.on("click", this.bottomButtonCallFunc, this);
      },
      setButtonListWithButtons2: function setButtonListWithButtons2(buttons) {
        var buttonCount = buttons.length;
        if (1 == buttonCount) {
          this.topButton.node.active = false;
          this.bottomButton.node.active = true;
          var sprite = this.bottomButton._sprite;
          sprite.spriteFrame = this.buttonBgList[buttons[0].bottomType];
          this.bottomRichText.string = this.setRichTextWithButton(buttons[0]);
          this.bottomCallFunc = buttons[0].callFunc;
        } else if (2 == buttonCount) {
          this.topButton.node.active = true;
          this.bottomButton.node.active = true;
          var topSprite = this.topButton._sprite;
          topSprite.spriteFrame = this.buttonBgList[buttons[0].bottomType];
          this.topRichText.string = this.setRichTextWithButton(buttons[0]);
          this.topCallFunc = buttons[0].callFunc;
          var bottomSprite = this.bottomButton._sprite;
          bottomSprite.spriteFrame = this.buttonBgList[buttons[1].bottomType];
          this.bottomRichText.string = this.setRichTextWithButton(buttons[1]);
          this.bottomCallFunc = buttons[1].callFunc;
        }
      },
      setRichTextWithButton: function setRichTextWithButton(button) {
        var textS = "<color=#ffffff> " + button.title + " </color>";
        var labelS = textS;
        button.right ? labelS = (button.right = "dda_button_diamond") ? textS + "<img src='" + button.right + "' height=34 width=42/>" : textS + "<img src='" + button.right + "' />" : button.left && (labelS = "<img src='" + button.left + "' />" + textS);
        ddz.LOGD(null, "file = [ddz_buttonList] fun = [setRichTextWithButton] labelS = " + JSON.stringify(labelS));
        return labelS;
      },
      setTopTextWithButton: function setTopTextWithButton(string) {
        ddz.LOGD(null, "file = [ddz_buttonList_2] fun = [setTopTextWithButton] string = " + JSON.stringify(string));
        this.topRichText.string = string;
      },
      setBottomTextWithButton: function setBottomTextWithButton(string) {
        this.bottomRichText.string = string;
      },
      hideBottomBtn: function hideBottomBtn(isShow) {
        this.bottomButton.node.active = isShow;
      },
      setBtnCallBack: function setBtnCallBack(_topCall, _bottomCall) {
        this.topCallFunc = _topCall;
        this.bottomCallFunc = _bottomCall;
      },
      topButtonCallFunc: function topButtonCallFunc() {
        hall.LOGW("====", "====topButtonCallFunc===");
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        this.topCallFunc();
      },
      bottomButtonCallFunc: function bottomButtonCallFunc() {
        hall.LOGW("====", "====bottomButtonCallFunc===");
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        this.bottomCallFunc();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_buttonList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23ae4nLkGlOF5BdpmO8PgUB", "ddz_buttonList");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        topButton: {
          default: null,
          type: cc.Button
        },
        bottomButton: {
          default: null,
          type: cc.Button
        },
        tempButton: {
          default: null,
          type: cc.Button
        },
        topText: {
          default: null,
          type: cc.RichText
        },
        bottomText: {
          default: null,
          type: cc.RichText
        },
        tempText: {
          default: null,
          type: cc.RichText
        },
        colorString: "202020",
        parentScene: {
          default: null,
          serializable: false
        }
      },
      setButtonListWithButtons: function setButtonListWithButtons(buttons) {
        var buttonCount = buttons.length;
        this.topButton.node.active = false;
        this.bottomButton.node.active = false;
        this.tempButton.node.active = false;
        if (1 == buttonCount) {
          if (1 == buttons[0].bottomType) this.setButtonWithButtonTextAndHeight(buttons[0], this.topButton, this.topText, 0); else {
            hall.LOGW("", "file = [ddz_buttonList] fun = [setButtonListWithButtons] bottomType != 1");
            this.setButtonWithButtonTextAndHeight(buttons[0], this.tempButton, this.tempText, 0);
          }
          return;
        }
        this.setButtonWithButtonTextAndHeight(buttons[0], this.topButton, this.topText, 128);
        1 == buttons[1].bottomType ? this.setButtonWithButtonTextAndHeight(buttons[1], this.tempButton, this.tempText, 0) : this.setButtonWithButtonTextAndHeight(buttons[1], this.bottomButton, this.bottomText, 0);
      },
      setButtonWithButtonTextAndHeight: function setButtonWithButtonTextAndHeight(buttonMap, button, text, height) {
        button.node.active = true;
        text.string = this.setRichTextWithButton(buttonMap);
        text.node.y = 12;
        button.node.y = height;
      },
      changeTopTextWithButton: function changeTopTextWithButton(button) {
        this.topText.string = this.setRichTextWithButton(button);
      },
      setTopTextWithButton: function setTopTextWithButton(string) {
        this.topText.string = string;
      },
      changeBottomTextWithButton: function changeBottomTextWithButton(button) {
        this.bottomText.string = this.setRichTextWithButton(button);
      },
      setRichTextWithButton: function setRichTextWithButton(button) {
        var textS = "<color=#ffffff> " + button.title + " </color>";
        var labelS = textS;
        button.right ? labelS = (button.right = "dda_button_diamond") ? textS + "<img src='" + button.right + "' height=34 width=42/>" : textS + "<img src='" + button.right + "' />" : button.left && (labelS = "<img src='" + button.left + "' />" + textS);
        ddz.LOGD(null, "file = [ddz_buttonList] fun = [setRichTextWithButton] labelS = " + JSON.stringify(labelS));
        return labelS;
      },
      onTopButton: function onTopButton() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.LOGD(null, "onTopButton");
        this.parentScene && this.parentScene.onTopButtonAction();
      },
      onButtomButton: function onButtomButton() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.LOGD(null, "onButtomButton");
        this.parentScene && this.parentScene.onButtomButtonAction();
      },
      onTempButton: function onTempButton() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.LOGD(null, "onTempButton");
        this.parentScene && this.parentScene.onTempButtonAction();
      },
      onLoad: function onLoad() {
        this.topButton.node.on("click", this.onTopButton, this);
        this.bottomButton.node.on("click", this.onButtomButton, this);
        this.tempButton.node.on("click", this.onTempButton, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_ceLaMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5cfcePHZZD47Sx2ca9eUs4", "ddz_ceLaMenu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        avatar: cc.Node,
        uid: cc.Label,
        location: cc.Label,
        signature: cc.Label,
        goldNum: cc.Label,
        diamondNum: cc.Label,
        infoBg: cc.Node,
        guideIconNode: cc.Node,
        notifyRedDot: cc.Node
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_DIAMOND_NUMBER, this.updateDiamond, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_COIN_NUMBER, this.updateCoin, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_CELA_MENU_INFO, this.updateCeLaMunuInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_GUIDE_ICON_STATE, this.updateGuideNodeState, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_COMMON_CONFIG, this.updateNotifyInfo, this);
      },
      updateDiamond: function updateDiamond() {
        var num = hall.ME.udataInfo.diamondCount;
        this.diamondNum.string = num ? hall.GlobalFuncs.formatGold(num) : 0;
      },
      updateCoin: function updateCoin() {
        var number = hall.ME.getChip();
        this.goldNum.string = number ? hall.GlobalFuncs.formatGold(number) : 0;
      },
      updateNotifyInfo: function updateNotifyInfo() {
        this.notifyRedDot.active = ddz.gameModel.notifyInfo.unReadCount + ddz.gameModel.messageCount > 0;
      },
      updateCeLaMunuInfo: function updateCeLaMunuInfo() {
        var wimdow = this.avatar.getComponent("Avatar");
        if (ty.UserInfo.userPic && ddz.gameModel.isLimit) {
          wimdow.setAvatarUrl(ty.UserInfo.userPic);
          wimdow.hideNameDisplay();
        }
        this.uid.string = "ID " + ty.UserInfo.userId;
        var personInfo = hall.gameWorld.model.personInfo;
        if (personInfo) {
          this.location.string = personInfo.getProvince();
          var _signature = personInfo.getSignature();
          this.signature.string = _signature && "" != _signature ? personInfo.getSignature() : "该玩家很懒,什么也没有留下";
        }
        this.updateCoin();
        this.updateDiamond();
        var size = this.infoBg.getContentSize();
        var _sizeY = ddz.GlobalFuncs.getCeLabgSizeY();
        size.height = 252 + _sizeY;
        this.infoBg.setContentSize(size);
        ddz.gameModel.getOldUserChipReward();
        this.updateNotifyInfo();
      },
      updateGuideNodeState: function updateGuideNodeState(isShow) {
        cc.sys.os == cc.sys.OS_ANDROID ? this.guideIconNode && (this.guideIconNode.active = isShow) : this.guideIconNode && (this.guideIconNode.active = false);
      },
      onClickEdit: function onClickEdit() {
        hall.GlobalFuncs.onEditPersonInfo();
      },
      onClickNotifyBtn: function onClickNotifyBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "notice" ]);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        hall.GlobalFuncs.showPopWinByPreFab("prefabs/notifyWindow", function(preFabNode) {
          var window = preFabNode.getComponent("ddz_notifyWindow");
          window.setListType();
        });
      },
      onClickRankBtn: function onClickRankBtn() {
        var sceneName = "ddz_rank";
        var onLaunched = function onLaunched() {
          var logicScene = cc.director.getScene();
          var no = logicScene.children[0];
          var window = no.getComponent("ddz_rank");
          window.showRankListForShare();
        };
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
      },
      onClickShareCircleBtn: function onClickShareCircleBtn() {
        ddz.GlobalFuncs.showShareMomentsItem("invite");
      },
      onClickAddDesktopBtn: function onClickAddDesktopBtn() {
        ddz.gameModel.getShoreCut();
        hall.GlobalFuncs.onCollectDeskTop();
      },
      onCloseMenuColumu: function onCloseMenuColumu() {
        this.node.active = false;
        ty.NotificationCenter.trigger(ty.EventType.GET_AD_MSG_SUCCESS);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_getDiamond: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7809a+UbLFNo6BPwilw/N8E", "ddz_cell_getDiamond");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        avatar: {
          default: null,
          type: cc.Sprite
        },
        detailrichText: cc.RichText,
        getButton: cc.Button,
        haveSpritr: cc.Sprite,
        unInterface: cc.Sprite,
        inviteedCode: "",
        state: 0,
        resultMap: null,
        defaultSpriteFrame: cc.SpriteFrame
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        this.resultMap = resultMap;
        this.setGetButtonState(resultMap.rewardState);
        this.inviteedCode = resultMap.userId || resultMap.inviteedCode;
        this.detailrichText.string = "<color=#9C7343>成功邀请" + resultMap.count + "位新人（" + resultMap.nowCount + "/" + resultMap.count + "）</c><br/><color=#9C7343>奖励：</c><img src='ddz_welfare_diamond_1' height=34 width=42/><color=#9C7343> +" + resultMap.bindRewardCount + "</c>";
      },
      setGetButtonState: function setGetButtonState(state) {
        this.state = state;
        switch (state) {
         case 0:
          this.getButton.node.active = false;
          this.haveSpritr.node.active = false;
          this.unInterface.node.active = true;
          break;

         case 1:
          this.getButton.node.active = true;
          this.haveSpritr.node.active = false;
          this.unInterface.node.active = false;
          break;

         case 2:
          this.getButton.node.active = false;
          this.haveSpritr.node.active = true;
          this.unInterface.node.active = false;
        }
      },
      onGetRewardAction: function onGetRewardAction() {
        this.resultMap.rewardState = 2;
        if (this.avatar) ddz.gameModel.getInviteReward(this.inviteedCode); else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "getNewDiamond", this.resultMap.count ]);
          ddz.gameModel.getNewInviteReward(this.inviteedCode);
        }
        this.setGetButtonState(2);
        hall.LOGW("===", "=====onGetRewardAction=========");
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_DIAMOND_COUNT, this.resultMap.bindRewardCount);
      },
      onClickInviteBtn: function onClickInviteBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "diamondShareFriendToCell" ]);
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeInviteNewFriend);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_history: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "050aacpFcVBhpqF9omNYM8D", "ddz_cell_history");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        playLabel: {
          default: null,
          type: cc.Label
        },
        timeLabel: {
          default: null,
          type: cc.Label
        },
        countLabel: {
          default: null,
          type: cc.Label
        },
        player_1: cc.Node,
        player_2: cc.Node,
        player_3: cc.Node
      },
      onLoad: function onLoad() {
        this.bgBtn.node.on("click", this.showGameDetail, this);
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        var historyDdata = ddz.historyModel.getHistoryData();
        ddz.detailsModel.parseResults(historyDdata[this.index].results);
        var myIndex = ddz.historyModel.getMySeatIndex(this.index);
        ddz.LOGD("", "file = [ddz_cell_history] fun = [setDetailInformation] myIndex = " + myIndex);
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var avatars = resultMap.avatars;
        this.updateAcatar(this.player_1, avatars[myIndex - 1], true);
        this.updateAcatar(this.player_2, avatars[rightindex - 1]);
        this.updateAcatar(this.player_3, avatars[leftindex - 1]);
        this.setPlayMode(resultMap.titleS);
        this.updateTimer(resultMap.timeS);
        this.setSumScore(resultMap.score);
      },
      updateAcatar: function updateAcatar(_player, _url, isMy) {
        var com = _player.getComponent("Avatar");
        isMy ? ddz.gameModel.isLimit ? com.setAvatarUrl(_url) : com.setAvatarUrl() : com.setAvatarUrl(_url);
        com.hideNameDisplay();
      },
      setPlayMode: function setPlayMode(_playMode) {
        var playingString = "经典玩法";
        switch (_playMode) {
         case "happy":
          playingString = "欢乐玩法";
          break;

         case "wild":
          playingString = "癞子玩法";
          break;

         default:
          playingString = "经典玩法";
        }
        this.playLabel.string = playingString;
      },
      updateTimer: function updateTimer(_timer) {
        this.timeLabel.string = _timer;
      },
      setSumScore: function setSumScore(score) {
        this.countLabel.string = score;
      },
      showGameDetail: function showGameDetail() {
        ddz.LOGD("", "file = [ddz_window_history] fun = [showGameDetail] this.index = " + this.index);
        var historyDdata = ddz.historyModel.getHistoryData();
        ddz.detailsModel.parseResults(historyDdata[this.index].results);
        ddz.detailsModel.parseFriendRound(historyDdata[this.index].curRound, historyDdata[this.index].totalRound);
        ddz.detailsModel.setMySeatIndex(historyDdata[this.index].mySeatIndex);
        ddz.detailsModel.setIsHisTory(true);
        hall.GlobalFuncs.onShowDetail();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_mall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48a75Hp+j5PZ6ItRkJURNQn", "ddz_cell_mall");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        diamondText: {
          default: null,
          type: cc.RichText
        },
        coinText: {
          default: null,
          type: cc.Label
        },
        ratioLabel: {
          default: null,
          type: cc.Label
        },
        redBar: {
          default: null,
          type: cc.Node
        },
        sureBtn: {
          default: null,
          type: cc.Button
        },
        coinSpr: {
          default: null,
          type: cc.Sprite
        },
        chipNumber: 0
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_CONVERSION_STATE, this.onUpdateBtnState, this);
        hall.GlobalFuncs.btnEffect(this.sureBtn.node, 1.1, this);
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        this.coinText.string = resultMap.coin;
        this.chipNumber = resultMap.coin;
        this.updateDiamond(resultMap.diamond);
        this.updateRedBar(resultMap.radio);
        this.m_id = resultMap.m_id;
      },
      updateDiamond: function updateDiamond(num) {
        var str = "<img src='dda_button_diamond' height=34 width=42/><color=#FFFFFF> " + num + "</c>";
        this.diamondText.string = str;
      },
      updateRedBar: function updateRedBar(num) {
        if (num && num > 0) {
          this.redBar.active = true;
          this.ratioLabel.string = "多送" + Math.round(1e4 * num) / 100 + "%";
        } else this.redBar.active = false;
      },
      onUpdateBtnState: function onUpdateBtnState(isEnabled) {
        this.sureBtn.interactable = isEnabled;
      },
      onClickBtn: function onClickBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "goldExchange", this.chipNumber ]);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_CONVERSION_STATE, false);
        hall.MsgFactory.conversionCoin(this.m_id);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_match_reward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d29b3R36cFFLb88xpL8k909", "ddz_cell_match_reward");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankLabel: {
          default: null,
          type: cc.RichText
        },
        rewardDes: {
          default: null,
          type: cc.RichText
        }
      },
      updateItem: function updateItem(startIndex, endIndex, rewardDes) {
        var colorDes = "<color=#FD5051>";
        var colorEnd = "</c>";
        startIndex > 3 && (colorDes = "<color=#1A6951>");
        this.rankLabel.string = startIndex == endIndex ? colorDes + "第" + startIndex + "名:" + colorEnd : colorDes + startIndex + "-" + endIndex + "名:" + colorEnd;
        this.rewardDes.string = colorDes + rewardDes + colorEnd;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_matchlist: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb51f4UnLZMTpaRNc8tkEqq", "ddz_cell_matchlist");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        matchName: {
          default: null,
          type: cc.RichText
        },
        beSavedSprite: {
          default: null,
          type: cc.Sprite
        },
        leftRichText: {
          default: null,
          type: cc.RichText
        },
        rightRichText: {
          default: null,
          type: cc.RichText
        },
        selectKuang: {
          default: null,
          type: cc.Node
        },
        clicked: false
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.RESET_MATCH_CLICK_STATE, this.onResetClickState, this);
      },
      onResetClickState: function onResetClickState() {
        this.clicked = false;
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.matchData = objc;
        this.setDetailInformation(this.matchData);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        this.setMatchName(resultMap.matchName);
        this.setRightRichText("前45名获奖");
        var parsArr = resultMap.taskDesc.split("||");
        parsArr[1] && this.setRightRichText(parsArr[1]);
        this.roomID = resultMap.roomId;
        this.beSavedSprite.node.active = resultMap.isRecordExist();
        var onLineNum = resultMap.onlineCount;
        hall.LOGW("", "file = [ddz_cell_roomlist] fun = [setDetailInformation] onLineNum = " + onLineNum);
        if (null != onLineNum) if (onLineNum < 0) this.leftRichText.node.active = false; else {
          this.leftRichText.node.active = true;
          this.setLeftRichText(onLineNum);
        }
      },
      setMatchName: function setMatchName(name) {
        this.matchName.string = "<color=#1A6951>" + name + "</c>";
      },
      setLeftRichText: function setLeftRichText(num) {
        this.leftRichText.string = "<img src='ddz_roomlist_smallPerson' /><color=#1A6951> " + num + "</c>";
      },
      setRightRichText: function setRightRichText(str) {
        this.rightRichText.string = "<color=#1A6951> " + str + "</c>";
      },
      onClickCell: function onClickCell() {
        ddz.LOGD(null, "file = [ddz_cell_roomlist] fun = [onclickCell]");
        if (this.clicked) return;
        this.clicked = true;
        ty.NotificationCenter.trigger(ddz.EventType.CLICK_MATCHING_ITEM, this.matchData.matchId);
        hall.ME.matchInfo.setCurrentMatchId(this.matchData.matchId);
        ddz.matchModel.getMatchDes(this.roomID, this.matchData.matchId);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_recharge: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfa0fdqcvZA/rVZemmTJrzH", "ddz_cell_recharge");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        malletText: {
          default: null,
          type: cc.RichText
        },
        diamondText: {
          default: null,
          type: cc.Label
        },
        ratioLabel: {
          default: null,
          type: cc.Label
        },
        redBar: {
          default: null,
          type: cc.Node
        },
        sureBtn: {
          default: null,
          type: cc.Button
        },
        diamondSpr: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_CONVERSION_STATE, this.onUpdateBtnState, this);
        hall.GlobalFuncs.btnEffect(this.sureBtn.node, 1.1, this);
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        hall.LOGD("", "file = [ddz_cell_recharge] fun = [setDetailInformation] resultMap = " + JSON.stringify(resultMap));
        this.diamondText.string = resultMap.m_diamond;
        this.updateMallet(resultMap.m_mallet);
        this.m_id = resultMap.m_id;
        this.m_mallet = resultMap.m_mallet;
        this.m_name = resultMap.m_name;
      },
      updateMallet: function updateMallet(num) {
        var str = "<color=#FFFFFF>￥" + num + "</c>";
        this.malletText.string = str;
      },
      updateRedBar: function updateRedBar(num) {
        if (num && num > 0) {
          this.redBar.active = true;
          this.ratioLabel.string = "多送" + Math.round(1e4 * num) / 100 + "%";
        } else this.redBar.active = false;
      },
      onUpdateBtnState: function onUpdateBtnState(isEnabled) {
        this.sureBtn.interactable = isEnabled;
      },
      onClickBtn: function onClickBtn() {
        ty.Recharge.createOrder(this.m_id, this.m_mallet, this.m_name);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_cell_roomlist: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7e01tfoU9NdpMSV2og3vlD", "ddz_cell_roomlist");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        roomName: {
          default: null,
          type: cc.Label
        },
        leftRichText: {
          default: null,
          type: cc.RichText
        },
        rightRichText: {
          default: null,
          type: cc.RichText
        },
        selectKuang: {
          default: null,
          type: cc.Node
        },
        redBar: {
          default: null,
          type: cc.Node
        },
        awardText: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        this.isSelect(false);
        this.cellIndex = -1;
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_ROOMLIST_KUANG, this.setSelect, this);
        ty.NotificationCenter.listen(ddz.EventType.SAVE_MATCH_SUCCESS, this.onSaveMatch, this);
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        ddz.LOGD("", "file = [ddz_cell_roomlist] fun = [setDetailInformation] resultMap = " + JSON.stringify(resultMap));
        this.roomName.string = resultMap.name;
        this.setRightRichText(resultMap.condition);
        this.roomID = resultMap.id;
        resultMap.mixId && (this.mixId = resultMap.mixId);
        this.play_mode = resultMap.play_mode;
        var onLineNum = hall.gameWorld.getRoomOnlineInfo(this.roomID);
        resultMap.userCount && (onLineNum = resultMap.userCount);
        if (null != onLineNum) if (onLineNum < 0) this.leftRichText.node.active = false; else {
          this.leftRichText.node.active = true;
          this.setLeftRichText(onLineNum);
        }
        resultMap.gameDes && "" != resultMap.gameDes ? this.setAwardText(true, resultMap.gameDes) : this.setAwardText(false);
      },
      onSaveMatch: function onSaveMatch() {
        if (this.cellIndex == this.index) {
          var _gameId = ty.SystemInfo.gameId || ty.SystemInfo.hallId;
          hall.MsgFactory.getQuickStart(ty.UserInfo.userId, _gameId, this.roomID, hall.staticSystemInfo.version, null, null, null, null, this.mixId, this.play_mode);
          this.cellIndex = -1;
        }
      },
      setAwardText: function setAwardText(_isAward, _des) {
        this.redBar.active = _isAward;
        _des && (this.awardText.string = "<color=#ffffff> " + _des + "</c>");
      },
      setLeftRichText: function setLeftRichText(num) {
        this.leftRichText.string = "<img src='ddz_roomlist_smallPerson' /><color=#1A6951> " + num + "</c>";
      },
      setRightRichText: function setRightRichText(str) {
        this.rightRichText.string = "<img src='ddz_coin_green' height=33.6 width=33.6/><color=#1A6951> " + str + "</c>";
      },
      setSelect: function setSelect(_index) {
        this.isSelect(false);
        this.index == _index && this.isSelect(true);
      },
      isSelect: function isSelect(_isSelect) {
        this.selectKuang.active = _isSelect;
      },
      onClickCell: function onClickCell() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "roomListClick", this.roomName.string ]);
        if (ddz.matchModel.getCurWaitInfo()) {
          this.cellIndex = this.index;
          ddz.LOGD(null, "file = [ddz_cell_roomlist] fun = [onclickCell] 保存进度");
          ddz.MsgFactory.saveMatch();
        } else {
          ddz.LOGD(null, "file = [ddz_cell_roomlist] fun = [onclickCell] 快速开始");
          this.cellIndex = -1;
          var _gameId = ty.SystemInfo.gameId || ty.SystemInfo.hallId;
          hall.MsgFactory.getQuickStart(ty.UserInfo.userId, _gameId, this.roomID, hall.staticSystemInfo.version, null, null, null, null, this.mixId, this.play_mode);
        }
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_congratulation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62793ZeYA9P+qsLQzaCFk3T", "ddz_congratulation");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        progress: {
          default: null,
          type: cc.Node
        },
        buttons: {
          default: null,
          type: cc.Node
        },
        rewardRichText: {
          default: null,
          type: cc.RichText
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        topButton: cc.Button,
        bottomButton: cc.Node,
        bottomBtnText: cc.RichText,
        aniNode: cc.Node,
        lizi01: cc.Node,
        lizi02: cc.Node,
        lizi03: cc.Node,
        lizi04: cc.Node,
        lotteryTimeS: "",
        richString: "",
        winnerCountNumber: "1"
      },
      onLoad: function onLoad() {
        ddz.matchModel.matchUpdate();
        ddz.matchModel.getMatchDes();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_INFO, this.onUpDateMatchInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_ALL_MATCH_RESULT_PANEL, this.shut, this);
        var window = this.progress.getComponent("ddz_progress");
        window.setProgress(6, true);
        hall.adManager.canShowTableBanner = false;
        hall.adManager.hideBannerAd();
        this.setOriginalData();
        ddz.AudioHelper.playMusic("/resources/sound/Victory.mp3", false);
        var winSize = cc.director.getWinSize();
        var bg = this.node.getChildByName("ddz_scene_bg_0");
        this.node.width = winSize.width;
        this.node.height = winSize.height;
        bg.width = winSize.width;
        bg.height = winSize.height;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ty.EventType.GET_DIAMOND, this.getDiamond, this);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        ty.NotificationCenter.listen(ddz.EventType.HIDE_TOP_BUTTON, this.hideTopButton, this);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.tongGuan);
        this.setRewardRichText();
      },
      showResults: function showResults(isShow) {
        this.node.active = isShow;
        if (isShow) {
          var ani = this.aniNode.getComponent(cc.Animation);
          ani.once("finished", this.startAniFinish, this);
          ani.play("ddz_congratulation");
          this.lizi01.getComponent("cc.ParticleSystem").resetSystem();
          this.lizi02.getComponent("cc.ParticleSystem").resetSystem();
          this.lizi03.getComponent("cc.ParticleSystem").resetSystem();
          this.lizi04.getComponent("cc.ParticleSystem").resetSystem();
        }
      },
      topBtnCallBack: function topBtnCallBack() {
        var preFabPath = "ani/hongbao/ddz_hongbao";
        var comName = "ddz_hongbao";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          ddz.hongBaoPanel = preFabNode.getComponent(comName);
        });
      },
      bottomBtnCallBack: function bottomBtnCallBack() {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        ddz.Share.shareKeywordReplace.allWinnerCount = this.winnerCountNumber;
        var shareType = ddz.Share.onShareType.clickStatShareTypeCongratulation;
        ddz.Share.shareWithType(shareType);
      },
      hideTopButton: function hideTopButton(isHide) {
        if (isHide) {
          this.topButton.node.active = false;
          this.bottomButton.y = 0;
        } else {
          this.topButton.node.active = true;
          this.bottomButton.y = -53;
        }
      },
      startAniFinish: function startAniFinish(aniState) {
        var ani = this.aniNode.getComponent(cc.Animation);
        ani.play("ddz_congratulation_xunhuan");
      },
      onUpDateMatchInfo: function onUpDateMatchInfo() {
        var info = ddz.matchModel.getCurUpdateInfo();
        var num;
        if (info && info.lotteryInfo && info.lotteryInfo.winnerCount) {
          num = info.lotteryInfo.winnerCount;
          this.winnerCountNumber = num;
        } else this.winnerCountNumber = "1";
        this.setRewardRichText();
      },
      setRewardRichText: function setRewardRichText() {
        var info = ddz.matchModel.getCurUpdateInfo();
        var lotteryTime;
        lotteryTime = info && info.lotteryInfo && info.lotteryInfo.lotteryTime ? info.lotteryInfo.lotteryTime : "21:00";
        this.lotteryTimeS = "<color=#ffffff>奖励将于 " + lotteryTime + " 发放</color>";
        this.rewardRichText.string = this.lotteryTimeS;
      },
      setMcountDetail: function setMcountDetail(mcountList) {
        this.setRewardRichText();
      },
      setOriginalData: function setOriginalData() {
        var waitInfo = ddz.matchModel.getCurWaitInfo();
      },
      removeAni: function removeAni() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        this.node.removeFromParent();
      },
      onBackButton: function onBackButton() {
        ddz.GlobalFuncs.removeMatchResultPanel(this);
        this.removeAni();
        hall.GlobalFuncs.gotoDdz();
      },
      onRankButton: function onRankButton() {
        this.removeAni();
        var sceneName = "ddz_rank";
        var onLaunched = function onLaunched() {
          var logicScene = cc.director.getScene();
          var no = logicScene.children[0];
          var window = no.getComponent("ddz_rank");
          window.showRankListForShare();
        };
        hall.GlobalFuncs.pushScene(sceneName, onLaunched);
      },
      onGetRewardButton: function onGetRewardButton() {
        this.removeAni();
        var sceneName = "ddz_reward";
        hall.GlobalFuncs.pushScene(sceneName);
      },
      onDiamondButton: function onDiamondButton() {
        this.removeAni();
      },
      addTipsWindow: function addTipsWindow(tips) {
        var _shareType = ddz.Share.onShareType.clickStatShareTypeCongratulation;
        var _string = hall.GlobalFuncs.getButtonTitle(_shareType);
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: _string,
            bottomType: 0
          } ];
          window.setTitleContentAndButtons("提示", tips, testArray);
        });
      },
      getDiamond: function getDiamond() {
        hall.LOGW("==", " file = [ddz_congratulation] fun = [getDiamond] ");
        ddz.GlobalFuncs.playZuanShi();
      },
      updateButtonText: function updateButtonText(data) {
        if (data.pointId != ddz.Share.SharePointType.tongGuan) return;
        hall.LOGW("==", " file = [ddz_congratulation] fun = [updateButtonText] diamond = " + data.leftCount);
        var _shareType = ddz.Share.onShareType.clickStatShareTypeCongratulation;
        var titileS = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
        titileS = !data.leftCount || data.leftCount <= 0 ? "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle() + "</c>" : "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
        this.bottomBtnText.string = titileS;
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareTypeCongratulation) return;
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.tongGuan);
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      onClickCenterButton: function onClickCenterButton() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeCongratulation;
        ddz.Share.shareWithType(shareType);
      },
      shut: function shut() {
        this.removeSelfAni();
        ddz.matchResultPanel = null;
        this.node.destroy();
        ty.NotificationCenter.ignoreScope(this);
      },
      update: function update(dt) {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      },
      _onPreDestroy: function _onPreDestroy() {
        this._super();
        this.removeSelfAni();
      },
      removeSelfAni: function removeSelfAni() {
        this.resultTitle && this.resultTitle.removeFromParent();
        this.progress && this.progress.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_detail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ae4aYNLYlNqaemxR5Fc/Ba", "ddz_detail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        startButton: {
          default: null,
          type: cc.Button
        },
        titleLabel: {
          default: null,
          type: cc.Label
        },
        contentRich: {
          default: null,
          type: cc.RichText
        }
      },
      backAction: function backAction() {
        ddz.LOGD(null, "backAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        this.backButton.node.active = false;
        this.startButton.node.active = false;
        var sceneName = "Ddz";
        hall.GlobalFuncs.popScene();
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
      },
      onTopButtonAction: function onTopButtonAction() {
        this.backButton.node.active = false;
        this.startButton.node.active = false;
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          this.backButton.node.active = true;
          this.startButton.node.active = true;
          return;
        }
        ddz.matchModel.startMatchProgress();
        this.titleLabel.node.active = false;
        this.contentRich.node.active = false;
      },
      setActiveForFalse: function setActiveForFalse() {
        this.titleLabel.node.active = false;
        this.contentRich.node.active = false;
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_diamond_windows: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6e3a9dOPmFK44l7bdrY1dF8", "ddz_diamond_windows");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        banner: cc.Node,
        betRich: cc.RichText,
        shareRedPacket: cc.Prefab,
        panel: cc.Node,
        btnText: cc.RichText,
        personalAssets: cc.Node,
        diamondNode: cc.Node,
        videoNode: cc.Node,
        videoBtnSpr: cc.Sprite,
        diamondBntSpr: cc.Sprite,
        btnSpriteFrame: [ cc.SpriteFrame ],
        videoBtnText: cc.RichText,
        diamondBntText: cc.RichText,
        seeVideoBtn: cc.Button,
        shareBtn: cc.Button,
        videoButtonText: cc.RichText,
        redDot: cc.Node
      },
      onLoad: function onLoad() {
        var that = this;
        hall.GlobalFuncs.btnScaleEffect(this.shareBtn.node, 1.13);
        this.betRich.node.active = false;
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_WINDOW_ANI, this.onClose, this);
        var _shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondHall;
        this.btnText.string = "<color=#E54D42>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
        this.setPersonalAssets();
        this.canPlayVideo = true;
      },
      setPersonalAssets: function setPersonalAssets() {
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(type) {
        if (type && type != ddz.Share.onShareType.clickStatShareTypeGetDiamondHall) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      updateWindowInfo: function updateWindowInfo(state) {
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
        if (1 == state) {
          this.diamondBntSpr.spriteFrame = this.btnSpriteFrame[0];
          this.diamondBntText.string = "<color=#ffffff>钻石红包</c>";
          this.videoBtnSpr.spriteFrame = this.btnSpriteFrame[1];
          this.videoBtnText.string = "<color=#9C7343>看视频</color>";
          this.redDot.active = false;
        } else 2 == state;
      },
      onShareBtn: function onShareBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "diamondShare" ]);
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondHall);
      },
      updateWatchVideoState: function updateWatchVideoState(result) {
        this.adId = result.videoId;
        if (0 == result.status) {
          this.canPlayVideo = false;
          this.mail = result.mail;
          this.videoButtonText.string = "<color=#ED4824>看视频领取(" + result.times[0] + "/" + result.times[1] + ")</c>";
        } else if (1 == result.status) {
          this.videoButtonText.string = "<color=#ED4824>看视频领取(" + result.times[0] + "/" + result.times[1] + ")</c>";
          this.canPlayVideo = true;
        }
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        if (isEnded) {
          ddz.gameModel.getWatchVideoReward();
          ddz.gameModel.queryWatchVideoReward();
        }
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      finishGetRewardVideo: function finishGetRewardVideo(result) {
        if (result.rewards) {
          var rewards = result.rewards;
          "item:1311" == rewards.itemId ? ddz.GlobalFuncs.playZuanShi(false, this, rewards.count, false) : ddz.GlobalFuncs.playZuanShi(false, this, rewards.count, true);
        } else result.mail && hall.MsgBoxManager.showToast({
          title: result.mail
        });
        this.videoButtonText.string = "<color=#ED4824>看视频领取(" + result.times[0] + "/" + result.times[1] + ")</c>";
      },
      onClcikSeeVideoBtn: function onClcikSeeVideoBtn() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "diamond" ]);
        this.canPlayVideo ? hall.adManager.showRewardedVideo(this.adId, "diamond") : this.mail && hall.MsgBoxManager.showToast({
          title: this.mail
        });
      },
      onClickDiamondBtn: function onClickDiamondBtn() {
        this.updateWindowInfo(1);
      },
      onClickVideoBtn: function onClickVideoBtn() {
        this.updateWindowInfo(2);
      },
      updateShareInfo: function updateShareInfo(data) {
        data.newUserMulti && this.setBtnRichText(data.newUserMulti);
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_REWARD_COUNT, data);
        if (data.inviteeList && data.inviteeList.length > 0) {
          var that = this;
          var _index = 0;
          var _inviteeList = data.inviteeList;
          var runOneFun = function runOneFun() {
            if (_index < 5) {
              if (_inviteeList.length > 0) {
                var _playerData = _inviteeList.shift();
                if (that["shareRedPacket_" + _index]) {
                  var com = that["shareRedPacket_" + _index].getComponent("shareRedPacket");
                  com.setSharePeopleInfo(_playerData);
                } else {
                  that["shareRedPacket_" + _index] = cc.instantiate(that.shareRedPacket);
                  that.panel.addChild(that["shareRedPacket_" + _index]);
                  var com = that["shareRedPacket_" + _index].getComponent("shareRedPacket");
                  com.setSharePeopleInfo(_playerData);
                }
              }
            } else if (5 == _index && data.bigReward) if (that.bigWindow) {
              var com = that.bigWindow.getComponent("shareRedPacket");
              com && com.setBigReward(data.bigReward);
            } else {
              that.bigWindow = cc.instantiate(that.shareRedPacket);
              that.panel.addChild(that.bigWindow);
              var com = that.bigWindow.getComponent("shareRedPacket");
              com.setBigReward(data.bigReward);
            }
            _index++;
            requestAnimationFrame(runOneFun);
          };
          runOneFun();
        }
      },
      setBtnRichText: function setBtnRichText(_bet) {
        if (_bet > 1) {
          this.betRich.node.active = true;
          this.betRich.string = "<color=#9C7343>新玩家点击，可获得</c><color=#ED4824><size=30>" + _bet + "倍奖励</color>";
        } else this.betRich.node.active = false;
      },
      removeLoopAni: function removeLoopAni() {
        var ani = this.banner.getComponent(cc.Animation);
        ani.stop();
        this.seeVideoBtn.node.stopAllActions();
        this.shareBtn.node.stopAllActions();
      },
      shut: function shut() {
        this.removeLoopAni();
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").showAdNode();
      },
      onClose: function onClose() {
        this.shut();
        ddz.ddz_dayWelfare = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_fail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4ad6mbwTdO1oyX/HP+L7S+", "ddz_fail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._curGuangQia = 0;
      },
      properties: {
        resultTitle: {
          default: null,
          type: cc.Node
        },
        buttons: {
          default: null,
          type: cc.Node
        },
        numberlabel: {
          default: null,
          type: cc.RichText
        },
        noticelabel: {
          default: null,
          type: cc.RichText
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        restartButton: {
          default: null,
          type: cc.Button
        },
        adResurgenceTitle: "",
        diamondResurgenceTitle: "",
        windowBtnText: "",
        titleS: "使用",
        count: "1",
        isOnShare: false,
        conditionType: "",
        failCondition: null,
        toNext: false,
        requestCount: 1,
        nowCount: 0,
        adCount: 1,
        adIds: [],
        nowAdId: "",
        videoIcon: cc.Node,
        topButton: cc.Button,
        getDiamondIcon: cc.Node
      },
      backAction: function backAction() {
        ddz.LOGD(null, "backAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        this.removeAni();
        hall.GlobalFuncs.popScene();
      },
      onClickGetDiamondBtn: function onClickGetDiamondBtn() {
        hall.GlobalFuncs.onOfficialAccountGuide(true);
      },
      setDiamondCount: function setDiamondCount(guangQiaNum) {
        ddz.LOGD("", "file = [ddz_fail] fun = [setDiamondCount] guangQiaNum = " + guangQiaNum);
        var countNunber = hall.ME.udataInfo.diamondCount;
        var count = ddz.matchModel.getDiamondCountNeeded();
        if (count > 0) {
          this.noticelabel.node.active = true;
          this.noticelabel.string = "<color=#ffffff>使用 </c><img src='dda_button_diamond' height=34 width=42/><color=#ffffff> " + count + " 可继续挑战本关\n已有</color><img src='dda_button_diamond' height=34 width=42/><color=#ffffff> " + countNunber + "</color>";
        }
        this._curGuangQia = guangQiaNum;
        var window = this.resultTitle.getComponent("ddz_resultTitle");
        window.setTitle(this._curGuangQia, false);
        this.diamondResurgenceTitle = "分享";
        this.windowBtnText = "分享";
        var isHaveDiamond = false;
        if (countNunber >= count) {
          this.diamondResurgenceTitle = "<color=#ffffff>使用 </c><img src='dda_button_diamond' height=34 width=42/>";
          this.windowBtnText = "<color=#ffffff>使用 </c><img src='dda_button_diamond' height=34 width=42/>";
          isHaveDiamond = true;
        } else {
          var _config = ddz.gameModel.getCongratulationGetRewardJson();
          if (_config) {
            var shareConfig;
            shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity;
          }
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          if (shareConfig && null != shareConfig.fail && shareNumber >= shareConfig.fail) {
            this.titleS = "获取";
            hall.adManager.checkVideoAd();
            if (hall.adManager.canPlay) {
              this.diamondResurgenceTitle = "看广告得钻石";
              this.windowBtnText = "看广告得钻石";
            } else {
              this.diamondResurgenceTitle = "分享";
              this.windowBtnText = "分享";
              ddz.gameModel.checkShareReward(ddz.Share.SharePointType.failWindw);
            }
          } else {
            this.titleS = "获取";
            this.diamondResurgenceTitle = "分享";
            this.windowBtnText = "分享";
            ddz.gameModel.checkShareReward(ddz.Share.SharePointType.failSix);
            ddz.gameModel.checkShareReward(ddz.Share.SharePointType.failWindw);
          }
        }
        this.restartButton.node.active = true;
        this.numberlabel.node.active = false;
        var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
        if (this.adResurgenceTitle && "" != this.adResurgenceTitle) if (ddz.gameModel.isBringVersion) comBtnList.setButtonListWithButtons2([ {
          title: this.adResurgenceTitle,
          bottomType: 0,
          callFunc: this.resurgenceWithAd.bind(this)
        } ]); else {
          hall.adManager.checkVideoAd();
          if ("share" == this.conditionType) comBtnList.setButtonListWithButtons2([ {
            title: this.adResurgenceTitle,
            bottomType: 0,
            callFunc: this.resurgenceWithAd.bind(this)
          }, {
            title: this.diamondResurgenceTitle,
            bottomType: 1,
            callFunc: this.resurgenceWithDiamond.bind(this)
          } ]); else if (hall.adManager.canPlay) comBtnList.setButtonListWithButtons2([ {
            title: this.adResurgenceTitle,
            bottomType: 0,
            callFunc: this.resurgenceWithAd.bind(this)
          }, {
            title: this.diamondResurgenceTitle,
            bottomType: 1,
            callFunc: this.resurgenceWithDiamond.bind(this)
          } ]); else if (isHaveDiamond) comBtnList.setButtonListWithButtons2([ {
            title: this.diamondResurgenceTitle,
            bottomType: 1,
            callFunc: this.resurgenceWithDiamond.bind(this)
          } ]); else {
            comBtnList.setButtonListWithButtons2([ {
              title: "重新闯关",
              left: "ddz_table_again",
              bottomType: 0,
              callFunc: this.restartQuizAction.bind(this)
            } ]);
            this.restartButton.node.active = false;
          }
        } else {
          hall.adManager.checkVideoAd();
          if (hall.adManager.canPlay || isHaveDiamond) comBtnList.setButtonListWithButtons2([ {
            title: this.diamondResurgenceTitle,
            bottomType: 0,
            callFunc: this.resurgenceWithDiamond.bind(this)
          } ]); else {
            comBtnList.setButtonListWithButtons2([ {
              title: "重新闯关",
              left: "ddz_table_again",
              bottomType: 0,
              callFunc: this.restartQuizAction.bind(this)
            } ]);
            this.restartButton.node.active = false;
          }
        }
      },
      over: function over(guangQiaNum) {
        ddz.LOGD("", "file = [ddz_fail] fun = [over] guangQiaNum = " + guangQiaNum);
        this._curGuangQia = guangQiaNum;
        var window = this.resultTitle.getComponent("ddz_resultTitle");
        window.setTitle(this._curGuangQia, false);
        var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
        if (this.adResurgenceTitle && "" != this.adResurgenceTitle) {
          comBtnList.setButtonListWithButtons2([ {
            title: this.adResurgenceTitle,
            bottomType: 0,
            callFunc: this.resurgenceWithAd.bind(this)
          } ]);
          this.restartButton.node.active = true;
        } else {
          comBtnList.setButtonListWithButtons2([ {
            title: "重新闯关",
            left: "ddz_table_again",
            bottomType: 0,
            callFunc: this.restartQuizAction.bind(this)
          } ]);
          this.restartButton.node.active = false;
        }
        this.overed = true;
      },
      gameFlowOver: function gameFlowOver(guangQiaNum, tipsString) {
        ddz.LOGD("", "file = [ddz_fail] fun = [gameFlowOver] guangQiaNum = " + guangQiaNum);
        this.noticelabel.node.active = true;
        this.noticelabel.string = tipsString;
        this._curGuangQia = guangQiaNum;
        var window = this.resultTitle.getComponent("ddz_resultTitle");
        window.setTitle(this._curGuangQia, false);
        var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
        comBtnList.setButtonListWithButtons2([ {
          title: "重闯本关",
          left: "ddz_table_again",
          bottomType: 1,
          callFunc: this.gameFlowAction.bind(this)
        } ]);
        this.gameFlow = true;
      },
      resurgenceWithAd: function resurgenceWithAd() {
        hall.LOGW("====", "====resurgenceWithAd===");
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        if (this.isOnShare) return;
        this.isOnShare = true;
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if ("share" == this.conditionType) ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeRevial); else {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "failResurgence" ]);
          var adId = this.adIds[hall.GlobalFuncs.getRandomNumberBefore(this.adIds.length)];
          if (hall.adManager.canPlay) hall.adManager.showRewardedVideo(adId, "failResurgence"); else {
            var bc = ddz.gameModel.getBannerResurgenceConfigJson();
            if (bc) {
              ddz.GlobalFuncs.showBannerResurgenceWindow();
              this.isOnShare = false;
            } else hall.adManager.showRewardedVideo(adId, "failResurgence");
          }
        }
      },
      seeAdGetJiPaiQi: function seeAdGetJiPaiQi() {
        hall.LOGD("=====", "file = [ddz_fail] fun = [seeAdGetJiPaiQi] this.jipaiqiAdId = " + this.jipaiqiAdId);
        this.isGetJiPaiQi = true;
        hall.adManager.showRewardedVideo(this.jipaiqiAdId, "getJiPaiQi");
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "ddzFailGetJiPaiQi" ]);
      },
      getDiamondToRevival: function getDiamondToRevival() {
        ddz.Share.shareKeywordReplace.hadNumber = this.nowCount;
        var centerString = "";
        this.failCondition && this.failCondition.buttonText1 && (centerString = hall.GlobalFuncs.replaceKeyWordInString(this.failCondition.buttonText1));
        this.adResurgenceTitle = centerString;
        var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
        this.overed ? comBtnList.setBottomTextWithButton(this.adResurgenceTitle) : comBtnList.setTopTextWithButton(this.adResurgenceTitle);
        hall.LOGW("=====", "===================" + this.nowCount);
        if (this.nowCount >= this.requestCount) {
          if (this.toNext) {
            ddz.matchModel.matchBackNextLevel();
            return;
          }
          var needCount = ddz.matchModel.getDiamondCountNeeded();
          ddz.waitGetRevial = {
            type: "waitRecive",
            curCount: 0,
            needCount: needCount
          };
          var needCountR = ddz.waitGetRevial.needCount;
          for (var i = 0; i < needCountR; i++) ddz.gameModel.shareToGetreward(ddz.waitGetRevial.sharePoint || ddz.Share.SharePointType.firstFail);
        }
      },
      resurgenceWithDiamond: function resurgenceWithDiamond() {
        ddz.LOGD(null, "resurgenceWithDiamond");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        var countNunber = hall.ME.udataInfo.diamondCount;
        var count = ddz.matchModel.getDiamondCountNeeded();
        if (countNunber >= count) {
          ddz.matchModel.matchBack();
          ddz.GlobalFuncs.removeMatchResultPanel(this);
        } else this.getReward();
      },
      getReward: function getReward(isWindow) {
        var _config = ddz.gameModel.getCongratulationGetRewardJson();
        if (_config) {
          var shareConfig;
          shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity;
        }
        var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
        if (shareConfig && null != shareConfig.fail && shareNumber >= shareConfig.fail) {
          hall.adManager.checkVideoAd();
          hall.adManager.canPlay ? this.seeVideoGetReward() : isWindow ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondFailWindow) : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondFailSix);
        } else isWindow ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondFailWindow) : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondFailSix);
      },
      seeVideoGetReward: function seeVideoGetReward() {
        hall.LOGW("====", "====seeVideoGetReward===");
        this.isGetReward = true;
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "seeVideoGetReward", "fail" ]);
        hall.adManager.showRewardedVideo("", "getReward");
      },
      restartQuizAction: function restartQuizAction() {
        ddz.LOGD(null, "restartQuizAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (this._curGuangQia > 0) this.addTipsWindow(); else {
          if (ddz.matchModel.checkOldVersion() && 0 == this._curGuangQia) ddz.matchModel.matchSignin(); else {
            ddz.matchModel.waitSignin = true;
            ddz.matchModel.matchGiveUp();
          }
          ddz.GlobalFuncs.removeMatchResultPanel(this);
        }
      },
      gameFlowAction: function gameFlowAction() {
        ddz.matchModel.matchChallenge();
        ddz.GlobalFuncs.removeMatchResultPanel(this);
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.restartButton.node.active = false;
        this.numberlabel.node.active = false;
        this.noticelabel.node.active = false;
        this.isOnShare = false;
        ddz.AudioHelper.playMusic("/resources/sound/Failure.mp3", false);
        var matchCondition = ddz.GlobalFuncs.getFailCondition("match", ddz.GlobalFuncs.checkFailCount("match"));
        ddz.LOGD("file = [ddz_fail] fun = [onLoad] matchCondition = " + JSON.stringify(matchCondition));
        if (matchCondition) {
          this.failCondition = matchCondition;
          this.toNext = matchCondition.resurgenceCondition.toNext;
          this.conditionType = matchCondition.resurgenceCondition.conditionType;
          this.requestCount = matchCondition.resurgenceCondition.requestCount;
          ddz.Share.shareKeywordReplace.repeatNumber = this.requestCount;
          this.nowCount = 0;
          ddz.Share.shareKeywordReplace.hadNumber = this.nowCount;
          this.adIds = matchCondition.resurgenceCondition.adIds;
          matchCondition.resurgenceCondition.requestCount > 1 && -1 == matchCondition.buttonText1.indexOf("hadNumber/repeatNumber") && (matchCondition.buttonText1 += "(hadNumber/repeatNumber)");
          var centerString = hall.GlobalFuncs.replaceKeyWordInString(matchCondition.buttonText1);
          this.adResurgenceTitle = centerString;
          hall.GlobalFuncs.btnScaleEffect(this.topButton.node, 1.13);
          var bc = ddz.gameModel.getBannerResurgenceConfigJson();
          if (bc) {
            hall.adManager.checkVideoAd();
            if (!hall.adManager.canPlay && centerString.indexOf("观看广告") >= 0) {
              var _toNext = matchCondition.resurgenceCondition.toNext;
              this.adResurgenceTitle = "观看广告复活";
              _toNext && (this.adResurgenceTitle = "观看广告晋级");
            }
          }
        }
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_ALL_MATCH_RESULT_PANEL, this.shut, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE_ERROR, this.errorShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_DIAMOND_NUMBER, this.updateDiamond, this);
        var winSize = cc.director.getWinSize();
        this.jipaiqiAdId = "adunit-8bde7ac62d379503";
        this.isGetJiPaiQi = false;
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.addApplet);
      },
      updateDiamond: function updateDiamond() {
        var gindex = ddz.matchModel.getStageIndex() - 1;
        this.setDiamondCount(gindex);
      },
      showResults: function showResults(isShow) {
        this.node.active = isShow;
        if (isShow) {
          hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
          ty.NotificationCenter.trigger(ty.EventType.CREATE_TABLE_AD);
        }
        if (isShow && !ty.UserInfo.isInBSGS && 0 == ddz.gameModel.throughCount) {
          var bc = ddz.gameModel.getSkipCustomsConfigJson();
          bc && bc.newCustoms > 0 && hall.GlobalFuncs.onSkipCustom(1);
        }
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        hall.LOGW("=====", "file = [ddz_fail] fun = [finishShowRewardVideo]" + isEnded);
        if (this.isGetReward) {
          var sharePoint = hall.GlobalFuncs.getSharePoint(ddz.Share.onShareType.clickStatShareTypeGetDiamondFailSix);
          ddz.gameModel.shareToGetreward(sharePoint);
          var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
          hall.adManager.checkVideoAd();
          hall.adManager.canPlay || comBtnList.hideBottomBtn(false);
          this.isGetReward = false;
        } else if (this.isGetJiPaiQi) {
          isEnded && (ddz.gameModel.firstUseJiPaiQiPoint > 0 ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstUseJiPaiQi) : ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.adGetJiPaiQi));
          this.isGetJiPaiQi = false;
        } else {
          this.isOnShare = false;
          if (isEnded) {
            this.nowCount++;
            this.getDiamondToRevival();
          }
        }
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        hall.LOGW("=====", "file = [ddz_fail] fun = [errorShowRewardVideo]");
        this.isOnShare = false;
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        this.isOnShare = false;
        var reultType = ddz.Share.resultType;
        if (shareType == ddz.Share.onShareType.clickStatShareTypeGetDiamondFailSix) {
          ddz.gameModel.checkShareReward(ddz.Share.SharePointType.failSix);
          switch (reultType) {
           case 1:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请分享到微信群哦~"
            });
            break;

           case 2:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请不要频繁分享到一个群~"
            });
          }
          ddz.Share.resultType = 0;
        } else if (shareType == ddz.Share.onShareType.clickStatShareTypeRevial) {
          switch (reultType) {
           case 1:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请分享到微信群哦~"
            });
            break;

           case 2:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请不要频繁分享到一个群~"
            });
            break;

           case 3:
            this.nowCount++;
          }
          ddz.Share.resultType = 0;
          this.getDiamondToRevival();
        } else if (shareType == ddz.Share.onShareType.clickStatShareTypeGetDiamondFail) {
          reultType > 0 && hall.MsgBoxManager.showToast({
            title: "群友点入获得钻石，使用钻石可复活!"
          });
          ddz.Share.resultType = 0;
        } else if (shareType == ddz.Share.onShareType.clickStatShareTypeGetDiamondFailWindow) {
          ddz.gameModel.checkShareReward(ddz.Share.SharePointType.failWindw);
          switch (reultType) {
           case 1:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请分享到微信群哦~"
            });
            break;

           case 2:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请不要频繁分享到一个群~"
            });
          }
          ddz.Share.resultType = 0;
        }
      },
      updateButtonText: function updateButtonText(data) {
        if (data.pointId == ddz.Share.SharePointType.failSix) {
          var _config = ddz.gameModel.getCongratulationGetRewardJson();
          if (_config) {
            var shareConfig;
            shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity;
          }
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          if (shareConfig && null != shareConfig.fail && shareNumber >= shareConfig.fail) return;
          var _shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondFailSix;
          var titileS = "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</color>";
          titileS = !data.leftCount || data.leftCount <= 0 ? "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle() + "</color>" : "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</color>";
          this.diamondResurgenceTitle = titileS;
          var comBtnList = this.buttons.getComponent("ddz_buttonList_2");
          comBtnList.setBottomTextWithButton(this.diamondResurgenceTitle);
          this.adResurgenceTitle && "" != this.adResurgenceTitle || ddz.gameModel.isBringVersion && comBtnList.hideBottomBtn(false);
        } else if (data.pointId == ddz.Share.SharePointType.addApplet) if (data.leftCount && data.leftCount > 0 && ddz.GlobalFuncs.judgeweChatVersion()) {
          this.getDiamondIcon.active = true;
          var ani = this.getDiamondIcon.getComponent(cc.Animation);
          ani.play("getdiamond_ani");
        } else this.getDiamondIcon.active = false; else if (data.pointId == ddz.Share.SharePointType.failWindw) {
          var _config = ddz.gameModel.getCongratulationGetRewardJson();
          if (_config) {
            var shareConfig;
            shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity;
          }
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          if (shareConfig && null != shareConfig.fail && shareNumber >= shareConfig.fail) return;
          var _shareType = ddz.Share.onShareType.clickStatShareTypeGetDiamondFailWindow;
          var titileS = "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</color>";
          titileS = !data.leftCount || data.leftCount <= 0 ? "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle() + "</color>" : "<color=#ffffff>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</color>";
          this.windowBtnText = titileS;
        }
      },
      addTipsWindow: function addTipsWindow() {
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        var countNunber = hall.ME.udataInfo.diamondCount;
        var count = ddz.matchModel.getDiamondCountNeeded();
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: "重闯第一关",
            bottomType: 0
          }, {
            title: that.titleS,
            right: "dda_button_diamond",
            bottomType: 1
          } ];
          var tips = "<color=#1A6951>使用 </c><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + count + " 可继续挑战本关\n已有</color><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + countNunber + "</color>";
          window.setTitleContentAndButtons("提示", tips, testArray);
          window.setRightBtnText(that.windowBtnText);
        });
      },
      onClickLeftButton: function onClickLeftButton() {
        ddz.matchModel.waitSignin = true;
        ddz.matchModel.matchGiveUp();
        ddz.GlobalFuncs.removeMatchResultPanel(this);
      },
      onClickRightButton: function onClickRightButton() {
        var countNunber = hall.ME.udataInfo.diamondCount;
        var count = ddz.matchModel.getDiamondCountNeeded();
        if (countNunber >= count) {
          ddz.matchModel.matchBack();
          ddz.GlobalFuncs.removeMatchResultPanel(this);
        } else this.getReward(true);
      },
      shut: function shut() {
        ddz.matchResultPanel = null;
        this.topButton.node.stopAllActions();
        this.removeAni();
        this.node.destroy();
      },
      _onPreDestroy: function _onPreDestroy() {
        this._super();
        this.removeAni();
      },
      removeAni: function removeAni() {
        this.resultTitle && this.resultTitle.removeFromParent();
        var ani_2 = this.getDiamondIcon.getComponent(cc.Animation);
        ani_2.stop();
        this.getDiamondIcon.removeFromParent();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.adManager.destroyWidthBannerAd();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").hideAdNode();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_gameDetail_cell: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b894aWIy8tOh7/ialb2cOIA", "ddz_gameDetail_cell");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "ddz_gameDetail_cell";
      },
      properties: {
        numLabel: cc.Label,
        scoreLable_1: cc.Label,
        scoreLable_2: cc.Label,
        scoreLable_3: cc.Label
      },
      updateinfo: function updateinfo(_num, myIndex, info) {
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        this.numLabel.string = _num + "";
        if (info) {
          this["scoreLable_1"].string = info[myIndex - 1] > 0 ? "+" + info[myIndex - 1] : info[myIndex - 1];
          this["scoreLable_2"].string = info[rightindex - 1] > 0 ? "+" + info[rightindex - 1] : info[rightindex - 1];
          this["scoreLable_3"].string = info[leftindex - 1] > 0 ? "+" + info[leftindex - 1] : info[leftindex - 1];
        } else {
          this["scoreLable_1"].string = "--";
          this["scoreLable_2"].string = "--";
          this["scoreLable_3"].string = "--";
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_gameTasks: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18771E7XfVA47mFZTkV2+1u", "ddz_gameTasks");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tasksBg: {
          default: null,
          type: cc.Sprite
        },
        tasksRich: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.MSG_TBOX_GETREWARD, this.playSuccessAni, this);
      },
      updateProgress: function updateProgress(curCount, totalCount, roomId) {
        if (curCount < totalCount) {
          var str = "<color=#ffffff>第" + curCount + "/" + totalCount + "局</color>";
          this.playSuccessAni(str);
        } else curCount == totalCount && totalCount > 0 ? ddz.MsgFactory.getTboxReward(roomId) : curCount > totalCount && ddz.MsgFactory.getTboxReward(roomId);
      },
      playSuccessAni: function playSuccessAni(_info) {
        this.setTaskRich(_info);
        var ani = this.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        var that = this;
        anim.once("finished", function() {
          ty.Timer.setTimer(that, function() {
            var clipName_2 = ani.getClips()[1].name;
            var anim_2 = ani.getAnimationState(clipName_2);
            anim_2.play();
            anim_2.once("finished", function() {
              that.node.destroy();
            });
          }, 2, 0, 0);
        });
        anim.play();
      },
      setTaskRich: function setTaskRich(str) {
        this.tasksRich.string = str;
        var _size = this.tasksRich.node.getContentSize();
        var tSize = this.tasksBg.node.getContentSize();
        tSize.width = _size.width + 64;
        this.tasksBg.node.setContentSize(tSize);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_game_result_through: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "607b2Tr9jRH5ouP+hmJ/GEM", "ddz_game_result_through");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        betLabel_1: {
          default: null,
          type: cc.Label
        },
        betLabel_2: {
          default: null,
          type: cc.Label
        },
        betLabel_3: {
          default: null,
          type: cc.Label
        },
        betLabel_win: {
          default: null,
          type: cc.Label
        },
        betLabel_lose: {
          default: null,
          type: cc.Label
        },
        tipsRich: {
          default: null,
          type: cc.RichText
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        scoreGoldSprite: {
          default: null,
          type: cc.Sprite
        },
        winNode: cc.Node,
        failNode: cc.Node,
        winLabel: cc.Label,
        failLabel: cc.Label,
        nextBtn: cc.Button,
        shareButton: cc.Button,
        nextBtnLabel: cc.RichText,
        timeNumber: 5,
        shareType: "",
        shareData: "",
        lizi01: cc.Node,
        lizi02: cc.Node,
        lizi03: cc.Node,
        lizi04: cc.Node,
        jiesuanguodu: cc.Node,
        betLabel: cc.Label,
        bottomNode: cc.Node
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.onGetRewardCount, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playResurtBanner();
      },
      playResurtBanner: function playResurtBanner(bc) {
        var winnerCount = ddz.matchModel.getCurWinnerCount();
        bc.start ? winnerCount >= bc.start && hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489") : hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
      },
      onGetRewardCount: function onGetRewardCount(val) {
        var that = this;
        if (val.pointId != ddz.Share.SharePointType.alms) return;
        if (val.leftCount > 0) {
          var almsConfig = ddz.gameModel.getAlmsConfigJson();
          var cityKey = ty.UserInfo.isInBSGS ? "bsgsCity" : "otherCity";
          var par = almsConfig[cityKey];
          if (ddz.almsWindow) {
            ddz.almsWindow.initWithPar(par);
            return;
          }
          hall.GlobalFuncs.showPopWinByPreFab("prefabs/ddz_window_alms", function(preFabNode) {
            ddz.almsWindow = preFabNode.getComponent("AlmsWindow");
            ddz.almsWindow.initWithPar(par);
          });
        }
      },
      setTableScene: function setTableScene(tableScene) {
        this._tableScene = tableScene;
      },
      onRemoveAni: function onRemoveAni() {
        var ani = this.jiesuanguodu.getComponent(cc.Animation);
        var anim_1 = ani.getAnimationState("jiesuanguodu01");
        anim_1 && anim_1.stop();
      },
      nextBtnAction: function nextBtnAction() {
        hall.adManager.destroyWidthBannerAd();
        ddz.gameResultPanel = null;
        var anim = this.winNode.getComponent(cc.Animation);
        anim.stop();
        var anim2 = this.failNode.getComponent(cc.Animation);
        anim2.stop();
        this._tableScene._reset();
        this.node.stopAllActions();
        if (this.box_share && this.box_share.boxId && "" != this.box_share.boxId) {
          ddz.Share.shareKeywordReplace.inviteTreasureID = this.box_share.boxId;
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeEndGiveProp, [ this.box_share.boxId ]);
          this.bottomNode.active = false;
          this.jiesuanguodu.active = true;
          var that = this;
          if ("春天宝箱" == this.box_share.desc) {
            that.node.active = false;
            hall.GlobalFuncs.onTreasureBox(that.box_share, that.windoubles);
            that.jiesuanguodu.active = false;
          } else {
            var ani = this.jiesuanguodu.getComponent(cc.Animation);
            var anim1 = ani.getAnimationState("jiesuanguodu01");
            anim1.once("finished", function() {
              that.node.active = false;
              hall.GlobalFuncs.onTreasureBox(that.box_share, that.windoubles);
              that.jiesuanguodu.active = false;
            });
            anim1.play();
          }
        } else {
          this.node.active = false;
          ddz.matchResultPanel && ddz.matchResultPanel.showResults(true);
        }
      },
      backAction: function backAction() {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var tableinfo = this._tableScene.tableInfo();
        var _mixID = tableinfo.mixId;
        ddz.gameResultPanel = null;
        ddz.MsgFactory.getRoomLeave(tableinfo.roomId(), tableinfo.tableId(), this._tableScene._mySeatIndex, _mixID);
      },
      show: function show(result) {
        ddz.LOGD("", "file = [ddz_]");
        var mySeatIndex = result.mySeatIndex;
        var dizhuWin = 1 == result.dizhuwin;
        var isWin = false;
        this.box_share = result["box_share"];
        this.windoubles = result["windoubles"];
        isWin = mySeatIndex == result.stat.dizhu ? dizhuWin : !dizhuWin;
        ty.NotificationCenter.trigger(ddz.EventType.CLOSE_BETBOXABSTRACT);
        var mySeatInfo = result["seat" + mySeatIndex];
        var delta = mySeatInfo[0];
        var anim;
        if (isWin) {
          this.winNode.active = true;
          this.failNode.active = false;
          anim = this.winNode.getComponent(cc.Animation);
          anim.play("winTitle");
          this.betLabel_win.node.active = true;
          this.betLabel_lose.node.active = false;
          this.tipsRich.node.active = true;
          this.tipsRich.string = "<color=#ffffff><size=30>获得奖励 </color><img src = 'ddz_coin_white'/><color=#ffffff><size=48> " + result.winChip + "</color><color=#ffffff><size=24> (" + result.windoubles + "倍*" + result.roomMutil + ")</color>";
        } else {
          this.winNode.active = false;
          this.failNode.active = true;
          this.tipsRich.node.active = false;
          anim = this.failNode.getComponent(cc.Animation);
          anim.play("loseTitle");
          this.betLabel_win.node.active = false;
          this.betLabel_lose.node.active = true;
        }
        var call = result.stat.call;
        var bc = result.stat.bomb;
        bc = Math.pow(2, bc);
        var chuntian = result.stat.chuntian;
        this.betLabel_1.string = call + "倍";
        this.betLabel_2.string = bc > 1 ? parseInt(bc) + "倍" : "--";
        this.betLabel_3.string = chuntian > 1 ? chuntian + "倍" : "--";
        this.betLabel_win.string = parseInt(call * bc * chuntian) + "倍";
        this.betLabel_lose.string = parseInt(call * bc * chuntian) + "倍";
        this.betLabel.string = parseInt(call * bc * chuntian) + "倍";
        this.node.active = true;
        this.bottomNode.active = true;
        this.lizi01.getComponent("cc.ParticleSystem").resetSystem();
        this.lizi02.getComponent("cc.ParticleSystem").resetSystem();
        this.lizi03.getComponent("cc.ParticleSystem").resetSystem();
        this.lizi04.getComponent("cc.ParticleSystem").resetSystem();
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playResurtBanner();
        ddz.gameResultPanel = this;
        this.nextBtnLabel.string = "<color=#B3B3B3>点击屏幕任意位置继续  5</color>";
        this.updateNextBtnLabel();
        this.shareButton.node.active = false;
        this.shareType = "";
      },
      updateNextBtnLabel: function updateNextBtnLabel() {
        var tiemr = 10;
        this.node.stopAllActions();
        var that = this;
        var callFunc = function callFunc() {
          tiemr--;
          tiemr > 0 ? that.nextBtnLabel.string = "<color=#B3B3B3>点击屏幕任意位置继续  " + tiemr + "</color>" : that.nextBtnAction();
          that.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(callFunc, this)));
        };
        callFunc();
      },
      callBackFun: function callBackFun() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this._tableScene = null;
        ddz.gameResultPanel = null;
        ddz.almsWindow = null;
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_game_result: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32aadzLQ0lJ4p/0rzqAO66S", "ddz_game_result");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        betLabel_1: {
          default: null,
          type: cc.Label
        },
        betLabel_2: {
          default: null,
          type: cc.Label
        },
        betLabel_3: {
          default: null,
          type: cc.Label
        },
        betLabel_4: {
          default: null,
          type: cc.Label
        },
        tipsRich: {
          default: null,
          type: cc.RichText
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        scoreGoldSprite: {
          default: null,
          type: cc.Sprite
        },
        winNode: cc.Node,
        failNode: cc.Node,
        winLabel: cc.Label,
        failLabel: cc.Label,
        nextBtn: cc.Button,
        shareButton: cc.Button,
        nextBtnLabel: cc.RichText,
        timeNumber: 5,
        shareType: "",
        shareData: ""
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.onGetRewardCount, this);
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playResurtBanner();
      },
      playResurtBanner: function playResurtBanner(bc) {
        var winnerCount = ddz.matchModel.getCurWinnerCount();
        bc.start ? winnerCount >= bc.start && hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489") : hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
      },
      onGetRewardCount: function onGetRewardCount(val) {
        var that = this;
        if (val.pointId != ddz.Share.SharePointType.alms) return;
        if (val.leftCount > 0) {
          var almsConfig = ddz.gameModel.getAlmsConfigJson();
          var cityKey = ty.UserInfo.isInBSGS ? "bsgsCity" : "otherCity";
          var par = almsConfig[cityKey];
          if (ddz.almsWindow) {
            ddz.almsWindow.initWithPar(par);
            return;
          }
          hall.GlobalFuncs.showPopWinByPreFab("prefabs/ddz_window_alms", function(preFabNode) {
            ddz.almsWindow = preFabNode.getComponent("AlmsWindow");
            ddz.almsWindow.initWithPar(par);
          });
        }
      },
      setTableScene: function setTableScene(tableScene) {
        this._tableScene = tableScene;
      },
      nextBtnAction: function nextBtnAction(event, type) {
        if (this._tableScene._friendPanel) {
          var tableInfo = this._tableScene.tableInfo();
          var mySeatIndex = this._tableScene._mySeatIndex;
          ddz.MsgFactory.getReady(tableInfo.roomId(), tableInfo.tableId(), mySeatIndex);
          ty.Timer.cancelTimer(this, this.callBackFun);
          this.node.active = false;
          hall.adManager.destroyWidthBannerAd();
          ddz.gameResultPanel = null;
          var anim = this.winNode.getComponent(cc.Animation);
          anim.stop();
          var anim2 = this.failNode.getComponent(cc.Animation);
          anim2.stop();
          return;
        }
        if ("next1" == type && "" != this.shareType) {
          ddz.GlobalFuncs.showShareMomentsItem(this.shareType, this.shareData);
          return;
        }
        var playModel = this._tableScene.tableInfo().playMode;
        var _mixID = this._tableScene.tableInfo().mixId;
        hall.MsgFactory.getQuickStart(ty.UserInfo.userId, ddz.GameId, ddz.quickStartModel.getRoomId(), hall.staticSystemInfo.version, null, null, null, null, _mixID, playModel);
        this.node.active = false;
        hall.adManager.destroyWidthBannerAd();
        ddz.gameResultPanel = null;
        var anim = this.winNode.getComponent(cc.Animation);
        anim.stop();
        var anim2 = this.failNode.getComponent(cc.Animation);
        anim2.stop();
        this._tableScene._reset();
      },
      backAction: function backAction() {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var tableinfo = this._tableScene.tableInfo();
        var _mixID = tableinfo.mixId;
        ddz.gameResultPanel = null;
        ddz.MsgFactory.getRoomLeave(tableinfo.roomId(), tableinfo.tableId(), this._tableScene._mySeatIndex, _mixID);
      },
      show: function show(result) {
        this.backButton.node.active = true;
        var mySeatIndex = result.mySeatIndex;
        var dizhuWin = 1 == result.dizhuwin;
        var isWin = false;
        isWin = mySeatIndex == result.stat.dizhu ? dizhuWin : !dizhuWin;
        var mySeatInfo = result["seat" + mySeatIndex];
        var delta = mySeatInfo[0];
        var deltaAll = mySeatInfo[12];
        delta > 0 && (delta = "+" + delta);
        this.scoreGoldSprite.node.active = true;
        var anim;
        if (isWin) {
          this.winNode.active = true;
          this.failNode.active = false;
          this.winLabel.node.active = true;
          this.winLabel.string = delta;
          this.failLabel.node.active = false;
          anim = this.winNode.getComponent(cc.Animation);
          anim.play("winTitle");
        } else {
          this.winNode.active = false;
          this.failNode.active = true;
          this.winLabel.node.active = false;
          this.failLabel.node.active = true;
          this.failLabel.string = delta;
          anim = this.failNode.getComponent(cc.Animation);
          anim.play("loseTitle");
          if (!result.winShare && !result.loseShare) {
            var chip = hall.ME.getChip();
            chip < 1e3 && ddz.gameModel.checkShareReward(ddz.Share.SharePointType.alms);
          }
        }
        var notice = "";
        if ("新手场" != this._tableScene.tableInfo().roomName && delta != deltaAll) if (isWin) notice = "<color=#ffffff>因开局时你有 </color><img src = 'ddz_coin_white'/><color=#ffffff> " + delta + "，所以本局最多赢" + delta + "</color>"; else {
          delta = -delta;
          notice = "<color=#ffffff>因开局时对手有 </color><img src = 'ddz_coin_white'/><color=#ffffff> " + delta + "，所以本局最多输" + delta + "</color>";
        }
        this.tipsRich.string = notice;
        var call = result.stat.call;
        var bc = result.stat.bomb;
        bc = Math.pow(2, bc);
        var chuntian = result.stat.chuntian;
        this.betLabel_1.string = call + "倍";
        this.betLabel_2.string = bc > 1 ? parseInt(bc) + "倍" : "--";
        this.betLabel_3.string = chuntian > 1 ? chuntian + "倍" : "--";
        this.betLabel_4.string = parseInt(call * bc * chuntian) + "倍";
        this.node.active = true;
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playResurtBanner();
        ddz.gameResultPanel = this;
        if (result.currWinDoubles) {
          this.nextBtnLabel.string = "<color=#ffffff>分享战绩</color>";
          this.shareButton.node.active = true;
          result.currWinDoubles.isChunTian ? this.shareType = "showy_spring" : this.shareType = "showy_highPower";
          this.shareData = result.currWinDoubles;
          var bottomNode = this.node.getChildByName("bottomNode");
          ddz.haveBanner ? bottomNode.y = -468 : bottomNode.y = -568;
        } else {
          this.nextBtnLabel.string = "<color=#ffffff>下一局</color>";
          this.shareButton.node.active = false;
          this.shareType = "";
          var bottomNode = this.node.getChildByName("bottomNode");
          ddz.haveBanner ? bottomNode.y = -518 : bottomNode.y = -568;
        }
      },
      showFtResult: function showFtResult(result, showNext) {
        this.shareType = "";
        if (0 == result.stat.dizhu) {
          this.nextBtnAction();
          return;
        }
        this.backButton.node.active = false;
        var tableInfo = this._tableScene.tableInfo();
        var mySeatIndex = this._tableScene._mySeatIndex;
        var dizhuWin = 1 == result.dizhuwin;
        var isWin = false;
        isWin = mySeatIndex == result.stat.dizhu ? dizhuWin : !dizhuWin;
        var mySeatInfo = result["seat" + mySeatIndex];
        var delta = mySeatInfo[0];
        var deltaAll = mySeatInfo[12];
        delta > 0 && (delta = "+" + delta);
        this.winLabel.x = 0;
        this.failLabel.x = 0;
        if (isWin) {
          this.winNode.active = true;
          this.failNode.active = false;
          this.winLabel.node.active = true;
          this.failLabel.node.active = false;
          this.winLabel.string = "分 " + delta;
          var anim = this.winNode.getComponent(cc.Animation);
          anim.play("winTitle");
        } else {
          this.winNode.active = false;
          this.failNode.active = true;
          this.winLabel.node.active = false;
          this.failLabel.node.active = true;
          this.failLabel.string = "分 " + delta;
          var anim = this.failNode.getComponent(cc.Animation);
          anim.play("loseTitle");
        }
        this.scoreGoldSprite.node.active = false;
        var call = result.stat.call;
        var bc = result.stat.bomb;
        bc = Math.pow(2, bc);
        var chuntian = result.stat.chuntian;
        this.betLabel_1.string = call + "倍";
        this.betLabel_2.string = bc > 1 ? parseInt(bc) + "倍" : "--";
        this.betLabel_3.string = chuntian > 1 ? chuntian + "倍" : "--";
        this.betLabel_4.string = parseInt(call * bc * chuntian) + "倍";
        this.node.active = true;
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        bc && this.playResurtBanner();
        ddz.gameResultPanel = this;
        if (showNext) {
          this.nextBtn.node.active = true;
          this.timeNumber = 5;
          this.nextBtnLabel.string = "继续(" + this.timeNumber + ")";
          ty.Timer.setTimer(this, this.callBackFun, 1);
        } else this.nextBtn.node.active = false;
      },
      callBackFun: function callBackFun() {
        var tableInfo = this._tableScene.tableInfo();
        var mySeatIndex = this._tableScene._mySeatIndex;
        this.timeNumber--;
        if (this.timeNumber <= -1) {
          ddz.MsgFactory.getReady(tableInfo.roomId(), tableInfo.tableId(), mySeatIndex);
          ty.Timer.cancelTimer(this, this.callBackFun);
          this.node.active = false;
          hall.adManager.destroyWidthBannerAd();
          ddz.gameResultPanel = null;
          var anim = this.winNode.getComponent(cc.Animation);
          anim.stop();
          var anim2 = this.failNode.getComponent(cc.Animation);
          anim2.stop();
        }
        this.nextBtnLabel.string = "继续(" + this.timeNumber + ")";
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this._tableScene = null;
        ddz.gameResultPanel = null;
        ddz.almsWindow = null;
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_getRedPacket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "233820AC19IfYenUZJNDEJQ", "ddz_getRedPacket");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ddz_redpacket: {
          default: null,
          type: cc.Node
        },
        shareButton: {
          default: null,
          type: cc.Button
        },
        shareLabel: {
          default: null,
          type: cc.Label
        },
        buttonText: {
          default: null,
          type: cc.RichText
        },
        numberString: ""
      },
      setRedPacketNumber: function setRedPacketNumber(numberString, buttonString) {
        this.numberString = numberString + "";
        var window = this.ddz_redpacket.getComponent("ddz_redPacket");
        window.setRedPacketNumber(this.numberString);
        buttonString && (this.shareLabel.string = buttonString);
      },
      onShareButton: function onShareButton(event) {
        ddz.LOGD(null, "onShareButton");
        var shareType = ddz.Share.onShareType.clickStatShareTypeWithDraw;
        ddz.Share.shareWithType(shareType);
      },
      getDiamond: function getDiamond() {
        hall.LOGW("==", " file = [ddz_getRedPacket] fun = [getDiamond] ");
        ddz.GlobalFuncs.playZuanShi(true);
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareTypeWithDraw) return;
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.redPacket);
      },
      addTipsWindow: function addTipsWindow(tips, timer) {
        var _shareType = ddz.Share.onShareType.clickStatShareTypeWithDraw;
        var _string = hall.GlobalFuncs.getButtonTitle(_shareType);
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: _string,
            bottomType: 0
          } ];
          window.setTitleContentAndButtons("提示", tips, testArray);
          timer && timer > 0 && window.updatePos(timer);
        });
      },
      onClickCenterButton: function onClickCenterButton() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeWithDraw;
        ddz.Share.shareWithType(shareType);
      },
      updateButtonText: function updateButtonText(data) {
        hall.LOGW("==", " file = [ddz_getRedPacket] fun = [updateButtonText] diamond = " + data.leftCount);
        if (data.pointId != ddz.Share.SharePointType.redPacket) return;
        var _shareType = ddz.Share.onShareType.clickStatShareTypeWithDraw;
        !data.leftCount || data.leftCount <= 0 ? this.buttonText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle() + "</c>" : this.buttonText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
      },
      onLoad: function onLoad() {
        this.shareButton.node.on("click", this.onShareButton, this);
        ty.NotificationCenter.listen(ty.EventType.GET_DIAMOND, this.getDiamond, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.redPacket);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_getRewardHistory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "325fdAIpL1BZYYN2kJIDM27", "ddz_getRewardHistory");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          default: null,
          type: cc.Label
        },
        numberLabel: {
          default: null,
          type: cc.Label
        },
        getRewardType: 1,
        lossMoney: {
          default: null,
          type: cc.RichText
        }
      },
      setInformationWithTotalAndLoss: function setInformationWithTotalAndLoss() {
        ddz.LOGD("", "file = [ddz_getRewardHistory] fun = [setInformationWithTotalAndLoss]");
        var couponCount = hall.ME.udataInfo.m_couponCount;
        var exchangedCoupon = hall.ME.udataInfo.m_exchangedCoupon;
        this.numberLabel.string = hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount + exchangedCoupon);
        var lossMo = hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount);
        var richString = "<color=#9C7343>账户可用余额：</c><color=#9C7343>" + lossMo + "</color>";
        this.lossMoney.string = richString;
      },
      onLoad: function onLoad() {
        this.setInformationWithTotalAndLoss();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_getReward_Withdraw: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01476FhWcVJ+qCmQpYYhBLj", "ddz_getReward_Withdraw");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        lossMoneyString: "0",
        drawMoeyString: "0",
        oldMoneyString: "0",
        numberEditBox: {
          default: null,
          type: cc.EditBox
        },
        lossMoneyLabel: {
          default: null,
          type: cc.Label
        },
        allButton: {
          default: null,
          type: cc.Button
        },
        tipsText: {
          default: null,
          type: cc.RichText
        }
      },
      setLossMoneyNumber: function setLossMoneyNumber() {
        var couponCount = hall.ME.udataInfo.m_couponCount;
        var lossMoneyString;
        lossMoneyString = couponCount ? hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount) : "0.00";
        this.lossMoneyLabel.string = "账户可用余额" + lossMoneyString + "元，";
        this.lossMoneyString = lossMoneyString;
        this.oldMoneyString = "0.00";
        this.drawMoeyString = this.oldMoneyString;
        this.numberEditBox.string = this.drawMoeyString;
      },
      setTipsString: function setTipsString(tipsString) {
        this.tipsText.string = tipsString;
      },
      onAllButton: function onAllButton() {
        this.oldMoneyString = parseFloat(this.lossMoneyString).toFixed(2) + "";
        this.drawMoeyString = this.oldMoneyString;
        this.numberEditBox.string = this.drawMoeyString;
      },
      onLoad: function onLoad() {
        this.oldMoneyString = "0.00";
        this.drawMoeyString = this.oldMoneyString;
        this.numberEditBox.string = this.drawMoeyString;
        this.numberEditBox.node.on("text-changed", this.numberEditChange, this);
        this.numberEditBox.node.on("editing-did-ended", this.numberEditEnd, this);
        this.allButton.node.on("click", this.onAllButton, this);
        ty.NotificationCenter.listen(ddz.EventType.SET_LOSS_MONEY_NUMBER, this.setLossMoneyNumber, this);
        this.setLossMoneyNumber();
      },
      numberEditChange: function numberEditChange(event) {
        var changedString = event.detail.string;
        var nowNumber = parseFloat(changedString).toFixed(2);
        (!changedString || changedString.length < 1 || NaN == changedString) && (nowNumber = 0);
        this.oldMoneyString = nowNumber + "";
        this.drawMoeyString = this.oldMoneyString;
        this.numberEditBox.string = this.drawMoeyString;
      },
      numberEditEnd: function numberEditEnd(event) {
        var changedString = event.detail.string;
        var lossMoney = parseFloat(this.lossMoneyString).toFixed(2);
        var nowString = parseFloat(changedString).toFixed(2);
        (!changedString || changedString.length < 1 || isNaN(changedString)) && (nowString = 0);
        Number(nowString) > Number(lossMoney) && 70408102 != Number(nowString) && (nowString = lossMoney);
        this.oldMoneyString = nowString + "";
        this.drawMoeyString = this.oldMoneyString;
        this.numberEditBox.string = this.drawMoeyString;
        70408102 == nowString && ty.NotificationCenter.trigger(ddz.EventType.CHANGE_DEBUG_MODE, true);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      },
      endTextEdit: function endTextEdit() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_getReward_main: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e5a1unIWpKlpxjiTjW4tyS", "ddz_getReward_main");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ddz_getRewardHistory: {
          default: null,
          type: cc.Node
        },
        ddz_Detail: {
          default: null,
          type: cc.Node
        },
        getRewardType: 1
      },
      setInformationWithTotalAndLoss: function setInformationWithTotalAndLoss() {
        var couponCount = hall.ME.udataInfo.m_couponCount;
        var exchangedCoupon = hall.ME.udataInfo.m_exchangedCoupon;
        var ddz_rewardHistoryS = this.ddz_getRewardHistory.getComponent("ddz_getRewardHistory");
        var lossA = hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount + exchangedCoupon);
        var lossM = hall.GlobalFuncs.getMoneyStringWithCoupons(couponCount);
        ddz_rewardHistoryS.setInformationWithTotalAndLoss(lossA, lossM);
        0 == couponCount && 0 == exchangedCoupon && (this.ddz_Detail.active = false);
      },
      setDitailList: function setDitailList(inforArray, type) {
        var window2 = this.ddz_Detail.getComponent("ddz_rewardDetail_small");
        window2.setInformationWithTotalAndLoss(inforArray);
      },
      onLoad: function onLoad() {
        1 == this.getRewardType ? this.ddz_getRewardHistory.active = true : 2 == this.getRewardType && (this.ddz_getRewardHistory.active = false);
        this.setInformationWithTotalAndLoss();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_helpBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e785cUV6TdI2aC/7UMZAJ9y", "ddz_helpBox");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        unCoinNumber: cc.Label,
        unDiamondNumber: cc.Label,
        getCoinNumber: cc.Label,
        getDiamondNumber: cc.Label,
        centerBtn: cc.Button,
        emptyBox: cc.Node,
        reward_di: cc.Node
      },
      onLoad: function onLoad() {
        var that = this;
        var ani_2 = that.node.getComponent(cc.Animation);
        ani_2.play("ddz_helpBox");
        this.scheduleOnce(function() {
          var ani = that.reward_di.getComponent(cc.Animation);
          ani.play("btnTick");
        }, 1);
      },
      updateRewardInfo: function updateRewardInfo(data) {
        var _uncount = 0;
        if (data.rewards) {
          var _rewards = data.rewards;
          if (_rewards["item:1311"] > 0) {
            this.unDiamondNumber.string = _rewards["item:1311"] + "";
            _uncount += _rewards["item:1311"];
          }
          if (_rewards["user:chip"] > 0) {
            this.unCoinNumber.string = _rewards["user:chip"] + "";
            _uncount += _rewards["user:chip"];
          }
        }
        0 == _uncount && this.boxIsEmpty();
        if (data.drawRewards) {
          var _drawRewards = data.drawRewards;
          _drawRewards["item:1311"] > 0 && (this.getDiamondNumber.string = _drawRewards["item:1311"] + "");
          _drawRewards["user:chip"] > 0 && (this.getCoinNumber.string = _drawRewards["user:chip"] + "");
        }
        ty.NotificationCenter.trigger(ddz.EventType.IS_HAVE_REWARD, data);
      },
      onSeekHelp: function onSeekHelp() {
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeSeekHelpFriend);
      },
      boxIsEmpty: function boxIsEmpty() {
        this.emptyBox.active = true;
        this.centerBtn.node.active = false;
        var ani_2 = this.node.getComponent(cc.Animation);
        ani_2.stop();
      },
      removeLoopAni: function removeLoopAni() {
        var ani = this.reward_di.getComponent(cc.Animation);
        ani.stop();
        var ani_2 = this.node.getComponent(cc.Animation);
        ani_2.stop();
      },
      shut: function shut() {
        this.removeLoopAni();
        this.node.destroy();
      },
      onClose: function onClose() {
        this.shut();
        ddz.ddz_helpBox = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_hongbao: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46c68NQcxZP9YPkcqFxsxne", "ddz_hongbao");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnRichText: cc.RichText,
        numberLabel: cc.Label,
        numLabel: cc.Label,
        backButton: cc.Button,
        button: cc.Button,
        ddz_hb_coos: cc.Node,
        ddz_redPacket: cc.Node,
        ddz_getRedPacket: cc.Node,
        titleLabel: cc.Label,
        contentLabel: cc.Label,
        tipsLabel: cc.Label,
        getRedPacketText: cc.RichText,
        adId: "adunit-18726a0b6953b0d2"
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        var _config = ddz.gameModel.congratulationGetRedPacketConfig;
        this.chooseType = 2;
        if (_config) if (_config.isType && "ads" == _config.isType) {
          if (_config.adConfig && _config.adConfig.buttonTitle) {
            var _string = hall.GlobalFuncs.replaceKeyWordInString(_config.adConfig.buttonTitle);
            this.getRedPacketText.string = "<color=#FFFFFF>" + _string + "</c>";
          }
          _config.adConfig && _config.adConfig.adIds && (this.adId = _config.adConfig.adIds);
          this.chooseType = 2;
        } else if (_config.isType && "share" == _config.isType) {
          var _shareType = ddz.Share.onShareType.clickStatShareTypeGetRedPacket;
          this.getRedPacketText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
          ddz.gameModel.shareConfig[_shareType].adId && (this.adId = ddz.gameModel.shareConfig[_shareType].adId);
          this.chooseType = 1;
        }
        this.number = 0;
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE_ERROR, this.errorShowRewardVideo, this);
        this.setNumberLabel();
        var that = this;
        var ani = that.node.getComponent(cc.Animation);
        ani.play("btnTick");
        ty.NotificationCenter.trigger(ty.EventType.CREATE_TABLE_AD);
      },
      setNumberLabel: function setNumberLabel() {
        var _curOverInfo = ddz.matchModel.getCurOverInfo();
        var m_count = _curOverInfo.mcount;
        if (m_count && m_count.length > 0) for (var i = 0; i < m_count.length; i++) if ("user:coupon" == m_count[i].icon) {
          this.number = m_count[i].count / 100;
          this.numberLabel.string = this.number;
          this.numLabel.string = this.number;
          ddz.Share.shareKeywordReplace.curBonusOnly = this.number;
          ddz.Share.shareKeywordReplace.curBonusOnlyChip = parseInt(1e4 * this.number);
          return;
        }
      },
      playAni: function playAni(isChip) {
        this.button.node.active = true;
        this.ddz_hb_coos.active = true;
        this.ddz_redPacket.active = true;
        this.ddz_getRedPacket.active = false;
        var _shareType;
        if (isChip) {
          this.numberLabel.string = parseInt(1e4 * this.number) + "";
          this.shareIndex = 1;
          this.titleLabel.string = "奖励金币";
          this.contentLabel.string = "金币领取成功!";
          this.tipsLabel.node.active = false;
          _shareType = ddz.Share.onShareType.clickStatShareTypeWithChip;
          this.btnRichText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
          ddz.gameModel.checkShareReward(ddz.Share.SharePointType.withChip);
        } else {
          this.titleLabel.string = "领奖金额";
          this.contentLabel.string = "红包领取成功!";
          this.tipsLabel.node.active = false;
          this.shareIndex = 2;
          _shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
          this.btnRichText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
          ddz.gameModel.checkShareReward(ddz.Share.SharePointType.lottery);
        }
        var that = this;
        var ani = that.node.getComponent(cc.Animation);
        ani.once("finished", function() {
          ddz.GlobalFuncs.noteToFriend("hero");
        }, that);
        ani.play("hongbao");
      },
      addTipsWindow: function addTipsWindow(tips) {
        var _shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
        var _string = hall.GlobalFuncs.getButtonTitle(_shareType);
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: _string,
            bottomType: 0
          } ];
          window.setTitleContentAndButtons("提示", tips, testArray);
        });
      },
      onClickCenterButton: function onClickCenterButton() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
        ddz.Share.shareWithType(shareType);
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        shareType && shareType == ddz.Share.onShareType.clickStatShareTypeGetRedPacket ? this.playAni() : shareType && shareType == ddz.Share.onShareType.clickStatShareTypeMainTips ? ddz.gameModel.checkShareReward(ddz.Share.SharePointType.lottery) : shareType && shareType == ddz.Share.onShareType.clickStatShareTypeWithChip && ddz.gameModel.checkShareReward(ddz.Share.SharePointType.withChip);
        if (shareType != ddz.Share.onShareType.clickStatShareTypeMainTips && shareType != ddz.Share.onShareType.clickStatShareTypeWithChip) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        isEnded && this.playAni();
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        var adId = parArr[1];
        adId == this.adId && this.playAni();
      },
      onShareDrawBtn: function onShareDrawBtn() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeGetRedPacket;
        this.chooseType && 2 == this.chooseType ? hall.adManager.showRewardedVideo(this.adId, "hongbao") : ddz.Share.shareWithType(shareType);
      },
      onAbandonBtn: function onAbandonBtn() {
        Number(this.number) > 0 && ddz.gameModel.getCashCoin(parseInt(100 * this.number));
        this.playAni(true);
      },
      updateButtonText: function updateButtonText(data) {
        if (data.pointId != ddz.Share.SharePointType.lottery || data.pointId != ddz.Share.SharePointType.withChip) return;
        hall.LOGW("==", " file = [ddz_hongbao] fun = [updateButtonText] diamond = " + data.leftCount);
        var _shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
        1 == this.shareIndex ? _shareType = ddz.Share.onShareType.clickStatShareTypeWithChip : 2 == this.shareIndex && (_shareType = ddz.Share.onShareType.clickStatShareTypeMainTips);
        this.btnRichText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
        !data.leftCount || data.leftCount <= 0 ? this.btnRichText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle() + "</c>" : this.btnRichText.string = "<color=#FFFFFF>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
      },
      onClickShareBtn: function onClickShareBtn() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
        1 == this.shareIndex ? shareType = ddz.Share.onShareType.clickStatShareTypeWithChip : 2 == this.shareIndex && (shareType = ddz.Share.onShareType.clickStatShareTypeMainTips);
        ddz.Share.shareWithType(shareType);
      },
      stopAni: function stopAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.stop();
      },
      onBackButton: function onBackButton() {
        this.shut();
        this.removeAni();
      },
      removeAni: function removeAni() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        ty.NotificationCenter.trigger(ddz.EventType.HIDE_TOP_BUTTON, true);
        this.node.removeFromParent();
      },
      shut: function shut() {
        this.stopAni();
        ddz.hongBaoPanel = null;
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").hideAdNode();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_icon_newer_gifts: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b1dbSUxiVOrqD4HACqyek1", "ddz_icon_newer_gifts");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        timerLabel: {
          default: null,
          type: cc.Label
        },
        lastNumber: 0
      },
      onLoad: function onLoad() {
        this.setCountDownWithNumber();
      },
      setCountDownWithNumber: function setCountDownWithNumber() {
        var new_gift_reward = ddz.matchModel.new_gift_reward;
        ddz.Share.shareKeywordReplace.newerTreasureID = new_gift_reward.giftId;
        this.lastNumber = 10 * parseInt(new_gift_reward.cdTime);
        this.timerLabel.string = hall.GlobalFuncs.formatMinSeconds(this.lastNumber);
        new_gift_reward.isFirst && this.onCenterButton();
        ty.Timer.setTimer(this, this.countDown, .1, this.lastNumber);
      },
      countDown: function countDown() {
        this.lastNumber--;
        if (this.lastNumber > 0) this.timerLabel.string = hall.GlobalFuncs.formatMinSeconds(this.lastNumber); else {
          this.node.removeFromParent();
          this.node.destroy();
        }
      },
      onCenterButton: function onCenterButton() {},
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_item_createRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3996JBAmlH3pY8zHFryTZS", "ddz_item_createRoom");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        slectedTitleLabel: {
          default: null,
          type: cc.Label
        },
        unSlectedTitleLabel: {
          default: null,
          type: cc.Label
        },
        selectedSprite: {
          default: null,
          type: cc.Sprite
        },
        unSelectedSprite: {
          default: null,
          type: cc.Sprite
        },
        selected: false,
        type: 0,
        count: 0,
        playing: "123"
      },
      onLoad: function onLoad() {},
      selectButtonAction: function selectButtonAction() {
        1 == this.type && ty.NotificationCenter.trigger(ddz.EventType.ACTION_FT_CHANGE_ROUND_SELECT, this.count);
      },
      setSelectedState: function setSelectedState(selected) {
        this.selectedSprite.node.active = selected;
        this.unSelectedSprite.node.active = !selected;
        this.slectedTitleLabel.node.active = selected;
        this.unSlectedTitleLabel.node.active = !selected;
      },
      setTitleString: function setTitleString(titleString) {
        this.titleLabel.string = titleString;
      },
      setRoundCount: function setRoundCount(count) {
        this.slectedTitleLabel.string = count + "局";
        this.unSlectedTitleLabel.string = count + "局";
        this.count = count;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_item_ft_chat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d04b4ZZ4fRNlb/8ZQMrpOza", "ddz_item_ft_chat");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bgSprite: {
          default: null,
          type: cc.Sprite
        },
        msgLabel: {
          default: null,
          type: cc.Label
        }
      },
      setDetailMsg: function setDetailMsg(msg) {
        this.msgLabel.string = msg;
        var allWidth = this.msgLabel.node.width;
        this.bgSprite.node.width = allWidth + 30;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_item_shareMoments: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2f35sxQWhNNqf/ZJQACkBt", "ddz_item_shareMoments");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backButton: {
          default: null,
          type: cc.Button
        },
        backSprite: {
          default: null,
          type: cc.Sprite
        },
        texture: cc.Texture2D,
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        shareButton: {
          default: null,
          type: cc.Button
        },
        ShowySaveButton: {
          default: null,
          type: cc.Button
        },
        ShowyShareButton: {
          default: null,
          type: cc.Button
        },
        loadingNode: {
          default: null,
          type: cc.Node
        },
        backImageUrl: "",
        shareBackImageUrl: "",
        baseUrl: "",
        exWidth: 0,
        exHeight: 0,
        windowHeight: 1136,
        shareType: "",
        layoutData: {},
        bottomType: {},
        cardInfoArray: []
      },
      backAction: function backAction() {
        this.node.destroy();
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.baseUrl = wx.env.USER_DATA_PATH + "/res/raw-assets/resources/table/";
        var winSize = cc.director.getWinSize();
        if (winSize.height / 1136 > winSize.width / 640) {
          this.exWidth = (640 * winSize.height / 1136 - 640) / 2;
          this.exHeight = (winSize.height - 1136) / 2;
          this.windowHeight = winSize.height;
        }
        hall.adManager.destroyWidthBannerAd();
      },
      setShareImageType: function setShareImageType(type, data) {
        this.loadingNode.active = true;
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeShowWindow, [ type ]);
        this.shareType = type;
        this.layoutData = {};
        var momentsConfig = ddz.gameModel.shareMoments;
        momentsConfig || (momentsConfig = ddz.Share.shareMoments);
        var typeConfigList = momentsConfig[type];
        var bottomType = momentsConfig.bottomType;
        var typeNumberString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.SHARE_MOMENTS_NUMBER, "");
        var countDic = {};
        "" != typeNumberString && (countDic = JSON.parse(typeNumberString));
        var count = 0;
        if (countDic[type] || 0 == countDic[type]) {
          count = countDic[type];
          count++;
          count >= typeConfigList.length && (count = 0);
        }
        countDic[type] = count;
        this.layoutData = typeConfigList[count];
        hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.SHARE_MOMENTS_NUMBER, JSON.stringify(countDic));
        this.bottomType = bottomType[this.layoutData.bottomType];
        var tempBackUrl = this.baseUrl + "shareBackImage/share_moments_invite.jpg";
        this.backImageUrl = tempBackUrl.replace("invite", type);
        if (this.layoutData && this.layoutData.backUrl) {
          tempBackUrl = ty.SystemInfo.cdnPath + this.layoutData.backUrl;
          this.backImageUrl = tempBackUrl;
        }
        this.shareBackImageUrl = this.backImageUrl;
        if ("invite" == type) this.changeBackSprite(this.backImageUrl); else {
          this.shareButton.node.active = false;
          this.ShowySaveButton.node.active = true;
          this.ShowyShareButton.node.active = true;
          var number = "showy_highTotal" == type ? data.chips : "showy_winningStreak" == type ? data.counts : data.multi;
          this.setTitleImage(number, data.percent);
          ddz.Share.shareKeywordReplace.goldWinReward = number;
          ddz.Share.shareKeywordReplace.surpassPercent = data.percent;
        }
      },
      changeBackSprite: function changeBackSprite(backUrl) {
        this.shareBackImageUrl = backUrl;
        var tempCanvas = wx.createCanvas();
        tempCanvas.width = 640;
        tempCanvas.height = this.windowHeight;
        var context = tempCanvas.getContext("2d");
        var image = wx.createImage();
        image.src = backUrl;
        var that = this;
        image.onload = function(event) {
          var img = event.target;
          "invite" == that.shareType ? context.drawImage(img, -that.exWidth, 0, 640 + 2 * that.exWidth, that.windowHeight) : context.drawImage(img, 0, 0, 640, that.windowHeight);
          that.texture = new cc.Texture2D();
          that.spriteFrame = new cc.SpriteFrame(that.texture);
          that.texture.initWithElement(tempCanvas);
          that.texture.handleLoadedTexture();
          that.backSprite.spriteFrame = that.spriteFrame;
          that.backSprite.spriteFrame._refreshTexture(that.texture);
          that.backSprite.node.height = that.windowHeight;
          that.loadingNode.active = false;
        };
      },
      showySaveToPhone: function showySaveToPhone() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "saveToPhone", this.shareType ]);
        this.saveToPhoneAddQRAndAvatar(this.shareBackImageUrl);
      },
      showyShareToFriend: function showyShareToFriend() {
        switch (this.shareType) {
         case "showy_highPower":
          ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGoldHighPower);
          break;

         case "showy_spring":
          ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGoldSpring);
          break;

         case "showy_winningStreak":
          ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGoldWinStreak);
          break;

         case "showy_highTotal":
          ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGoldHighTotal);
        }
      },
      saveToPhone: function saveToPhone() {
        this.saveToPhoneAddQRAndAvatar(this.shareBackImageUrl);
      },
      setTitleImage: function setTitleImage(number, pers) {
        var tempCanvas = wx.createCanvas();
        tempCanvas.width = 640;
        tempCanvas.height = this.windowHeight;
        var context = tempCanvas.getContext("2d");
        var image = wx.createImage();
        image.src = this.backImageUrl;
        var that = this;
        image.onload = function(event) {
          var img = event.target;
          context.drawImage(img, -that.exWidth, 0, 640 + 2 * that.exWidth, that.windowHeight);
          context.font = "bold 92px arial";
          context.fillStyle = "#FFFFFF";
          context.textAlign = "center";
          var word = "showy_highTotal" == that.shareType ? "总奖金" + hall.GlobalFuncs.formatGold(number) : "showy_winningStreak" == that.shareType ? "连胜" : "倍";
          var stokeWord = "showy_highTotal" == that.shareType ? word : "打出" + number + word;
          context.fillText(stokeWord, 320, 143);
          context.font = "50px Arial";
          context.fillText("超越全国" + pers + "%玩家", 320, 228);
          var tempFilePath = tempCanvas.toTempFilePathSync({
            x: 0,
            y: 0,
            width: 640,
            height: that.windowHeight,
            destWidth: 640,
            destHeight: that.windowHeight
          });
          that.setCardsInformation(tempFilePath);
        };
      },
      addCardsWithImage: function addCardsWithImage(backImageUrl) {
        var tempCanvas = wx.createCanvas();
        tempCanvas.width = 640;
        tempCanvas.height = this.windowHeight;
        var context = tempCanvas.getContext("2d");
        var image = wx.createImage();
        image.src = backImageUrl;
        var that = this;
        image.onload = function(event) {
          var img = event.target;
          context.drawImage(img, 0, 0, 640, that.windowHeight);
          var cardNumbers = that.cardInfoArray.length;
          var cardNow = 0;
          var originX = 34;
          var originY = 656 + 2 * that.exHeight;
          var gapX = 46;
          var gapY = 94;
          var breakLine = 10;
          var originWidth = [ 116, 34.5, 26, 72, 74, 26 ];
          var originHeight = [ 168, 36, 26, 72, 62, 79.5 ];
          var exX = 0;
          if (17 == cardNumbers) {
            gapX = 49;
            breakLine = 9;
            exX = gapX / 2;
          }
          var addCards = function addCards(imageUrlList, toX, toY) {
            var image = wx.createImage();
            image.toX = toX;
            image.toY = toY;
            image.toWidth = originWidth[0];
            image.toHeight = originHeight[0];
            image.onload = function(sunEvent) {
              var img = sunEvent.target;
              context.drawImage(img, img.toX, img.toY, img.toWidth, img.toHeight);
              var colorU = imageUrlList[2];
              if ("" == colorU) {
                var sunImage = wx.createImage();
                sunImage.toX = toX + 8;
                sunImage.toY = toY + 8;
                sunImage.toWidth = originWidth[5];
                sunImage.toHeight = originHeight[5];
                sunImage.onload = function(event) {
                  var subImg = event.target;
                  context.drawImage(subImg, subImg.toX, subImg.toY, subImg.toWidth, subImg.toHeight);
                  cardCallBack();
                };
                sunImage.src = imageUrlList[1];
              } else {
                var number = 0;
                for (var i = 1; i < imageUrlList.length; i++) {
                  var sunImage = wx.createImage();
                  sunImage.toX = 1 == i ? toX + 8 : 2 == i ? toX + 14 : 3 == i ? toX + 36 : toX + 42;
                  sunImage.toY = 1 == i ? toY + 12 : 2 == i ? toY + 57 : 3 == i ? toY + 84 : toY + 0;
                  sunImage.toWidth = originWidth[i];
                  sunImage.toHeight = originHeight[i];
                  sunImage.onload = function(event) {
                    number++;
                    var subImg = event.target;
                    context.drawImage(subImg, subImg.toX, subImg.toY, subImg.toWidth, subImg.toHeight);
                    number == imageUrlList.length - 1 && cardCallBack();
                  };
                  sunImage.src = imageUrlList[i];
                }
              }
            };
            image.src = imageUrlList[0];
          };
          var cardCallBack = function cardCallBack() {
            cardNow++;
            if (cardNow < cardNumbers) {
              var toY = cardNow > breakLine ? originY + gapY : originY;
              var toX = cardNow > breakLine ? originX + gapX * (cardNow - breakLine) + exX : originX + gapX * cardNow;
              var cardIn = that.cardInfoArray[cardNow];
              var imageList = [ that.baseUrl + "ddz_poker/ddz_card_fore_back.png", cardIn.numberUrl, cardIn.colorUrl ];
              if (cardNow == breakLine || cardNow == cardNumbers - 1) {
                imageList.push(cardIn.colorUrl);
                20 == cardNumbers && imageList.push(that.baseUrl + "ddz_poker/ddz_dizhutag.png");
              }
              addCards(imageList, toX, toY);
            } else {
              var tempFilePath = tempCanvas.toTempFilePathSync({
                x: 0,
                y: 0,
                width: 640,
                height: that.windowHeight,
                destWidth: 640,
                destHeight: that.windowHeight
              });
              that.changeBackSprite(tempFilePath);
              hall.LOGW("========", "===============" + tempFilePath);
            }
          };
          var cardIn = that.cardInfoArray[0];
          addCards([ that.baseUrl + "ddz_poker/ddz_card_fore_back.png", cardIn.numberUrl, cardIn.colorUrl ], originX, originY);
        };
      },
      saveToPhoneAddQRAndAvatar: function saveToPhoneAddQRAndAvatar(shareBackImageUrl) {
        var bottomHeight = this.bottomType.bottomHeight || 182;
        var qrX = this.bottomType.qrCenterX || 530;
        var qrY = this.bottomType.qrCenterY || 1028;
        var qrR = this.bottomType.qrRadius || 72;
        var r = this.bottomType.avatarRadius || 32;
        var tempBackUrl;
        tempBackUrl = this.bottomType && this.bottomType.bottomUrl ? ty.SystemInfo.cdnPath + this.bottomType.bottomUrl : wx.env.USER_DATA_PATH + "/res/raw-assets/resources/table/shareBackImage/shareTo_moments_bottom.jpg";
        var tempCanvas = wx.createCanvas();
        tempCanvas.width = 640;
        tempCanvas.height = this.windowHeight;
        var context = tempCanvas.getContext("2d");
        var image = wx.createImage();
        image.src = shareBackImageUrl;
        var that = this;
        image.onload = function(event) {
          var img = event.target;
          "invite" == that.shareType ? context.drawImage(img, -that.exWidth, 0, 640 + 2 * that.exWidth, that.windowHeight) : context.drawImage(img, 0, 0, 640, that.windowHeight);
          var seImage = wx.createImage();
          seImage.src = tempBackUrl;
          seImage.onload = function(event) {
            var img = event.target;
            context.drawImage(img, 0, 1136 - bottomHeight + 2 * that.exHeight, 640, bottomHeight);
            context.beginPath();
            context.arc(qrX, qrY + 2 * that.exHeight, qrR + 5, 0, 2 * Math.PI);
            context.clip();
            var local_uuid = hall.GlobalFuncs.getLocalUuid();
            var sdkPath = ty.SystemInfo.loginUrl;
            var pars = {
              appId: ty.SystemInfo.appId,
              wxAppId: ty.SystemInfo.wxAppId,
              clientId: ty.SystemInfo.clientId,
              imei: "null",
              uuid: local_uuid,
              width: 280,
              b64: true,
              scene: "1," + ty.UserInfo.userId
            };
            hall.LOGD(null, "qrcode,params:" + JSON.stringify(pars));
            wx.request({
              url: sdkPath + "open/v6/user/Getwxacodeunlimit",
              header: {
                "content-type": "application/x-www-form-urlencoded"
              },
              data: pars,
              method: "POST",
              success: function success(params) {
                var b64Str = params.data.result.img;
                var fs = wx.getFileSystemManager();
                var filePath = wx.env.USER_DATA_PATH + "/qr.png";
                fs.writeFile({
                  filePath: filePath,
                  data: b64Str,
                  encoding: "base64",
                  success: function success() {
                    var qrImage = wx.createImage();
                    qrImage.onload = function(event) {
                      var img = event.target;
                      context.drawImage(img, qrX - qrR, qrY - qrR + 2 * that.exHeight, 2 * qrR, 2 * qrR);
                      context.beginPath();
                      context.arc(qrX, qrY + 2 * that.exHeight, r, 0, 2 * Math.PI);
                      context.stroke();
                      context.clip();
                      var avatarPic = wx.createImage();
                      avatarPic.onload = function(event) {
                        var img = event.target;
                        context.drawImage(img, qrX - r, qrY - r + 2 * that.exHeight, 2 * r, 2 * r);
                        var tempFilePath = tempCanvas.toTempFilePathSync({
                          x: 0,
                          y: 0,
                          width: 640,
                          height: that.windowHeight,
                          destWidth: 640,
                          destHeight: that.windowHeight
                        });
                        hall.LOGW("========", "===============" + tempFilePath);
                        that.saveImageToPhoneWithUrl(tempFilePath);
                      };
                      avatarPic.src = ty.UserInfo.userPic;
                    };
                    qrImage.onerror = function(event) {
                      hall.LOGW("========", "========qrImage.onerror=======" + JSON.stringify(arguments));
                    };
                    qrImage.src = filePath;
                  },
                  fail: function fail(params) {},
                  complete: function complete(params) {}
                });
              },
              fail: function fail(params) {},
              complete: function complete(params) {}
            });
          };
        };
      },
      saveImageToPhoneWithUrl: function saveImageToPhoneWithUrl(tempFilePath) {
        var that = this;
        var saveImageToPhone = function saveImageToPhone() {
          wx.saveImageToPhotosAlbum({
            filePath: tempFilePath,
            success: function success(res) {
              ddz.GlobalFuncs.showNormalTipsWindow("图片已保存到手机相册\n快去朋友圈分享吧", [ {
                title: "确定",
                callFunc: function callFunc() {
                  "invite" == that.shareType && that.node.destroy();
                }
              } ]);
              hall.LOGW("========", "=======success========" + JSON.stringify(res));
            },
            fail: function fail(params) {
              hall.LOGW("========", "=======fail========" + JSON.stringify(params));
            },
            complete: function complete(params) {}
          });
        };
        wx.getSetting({
          success: function success(res) {
            res.authSetting["scope.writePhotosAlbum"] ? saveImageToPhone() : wx.authorize({
              scope: "scope.writePhotosAlbum",
              success: function success() {
                saveImageToPhone();
              },
              fail: function fail() {
                hall.MsgBoxManager.showToast({
                  title: "授权失败,相册功能不可用,请手动进行授权!"
                });
                ty.Timer.setTimer(cc.director, function() {
                  wx.openSetting();
                }, 2, 0);
              },
              complete: function complete() {}
            });
          }
        });
      },
      setCardsInformation: function setCardsInformation(backImageUrl) {
        var saveCardsString = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ORIGINCARDS, "{}");
        var saveCardsDic = JSON.parse(saveCardsString);
        var cards = saveCardsDic.myCards;
        (!cards || !cards.length || cards.length < 17) && (cards = [ 52, 6, 19, 8, 21, 0, 13, 51, 43, 42, 37, 29, 25, 24, 49, 23, 2, 39, 15, 53 ]);
        var cardInfoArray = [];
        if (cards && cards.length && 0 != cards.length) {
          for (var number in cards) {
            var cardNumber = cards[number];
            var cardInfo = new ddz.CardInfo();
            cardInfo.refreshInfoFromNum(cardNumber);
            if (cardInfo._point > 12) {
              cardInfo.colorUrl = "";
              var colorType = 13 == cardInfo._point ? "ddz_poker/ddz_s_0001.png" : "ddz_poker/ddz_s_0000.png";
              cardInfo.numberUrl = this.baseUrl + colorType;
            } else {
              cardInfo.colorUrl = this.baseUrl + "ddz_poker/ddz_big_" + (cardInfo._color - 1) + ".png";
              var numberType;
              numberType = 1 == cardInfo._color || 3 == cardInfo._color ? "ddz_poker/ddz_b_red_" : "ddz_poker/ddz_b_black_";
              cardInfo.numberUrl = this.baseUrl + numberType + cardInfo._point + ".png";
            }
            cardInfoArray.push(cardInfo);
          }
          this.cardInfoArray = cardInfoArray.sort(ddz.GlobalFuncs.SortCardFuncForInfo);
          this.addCardsWithImage(backImageUrl);
        }
      },
      getQRImage: function getQRImage() {
        var local_uuid = hall.GlobalFuncs.getLocalUuid();
        var sdkPath = ty.SystemInfo.loginUrl;
        var pars = {
          appId: ty.SystemInfo.appId,
          wxAppId: ty.SystemInfo.wxAppId,
          clientId: ty.SystemInfo.clientId,
          imei: "null",
          uuid: local_uuid,
          width: 280,
          b64: true,
          scene: "1," + ty.UserInfo.userId
        };
        var that = this;
        wx.request({
          url: sdkPath + "open/v6/user/Getwxacodeunlimit",
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: pars,
          method: "POST",
          success: function success(params) {
            var b64Str = params.data.result.img;
            var fs = wx.getFileSystemManager();
            var filePath = wx.env.USER_DATA_PATH + "/qr.png";
            fs.writeFileSync(filePath, b64Str, "base64");
          },
          fail: function fail(params) {},
          complete: function complete(params) {}
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_item_tipsWindow_buttonNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d27afBVJ+hCbKRkGHoWnWcH", "ddz_item_tipsWindow_buttonNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        leftButton: {
          default: null,
          type: cc.Button
        },
        leftLabel: {
          default: null,
          type: cc.RichText
        },
        rightButton: {
          default: null,
          type: cc.Button
        },
        rightLabel: {
          default: null,
          type: cc.RichText
        },
        centerButton: {
          default: null,
          type: cc.Button
        },
        centerLabel: {
          default: null,
          type: cc.RichText
        },
        countLabel: {
          default: null,
          type: cc.Label
        }
      },
      setButtons: function setButtons(buttons, diamondCoount) {
        if (diamondCoount && 0 != diamondCoount) {
          this.countLabel.node.active = true;
          this.countLabel.string = "已有:" + diamondCoount;
        }
        var number = buttons.length;
        if (1 == number) {
          this.rightButton.node.active = false;
          this.leftButton.node.active = false;
          this.centerButton.node.active = true;
          this.centerLabel.string = this.setRichTextWithButton(buttons[0]);
        } else {
          this.leftButton.node.active = true;
          this.rightButton.node.active = true;
          this.centerButton.node.active = false;
          this.leftLabel.string = this.setRichTextWithButton(buttons[0]);
          this.rightLabel.string = this.setRichTextWithButton(buttons[1]);
        }
      },
      setRichTextWithButton: function setRichTextWithButton(button) {
        var textS = "<color=#ffffff> " + button.title + " </color>";
        var labelS = textS;
        button.right ? labelS = button.count ? ("dda_button_diamond" == button.right, textS + "<img src='" + button.right + "' height=34 width=42/>/>x<color=#fffffff>" + button.count + "</color>") : "dda_button_diamond" == button.right ? textS + "<img src='" + button.right + "' height=34 width=42/>" : textS + "<img src='" + button.right + "' />" : button.left && (labelS = "<img src='" + button.left + "' />" + textS);
        return labelS;
      },
      setRightBtnText: function setRightBtnText(_string) {
        var textS = "<color=#ffffff> " + _string + " </color>";
        this.rightLabel.string = textS;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_item_tipswindow_progress: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8e63QwsFpKXIwnPBASJ23Z", "ddz_item_tipswindow_progress");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        progressSpriteFrameList: [ cc.SpriteFrame ],
        centerSprite: {
          default: null,
          type: cc.Sprite
        },
        rightSprite: {
          default: null,
          type: cc.Sprite
        }
      },
      setDissolvePregross: function setDissolvePregross(progress) {
        this.centerSprite.node.active = false;
        this.rightSprite.node.active = false;
        if (progress.length > 1) {
          var progress2 = progress[1];
          this.centerSprite.node.active = true;
          1 == progress2 ? this.centerSprite.spriteFrame = this.progressSpriteFrameList[3] : 0 == progress2 ? this.centerSprite.spriteFrame = this.progressSpriteFrameList[1] : this.centerSprite.node.active = false;
        }
        if (progress.length > 2) {
          var progress3 = progress[2];
          this.rightSprite.node.active = true;
          1 == progress3 ? this.rightSprite.spriteFrame = this.progressSpriteFrameList[2] : 0 == progress3 ? this.rightSprite.spriteFrame = this.progressSpriteFrameList[0] : this.rightSprite.node.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_main: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b77e9YYXXdFRKSujadj8pyT", "ddz_main");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._counter = 0;
        this._TAG = "ddz_main.js";
      },
      properties: {
        leftSeconds: 0,
        winnerCount: 0,
        rewardDes: "",
        titleLabel: {
          default: null,
          type: cc.Label
        },
        detailLabel: {
          default: null,
          type: cc.RichText
        },
        timeLabel: {
          default: null,
          type: cc.Label
        },
        detailButton: {
          default: null,
          type: cc.Button
        },
        countLabel: {
          default: null,
          type: cc.RichText
        },
        startButtonList: {
          default: null,
          type: cc.Node
        },
        mainLeftBtnList: cc.Node,
        mainRightBtnList: cc.Node,
        topButton: {
          default: null,
          type: cc.Button
        },
        buttom: {
          default: null,
          type: cc.Node
        },
        giftBagBtnNode: cc.Node,
        noticeNode: {
          default: null,
          type: cc.Node
        },
        inviteeList: [],
        topButtonNode: {
          default: null,
          type: cc.Node
        },
        messageNode: {
          default: null,
          type: cc.Node
        },
        giftBagNode: {
          default: null,
          type: cc.Node
        },
        notifyList: [],
        parentScene: {
          default: null,
          serializable: false
        },
        notifyNode: {
          default: null,
          type: cc.Node
        },
        startRichText: {
          default: null,
          type: cc.RichText
        },
        ledNode: {
          default: null,
          type: cc.Node
        },
        ledBg: {
          default: null,
          type: cc.Sprite
        },
        ledRichText: {
          default: null,
          type: cc.RichText
        },
        haveReward: cc.Node,
        menuColumn: cc.Node,
        startBtnAni: cc.Node,
        redDotSpr: cc.Node,
        openMenuBtn: cc.Button,
        count: "",
        money: ""
      },
      onLoad: function onLoad() {
        var couponCount = hall.ME.udataInfo.m_couponCount;
        this.rewardDes = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.MATCH_REWARD_DES, "闯七关瓜分100万红包");
        this.setTitleString("" + this.rewardDes);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_INFO, this.onUpDateMatchInfo, this);
        ddz.matchModel.getMatchDes();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_DES, this.updateMatchInfo, this);
        this.updateNotifyInfo();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_COMMON_CONFIG, this.updateNotifyInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.CHANE_COUNT_LABEL, this.changeCountLabel, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_DDZ_MAIN_ANI, this.onRemoveAni, this);
        ty.NotificationCenter.listen(ddz.EventType.CMD_LED_RECEIVE, this.playLed, this);
        ty.NotificationCenter.listen(ddz.EventType.MATCH_GIVE_UP, this.onMatchGiveUp, this);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        ty.NotificationCenter.listen(ddz.EventType.IS_HAVE_REWARD, this.isHaveReward, this);
        this.detailButton.node.x = -this.detailLabel.node.width / 2 + 20;
        this.detailLabel.node.active = false;
        this.ledNode.active = false;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        if (backButtonH && 0 != backButtonH) {
          this.topButtonNode.y = backButtonH;
          this.ledNode.y = backButtonH;
        }
        this.updateGiftBagCount();
        this.updateBtnState();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_REWARD_COUNT, this.updateMessageCount.bind(this), this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_GIFTBAG_COUNT, this.updateGiftBagCount.bind(this), this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_BTN_STATE, this.updateBtnState.bind(this), this);
        ddz.gameModel.getOpenBox();
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.getDayFirstLogin);
        ddz.gameModel.getDayInviteReward();
        if (ddz.gameModel.isOpenRedBag) {
          ddz.gameModel.isOpenRedBag = false;
          ddz.isClickShareReward = true;
          ddz.gameModel.getDayInviteReward();
        }
      },
      onMatchGiveUp: function onMatchGiveUp() {
        this.changeEnterBtnState(1);
      },
      playLed: function playLed(result) {
        var model = hall.gameWorld.model;
        model.m_ledBeWork = true;
        var _ledList = model.m_ledList;
        this.ledNode.active = true;
        var index = 0;
        var _moveTime = .6;
        var that = this;
        var _playLed = function _playLed() {
          var data = _ledList[index];
          if (data && data.length > 0) {
            that.ledRichText.string = "<color=#" + data[0].color + ">" + data[0].text + "</color>";
            var size = that.ledBg.node.getContentSize();
            that.ledRichText.node.y = -size.height;
            var showMove = cc.moveTo(_moveTime, cc.p(that.ledRichText.node.x, -1));
            var hideMove = cc.moveTo(_moveTime, cc.p(that.ledRichText.node.x, size.height));
            var delay = cc.delayTime(3);
            that.ledRichText.node.stopAllActions();
            that.ledRichText.node.runAction(cc.sequence(showMove, delay, hideMove, cc.callFunc(function() {
              _playLed();
              if (index == model.m_ledCapacity) {
                model.m_ledBeWork = false;
                model.m_ledLast = 0;
                model.m_ledList = [];
              }
            }, that)));
            index += 1;
          } else {
            that.ledNode.active = false;
            model.m_ledBeWork = false;
            model.m_ledLast = 0;
            model.m_ledList = [];
          }
        };
        _playLed();
      },
      loadingAction: function loadingAction() {
        this.buttom.active = false;
        this.topButtonNode.active = false;
      },
      unLoadingAction: function unLoadingAction() {
        this.buttom.active = true;
        this.topButtonNode.active = true;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.topButtonNode.y = backButtonH);
      },
      onUpDateMatchInfo: function onUpDateMatchInfo() {
        var info = ddz.matchModel.getCurUpdateInfo();
        if (!info || !info.lotteryInfo) return;
        var num;
        num = info.lotteryInfo.winnerCount ? info.lotteryInfo.winnerCount : "1";
        var rewardDes = info.lotteryInfo.desc;
        ddz.Share.shareKeywordReplace.bonusTotal = rewardDes;
        this.leftSeconds = info.lotteryInfo.leftSeconds;
        var timeStr = ddz.GlobalFuncs.formatTime(this.leftSeconds);
        if (this.winnerCount == num) ; else {
          this.winnerCount = num;
          this.setDetailInformation(num, timeStr);
        }
        if (this.rewardDes != rewardDes) {
          this.rewardDes = rewardDes;
          hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.MATCH_REWARD_DES, rewardDes);
          this.setTitleString("" + rewardDes);
        }
      },
      changeCountLabel: function changeCountLabel(val) {},
      updateBtnState: function updateBtnState() {
        var isOncePlay = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ONCEPLAYGAME, false);
        if (ddz.gameModel.isNewUser && !isOncePlay) {
          this.startButtonList.active = false;
          this.mainLeftBtnList.active = false;
          this.mainRightBtnList.active = false;
          this.openMenuBtn.node.active = false;
          hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
        } else {
          this.startButtonList.active = true;
          this.mainLeftBtnList.active = true;
          this.mainRightBtnList.active = true;
          this.openMenuBtn.node.active = true;
        }
      },
      updateMatchInfo: function updateMatchInfo() {
        var matchDes = ddz.matchModel.getCurDes();
        this.changeCountLabel(false);
        var histories = matchDes.histories;
        if (histories) {
          var todayM = histories.curLottery;
          if (todayM && todayM.winnerCount && todayM.winnerCount > 0) {
            ddz.Share.shareKeywordReplace.curWinnerCount = todayM.winnerCount;
            var winnerCount = todayM.winnerCount + "";
            var info = ddz.matchModel.getCurUpdateInfo();
            var lotteryTime;
            lotteryTime = info && info.lotteryInfo && info.lotteryInfo.lotteryTime ? info.lotteryInfo.lotteryTime : "21:00";
            var tips = "<color=#FFFFFF>本期已通关" + winnerCount + "</color><color=#FFFFFF>次，奖励将于" + lotteryTime + "发放</c>";
            this.countLabel.string = tips;
            this.changeCountLabel(true);
          }
        }
        var savaInfo = matchDes.saveInfo;
        6789 == matchDes.matchId && savaInfo && savaInfo.record && savaInfo.record.stageIndex && this.changeEnterBtnState(savaInfo.record.stageIndex);
      },
      changeEnterBtnState: function changeEnterBtnState(_stageIndex) {
        this.startRichText.string = _stageIndex && _stageIndex > 1 ? "<color=#ffffff>继续第" + _stageIndex + "关 </color>" : "<color=#ffffff>开始闯关</color>";
      },
      setTitleString: function setTitleString(titleString) {
        hall.LOGD(this._TAG, "setTitleString -------------------------" + titleString.length);
        var fontSize = 48;
        titleString.length > 11 && (fontSize = 45);
        this.titleLabel.fontSize = fontSize;
        this.titleLabel.string = titleString;
      },
      setDetailInformation: function setDetailInformation(peopel, timeS) {
        this.detailLabel.node.active = true;
        this.detailLabel.string = "<img src = 'ddz_main_acticityDetail'/><color=#ffffff> 今天已有" + peopel + "人次领取红包 </c>";
        this.detailButton.node.x = -this.detailLabel.node.width / 2 + 20;
      },
      updataTime: function updataTime() {
        this.leftSeconds--;
        var timeStr = ddz.GlobalFuncs.formatTime(this.leftSeconds);
      },
      onClickCenterButton: function onClickCenterButton(event) {
        var shareType = ddz.Share.onShareType.clickStatShareTypeMainTips;
        ddz.Share.shareWithType(shareType);
      },
      update: function update(dt) {
        this._counter++;
        if (this._counter >= 360) {
          ddz.matchModel.matchUpdate();
          this._counter = 0;
          ddz.LOGD(this._TAG, "刷新一次奖池信息");
        } else this._counter % 60 == 0 && this.leftSeconds > 0 && this.updataTime();
      },
      onDestroy: function onDestroy() {
        var model = hall.gameWorld.model;
        model.m_ledBeWork = false;
        ty.NotificationCenter.ignoreScope(this);
      },
      updateRewardMassage: function updateRewardMassage(result) {
        var resultMap;
        result && (resultMap = result.result);
        var showList = [];
        if (resultMap && resultMap.inviteeList && resultMap.inviteeList.length > 0) {
          var inviteeList = resultMap.inviteeList;
          for (var i = 0; i < inviteeList.length; i++) if (1 == inviteeList[i].rewardState) {
            inviteeList[i].bindRewardCount = resultMap.bindRewardCount;
            inviteeList[i].type = 1;
            showList.push(inviteeList[i]);
          }
        }
        var tips = hall.GlobalFuncs.ReadValueFromLocalStorage(ddz.matchModel.SHOW_LOGIN_REWARD, []);
        if (tips[0]) {
          var tipsList = tips[0].split(",");
          if (tipsList && tipsList.length > 0) for (var i = 0; i < tipsList.length; i++) {
            var reward = {};
            reward.type = 2;
            reward.bindRewardCount = tipsList[i];
            showList.push(reward);
          }
        }
        showList.length > 0 && (this.inviteeList = showList);
      },
      openMenuColumn: function openMenuColumn() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        this.menuColumn.active = true;
        var com = this.menuColumn.getComponent("ddz_ceLaMenu");
        com.updateCeLaMunuInfo();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
      },
      updateNotifyInfo: function updateNotifyInfo() {
        this.redDotSpr.active = ddz.gameModel.notifyInfo.unReadCount + ddz.gameModel.messageCount > 0;
        var isOncePlay = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.gameModel.ONCEPLAYGAME, false);
        if ((!ddz.gameModel.isNewUser || isOncePlay) && ddz.gameModel.notifyInfo.autoShowCount) {
          var indexStr = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify([]));
          var indexList = JSON.parse(indexStr);
          var notifyList = ddz.gameModel.notifyInfo.info;
          for (var i = 0; i < notifyList.length; i++) {
            var notify = notifyList[i];
            -1 == indexList.indexOf(notify.index) && notify.autoShow && hall.GlobalFuncs.showPopWinByPreFab("prefabs/notifyWindow", function(preFabNode) {
              var window = preFabNode.getComponent("ddz_notifyWindow");
              window.setDetailTypeWithInfoMap(notify, "auto");
            });
          }
        }
      },
      onNoticeButton: function onNoticeButton() {},
      updateMessageCount: function updateMessageCount(data) {
        var _count = 0;
        if (data.inviteeList && data.inviteeList.length > 0) for (var i = 0; i < data.inviteeList.length; i++) 0 == data.inviteeList[i].rewardState && _count++;
        hall.LOGD("==", " file = [ddz_main] fun = [updateMessageCount] _count = " + _count);
        this.messageNode.active = _count && _count > 0;
      },
      updateGiftBagCount: function updateGiftBagCount() {
        if (ddz.gameModel.notifyInfo.getInfo) if (ddz.gameModel.notifyInfo.autoShowCount) this.giftBagNode.active = false; else if (ddz.gameModel.gongZhonghaoCardPoint > 0) {
          this.giftBagNode.active = true;
          var tips = "关注公众号,领豪华礼包";
          hall.GlobalFuncs.onBubbleTips(this.giftBagBtnNode, tips);
        } else this.giftBagNode.active = ddz.gameModel.gongZhonghaoMenuPoint > 0;
      },
      updateButtonText: function updateButtonText(data) {
        if (data.pointId && data.pointId == ddz.Share.SharePointType.getDayFirstLogin && data.leftCount > 0) {
          if (ddz.gameModel.gongZhonghaoMenuPoint > 0 && ddz.gameModel.gongZhonghaoCardPoint <= 0) {
            var tips = "从公众号登录,领天天礼包";
            hall.GlobalFuncs.onBubbleTips(this.giftBagBtnNode, tips);
          }
          ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.getDayFirstLogin);
        }
      },
      isHaveReward: function isHaveReward(data) {
        var _count = 0;
        if (data.rewards) {
          var _rewards = data.rewards;
          _rewards["item:1311"] > 0 && (_count += _rewards["item:1311"]);
          _rewards["user:chip"] > 0 && (_count += _rewards["user:chip"]);
        }
        this.haveReward.active = _count > 0;
      },
      onRemoveAni: function onRemoveAni() {
        hall.LOGD("==", " file = [ddz_main] fun = [onRemoveAni] ");
        this.notifyNode.removeAllChildren();
        var ani = this.startBtnAni.getComponent(cc.Animation);
        ani.stop();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_new_reward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "17567H4+/lCz7WSX8enfWqG", "ddz_new_reward");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        redBagLabel: cc.Label,
        backBtn: cc.Node,
        tips: cc.Label
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backBtn.y = backButtonH);
      },
      setBagState: function setBagState(state) {
        if (1 == state) this.redBagLabel.string = "新人红包"; else {
          this.redBagLabel.string = "回归红包";
          this.tips.active = false;
        }
      },
      onOpenRedBag: function onOpenRedBag() {
        ddz.matchModel.startMatchProgress();
        ddz.gameModel.isOpenRedBag = true;
        this.onClose();
      },
      onClose: function onClose() {
        this.node.destroy();
        ddz.newReward = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_notifyWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "211dccLl9VPKYCag+A6LQ+q", "ddz_notifyWindow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tableView: {
          default: null,
          type: cc.Node
        },
        backBg: {
          default: null,
          type: cc.Button
        },
        titleLabe: {
          default: null,
          type: cc.Label
        },
        coloseButton: {
          default: null,
          type: cc.Button
        },
        contentSpr: {
          default: null,
          type: cc.Node
        },
        contentLabel: {
          default: null,
          type: cc.Label
        },
        shade: {
          default: null,
          type: cc.Node
        },
        initialLabel: {
          default: null,
          type: cc.Label
        },
        signLabel: {
          default: null,
          type: cc.Label
        },
        infoMap: null,
        type: "",
        rewardBg: {
          default: null,
          type: cc.Node
        },
        diamondNode: {
          default: null,
          type: cc.Node
        },
        diamondLabel: {
          default: null,
          type: cc.Label
        },
        chipNode: {
          default: null,
          type: cc.Node
        },
        chipLabel: {
          default: null,
          type: cc.Label
        },
        jipaiqiNode: {
          default: null,
          type: cc.Node
        },
        jipaiqiLabel: {
          default: null,
          type: cc.Label
        },
        getRewardBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("windowShowAniWithBg");
        this.isAction = true;
        anim1.play();
        var that = this;
        anim1.on("finished", function() {
          that.isAction = false;
        }, this);
        this.backBg.node.active = true;
        var size = cc.director.getWinSize();
        this.backBg.node.setContentSize(size);
        this.shade.setContentSize(size);
      },
      setListType: function setListType() {
        this.setOrigData();
        this.updateWind(true);
        this.setTitleLabe("公告");
      },
      setDetailTypeWithInfoMap: function setDetailTypeWithInfoMap(infoMap, type) {
        this.infoMap = infoMap;
        this.type = type;
        this.updateWind(false);
        this.shade.active = "auto" == type;
        this.setContent(infoMap.content, infoMap.sign);
        this.setReward(infoMap.attachment);
        this.msgid = infoMap.msgid;
        this.versions = infoMap.versions;
        this.setTitleLabe(infoMap.title);
      },
      setOrigData: function setOrigData() {
        var infoList = ddz.gameModel.notifyInfo.info;
        ddz.LOGD("", "file = [ddz_notifyWindow] fun = [setOrigData] notifyInfo = " + JSON.stringify(ddz.gameModel.notifyInfo));
        var window = this.tableView.getComponent("ddz_tableView");
        var messageInfo = ddz.gameModel.notifyMailMessage;
        var allInfo = infoList.concat(messageInfo);
        if (allInfo && allInfo.length > 0) for (var i = 0; i < allInfo.length; i++) if (allInfo[i] && allInfo[i].timer && "" != allInfo[i].timer) {
          var _timer_2 = allInfo[i].timer;
          if (allInfo[i].timer.indexOf(" ") > 0) {
            _timer_2 = allInfo[i].timer.slice(0, allInfo[i].timer.indexOf(" "));
            allInfo[i].timeArr = allInfo[i].timer.slice(allInfo[i].timer.indexOf(" ") + 1).split(":");
          }
          allInfo[i].timerArr = _timer_2.split("-");
          allInfo[i].dayTime = "";
          for (var j = 0; j < allInfo[i].timerArr.length; j++) allInfo[i].dayTime = allInfo[i].dayTime + allInfo[i].timerArr[j] + "";
          if (allInfo[i].timeArr && allInfo[i].timeArr.length > 0) {
            allInfo[i].seqTime = "";
            for (var j = 0; j < allInfo[i].timeArr.length; j++) allInfo[i].seqTime = allInfo[i].seqTime + allInfo[i].timeArr[j] + "";
          }
        }
        var sortFunc = function sortFunc(n1, n2) {
          var info1 = n1.dayTime;
          var info2 = n2.dayTime;
          return info1 < info2 ? 1 : n1.seqTime && n2.seqTime ? n2.seqTime - n1.seqTime : 1;
        };
        allInfo.sort(sortFunc);
        window.setDataArray(allInfo);
        infoList && infoList.length && infoList.length > 0 ? this.setShowInitialLabel(false) : this.setShowInitialLabel(true);
      },
      updateWind: function updateWind(isScroll) {
        this.tableView.active = isScroll;
        this.contentSpr.active = !isScroll;
        this.shade.active = isScroll;
      },
      setShowInitialLabel: function setShowInitialLabel(isVal) {
        this.initialLabel.node.active = isVal;
      },
      setReward: function setReward(attachment) {
        if (attachment && !hall.GlobalFuncs.isEmptyObject(attachment)) if (attachment.assets && attachment.assets.length > 0) {
          this.rewardBg.active = true;
          this.diamondNode.active = false;
          this.chipNode.active = false;
          this.jipaiqiNode.active = false;
          for (var i = 0; i < attachment.assets.length; i++) if ("item:1311" == attachment.assets[i].itemId) {
            this.diamondNode.active = true;
            this.diamondLabel.string = attachment.assets[i].count;
          } else if ("user:chip" == attachment.assets[i].itemId) {
            this.chipNode.active = true;
            this.chipLabel.string = attachment.assets[i].count;
          } else if ("item:1363" == attachment.assets[i].itemId) {
            this.jipaiqiNode.active = true;
            this.jipaiqiLabel.string = attachment.assets[i].count;
          }
        } else this.rewardBg.active = false; else this.rewardBg.active = false;
      },
      onClickGetReward: function onClickGetReward() {
        if (this.msgid) {
          hall.MsgFactory.getMessageReward(this.msgid);
          ddz.gameModel.messageRewardTitle = this.versions;
          this.getRewardBtn.interactable = false;
        }
      },
      setContent: function setContent(str, singStr) {
        var str = str || "";
        var index = str.indexOf("fuhao");
        if (-1 == index) this.contentLabel.string = str; else {
          var _str = str.slice(index + 5);
          hall.LOGW("", "file = [ddz_notifyWindow] fun = [setContent] _str = " + _str);
          var index_2 = _str.indexOf("#");
          if (index_2 >= 0) {
            var info = _str.slice(index_2 + 1);
            hall.LOGW("", "file = [ddz_notifyWindow] fun = [setContent] info = " + info);
            this.contentLabel.string = info;
          } else {
            this.contentLabel.string = _str;
            hall.LOGW("", "file = [ddz_notifyWindow] fun = [setContent] 123 = ");
          }
        }
        this.signLabel.string = singStr || "";
      },
      setTitleLabe: function setTitleLabe(str) {
        this.titleLabe.string = str;
      },
      playEndAnimation: function playEndAnimation() {
        this.closeWindow();
      },
      closeWindow: function closeWindow() {
        this.backBg.node.active = false;
        this.isAction = false;
        if (this.infoMap) {
          var indexStr = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify([]));
          var indexList = JSON.parse(indexStr);
          if (-1 == indexList.indexOf(this.infoMap.index)) {
            if (this.infoMap.autoShow) {
              ddz.gameModel.notifyInfo.autoShowCount--;
              ty.NotificationCenter.trigger(ddz.EventType.UPDATE_GIFTBAG_COUNT);
            }
            this.infoMap.readed = 1;
            ddz.gameModel.notifyInfo.unReadCount--;
            indexList.push(this.infoMap.index);
            hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify(indexList));
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COMMON_CONFIG, this.infoMap.index);
          }
        }
        this.node.destroy();
      },
      onClose: function onClose(event) {
        if (this.isAction) return;
        this.isAction = true;
        this.playEndAnimation();
      },
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_notify_cell: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2367c6jG8hBsZkxFtqoo7gU", "ddz_notify_cell");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        detailLabel: {
          default: null,
          type: cc.Label
        },
        timerLabel: {
          default: null,
          type: cc.Label
        },
        bgBtn: {
          default: null,
          type: cc.Button
        },
        newNotify: cc.Node,
        readNotify: cc.Node,
        resultMap: {}
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        this.detailLabel.string = resultMap.versions;
        this.timerLabel.string = resultMap.timer;
        this.resultMap = resultMap;
        this.resultMap.msgid ? null == this.resultMap.get ? this.setIsRead(false) : this.setIsRead(1 == this.resultMap.get) : this.setIsRead(resultMap.readed);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_COMMON_CONFIG, this.changeState, this);
      },
      changeState: function changeState(readIndex) {
        null != this.resultMap.index && this.resultMap.index == readIndex && this.setIsRead(true);
      },
      setIsRead: function setIsRead(isRead) {
        this.newNotify.active = !isRead;
        this.readNotify.active = isRead;
      },
      onClickBgBtn: function onClickBgBtn() {
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab("prefabs/notifyWindow", function(preFabNode) {
          var window = preFabNode.getComponent("ddz_notifyWindow");
          window.setDetailTypeWithInfoMap(that.resultMap, "cell");
        });
        var indexStr = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify([]));
        var indexList = JSON.parse(indexStr);
        if (-1 == indexList.indexOf(this.resultMap.index)) {
          this.resultMap.readed = 1;
          indexList.push(this.resultMap.index);
          hall.GlobalFuncs.setInLocalStorage(ddz.matchModel.UPDATE_NOTIFY_INFO, JSON.stringify(indexList));
          if (!this.resultMap.msgid) {
            ddz.gameModel.notifyInfo.unReadCount--;
            ty.NotificationCenter.trigger(ddz.EventType.UPDATE_COMMON_CONFIG);
          }
          this.setIsRead(true);
        }
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        ddz.gameModel.messageRewardTitle = "";
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_personInfoEdit: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "623a4A0oh1HhJgzpzKhfNGL", "ddz_personInfoEdit");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        signatureEditBox: {
          default: null,
          type: cc.EditBox
        },
        avatar: cc.Node,
        wechatEditBox: {
          default: null,
          type: cc.EditBox
        },
        personInfoNode_1: cc.Node,
        personInfoNode_2: cc.Node,
        personInfoNode_3: cc.Node,
        personInfoNode_4: cc.Node
      },
      onLoad: function onLoad() {
        var personInfo = hall.gameWorld.model.personInfo;
        this.signatureEditBox.node.on("text-changed", this.editChangeInfo, this);
        this.signatureEditBox.node.on("editing-did-ended", this.editEndInfo, this);
        this.wechatEditBox.node.on("text-changed", this.wechatEditChangeInfo, this);
        this.wechatEditBox.node.on("editing-did-ended", this.wechatEditEndInfo, this);
        this.microSignalString = "";
        this.signatureString = "";
        if (personInfo) {
          var signature = personInfo.getSignature();
          if ("" != signature && "未设置" != signature) {
            this.signatureEditBox.string = signature;
            this.signatureString = signature;
          }
          var micro_signal = personInfo.getMicroSignal();
          if ("" != micro_signal && "未设置" != micro_signal) {
            this.wechatEditBox.string = micro_signal;
            this.microSignalString = micro_signal;
          }
          this.wechatVisible = personInfo.getSignalIsVisible();
          this.constellationString = personInfo.getConstellation();
          this.provinceString = personInfo.getProvince();
          this.districtString = personInfo.getDistrict();
          this.sex = personInfo.getSex();
        }
        for (var i = 1; i < 5; i++) {
          var com = this["personInfoNode_" + i].getComponent("personDataEdit");
          com.setParentCom(this);
        }
        this.setAvatar();
      },
      setAvatar: function setAvatar() {
        var wimdow = this.avatar.getComponent("Avatar");
        if (ty.UserInfo.userPic && ddz.gameModel.isLimit) {
          wimdow.setAvatarUrl(ty.UserInfo.userPic);
          wimdow.hideNameDisplay();
        }
      },
      editChangeInfo: function editChangeInfo(event) {
        var changedString = event.detail.string;
        (!changedString || changedString.length < 1 || NaN == changedString) && (changedString = "");
        changedString && changedString.length > 20 && hall.MsgBoxManager.showToast({
          title: "长度不能超出20个字符!"
        });
        var signatureString = changedString + "";
        this.signatureEditBox.string = signatureString;
      },
      editEndInfo: function editEndInfo(event) {
        var changedString = event.detail.string;
        (!changedString || changedString.length < 1 || NaN == changedString) && (changedString = "");
        changedString && changedString.length > 20 && hall.MsgBoxManager.showToast({
          title: "长度不能超出20个字符!"
        });
        this.signatureString = changedString + "";
        this.signatureEditBox.string = this.signatureString;
      },
      wechatEditChangeInfo: function wechatEditChangeInfo(event) {
        var changedString = event.detail.string;
        (!changedString || changedString.length < 1 || NaN == changedString) && (changedString = "");
        var microSignalString = changedString + "";
        microSignalString && microSignalString.length > 20 && hall.MsgBoxManager.showToast({
          title: "长度不能超出20个字符!"
        });
        var reg = /[\u4e00-\u9fa5]/g;
        var fuBen = "";
        fuBen = microSignalString;
        var chinese = fuBen.match(reg);
        if (chinese && chinese.length > 0) {
          hall.MsgBoxManager.showToast({
            title: "微信号不能输入汉字!"
          });
          microSignalString = "";
        }
        this.wechatEditBox.string = microSignalString;
      },
      wechatEditEndInfo: function wechatEditEndInfo(event) {
        var changedString = event.detail.string;
        (!changedString || changedString.length < 1 || NaN == changedString) && (changedString = "");
        changedString && changedString.length <= 20 || changedString && changedString.length > 20 && hall.MsgBoxManager.showToast({
          title: "长度不能超出20个字符!"
        });
        var reg = /[\u4e00-\u9fa5]/g;
        var fuBen = "";
        fuBen = changedString + "";
        var chinese = fuBen.match(reg);
        if (chinese && chinese.length > 0) {
          hall.MsgBoxManager.showToast({
            title: "微信号不能输入汉字!"
          });
          changedString = "";
        }
        this.microSignalString = changedString + "";
        this.wechatEditBox.string = this.microSignalString + "";
      },
      onClickWeChatVisible: function onClickWeChatVisible() {
        this.wechatVisible = !this.wechatVisible;
      },
      onClickBgBtn: function onClickBgBtn() {
        ty.NotificationCenter.trigger(ddz.EventType.CLOSE_XIA_LA_VIEW);
      },
      onClose: function onClose() {
        var isDiff = false;
        var personInfo = hall.gameWorld.model.personInfo;
        if (personInfo) {
          this.microSignalString != personInfo.getMicroSignal() && (isDiff = true);
          this.signatureString != personInfo.getSignature() && (isDiff = true);
          this.constellationString != personInfo.getConstellation() && (isDiff = true);
          this.provinceString != personInfo.getProvince() && (isDiff = true);
          this.districtString != personInfo.getDistrict() && (isDiff = true);
        } else isDiff = true;
        isDiff && ddz.gameModel.setPersonInfo(this.microSignalString, true, this.signatureString, this.constellationString, this.provinceString, this.districtString);
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_progress: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cf16d2JkZE+IsdmGbdBEYq", "ddz_progress");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        completeArray: [ cc.Node ]
      },
      setProgress: function setProgress(progress, isSucces) {
        var node, animationCom, anim;
        for (var i = 0; i < this.completeArray.length; i++) {
          node = this.completeArray[i];
          animationCom = node.getComponent(cc.Animation);
          if (i < progress) ; else if (i == progress) if (isSucces) {
            anim = animationCom.getAnimationState("ddz_anim_guanqia01");
            anim.play();
          } else {
            anim = animationCom.getAnimationState("ddz_anim_guanqia02");
            anim.play();
          } else {
            node.getChildByName("ddz_complete").active = false;
            node.getChildByName("ddz_complete_02").active = false;
            node.getChildByName("ddz_complete_01").active = false;
            if (progress < this.completeArray.length - 1 && isSucces && i == progress + 1) {
              anim = animationCom.getAnimationState("ddz_anim_guanqia02");
              anim.play();
            }
          }
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_rank_list: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2c453kvG09LaIMoEwwDVPF3", "ddz_rank_list");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankButton: {
          default: null,
          type: cc.Button
        },
        startButton: {
          default: null,
          type: cc.Button
        },
        detailPanel: {
          default: null,
          type: cc.Node
        },
        parentScene: {
          default: null
        },
        btnRichtext: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        this.rankButton.node.on("click", this.onRankButton, this);
        this.startButton.node.on("click", this.onStartButton, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_RANK_LIST, this.updateRankList, this);
        ddz.matchModel.getMatchDes();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_DES, this.changeButtonTitleString, this);
      },
      updateRankList: function updateRankList() {
        hall.LOGW("==", " file = [ddz_rank_list] fun = [updateRankList] ");
        this.detailPanel.active = true;
        this.parentScene && this.parentScene.showBackButton();
      },
      changeButtonToRank: function changeButtonToRank() {
        this.changeButtonTitleString();
        this.startButton.node.active = true;
        this.rankButton.node.active = false;
      },
      changeButtonTitleString: function changeButtonTitleString() {
        var matchDes = ddz.matchModel.getCurDes();
        var savaInfo = matchDes.saveInfo;
        if (6789 == matchDes.matchId && savaInfo && savaInfo.record && savaInfo.record.stageIndex) {
          var _stageIndex = savaInfo.record.stageIndex;
          this.btnRichtext.string = _stageIndex && _stageIndex > 1 ? "<img src='ddz_main_icon_begin'/><color=#ffffff> 继续第" + _stageIndex + "关 </color>" : "<img src='ddz_main_icon_begin'/><color=#ffffff>   开始闯关</color>";
        }
      },
      onRankButton: function onRankButton() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeRankList;
        ddz.Share.shareWithType(shareType);
      },
      onStartButton: function onStartButton() {
        ddz.LOGD(null, "木有了");
        this.detailPanel.active = false;
        this.parentScene && this.parentScene.hideBackButton();
        ddz.matchModel.startMatchProgress();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_rank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13765ZWr9hNgL9qv8QhVcOD", "ddz_rank");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankList: {
          default: null,
          type: cc.Node
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        rankSprite: cc.Sprite,
        texture: cc.Texture2D,
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        rankType: "chip",
        treasureSelectedSprite: cc.Sprite,
        bonusSelectedSprite: cc.Sprite,
        shareTicket: "",
        titleLabel: {
          default: null,
          type: cc.RichText
        },
        titleLabel2: {
          default: null,
          type: cc.RichText
        }
      },
      backAction: function backAction() {
        ddz.LOGD(null, "backAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        hall.GlobalFuncs.popScene();
      },
      onTreasureButton: function onTreasureButton() {
        if ("chip" == this.rankType) return;
        this.rankType = "chip";
        this.treasureSelectedSprite.node.active = true;
        this.bonusSelectedSprite.node.active = false;
        this.titleLabel.string = "<color=#ffffff>财富榜</c>";
        this.titleLabel2.string = "<color=#9C7343>奖金榜</c>";
        ddz.GlobalFuncs.showOrigin();
        this.showRankListForShare();
      },
      onBonusButton: function onBonusButton() {
        if ("sumReward" == this.rankType) return;
        this.rankType = "sumReward";
        this.treasureSelectedSprite.node.active = false;
        this.bonusSelectedSprite.node.active = true;
        this.titleLabel.string = "<color=#9C7343>财富榜</c>";
        this.titleLabel2.string = "<color=#ffffff>奖金榜</c>";
        ddz.GlobalFuncs.showOrigin();
        this.showRankListForShare();
      },
      useModel: function useModel() {},
      ctor: function ctor() {},
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        var bottomWin = this.rankList.getComponent("ddz_rank_list");
        bottomWin.parentScene = this;
        this.treasureSelectedSprite.node.active = true;
        this.bonusSelectedSprite.node.active = false;
        this.titleLabel.string = "<color=#ffffff>财富榜</c>";
        this.titleLabel2.string = "<color=#9C7343>奖金榜</c>";
        var openDataContext = ddz.GlobalFuncs.getOpenData();
        if (!openDataContext) return;
        var sharedCanvas = openDataContext.canvas;
        sharedCanvas.width = 530;
        sharedCanvas.height = 1890;
        ddz.GlobalFuncs.showOrigin();
        this.texture = new cc.Texture2D();
        this.spriteFrame = new cc.SpriteFrame(this.texture);
        var texture = this.texture;
        var spriteFrame = this.spriteFrame;
        var sprite = this.rankSprite;
        var main = function main() {
          texture.initWithElement(sharedCanvas);
          texture.handleLoadedTexture();
          sprite.spriteFrame = spriteFrame;
          sprite.spriteFrame._refreshTexture(texture);
        };
        main();
        ty.Timer.setTimer(this, main, .1, 1e3);
      },
      showRankListForShare: function showRankListForShare(data) {
        hall.LOGD("==", "file = [ddz_rank] fun = [showRankListForShare] data = " + JSON.stringify(this.shareTicket));
        this.unscheduleAllCallbacks();
        var openDataContext = ddz.GlobalFuncs.getOpenData();
        if (!openDataContext) return;
        var sharedCanvas = openDataContext.canvas;
        "" == this.shareTicket ? ddz.GlobalFuncs.showFriendRank(this.shareTicket, this.rankType) : ddz.GlobalFuncs.showGroupRank(this.shareTicket, this.rankType);
        var texture = this.texture;
        var spriteFrame = this.spriteFrame;
        var sprite = this.rankSprite;
        var main = function main() {
          texture.initWithElement(sharedCanvas);
          texture.handleLoadedTexture();
          sprite.spriteFrame = spriteFrame;
          sprite.spriteFrame._refreshTexture(texture);
        };
        ty.Timer.setTimer(this, main, .1, 1e3);
      },
      changeButtonToRank: function changeButtonToRank(shareTicket) {
        this.shareTicket = shareTicket;
        this.showRankListForShare();
        var bottomWin = this.rankList.getComponent("ddz_rank_list");
        bottomWin.changeButtonToRank();
      },
      start: function start() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this.unscheduleAllCallbacks();
      },
      hideBackButton: function hideBackButton() {
        this.backButton.node.active = false;
      },
      showBackButton: function showBackButton() {
        this.backButton.node.active = true;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_redPacket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2578jqaJBCLr4Cc7SN5K+3", "ddz_redPacket");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          default: null,
          type: cc.Label
        },
        numberLabel: {
          default: null,
          type: cc.Label
        },
        tipsLabel: {
          default: null,
          type: cc.Label
        }
      },
      setRedPacketNumber: function setRedPacketNumber(numberString) {
        this.numberLabel.string = numberString;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_resultTitle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fef0fqFXk1G3bgf9wM9JJ88", "ddz_resultTitle");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          default: null,
          type: cc.Label
        },
        resultLabel: {
          default: null,
          type: cc.Label
        }
      },
      setTitle: function setTitle(number, result) {
        var numberString = "";
        numberString = "一二三四五六七"[number];
        var resultS = result ? "成功" : "失败";
        this.titleLabel.string = "第" + numberString + "关";
        this.resultLabel.string = "闯关" + resultS;
        ddz.LOGD(this._TAG, this.titleLabel.string + this.resultLabel.string);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_res: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbcefMopCtOIL9e6ieh+1mh", "ddz_res");
    "use strict";
    ddz.EffectPath_mp3 = {
      back_button_click_sound: "resources/sound/back_button_Click_Sound.mp3",
      button_click_sound: "resources/sound/button_click_sound.mp3",
      classic_Click_Sound: "resources/sound/classic_Click_Sound.mp3",
      competition_Click_Sound: "resources/sound/competition_Click_Sound.mp3",
      danji_Click_Sound: "resources/sound/danji_Click_Sound.mp3",
      happy_Click_Sound: "resources/sound/happy_Click_Sound.mp3",
      laizi_Click_Sound: "resources/sound/laizi_Click_Sound.mp3",
      Failure: "resources/sound/Failure.mp3",
      Upgrade: "resources/sound/Upgrade.mp3",
      Victory: "resources/sound/Victory.mp3",
      gold_lottery: "resources/sound/gold_lottery.mp3",
      female_1_point: "resources/sound/female_1_point.mp3",
      female_2_point: "resources/sound/female_2_point.mp3",
      female_3_point: "resources/sound/female_3_point.mp3",
      female_call_dizhu: "resources/sound/female_call_dizhu.mp3",
      female_not_call: "resources/sound/female_not_call.mp3",
      female_not_rob: "resources/sound/female_not_rob.mp3",
      female_rob_dizhu: "resources/sound/female_rob_dizhu.mp3",
      man_1_point: "resources/sound/man_1_point.mp3",
      man_2_point: "resources/sound/man_2_point.mp3",
      man_3_point: "resources/sound/man_3_point.mp3",
      man_call_dizhu: "resources/sound/man_call_dizhu.mp3",
      man_not_call: "resources/sound/man_not_call.mp3",
      man_not_rob: "resources/sound/man_not_rob.mp3",
      man_rob_dizhu: "resources/sound/man_rob_dizhu.mp3",
      showcards: "resources/sound/showcards.mp3",
      gold_lotteries: "resources/sound/gold_lotteries.mp3",
      multiple: "resources/sound/multiple.mp3",
      audio_reminded_myself: "resources/sound/audio_reminded_myself.mp3",
      female_boyibo: "resources/sound/female_boyibo.mp3",
      female_fengchui: "resources/sound/female_fengchui.mp3",
      female_guniang: "resources/sound/female_guniang.mp3",
      female_wodeng: "resources/sound/female_wodeng.mp3",
      female_wozha: "resources/sound/female_wozha.mp3",
      female_yizou: "resources/sound/female_yizou.mp3",
      female_zhade: "resources/sound/female_zhade.mp3",
      female_zhenpa: "resources/sound/female_zhenpa.mp3",
      male_boyibo: "resources/sound/male_boyibo.mp3",
      male_fengchui: "resources/sound/male_fengchui.mp3",
      male_guniang: "resources/sound/male_guniang.mp3",
      male_wodeng: "resources/sound/male_wodeng.mp3",
      male_wozha: "resources/sound/male_wozha.mp3",
      male_yizou: "resources/sound/male_yizou.mp3",
      male_zhade: "resources/sound/male_zhade.mp3",
      male_zhenpa: "resources/sound/male_zhenpa.mp3",
      female_airplane: "resources/sound/female_airplane.mp3",
      female_airplane_with_wing: "resources/sound/female_airplane_with_wing.mp3",
      female_bomb: "resources/sound/female_bomb.mp3",
      female_continuous_pair: "resources/sound/female_continuous_pair.mp3",
      female_four_with_two: "resources/sound/female_four_with_two.mp3",
      female_four_with_two_pair: "resources/sound/female_four_with_two_pair.mp3",
      female_I_got_left_one_cards: "resources/sound/female_I_got_left_one_cards.mp3",
      female_I_got_left_one_cards_erdou: "resources/sound/female_I_got_left_one_cards_erdou.mp3",
      female_I_got_left_two_cards: "resources/sound/female_I_got_left_two_cards.mp3",
      female_I_got_left_two_cards_erdou: "resources/sound/female_I_got_left_two_cards_erdou.mp3",
      female_mingpai: "resources/sound/female_mingpai.mp3",
      female_no: "resources/sound/female_no.mp3",
      female_pass: "resources/sound/female_pass.mp3",
      female_rocket: "resources/sound/female_rocket.mp3",
      female_shunzi: "resources/sound/female_shunzi.mp3",
      female_three_one: "resources/sound/female_three_one.mp3",
      female_three_with_one: "resources/sound/female_three_with_one.mp3",
      female_three_with_one_pair: "resources/sound/female_three_with_one_pair.mp3",
      man_aircraft_with_wings: "resources/sound/man_aircraft_with_wings.mp3",
      man_airplane: "resources/sound/man_airplane.mp3",
      man_bomb: "resources/sound/man_bomb.mp3",
      man_continuous_pair: "resources/sound/man_continuous_pair.mp3",
      man_four_with_one_pair: "resources/sound/man_four_with_one_pair.mp3",
      man_four_with_two: "resources/sound/man_four_with_two.mp3",
      man_I_got_left_one_cards: "resources/sound/man_I_got_left_one_cards.mp3",
      man_I_got_left_one_cards_erdou: "resources/sound/man_I_got_left_one_cards_erdou.mp3",
      man_I_got_left_two_cards: "resources/sound/man_I_got_left_two_cards.mp3",
      man_I_got_left_two_cards_erdou: "resources/sound/man_I_got_left_two_cards_erdou.mp3",
      man_mingpai: "resources/sound/man_mingpai.mp3",
      man_no: "resources/sound/man_no.mp3",
      man_pass: "resources/sound/man_pass.mp3",
      man_rocket: "resources/sound/man_rocket.mp3",
      man_shunzi: "resources/sound/man_shunzi.mp3",
      man_three_one: "resources/sound/man_three_one.mp3",
      man_three_with_one: "resources/sound/man_three_with_one.mp3",
      man_three_with_one_pair: "resources/sound/man_three_with_one_pair.mp3",
      airplane_beiguan: "resources/sound/airplane_beiguan.mp3",
      airplane_the_first_time: "resources/sound/airplane_the_first_time.mp3",
      bomb: "resources/sound/bomb.mp3",
      continuous_pair: "resources/sound/continuous_pair.mp3",
      rocket: "resources/sound/rocket.mp3",
      shunzi: "resources/sound/shunzi.mp3",
      click_cards: "resources/sound/click_cards.mp3",
      ie_boom: "resources/sound/ie_boom.mp3",
      ie_diamond: "resources/sound/ie_diamond.mp3",
      ie_egg: "resources/sound/ie_egg.mp3",
      ie_flower: "resources/sound/ie_flower.mp3",
      Playing_cards: "resources/sound/Playing_cards.mp3",
      table_victory: "resources/sound/table_victory.mp3",
      table_lose: "resources/sound/table_lose.mp3"
    };
    ddz.MusicPath_mp3 = {
      table_background_music: "resources/sound/table_background_music.mp3"
    };
    ddz.SmiliesPath_mp3 = {
      flower: "resources/smilies/ie_flower.mp3",
      diamond: "resources/smilies/ie_diamond.mp3",
      egg: "resources/smilies/ie_egg.mp3",
      brick: "resources/smilies/ie_brick.mp3"
    };
    cc._RF.pop();
  }, {} ],
  ddz_revivalWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2744dhajhPY7dttmOE2TkR", "ddz_revivalWindow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        titleLabel: cc.Label,
        contentRichText: cc.RichText,
        centerButton: cc.Button,
        centerRichText: cc.RichText,
        ignoreButton: cc.Button,
        ignoreRichText: cc.RichText,
        matchName: "",
        failCondition: null,
        matchDes: null,
        sharePoint: "",
        conditionType: "",
        requestCount: 1,
        nowCount: 0,
        adCount: 1,
        adIds: [],
        nowAdId: "",
        toNext: false
      },
      setContentWithFailCondition: function setContentWithFailCondition(failCondition, matchName) {
        this.failCondition = failCondition;
        this.matchName = matchName;
        this.conditionType = failCondition.resurgenceCondition.conditionType;
        this.toNext = failCondition.resurgenceCondition.toNext;
        this.requestCount = failCondition.resurgenceCondition.requestCount;
        ddz.Share.shareKeywordReplace.repeatNumber = this.requestCount;
        this.nowCount = 0;
        ddz.Share.shareKeywordReplace.hadNumber = this.nowCount;
        this.adIds = failCondition.resurgenceCondition.adIds;
        this.titleLabel.string = failCondition.title || "提示";
        var contentString = hall.GlobalFuncs.replaceKeyWordInString(failCondition.content);
        this.contentRichText.string = "<color=#1A6951>" + contentString + "</c>";
        this.failCondition.resurgenceCondition.requestCount > 1 && -1 == failCondition.buttonText1.indexOf("hadNumber/repeatNumber") && (failCondition.buttonText1 += "(hadNumber/repeatNumber)");
        var centerString = hall.GlobalFuncs.replaceKeyWordInString(failCondition.buttonText1);
        this.centerRichText.string = "<color=#FFFFFF>" + centerString + "</c>";
        this.ignoreRichText.string = "<color=#1A6951>" + failCondition.buttonText2 + "</c>";
        if ("arena" == this.matchName) {
          this.setMatchInfo();
          var matchDes = hall.ME.matchInfo.getMatchDesByMatchId(ddz.matchModel._curWaitInfo.matchId);
          this.matchDes = matchDes;
        }
      },
      setRewardAndCompersation: function setRewardAndCompersation(isWin, chipNumber, multiple, adCount) {
        this.isOnShare = false;
        var config = ddz.gameModel.rewardAnduchangConfig;
        this.adCount = adCount;
        if (isWin) {
          this.adIds = config ? config.rewardConfig.adIds : [ "adunit-8bde7ac62d379503" ];
          this.conditionType = "reward";
          this.matchName = "reward";
          this.contentRichText.string = "<color=#1A6951>恭喜你! 本局共赢 </c><img src='ddz_mall_coin_icon' height=36 width=36/><color=#1A6951>" + chipNumber + "</c><br/><color=#1A6951>现在观看广告可获 " + multiple + "倍奖励哦~</c>";
        } else {
          this.adIds = config ? config.buChangConfig.adIds : [ "adunit-8bde7ac62d379503" ];
          this.conditionType = "compensation";
          this.matchName = "compensation";
          var percentage = 100 * multiple;
          percentage += "%";
          this.contentRichText.string = "<color=#1A6951>本局共输 </c><img src='ddz_mall_coin_icon' height=36 width=36/><color=#1A6951>" + chipNumber + "</c><br/><color=#1A6951>现在观看广告可获 " + percentage + "补偿哦~~</c>";
        }
        this.setCenterRichText();
        this.ignoreRichText.string = "<color=#1A6951>点击放弃></c>";
      },
      setCenterRichText: function setCenterRichText() {
        var btnText = "看广告领取";
        this.adCount > 1 && (btnText = "看广告领取 (" + this.nowCount + "/" + this.adCount + ")");
        this.centerRichText.string = "<color=#ffffff>" + btnText + "</c>";
      },
      setMatchInfo: function setMatchInfo() {
        var matchDes = hall.ME.matchInfo.getMatchDesByMatchId(ddz.matchModel._curWaitInfo.matchId);
        this.matchDes = matchDes;
        this.stageIndex = ddz.matchModel.getCurWaitInfo().stageIndex;
        var curArenaConfig = ddz.gameModel.getArenaMatchConfigJson()[this.matchDes.matchId.toString()];
        var sharePointValue = curArenaConfig["reviveSharePoint"];
        this.sharePoint = sharePointValue;
        for (var i in this.matchDes.stages) if (this.matchDes.stages[i].index == this.stageIndex) {
          var stage = this.matchDes.stages[i];
          if (1 == stage.canBack) {
            this.feeCount = stage.backFeeCount;
            this.shareRewardOnceCount = 1;
            "diamond" == curArenaConfig["shareRewardOnce"]["type"] && (this.shareRewardOnceCount = curArenaConfig["shareRewardOnce"]["count"]);
            this.getRewardCount = Math.ceil(this.feeCount / this.shareRewardOnceCount);
          } else hall.LOGD("arena revive", "something error");
        }
      },
      onLoad: function onLoad() {
        var that = this;
        this.scheduleOnce(function() {
          var ani = that.node.getComponent(cc.Animation);
          ani.play("btnTick");
        }, 1);
        ddz.matchModel.isShowingMatchRevivalPanel = true;
        var animation = this.getComponent(cc.Animation);
        animation.play("tipsWindowNode");
        ty.NotificationCenter.listen(ddz.EventType.ARENA_SEND_MATCH_BACK, this.close, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE_ERROR, this.errorShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_WINLOSESHAREREWARD, this.reciveWinLoseShareReward, this);
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(type) {
        this.isOnShare = false;
        if (!type) return;
        if (type != ddz.Share.onShareType.clickStatShareTypeRevial) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
         case 2:
          if (!this.failCondition.resurgenceCondition.holk || 0 == this.failCondition.resurgenceCondition.holk) {
            this.nowCount++;
            this.getDiamondToRevival();
            return;
          }
          break;

         case 3:
          this.nowCount++;
        }
        ddz.Share.resultType = 0;
        this.getDiamondToRevival();
      },
      reciveWinLoseShareReward: function reciveWinLoseShareReward(result) {
        ddz.GlobalFuncs.playZuanShi(false, this, result.rewardChip, true);
        this.onClose();
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        hall.LOGW("=====", "===================" + isEnded);
        this.isOnShare = false;
        if (isEnded) {
          this.nowCount++;
          if ("reward" == this.conditionType) {
            this.setCenterRichText();
            this.nowCount == this.adCount && ddz.gameModel.getWinLoseShareReward(parseInt(1));
          } else if ("compensation" == this.conditionType) {
            this.setCenterRichText();
            this.nowCount == this.adCount && ddz.gameModel.getWinLoseShareReward(parseInt(0));
          } else this.getDiamondToRevival();
        }
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        var errMsg = "广告播放失败,但您仍可复活!";
        hall.MsgBoxManager.showToast({
          title: errMsg
        });
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      getDiamondToRevival: function getDiamondToRevival() {
        ddz.Share.shareKeywordReplace.hadNumber = this.nowCount;
        var centerString = hall.GlobalFuncs.replaceKeyWordInString(this.failCondition.buttonText1);
        this.centerRichText.string = "<color=#FFFFFF>" + centerString + "</c>";
        hall.LOGW("=====", "===================" + this.nowCount);
        if (this.nowCount >= this.requestCount) {
          if ("arena" == this.matchName) ddz.waitGetRevial = {
            sharePoint: this.sharePoint,
            matchType: "arena",
            matchDes: this.matchDes,
            type: "waitRecive",
            needCount: this.getRewardCount,
            curCount: 0
          }; else {
            if (this.toNext) {
              ddz.matchModel.matchBackNextLevel();
              this.node.destroy();
              return;
            }
            var needCount = ddz.matchModel.getDiamondCountNeeded();
            ddz.waitGetRevial = {
              type: "waitRecive",
              curCount: 0,
              needCount: needCount
            };
          }
          var needCountR = ddz.waitGetRevial.needCount;
          for (var i = 0; i < needCountR; i++) ddz.gameModel.shareToGetreward(ddz.waitGetRevial.sharePoint || ddz.Share.SharePointType.firstFail);
          this.node.destroy();
        }
      },
      onClickCenterButton: function onClickCenterButton(event, number) {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        if (this.isOnShare) return;
        this.isOnShare = true;
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if ("share" == this.conditionType) ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeRevial); else if ("ad" == this.conditionType) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", this.matchName ]);
          var adId = this.adIds[hall.GlobalFuncs.getRandomNumberBefore(this.adIds.length)];
          this.nowAdId = adId;
          hall.adManager.showRewardedVideo(adId, this.matchName);
        } else if ("reward" == this.conditionType) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "reward" ]);
          var adId = this.adIds[hall.GlobalFuncs.getRandomNumberBefore(this.adIds.length)];
          this.nowAdId = adId;
          hall.adManager.showRewardedVideo(adId, "reward");
        } else if ("compensation" == this.conditionType) {
          ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "compensation" ]);
          var adId = this.adIds[hall.GlobalFuncs.getRandomNumberBefore(this.adIds.length)];
          this.nowAdId = adId;
          hall.adManager.showRewardedVideo(adId, "compensation");
        }
      },
      close: function close() {
        this.node.destroy();
      },
      onClose: function onClose(event) {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "abandonWatchVideo", this.matchName ]);
        "arena" == this.matchName && ddz.matchModel.matchGiveUp(this.matchDes.roomId, this.matchDes.matchId);
        this.isOnShare = false;
        this.node.destroy();
      },
      onBlack: function onBlack() {},
      onDestroy: function onDestroy() {
        ddz.matchRevivalPanel = null;
        ddz.matchModel.isShowingMatchRevivalPanel = false;
        ty.NotificationCenter.ignoreScope(this);
        this.unscheduleAllCallbacks();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_rewardCell: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f458xLM/JC+K6fxW/+t0wo", "ddz_rewardCell");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bgSpr: {
          default: null,
          type: cc.Node
        },
        titleLabel: {
          default: null,
          type: cc.Label
        },
        stateLabel: {
          default: null,
          type: cc.Label
        },
        numberLabel: {
          default: null,
          type: cc.Label
        },
        dateLabel: {
          default: null,
          type: cc.Label
        },
        bottomLine: {
          default: null,
          type: cc.Sprite
        }
      },
      addDataWithObject: function addDataWithObject(objc) {
        this.setDetailInformation(objc);
      },
      setDetailInformation: function setDetailInformation(resultMap) {
        this.titleLabel.string = resultMap.titleS;
        "--" != resultMap.numberString ? this.numberLabel.string = hall.GlobalFuncs.getMoneyStringWithCoupons(parseFloat(resultMap.numberString)) : this.numberLabel.string = resultMap.numberString;
        this.dateLabel.string = resultMap.timeS;
        this.stateLabel.string = "";
      },
      setBgSpr: function setBgSpr(_isActive) {
        this.bgSpr.active = _isActive;
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_rewardDetail_small: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6887gvngRLHIY/mgQOHvQ9", "ddz_rewardDetail_small");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ddz_rewardCell: {
          default: null,
          type: cc.Prefab
        },
        panel: cc.Node,
        parentScene: {
          default: null,
          serializable: false
        },
        cellHeight: 102
      },
      onLoad: function onLoad() {},
      setInformationWithTotalAndLoss: function setInformationWithTotalAndLoss(inforArray) {
        for (var i = 0; i < 8; i++) {
          var ddz_cell = cc.instantiate(this.ddz_rewardCell);
          ddz_cell.y = -60 - this.cellHeight * i;
          this.panel.addChild(ddz_cell);
          var ddz_rewardCellS = ddz_cell.getComponent("ddz_rewardCell");
          if (i < inforArray.length) {
            var resultA = inforArray[i];
            ddz_rewardCellS.setDetailInformation(resultA);
          } else ddz_rewardCellS.setDetailInformation({
            titleS: "--",
            numberString: "--",
            timeS: "--",
            stateS: "--"
          });
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_rewardDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76bd62j7mZPyq8rz/T8fWZb", "ddz_rewardDetail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tableView: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {},
      setDataArrayWithArray: function setDataArrayWithArray(array) {
        var window = this.tableView.getComponent("ddz_tableView");
        array.length > 50 && array.splice(50, array.length - 1);
        window.setDataArray(array);
      },
      addDataArrayWithArray: function addDataArrayWithArray(array) {
        var window = this.tableView.getComponent("ddz_tableView");
        window.addDataArray(array);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_reward_ani: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8048wxvrZKYrrJFLeUB7Zm", "ddz_reward_ani");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        aniNode: cc.Node,
        number: cc.Label
      },
      onLoad: function onLoad() {},
      playAni: function playAni() {
        var ani = this.aniNode.getComponent(cc.Animation);
        var anim = ani.getAnimationState("huode_01");
        anim.play();
      },
      stopAni: function stopAni() {
        var ani = this.aniNode.getComponent(cc.Animation);
        var anim = ani.getAnimationState("huode_01");
        anim.stop();
      },
      setNumber: function setNumber(num) {
        this.playAni();
        this.number.string = "x" + num + "元";
      },
      onClose: function onClose() {
        this.stopAni();
        this.node.destroy();
        ddz.rewardAni = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_reward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbe2erGtLtEYZc71t/H+Nkh", "ddz_reward");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rewardMain: {
          default: null,
          type: cc.Node
        },
        withDraw: {
          default: null,
          type: cc.Node
        },
        detail: {
          default: null,
          type: cc.Node
        },
        redPacket: {
          default: null,
          type: cc.Node
        },
        debugNode: {
          default: null,
          type: cc.Node
        },
        getRewardButton: {
          default: null,
          type: cc.Button
        },
        moreButton: {
          default: null,
          type: cc.Button
        },
        drawButton: {
          default: null,
          type: cc.Button
        },
        conversionButton: {
          default: null,
          type: cc.Button
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        btnDebug: {
          default: null,
          type: cc.Button
        },
        redBar: {
          default: null,
          type: cc.Node
        },
        dataArray: [],
        nowType: 1
      },
      backAction: function backAction() {
        ddz.LOGD(null, "backAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var window;
        if (1 == this.nowType) {
          var sceneName = "Ddz";
          hall.GlobalFuncs.popScene();
        } else if (2 == this.nowType) {
          this.withDraw.active = false;
          this.rewardMain.active = true;
          this.nowType = 1;
          window = this.rewardMain.getComponent("ddz_getReward_main");
          window.setInformationWithTotalAndLoss();
          this.redBar.active = true;
        } else if (3 == this.nowType) {
          this.detail.active = false;
          this.rewardMain.active = true;
          this.nowType = 1;
          window = this.rewardMain.getComponent("ddz_getReward_main");
          window.setInformationWithTotalAndLoss();
          this.redBar.active = true;
        } else if (4 == this.nowType) {
          this.redPacket.active = false;
          this.withDraw.active = true;
          this.nowType = 2;
          window = this.withDraw.getComponent("ddz_getReward_Withdraw");
          window.setLossMoneyNumber();
          this.redBar.active = true;
        } else if (5 == this.nowType) {
          this.debugNode.active = false;
          this.withDraw.active = true;
          this.nowType = 2;
          window = this.withDraw.getComponent("ddz_getReward_Withdraw");
          window.setLossMoneyNumber();
          this.redBar.active = true;
        }
      },
      ctor: function ctor() {},
      onLoad: function onLoad() {
        ddz.GlobalFuncs.drawGameCanvas();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        this.getRewardButton.node.on("click", this.onRewardButton, this);
        this.moreButton.node.on("click", this.onMoreButton, this);
        this.drawButton.node.on("click", this.onDrawButton, this);
        this.conversionButton.node.on("click", this.onConversionButton, this);
        this.nowType = 1;
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.firstWithDraw);
        hall.MsgFactory.getUserRewardInfo();
        ty.NotificationCenter.listen(ddz.EventType.RECIVE_MESSAGE_LIST, this.onReciveMessageList, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.CHANGE_DEBUG_MODE, this.changeDebugMode, this);
        this.refreshDebugBtn();
      },
      refreshDebugBtn: function refreshDebugBtn() {
        this.btnDebug.node.active = debugMode;
      },
      setsetOriginalDataArray: function setsetOriginalDataArray(dataArray) {
        this.dataArray = dataArray;
        var window = this.rewardMain.getComponent("ddz_getReward_main");
        window.setDitailList(this.dataArray);
      },
      onMoreButton: function onMoreButton() {
        ddz.LOGD(null, "onMoreButton进入奖励明细界面");
        var window = this.detail.getComponent("ddz_rewardDetail");
        window.setDataArrayWithArray(this.dataArray);
        this.rewardMain.active = false;
        this.detail.active = true;
        this.nowType = 3;
      },
      onRewardButton: function onRewardButton() {
        ddz.LOGD(null, "onRewardButton进入提现页面");
        var window = this.withDraw.getComponent("ddz_getReward_Withdraw");
        window.setLossMoneyNumber();
        this.rewardMain.active = false;
        this.withDraw.active = true;
        this.nowType = 2;
      },
      addTipsWindow: function addTipsWindow(tips, timer, tips_2) {
        var preFabPath = "prefabs/ddz_window_tips";
        var comName = "ddz_tipsWindow";
        var that = this;
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.parentScene = that;
          var testArray = [ {
            title: "分享",
            bottomType: 0
          } ];
          window.setTitleContentAndButtons("提示", tips, testArray);
          timer && timer > 0 && window.updatePos(timer, tips_2);
        });
      },
      onClickCenterButton: function onClickCenterButton() {
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareCash);
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareCash) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      addTipsAssets: function addTipsAssets(tips) {
        var preFabPath = "prefabs/ddz_window_normal";
        var comName = "ddz_window_normal";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tips + "</c>", [ {
            title: "确定",
            callFunc: function callFunc() {}
          } ]);
        });
      },
      onDrawButton: function onDrawButton() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "withDraw" ]);
        var draw = this.withDraw.getComponent("ddz_getReward_Withdraw");
        if (!draw.lossMoneyString || 0 == draw.lossMoneyString) {
          var tips = "余额不足，快去打牌赢奖吧";
          this.addTipsAssets(tips);
          return;
        }
        if (Number(draw.drawMoeyString) > Number(draw.lossMoneyString)) {
          var tips = "余额不足，快去打牌赢奖吧";
          this.addTipsAssets(tips);
          return;
        }
        var _drawMoeyString = draw.drawMoeyString;
        var that = this;
        if (ddz.gameModel.firstWithDrawPoint > 0) {
          if (Number(draw.drawMoeyString) <= 0) {
            var tips = "你还没有输入需兑换金额哦~";
            this.addTipsAssets(tips);
            return;
          }
          if (Number(draw.drawMoeyString) < .3) {
            var tips = "提现不得低于0.3元";
            this.addTipsAssets(tips);
            return;
          }
          ty.NotificationCenter.listen(ddz.EventType.UPDATE_CASH_RESULT, this.onCashResult, this);
          ddz.gameModel.getCashReward(parseInt(100 * _drawMoeyString));
          return;
        }
        if (draw.drawMoeyString < 5) {
          var tips = "提现金额最低5元哦\n零钱还可兑换金币打牌赢奖~";
          this.addTipsAssets(tips);
          return;
        }
        if (draw.drawMoeyString.indexOf(".") > 0) {
          var arr = draw.drawMoeyString.split(".");
          _drawMoeyString = Math.floor(Number(_drawMoeyString));
          if (arr[1] && arr[1] > 0) {
            var tips = "提现仅支持整数\n先帮你提现" + _drawMoeyString + "元";
            var preFabPath = "prefabs/ddz_window_normal";
            var comName = "ddz_window_normal";
            hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
              var window = preFabNode.getComponent(comName);
              window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tips + "</c>", [ {
                title: "取消",
                callFunc: function callFunc() {}
              }, {
                title: "提现",
                callFunc: function callFunc() {
                  ty.NotificationCenter.listen(ddz.EventType.UPDATE_CASH_RESULT, that.onCashResult, that);
                  ddz.gameModel.getCashReward(parseInt(100 * _drawMoeyString));
                }
              } ]);
            });
            return;
          }
        }
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_CASH_RESULT, this.onCashResult, this);
        ddz.gameModel.getCashReward(parseInt(100 * _drawMoeyString));
      },
      onConversionButton: function onConversionButton() {
        var draw = this.withDraw.getComponent("ddz_getReward_Withdraw");
        if (!draw.drawMoeyString || draw.drawMoeyString <= 0) {
          var tips = "你还没有输入需兑换金额哦~";
          this.addTipsAssets(tips);
          return;
        }
        var that = this;
        var preFabPath = "prefabs/ddz_window_normal";
        var comName = "ddz_window_normal";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
          var window = preFabNode.getComponent(comName);
          var tipsString = "兑换金币" + 1e4 * draw.drawMoeyString;
          window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tipsString + "</c>", [ {
            title: "取消",
            callFunc: function callFunc() {}
          }, {
            title: "兑换",
            callFunc: function callFunc() {
              ty.NotificationCenter.listen(ddz.EventType.UPDATE_CASH_RESULT, that.onCashResult, this);
              ddz.gameModel.getCashCoin(parseInt(100 * draw.drawMoeyString));
            }
          } ]);
        });
      },
      onCashResult: function onCashResult(argument) {
        ddz.LOGD(null, "cash_cash_cash" + JSON.stringify(argument));
        var result = argument.result;
        var window, lossM;
        if (debugMode && !result.chip && -1 != result.code) {
          hall.MsgFactory.getUserInfo(ddz.GameId);
          window = this.redPacket.getComponent("ddz_getRedPacket");
          lossM = (parseInt(result.value) / 100).toFixed(2) + "";
          window.setRedPacketNumber(lossM);
          ddz.Share.shareKeywordReplace.withDrawMoney = lossM;
          this.withDraw.active = false;
          this.redPacket.active = true;
          this.redBar.active = false;
          this.nowType = 4;
          ddz.gameModel.firstWithDrawPoint > 0 && ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstWithDraw);
          ddz.gameModel.checkShareReward(ddz.Share.SharePointType.firstWithDraw);
          return;
        }
        if (result.chip) {
          var tips = "兑换成功";
          var str = "<img src='ddz_coin_white'/><color=#FFFFFF> " + result.chip + "</c>";
          ddz.GlobalFuncs.playShareZuanShi(result.chip, tips, str);
        } else if (result.code && -1 == result.code) hall.MsgBoxManager.showToast({
          title: result.info
        }); else {
          hall.MsgFactory.getUserInfo(ddz.GameId);
          window = this.redPacket.getComponent("ddz_getRedPacket");
          lossM = (parseInt(result.value) / 100).toFixed(2) + "";
          window.setRedPacketNumber(lossM);
          ddz.Share.shareKeywordReplace.withDrawMoney = lossM;
          this.withDraw.active = false;
          this.redPacket.active = true;
          this.redBar.active = false;
          this.nowType = 4;
          ddz.gameModel.firstWithDrawPoint > 0 && ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstWithDraw);
        }
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.firstWithDraw);
      },
      start: function start() {},
      update: function update(dt) {},
      onReciveMessageList: function onReciveMessageList(result) {
        var list = result.msgs;
        if ("undefined" != typeof list) {
          var resultArr = [];
          var addMap;
          var startIndex;
          var endIndex;
          for (var i = 0; i < list.length; i++) {
            var resultMap = list[i];
            var timeS = resultMap.time;
            var textS = resultMap.text;
            if (textS && -1 == textS.indexOf("fuhao")) if (textS.indexOf("提现") > 0) {
              addMap = {};
              startIndex = textS.indexOf("提现") + 2;
              endIndex = textS.indexOf("元");
              addMap.timeS = timeS;
              addMap.numberString = textS.substring(startIndex, endIndex);
              addMap.titleS = "提现";
              resultArr.push(addMap);
            } else if (textS.indexOf("宝箱奖励红包券") >= 0) {
              addMap = {};
              startIndex = textS.indexOf("红包券") + 3;
              endIndex = textS.indexOf("红包券");
              addMap.timeS = timeS;
              addMap.titleS = "宝箱奖励";
              addMap.numberString = textS.substring(endIndex + 3);
              Number(addMap.numberString) > 0 && resultArr.push(addMap);
            } else if (textS.indexOf("新手红包券") >= 0) {
              addMap = {};
              startIndex = textS.indexOf("券") + 1;
              addMap.timeS = timeS;
              addMap.titleS = "新手红包";
              addMap.numberString = textS.substring(startIndex);
              resultArr.push(addMap);
            } else if (textS.indexOf("回归红包券") >= 0) {
              addMap = {};
              startIndex = textS.indexOf("券") + 1;
              addMap.timeS = timeS;
              addMap.titleS = "回归红包";
              addMap.numberString = textS.substring(startIndex);
              resultArr.push(addMap);
            } else if (textS.indexOf("红包券") > 0) {
              addMap = {};
              startIndex = textS.indexOf("获得") + 2;
              endIndex = textS.indexOf("红包券");
              var endIndex2 = textS.indexOf("，");
              addMap.timeS = timeS;
              addMap.titleS = "通关奖励";
              addMap.numberString = textS.substring(endIndex + 3, endIndex2);
              Number(addMap.numberString) > 0 && resultArr.push(addMap);
            } else if (textS.indexOf("奖券") > 0) {
              addMap = {};
              endIndex = textS.indexOf("奖券");
              startIndex = textS.indexOf("+", endIndex - 8) + 1;
              addMap.timeS = timeS;
              addMap.titleS = "通关固定奖励";
              addMap.numberString = textS.substring(startIndex, endIndex);
              resultArr.push(addMap);
            } else if (textS.indexOf("比赛") >= 0) {
              addMap = {};
              endIndex = textS.indexOf("元\n");
              startIndex = textS.indexOf("奖励") + 3;
              var str = textS.slice(startIndex, endIndex);
              if (str.indexOf("+") > 0) {
                var arr = str.split("+");
                str = arr[arr.length - 1];
              } else str = textS.substring(startIndex, endIndex);
              addMap.timeS = timeS;
              addMap.titleS = "比赛奖励";
              addMap.numberString = 100 * str;
              endIndex > 0 && resultArr.push(addMap);
            } else if (textS.indexOf("牌桌局数") >= 0) {
              addMap = {};
              endIndex = textS.indexOf("元");
              startIndex = textS.indexOf(" ") + 1;
              addMap.timeS = timeS;
              addMap.titleS = "牌桌局数奖励";
              addMap.numberString = 100 * textS.substring(startIndex, endIndex);
              resultArr.push(addMap);
            }
          }
          this.setsetOriginalDataArray(resultArr);
        }
      },
      changeDebugMode: function changeDebugMode(value) {
        debugMode = value;
        this.refreshDebugBtn();
        wx.setEnableDebug({
          enableDebug: debugMode,
          success: function success() {
            console.log("debugMode start!");
          },
          fail: function fail() {
            console.log("debugMode fail!");
          },
          complete: function complete() {}
        });
        hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.DEBUG_MODE, value);
        this.withDraw.active = !debugMode;
        this.debugNode.active = debugMode;
        if (this.debugNode.active) {
          this.nowType = 5;
          var window = this.debugNode.getComponent("ServerManager");
          window.testWithString();
        } else {
          this.nowType = 2;
          window = this.withDraw.getComponent("ddz_getReward_Withdraw");
          window.setLossMoneyNumber();
        }
      },
      onDebug: function onDebug() {
        this.debugNode.active = !this.debugNode.active;
        if (this.debugNode.active) {
          var window = this.debugNode.getComponent("ServerManager");
          window.testWithString();
        }
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_shareResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f7ab8wu3RJjJfbPvQxgsRo", "ddz_shareResult");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_shareReward_windows: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1a6d6lX4hpG+JOZdYZ1XqD/", "ddz_shareReward_windows");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tableView: {
          default: null,
          type: cc.Node
        },
        titleBg: {
          default: null,
          type: cc.Sprite
        },
        titleBgSpriteFrame: [ cc.SpriteFrame ],
        banner: cc.Node,
        btnLabel: cc.RichText,
        jiantou: cc.Node,
        personalAssets: cc.Node
      },
      onLoad: function onLoad() {
        var that = this;
        this.scheduleOnce(function() {
          var ani = that.banner.getComponent(cc.Animation);
          ani.play("btnTick");
        }, 1);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_NEW_REWARD_MASSAGE, this.updateNewRewardMassage, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_FRIEND_TITLE_STATE, this.updateTitleBg, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_WINDOW_ANI, this.onClose, this);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.shareFriend);
        var _shareType = ddz.Share.onShareType.clickStatShareTypeInviteNewFriend;
        this.btnLabel.string = "<color=#E54D42>" + hall.GlobalFuncs.getButtonTitle(_shareType) + "</c>";
        var seq = cc.sequence(cc.moveTo(.5, cc.p(230, 0)), cc.delayTime(.5), cc.moveTo(.5, cc.p(250, 0))).repeatForever();
        this.jiantou.runAction(seq);
        hall.adManager.destroyWidthBannerAd();
        hall.adManager.canShowListSceneBanner = false;
        this.setPersonalAssets();
      },
      setPersonalAssets: function setPersonalAssets() {
        var wimdow = this.personalAssets.getComponent("personalAssets");
        wimdow.updateInfo();
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(type) {
        if (type && type != ddz.Share.onShareType.clickStatShareTypeInviteNewFriend) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      onShareBtn: function onShareBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "diamondShareFriend" ]);
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeInviteNewFriend);
      },
      onHelpBox: function onHelpBox() {
        ddz.isClickOpenBox = true;
        ddz.gameModel.getOpenBox();
      },
      updateNewRewardMassage: function updateNewRewardMassage() {
        var that = this;
        requestAnimationFrame(function() {
          var window = that.tableView.getComponent("ddz_tableView");
          window.setDataArray(ddz.gameModel.inviteNewShowList);
        });
      },
      updateTitleBg: function updateTitleBg(leftCount) {
        this.titleBg.spriteFrame = 0 == leftCount ? this.titleBgSpriteFrame[1] : this.titleBgSpriteFrame[0];
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        var curScene = cc.director.getScene();
        if ("RoomListScene" == curScene.name || "MatchListScene" == curScene.name) {
          var bc = ddz.gameModel.getRoomListBannerConfigJson();
          bc && ty.NotificationCenter.trigger(ddz.EventType.OPEN_BANNER, bc);
        }
      },
      removeLoopAni: function removeLoopAni() {
        var ani = this.banner.getComponent(cc.Animation);
        ani.stop();
        this.jiantou.stopAllActions();
      },
      shut: function shut() {
        this.removeLoopAni();
        this.node.destroy();
      },
      onClose: function onClose() {
        this.shut();
        ddz.ddz_shareReward = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_success: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68e5d9Q/7pA0Jl0fmbtLEHD", "ddz_success");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        resultTitle: {
          default: null,
          type: cc.Node
        },
        progress: {
          default: null,
          type: cc.Node
        },
        buttons: {
          default: null,
          type: cc.Node
        },
        backButton: {
          default: null,
          type: cc.Button
        },
        topButton: cc.Button,
        bottomBtnText: cc.RichText,
        videoIcon: cc.Node,
        getDiamondIcon: cc.Node
      },
      onLoad: function onLoad() {
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
        ddz.AudioHelper.playMusic("/resources/sound/Upgrade.mp3", false);
        var winSize = cc.director.getWinSize();
        var bg = this.node.getChildByName("ddz_scene_bg_0");
        this.node.width = winSize.width;
        this.node.height = winSize.height;
        bg.width = winSize.width;
        bg.height = winSize.height;
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_ALL_MATCH_RESULT_PANEL, this.shut, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE_ERROR, this.errorShowRewardVideo, this);
        ty.NotificationCenter.listen(ty.EventType.UPDATE_BUTTON_TEXT, this.updateButtonText, this);
        this.isGetJiPaiQi = false;
        this.jipaiqiAdId = "adunit-8bde7ac62d379503";
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.addApplet);
      },
      onClickGetDiamondBtn: function onClickGetDiamondBtn() {
        hall.GlobalFuncs.onOfficialAccountGuide(true);
      },
      updateButtonText: function updateButtonText(data) {
        if (data.pointId == ddz.Share.SharePointType.addApplet) if (data.leftCount && data.leftCount > 0 && ddz.GlobalFuncs.judgeweChatVersion()) {
          this.getDiamondIcon.active = true;
          var ani = this.getDiamondIcon.getComponent(cc.Animation);
          ani.play("getdiamond_ani");
        } else this.getDiamondIcon.active = false;
      },
      showResults: function showResults(isShow) {
        this.node.active = isShow;
        if (isShow) {
          hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
          ty.NotificationCenter.trigger(ty.EventType.CREATE_TABLE_AD);
        }
        if (isShow && !ty.UserInfo.isInBSGS && 0 == ddz.gameModel.throughCount) {
          var bc = ddz.gameModel.getSkipCustomsConfigJson();
          bc && bc.newCustoms > 0 && hall.GlobalFuncs.onSkipCustom(1);
        }
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareTypeCustomsSuccess) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请分享到微信群哦~"
          });
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
        }
        ddz.Share.resultType = 0;
      },
      backAction: function backAction() {
        ddz.LOGD(null, "backAction");
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        this.removeAni();
        hall.GlobalFuncs.popScene();
      },
      seeAdGetJiPaiQi: function seeAdGetJiPaiQi() {
        hall.LOGD("=====", "file = [ddz_success] fun = [seeAdGetJiPaiQi] this.jipaiqiAdId = " + this.jipaiqiAdId);
        this.isGetJiPaiQi = true;
        hall.adManager.showRewardedVideo(this.jipaiqiAdId, "getJiPaiQi");
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "ddzSuccessGetJiPaiQi" ]);
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        if (isEnded && this.isGetJiPaiQi) {
          ddz.gameModel.firstUseJiPaiQiPoint > 0 ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstUseJiPaiQi) : ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.adGetJiPaiQi);
          this.isGetJiPaiQi = false;
        }
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      onTopButtonAction: function onTopButtonAction() {
        var shareType = ddz.Share.onShareType.clickStatShareTypeCustomsSuccess;
        ddz.Share.shareWithType(shareType);
      },
      onBottomButtonAction: function onBottomButtonAction() {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        ddz.matchModel.matchChallenge();
        ddz.GlobalFuncs.removeMatchResultPanel(this);
      },
      shut: function shut() {
        ddz.matchResultPanel = null;
        this.removeAni();
        this.node.destroy();
      },
      _onPreDestroy: function _onPreDestroy() {
        this._super();
        this.removeAni();
      },
      removeAni: function removeAni() {
        this.resultTitle && this.resultTitle.removeFromParent();
        this.progress && this.progress.removeFromParent();
        var ani_2 = this.getDiamondIcon.getComponent(cc.Animation);
        ani_2.stop();
        this.getDiamondIcon.removeFromParent();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.adManager.destroyWidthBannerAd();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode") && hall.AdManagerTYWX.getAdNodeByTag("tableAdNode").hideAdNode();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_tableView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "711d7gjKaFL/7TRr10IWw/+", "ddz_tableView");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this.cellPool = null;
      },
      properties: {
        cellComponent: "ddz_rewardCell",
        contentWidth: 600,
        contentHeight: 800,
        cellHeight: 105,
        startIndex: 0,
        allLong: 0,
        scrollOffSet: 0,
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        cell: {
          default: null,
          type: cc.Prefab
        },
        dataArray: []
      },
      onLoad: function onLoad() {
        this.cellPool = new cc.NodePool();
        this.scrollView.content.width = this.contentWidth;
        this.scrollView.content.height = this.contentHeight;
        this.scrollView.node.on("scrolling", this.scrollViewisScrolling, this);
        this.scrollView.node.on("scroll-to-bottom", this.scrollViewisScrollToBottom, this);
      },
      addDataArray: function addDataArray(dataArray) {
        this.dataArray = this.dataArray.concat(dataArray);
        this.contentHeight = this.dataArray.length * this.cellHeight;
        this.scrollView.content.height = this.contentHeight;
      },
      setDataArray: function setDataArray(dataArray) {
        if (!dataArray || dataArray.length < 1) return;
        this.dataArray = dataArray;
        this.contentHeight = this.dataArray.length * this.cellHeight;
        this.scrollView.content.height = this.contentHeight;
        this.startIndex = 0;
        this.allLong = parseInt(this.scrollView.node.height / this.cellHeight + 2);
        this.cellPool || (this.cellPool = new cc.NodePool());
        for (var i = 0; i <= this.allLong; i++) this.cellPool.put(cc.instantiate(this.cell));
        for (var i = this.startIndex; i <= this.allLong; i++) this.makeCellWithIndex(i);
        this.scrollView.scrollToOffset(0, 0);
      },
      makeCellWithIndex: function makeCellWithIndex(index) {
        if (index > this.dataArray.length - 1) {
          ddz.LOGD(null, "没有这个cell了");
          return;
        }
        var obj = this.dataArray[index];
        var ddz_cell;
        ddz_cell = this.cellPool.size() > 0 ? this.cellPool.get() : cc.instantiate(this.cell);
        ddz_cell.y = -(index + .5) * this.cellHeight;
        this.scrollView.content.addChild(ddz_cell, 1, index + 500);
        var ddz_rewardCellS = ddz_cell.getComponent(this.cellComponent);
        if (obj) {
          ddz_rewardCellS.index = index;
          ddz_rewardCellS.addDataWithObject(obj);
        }
      },
      deleteCellWithCell: function deleteCellWithCell(cell) {
        if (cell) {
          this.cellPool.put(cell);
          cell.removeFromParent();
        }
      },
      scrollViewisScrolling: function scrollViewisScrolling(scrolView) {
        var nowY = this.scrollView.getScrollOffset().y;
        nowY + 1e3 > this.contentHeight && ty.NotificationCenter.trigger(ddz.EventType.SCROLLTOBOTTOM);
        var starIn = parseInt(nowY / this.cellHeight - 1);
        if (starIn < 0) return;
        if (starIn < this.startIndex) {
          if (starIn < this.startIndex - this.allLong) {
            for (var i = this.startIndex; i <= this.startIndex + this.allLong; i++) {
              var cell = this.scrollView.content.getChildByTag(i + 500);
              this.deleteCellWithCell(cell);
            }
            for (var j = starIn; j <= starIn + this.allLong; j++) this.makeCellWithIndex(j);
            this.startIndex = starIn;
            return;
          }
          for (var i = starIn + this.allLong + 1; i <= this.startIndex + this.allLong; i++) {
            var cell = this.scrollView.content.getChildByTag(i + 500);
            this.deleteCellWithCell(cell);
          }
          for (var j = starIn; j < this.startIndex; j++) this.makeCellWithIndex(j);
          this.startIndex = starIn;
          return;
        }
        if (starIn > this.startIndex) {
          if (starIn > this.startIndex + this.allLong) {
            for (var i = this.startIndex; i <= this.startIndex + this.allLong; i++) {
              var cell = this.scrollView.content.getChildByTag(i + 500);
              this.deleteCellWithCell(cell);
            }
            for (var j = starIn; j <= starIn + this.allLong; j++) this.makeCellWithIndex(j);
            this.startIndex = starIn;
            return;
          }
          for (var i = this.startIndex; i < starIn; i++) {
            var cell = this.scrollView.content.getChildByTag(i + 500);
            this.deleteCellWithCell(cell);
          }
          for (var end = parseInt(this.startIndex + this.allLong + 1); end <= parseInt(starIn + this.allLong); end++) this.makeCellWithIndex(end);
          this.startIndex = starIn;
        }
      },
      scrollViewisScrollToBottom: function scrollViewisScrollToBottom() {
        ddz.LOGD(null, "------scrollViewisScrollToBottom-------");
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_tipsWindow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "776cfqTURtAvahetqtdOl1M", "ddz_tipsWindow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        coloseButton: {
          default: null,
          type: cc.Button
        },
        titleLabel: {
          default: null,
          type: cc.Label
        },
        buttonListNode: {
          default: null,
          type: cc.Node
        },
        contentLabel: {
          default: null,
          type: cc.RichText
        },
        tipstLabel: {
          default: null,
          type: cc.Label
        },
        tipsRichText: {
          default: null,
          type: cc.RichText
        },
        progressNode: {
          default: null,
          type: cc.Node
        },
        clickType: 0,
        parentScene: {
          default: null
        },
        noDissolve: false,
        lossTime: 0,
        isCreator: false,
        agreeState: false,
        havaAnswer: false
      },
      onLoad: function onLoad() {
        var size = cc.director.getWinSize();
        this.backBg.node.setContentSize(size);
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
      },
      setTitleContentAndButtons: function setTitleContentAndButtons(titleString, contentString, buttons, diamondCount) {
        this.titleLabel.string = titleString;
        this.contentLabel.string = "<color=#1A6951>" + contentString + "</color>";
        var buttonManager = this.buttonListNode.getComponent("ddz_item_tipsWindow_buttonNode");
        buttonManager.setButtons(buttons, diamondCount);
        this.progressNode.active = false;
        this.buttonListNode.active = true;
        this.tipsRichText.node.active = false;
        this.contentLabel.node.y = 20;
      },
      setRightBtnText: function setRightBtnText(_string) {
        var buttonManager = this.buttonListNode.getComponent("ddz_item_tipsWindow_buttonNode");
        buttonManager.setRightBtnText(_string);
      },
      updatePos: function updatePos(timer, tips_2) {
        if (timer) {
          this.contentLabel.node.y = 50;
          this.tipstLabel.node.active = true;
          this.tipstLabel.string = tips_2;
          ty.Timer.setTimer(this, function() {
            this.tipstLabel.node.active = false;
          }, timer, 1, 0);
        } else {
          this.contentLabel.node.y = 17;
          this.tipstLabel.node.active = false;
        }
      },
      playEndAnimation: function playEndAnimation() {
        this.completeAni();
      },
      completeAni: function completeAni() {
        1 == this.clickType ? this.parentScene && this.parentScene.onClickLeftButton() : 2 == this.clickType ? this.parentScene && this.parentScene.onClickRightButton() : 3 == this.clickType ? this.parentScene && this.parentScene.onClickCenterButton() : 4 == this.clickType && this.parentScene && this.parentScene.tipsOnClose && this.parentScene.tipsOnClose();
        this.node.removeFromParent();
      },
      onClickLeftButton: function onClickLeftButton(event) {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (this.noDissolve) {
          this.clickType = 0;
          this.parentScene && this.parentScene.onClickLeftButton();
        } else {
          this.clickType = 1;
          this.playEndAnimation();
        }
      },
      onClickRightButton: function onClickRightButton(event) {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (this.noDissolve) {
          this.clickType = 0;
          this.parentScene && this.parentScene.onClickRightButton();
        } else {
          this.clickType = 2;
          this.playEndAnimation();
        }
      },
      onClickCenterButton: function onClickCenterButton(event) {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (this.noDissolve) {
          this.clickType = 0;
          this.parentScene && this.parentScene.onClickCenterButton();
        } else {
          this.clickType = 3;
          this.playEndAnimation();
        }
      },
      onClose: function onClose(event, type) {
        ty.NotificationCenter.trigger(ddz.EventType.UPDATE_RANK_LIST);
        this.clickType = 0;
        type && "close" == type && (this.clickType = 4);
        this.playEndAnimation();
      },
      changeContentLabelString: function changeContentLabelString(guanS) {
        var guan = ddz.matchModel.getStageIndex() - 1;
        var desInfo = ddz.matchModel.getCurDes();
        if (desInfo && desInfo.detailStages) {
          var stageInfo = desInfo.detailStages;
          if (stageInfo && stageInfo.length > guan) {
            var des = stageInfo[guan];
            var count = des.count;
            if (count) {
              this.contentLabel.string = "<color=#1A6951>使用 </color><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + count + "继续挑战第" + guanS + "关</color>";
              return;
            }
          }
        }
        this.contentLabel.string = "<color=#1A6951>使用 </color><img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> 1继续挑战第" + guanS + "关</color>";
      },
      setDissolvePregrossForCreator: function setDissolvePregrossForCreator(lossTime, progress) {
        this.coloseButton.node.active = false;
        this.lossTime = lossTime;
        this.buttonListNode.active = false;
        this.tipsRichText.node.active = false;
        this.progressNode.active = true;
        this.contentLabel.string = "<color=#1A6951>你已发起解散牌桌</c><br/><color=#1A6951>请等待其他玩家确定(" + this.lossTime + "s)</c>";
        this.contentLabel.node.y = 55;
        this.progressNode.y = -50;
        var progressManager = this.progressNode.getComponent("ddz_item_tipswindow_progress");
        progressManager.setDissolvePregross(progress);
        this.isCreator = true;
        this.havaAnswer = true;
        ty.Timer.setTimer(this, this.countDown, 1);
      },
      setDissolvePregrossForAnswer: function setDissolvePregrossForAnswer(lossTime, progress, name) {
        this.coloseButton.node.active = false;
        this.lossTime = lossTime;
        this.titleLabel.string = "解散牌桌";
        this.buttonListNode.active = true;
        this.tipsRichText.node.active = false;
        this.progressNode.active = true;
        this.progressNode.y = 14;
        this.contentLabel.string = "<color=#1A6951>玩家  </c><color=#FD5051>" + name + "</c><color=#1A6951>  发起解散牌桌</c><br/><color=#1A6951>是否同意？</c>";
        this.contentLabel.node.y = 75;
        var progressManager = this.progressNode.getComponent("ddz_item_tipswindow_progress");
        progressManager.setDissolvePregross(progress);
        var testArray = [ {
          title: "解散(" + this.lossTime + "s)"
        }, {
          title: "不解散"
        } ];
        var buttonManager = this.buttonListNode.getComponent("ddz_item_tipsWindow_buttonNode");
        buttonManager.setButtons(testArray);
        this.isCreator = false;
        this.havaAnswer = false;
        ty.Timer.setTimer(this, this.countDown, 1);
      },
      countDown: function countDown() {
        this.lossTime--;
        if (this.lossTime <= 0) {
          if (this.havaAnswer) this.onClose(); else {
            this.onClickLeftButton();
            this.onClose();
          }
          return;
        }
        if (this.isCreator) this.contentLabel.string = "<color=#1A6951>你已发起解散牌桌</c><br/><color=#1A6951>请等待其他玩家确定(" + this.lossTime + "s)</c>"; else if (this.havaAnswer) this.agreeState ? this.contentLabel.string = "<color=#1A6951>你同意解散牌桌，等待牌友确认(" + this.lossTime + "s)</c>" : this.contentLabel.string = "<color=#1A6951>你不同意解散牌桌，等待牌友确认(" + this.lossTime + "s)</c>"; else {
          var testArray = [ {
            title: "解散(" + this.lossTime + "s)"
          }, {
            title: "不解散"
          } ];
          var buttonManager = this.buttonListNode.getComponent("ddz_item_tipsWindow_buttonNode");
          buttonManager.setButtons(testArray);
        }
        this.lossTime;
      },
      changePregross: function changePregross(progress) {
        var progressManager = this.progressNode.getComponent("ddz_item_tipswindow_progress");
        progressManager.setDissolvePregross(progress);
      },
      changeStateToWait: function changeStateToWait(anser) {
        this.havaAnswer = true;
        this.buttonListNode.active = false;
        this.tipsRichText.node.active = false;
        this.progressNode.active = true;
        if (1 == anser) {
          this.agreeState = true;
          this.contentLabel.string = "<color=#1A6951>你同意解散牌桌，等待牌友确认(" + this.lossTime + "s)</c>";
        } else {
          this.agreeState = false;
          this.contentLabel.string = "<color=#1A6951>你不同意解散牌桌，等待牌友确认(" + this.lossTime + "s)</c>";
        }
        this.contentLabel.node.y = 55;
        this.progressNode.y = -50;
      },
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
      },
      onBlock: function onBlock() {}
    });
    cc._RF.pop();
  }, {} ],
  ddz_tipswindow_createRoom_item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "60ce86djyxCNrNfVj8NZbJg", "ddz_tipswindow_createRoom_item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          default: null,
          type: cc.Label
        },
        selectedSprite: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      setSelectedState: function setSelectedState(selected) {
        this.selectedSprite.node.active = selected;
        this.titleLabel.color = selected ? cc.color(253, 80, 81, 1) : cc.color(26, 105, 81, 1);
      },
      setTitleString: function setTitleString(titleString) {
        this.titleLabel.string = titleString;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_toast_cell: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c4d6hGmHZE3ZNIBF1eODYg", "ddz_toast_cell");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          default: null,
          type: cc.Label
        },
        bgSprite: {
          default: null,
          type: cc.Sprite
        }
      },
      setTitleWithString: function setTitleWithString(titleString) {
        this.titleLabel.string = titleString;
        var t_size = this.titleLabel.node.getContentSize();
        var size = this.bgSprite.node.getContentSize();
        size.height = t_size.height + 31;
        this.bgSprite.node.setContentSize(size);
        ty.Timer.setTimer(this, this.closeAction, 3);
      },
      closeAction: function closeAction() {
        ty.Timer.cancelTimer(this, function() {});
        this.node.destroy();
        ddz.toastNode = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_useDiamond: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5552fE6wAdJTK3caTZpouRt", "ddz_useDiamond");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        startRichText: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        ddz.matchModel.getMatchDes();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_MATCH_DES, this.updateMatchInfo, this);
      },
      updateMatchInfo: function updateMatchInfo() {
        var matchDes = ddz.matchModel.getCurDes();
        var savaInfo = matchDes.saveInfo;
        if (6789 == matchDes.matchId && savaInfo && savaInfo.record && savaInfo.record.stageIndex) {
          var _stageIndex = savaInfo.record.stageIndex;
          this.startRichText.string = _stageIndex && _stageIndex > 1 ? "<img src='ddz_main_icon_begin'/><color=#ffffff> 继续第" + _stageIndex + "关 </color>" : "<img src='ddz_main_icon_begin'/><color=#ffffff>   开始闯关</color>";
        }
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_createRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "743bf5/861CWarngDpo0fjV", "ddz_window_createRoom");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        backSprite: cc.Sprite,
        createItem1: {
          default: null,
          type: cc.Node
        },
        createItem2: {
          default: null,
          type: cc.Node
        },
        createItem3: {
          default: null,
          type: cc.Node
        },
        createItem4: {
          default: null,
          type: cc.Node
        },
        createItem5: {
          default: null,
          type: cc.Node
        },
        createButton: cc.Button,
        creatItem: {
          default: null,
          type: cc.Prefab
        },
        playing: "123",
        roundCount: 6,
        modeType: 0,
        roundWindowList: []
      },
      onItemAction1: function onItemAction1() {
        var window = this.createItem1.getComponent("ddz_item_createRoom");
        if (window.playing == this.playing) return;
        this.playing = window.playing;
        window.setSelectedState(true);
        var window2 = this.createItem2.getComponent("ddz_item_createRoom");
        window2.setSelectedState(false);
        var window3 = this.createItem3.getComponent("ddz_item_createRoom");
        window3.setSelectedState(false);
      },
      onItemAction2: function onItemAction2() {
        var window = this.createItem2.getComponent("ddz_item_createRoom");
        if (window.playing == this.playing) return;
        this.playing = window.playing;
        window.setSelectedState(true);
        var window2 = this.createItem1.getComponent("ddz_item_createRoom");
        window2.setSelectedState(false);
        var window3 = this.createItem3.getComponent("ddz_item_createRoom");
        window3.setSelectedState(false);
      },
      onItemAction3: function onItemAction3() {
        var window = this.createItem3.getComponent("ddz_item_createRoom");
        if (window.playing == this.playing) return;
        this.playing = window.playing;
        window.setSelectedState(true);
        var window2 = this.createItem2.getComponent("ddz_item_createRoom");
        window2.setSelectedState(false);
        var window3 = this.createItem1.getComponent("ddz_item_createRoom");
        window3.setSelectedState(false);
      },
      onItemAction4: function onItemAction4() {
        var window = this.createItem4.getComponent("ddz_item_createRoom");
        if (window.count == this.modeType) return;
        this.modeType = window.count;
        window.setSelectedState(true);
        var window2 = this.createItem5.getComponent("ddz_item_createRoom");
        window2.setSelectedState(false);
      },
      onItemAction5: function onItemAction5() {
        var window = this.createItem5.getComponent("ddz_item_createRoom");
        if (window.count == this.modeType) return;
        this.modeType = window.count;
        window.setSelectedState(true);
        var window2 = this.createItem4.getComponent("ddz_item_createRoom");
        window2.setSelectedState(false);
      },
      onCreateButton: function onCreateButton() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.Share.shareKeywordReplace.totalRound = this.roundCount;
        ddz.Share.shareKeywordReplace.goodCard = 0 == this.modeType ? "标准" : "炸弹";
        var playingString;
        switch (this.playing) {
         case "happy":
          playingString = "欢乐玩法";
          break;

         case "wild":
          playingString = "癞子玩法";
          break;

         default:
          playingString = "经典玩法";
        }
        ddz.Share.shareKeywordReplace.displayName = playingString;
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeFriendRoomCreateClick, []);
        if (ddz.matchModel.getCurWaitInfo()) ddz.MsgFactory.saveMatch(); else {
          hall.GlobalFuncs.setInLocalStorage(ddz.friendModel.CREATE_ROUND_COUNT, this.roundCount);
          hall.GlobalFuncs.setInLocalStorage(ddz.friendModel.CREATE_MODE_TYPE, this.modeType);
          hall.GlobalFuncs.setInLocalStorage(ddz.friendModel.CREATE_PLAYING_METHOD, this.playing);
          ddz.friendModel.createFriendRoom(this.roundCount, 0, this.playing, this.modeType);
        }
      },
      onSeeButton: function onSeeButton() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.friendModel.getHisToryInfo();
      },
      onCloseButton: function onCloseButton() {
        this.playEndAnimation();
      },
      playEndAnimation: function playEndAnimation() {
        this.completeAni();
      },
      onBlackButton: function onBlackButton() {},
      completeAni: function completeAni() {
        this.node.destroy();
      },
      onSaveMatch: function onSaveMatch() {
        ddz.friendModel.createFriendRoom(this.roundCount, 0, this.playing, this.modeType);
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.SAVE_MATCH_SUCCESS, this.onSaveMatch, this);
        var size = cc.director.getWinSize();
        this.backBg.node.setContentSize(size);
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
        ddz.friendModel.getFriendConf();
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_GET_CONF, this.getFriendConfigAction, this);
        ty.NotificationCenter.listen(ddz.EventType.ACTION_FT_CHANGE_ROUND_SELECT, this.changeFriendRoundConfigAction, this);
        this.roundCount = hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.friendModel.CREATE_ROUND_COUNT, 6);
        this.modeType = hall.GlobalFuncs.ReadNumFromLocalStorage(ddz.friendModel.CREATE_MODE_TYPE, 0);
        this.playing = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.friendModel.CREATE_PLAYING_METHOD, "123");
        var window4, window5;
        window4 = this.createItem4.getComponent("ddz_item_createRoom");
        window5 = this.createItem5.getComponent("ddz_item_createRoom");
        if (0 == this.modeType) {
          window4.setSelectedState(true);
          window5.setSelectedState(false);
        } else {
          window4.setSelectedState(false);
          window5.setSelectedState(true);
        }
        var window1, window2, window3;
        window1 = this.createItem1.getComponent("ddz_item_createRoom");
        window2 = this.createItem2.getComponent("ddz_item_createRoom");
        window3 = this.createItem3.getComponent("ddz_item_createRoom");
        if ("123" == this.playing) {
          window1.setSelectedState(true);
          window2.setSelectedState(false);
          window3.setSelectedState(false);
        } else if ("happy" == this.playing) {
          window1.setSelectedState(false);
          window2.setSelectedState(true);
          window3.setSelectedState(false);
        } else {
          window1.setSelectedState(false);
          window2.setSelectedState(false);
          window3.setSelectedState(true);
        }
        this.createButton.interactable = false;
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").showAdNode();
      },
      getFriendConfigAction: function getFriendConfigAction(value) {
        this.createButton.interactable = true;
        var rounds = value.rounds;
        var xList = [ -98, 31, 163 ];
        var windowList = [];
        var haveRound = false;
        for (var i = 0; i < rounds.length; i++) {
          var window = cc.instantiate(this.creatItem);
          window.x = xList[i];
          window.y = 87;
          this.backSprite.node.addChild(window);
          var windowManager = window.getComponent("ddz_item_createRoom");
          windowManager.type = 1;
          windowManager.setRoundCount(rounds[i].nRound);
          windowList.push(windowManager);
          if (this.roundCount == rounds[i].nRound) {
            windowManager.setSelectedState(true);
            haveRound = true;
          } else windowManager.setSelectedState(false);
        }
        this.roundWindowList = windowList;
        if (!haveRound) {
          this.roundCount = rounds[0].nRound;
          var windowmanager = this.roundWindowList[0];
          windowmanager.setSelectedState(true);
        }
      },
      changeFriendRoundConfigAction: function changeFriendRoundConfigAction(round) {
        for (var i = 0; i < this.roundWindowList.length; i++) {
          var windowmanager = this.roundWindowList[i];
          windowmanager.count == round ? windowmanager.setSelectedState(true) : windowmanager.setSelectedState(false);
        }
        this.roundCount = round;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_dissolve: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "038e6K36xlMY4tpcPy7/uTg", "ddz_window_dissolve");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        detailText: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        ty.Timer.setTimer(this, this.cancelDismiss, 3);
      },
      setTipsSString: function setTipsSString(tips) {
        this.detailText.string = "<color=#ffffff>" + tips + "</c>";
      },
      setDissolveFailDetailTextString: function setDissolveFailDetailTextString(nameA, success) {
        var nameString = "";
        for (var i = 0; i < nameA.length; i++) 0 == i ? nameString += nameA[i] : nameString = nameString + " 、 " + nameA[i];
        var successString = "";
        successString = success ? "<color=#ffffff>同意解散牌桌</c>" : "<color=#ffffff>不同意解散牌桌,请继续游戏</c>";
        this.detailText.string = "<color=#ffffff>玩家 </c><color=#fff888>" + nameString + "</color><br/>" + successString;
      },
      cancelDismiss: function cancelDismiss() {
        ty.NotificationCenter.trigger(ddz.EventType.ACTION_END_RESULT_SHOW);
        this.node.removeFromParent();
      },
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_fee_lack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9804e7b8BI4LT70Rz2EkbK", "ddz_window_fee_lack");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLable: {
          default: null,
          type: cc.Label
        },
        diamondLackTip1: {
          default: null,
          type: cc.Label
        },
        diamondLackTip2: {
          default: null,
          type: cc.Label
        },
        coinLackTip: {
          default: null,
          type: cc.RichText
        },
        shareButton: {
          default: null,
          type: cc.Button
        },
        cancelButton: {
          default: null,
          type: cc.Button
        },
        exchangeButton: {
          default: null,
          type: cc.Button
        },
        exchangeLabel: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {},
      showCoinView: function showCoinView(state) {
        this.titleLable.string = state ? "金币不足" : "钻石不足";
        this.diamondLackTip1.node.active = !state;
        this.diamondLackTip2.node.active = !state;
        this.coinLackTip.node.active = state;
        this.shareButton.node.active = !state;
        this.cancelButton.node.active = state;
        this.exchangeButton.node.active = state;
      },
      updateByFeeType: function updateByFeeType(feeType) {
        "coin" == feeType ? this.showCoinView(true) : "diamond" == feeType ? this.showCoinView(false) : hall.LOGE("something error", "fix it");
      },
      onClickShare: function onClickShare() {
        hall.LOGD("onClickShare", "test001");
      },
      onClickClose: function onClickClose() {
        this.node.destroy();
      },
      onClickCancel: function onClickCancel() {
        hall.LOGD("onClickCancel", "test001");
        this.node.destroy();
      },
      onClickExchange: function onClickExchange() {
        hall.LOGD("onClickExchange", "test001");
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_gameDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ddd23DjX35A+6SxEm0Qmz8M", "ddz_window_gameDetail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "ddz_window_gameDetail";
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        closeBtn: {
          default: null,
          type: cc.Button
        },
        whileBottom: cc.Node,
        player_1: cc.Node,
        player_2: cc.Node,
        player_3: cc.Node,
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        infoItem: cc.Prefab,
        contentWidth: 550,
        itemHeight: 60,
        noRecordTips: cc.Label,
        btnList: cc.Node,
        btnList_1: cc.Node,
        loadingSpr: cc.Node,
        initContentY: 175
      },
      onLoad: function onLoad() {
        ddz.LOGD("", "file = [ddz_window_gameDetail] fun = [onLoad] ");
        this.bgBtn.node.active = true;
        var _isHistory = ddz.detailsModel.getIsHisTory();
        _isHistory && (this.bgBtn.node.active = false);
        this.closeBtn.node.active = true;
        this.content = this.scrollView.content;
        this.bgBtn.node.on("click", this.closeGameDetail, this);
        this.closeBtn.node.on("click", this.closeGameDetail, this);
      },
      setParentScene: function setParentScene(parentScene) {
        parentScene && (this.tableScene = parentScene);
        this.isActionState = true;
      },
      createDetail: function createDetail(parentScene) {
        this.isActionState = false;
        this.loadingSpr.active = false;
        this.updateAcatar();
        this.updateInfo();
        var isOver = ddz.detailsModel.getIsOver();
        var _isHistory = ddz.detailsModel.getIsHisTory();
        _isHistory ? this.updatePos(3) : this.isDuijuOver(isOver);
      },
      topBtnCallFunc: function topBtnCallFunc() {
        ddz.LOGD("", "file = [ddz_window_gameDetail] fun = [topBtnCallFunc] ");
        ddz.Share.shareResults();
      },
      bottomBtnCallFunc: function bottomBtnCallFunc() {
        ddz.LOGD("", "file = [ddz_window_gameDetail] fun = [bottomBtnCallFunc] ");
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        hall.GlobalFuncs.gotoDdz();
      },
      updatePos: function updatePos(index) {
        if (1 == index) {
          this.whileBottom.y = -10;
          this.btnList.active = false;
        } else if (2 == index) {
          this.whileBottom.y = 118;
          this.btnList_1.active = false;
          this.btnList.active = true;
          this.closeBtn.node.active = false;
        } else if (3 == index) {
          this.whileBottom.y = -10;
          this.btnList_1.active = true;
          this.btnList.active = false;
          this.closeBtn.node.active = true;
        }
      },
      updateAcatar: function updateAcatar() {
        var myIndex = 0;
        myIndex = this.tableScene ? this.tableScene._mySeatIndex : ddz.detailsModel.getMySeatIndex();
        var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
        var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
        var com = this["player_1"].getComponent("ddz_avatar_window");
        this.setInfo(com, myIndex - 1, true);
        com = this["player_2"].getComponent("ddz_avatar_window");
        this.setInfo(com, rightindex - 1);
        com = this["player_3"].getComponent("ddz_avatar_window");
        this.setInfo(com, leftindex - 1);
      },
      setInfo: function setInfo(com, _seatId, myIndex) {
        var isWhoWin = ddz.detailsModel.getWhoWin();
        var nickNames = ddz.detailsModel.getNickNames();
        var avatars = ddz.detailsModel.getAvatars();
        var sumScore = ddz.detailsModel.getSumScore();
        if (avatars[_seatId] && nickNames[_seatId]) {
          var slice_name = hall.GlobalFuncs.SliceStringToLength(nickNames[_seatId], 8);
          com.setPlayerInfo(avatars[_seatId], slice_name, myIndex);
        } else {
          var userInfo = new hall.HallUserInfo();
          if (this.tableScene && this.tableScene._mySeatinfo) {
            var myIndex = this.tableScene._mySeatIndex;
            var leftindex = ddz.GlobalFuncs.getPreIndex(myIndex);
            var rightindex = ddz.GlobalFuncs.GetNextIndex(myIndex);
            switch (_seatId) {
             case myIndex - 1:
              userInfo = this.tableScene._mySeatinfo.model.user_info;
              break;

             case rightindex - 1:
              userInfo = this.tableScene._rightSeatinfo.model.user_info;
              break;

             case leftindex - 1:
              userInfo = this.tableScene._leftSeatinfo.model.user_info;
            }
            var slice_name = hall.GlobalFuncs.SliceStringToLength(userInfo.udataInfo.m_name, 8);
            var url = userInfo.udataInfo.m_purl;
            com.setPlayerInfo(url, slice_name, myIndex);
          }
        }
        com.setSumScore(sumScore[_seatId]);
        isWhoWin == _seatId && com.setFirstSpr(true);
      },
      updateInfo: function updateInfo() {
        var resultList = ddz.detailsModel.resuslts;
        hall.LOGD(null, "file = [ddz_window_gameDetail] fun = [updateInfo] resultList = " + JSON.stringify(resultList));
        if (resultList.length <= 0) {
          this.noRecordTips.node.active = true;
          return;
        }
        var myIndex = 0;
        myIndex = this.tableScene ? this.tableScene._mySeatIndex : ddz.detailsModel.getMySeatIndex();
        var totalRound = ddz.detailsModel.getTotalRound();
        this.noRecordTips.node.active = false;
        this.scrollView.content.width = this.contentWidth;
        this.scrollView.content.height = totalRound * this.itemHeight;
        if (resultList.length > 0) for (var i = 0; i < totalRound; i++) {
          var item = cc.instantiate(this.infoItem);
          var com = item.getComponent("ddz_gameDetail_cell");
          com.updateinfo(i + 1, myIndex, resultList[i]);
          this.content.addChild(item);
          item.y = -i * this.itemHeight - this.itemHeight / 2;
        }
        resultList.length >= 6 && (this.content.y = (resultList.length - 5) * this.itemHeight + this.initContentY);
      },
      isDuijuOver: function isDuijuOver(isGameOver) {
        isGameOver ? this.updatePos(2) : this.updatePos(1);
      },
      closeGameDetail: function closeGameDetail() {
        ddz.LOGD("", "file = [ddz_window_gameDetail] fun = [closeGameDetail] ");
        if (this.isActionState) return;
        var isOver = ddz.detailsModel.getIsOver();
        if (!isOver) {
          this.isActionState = false;
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_history: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1a30IOmCZHuoieVgiyn9to", "ddz_window_history");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "ddz_window_history";
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        closeBtn: {
          default: null,
          type: cc.Button
        },
        tableView: cc.Node,
        noRecordTips: cc.Label,
        LoadTips: cc.Node
      },
      onLoad: function onLoad() {
        ddz.LOGD("", "file = [ddz_window_history] fun = [onLoad] ");
        this.bgBtn.node.active = true;
        this.closeBtn.node.on("click", this.closeGameHistory, this);
      },
      createHistory: function createHistory() {
        this.LoadTips.active = false;
        var historyDdata = ddz.historyModel.getHistoryData();
        if (historyDdata.length <= 0) {
          this.noRecordTips.node.active = true;
          return;
        }
        this.noRecordTips.node.active = false;
        var resultArr = [];
        for (var i = 0; i < historyDdata.length; i++) {
          var addMap = {};
          addMap.avatars = ddz.historyModel.getAvatars(i);
          addMap.timeS = ddz.historyModel.getTimer(i);
          addMap.titleS = ddz.historyModel.getPlayMode(i);
          addMap.score = ddz.historyModel.getScore(i) + "分";
          resultArr.push(addMap);
        }
        var window = this.tableView.getComponent("ddz_tableView");
        window.setDataArray(resultArr);
      },
      closeGameHistory: function closeGameHistory() {
        ddz.LOGD("", "file = [ddz_window_history] fun = [closeGameDetail] ");
        this.bgBtn.node.active = false;
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_match_enter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "14490UU7l5FE5tEwPdUglb9", "ddz_window_match_enter");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLable: {
          default: null,
          type: cc.Label
        },
        detailLabel1: {
          default: null,
          type: cc.Label
        },
        detailLabel1_value: {
          default: null,
          type: cc.Label
        },
        detailLabel2: {
          default: null,
          type: cc.Label
        },
        detailLabel2_value: {
          default: null,
          type: cc.RichText
        },
        buttonLable: {
          default: null,
          type: cc.RichText
        },
        winner_reward: {
          default: null,
          type: cc.Label
        },
        winner2_reward: {
          default: null,
          type: cc.Label
        },
        winner3_reward: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen("signin_fail", this.onSigninFail, this);
        ty.NotificationCenter.listen(ddz.EventType.RECEIVE_MATCH_WAIT_STATE, this.onMatchWait, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_MATCHING, this.onClickClose, this);
        ty.NotificationCenter.listen(ddz.EventType.SAVE_MATCH_SUCCESS, this.onSaveMatch, this);
      },
      onMatchWait: function onMatchWait(state) {
        ddz.matchModel.onMatchWait(state);
      },
      onSigninFail: function onSigninFail(value) {
        value.result.matchId == this.matchData.matchId && (7 == value.error.code || 2 != value.error.code && 4 != value.error.code || ddz.GlobalFuncs.showNormalTipsWindow(value.error.info, [ {
          title: "确定",
          callFunc: function callFunc() {}
        } ]));
      },
      updateByMatchData: function updateByMatchData() {
        hall.LOGD("updateByMatchData", "gogogo");
        this.matchData = hall.ME.matchInfo.getCurrentMatchData();
        var matchDes = hall.ME.matchInfo.matchDesMap[this.matchData.matchId.toString()];
        hall.LOGW("", "file = [ddz_window_match_enter] fun = [updateByMatchData] matchDes = " + JSON.stringify(matchDes));
        this.titleLable.string = this.matchData.matchName;
        if (this.matchData.isRecordExist()) {
          this.detailLabel1.string = "轮次:";
          this.detailLabel2.string = "积分:";
          this.detailLabel1_value.string = this.matchData.record.stageIndex + "/" + matchDes.stages.length;
          this.detailLabel2_value.string = "<color=#1A6951>" + this.matchData.record.mscore + "</c>";
          this.buttonLable.string = "<color=#ffffff>继 续</color>";
        } else {
          this.detailLabel1.string = "开赛条件:";
          this.detailLabel2.string = "报名费用:";
          var parsArr = this.matchData.taskDesc.split("||");
          this.detailLabel1_value.string = this.matchData.matchType.indexOf("common_arena_match") > -1 ? "满90人开赛" : parsArr[0];
          if (matchDes.fees && 1 == matchDes.fees.length) {
            this.detailLabel2_value.string = matchDes.fees[0].desc;
            var _des = matchDes.fees[0].desc;
            if (_des.indexOf("金币") >= 0) {
              var str = _des.slice(0, _des.indexOf("金币"));
              this.detailLabel2_value.string = "<img src='ddz_coin_green' height=36 width=36/><color=#1A6951> " + str + "</c>";
            } else if (_des.indexOf("钻石") >= 0) {
              var str = _des.slice(0, _des.indexOf("钻石"));
              this.detailLabel2_value.string = "<img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951> " + str + "</c>";
            }
            this.feeIndex = 0;
          } else {
            var desc = matchDes.fees[0].desc;
            this.feeIndex = 0;
            for (var key = 0; key < matchDes.fees.length; key++) if (matchDes.fees[key].canPay) {
              desc = matchDes.fees[key];
              this.feeIndex = key;
              break;
            }
            this.detailLabel2_value.string = "<color=#1A6951>" + matchDes.fees[this.feeIndex].desc + "</c>";
            var _des = matchDes.fees[this.feeIndex].desc;
            if (_des.indexOf("金币") >= 0) {
              var str = _des.slice(0, _des.indexOf("金币"));
              this.detailLabel2_value.string = "<img src='ddz_coin_green' height=36 width=36/><color=#1A6951> " + str + "</c>";
            } else if (_des.indexOf("钻石") >= 0) {
              var str = _des.slice(0, _des.indexOf("钻石"));
              this.detailLabel2_value.string = "<img src='dda_button_diamond_black' height=34 width=42/><color=#1A6951>" + str + "</c>";
            }
          }
          this.buttonLable.string = "<color=#ffffff>报 名</color>";
        }
        if (matchDes && matchDes.ranks) {
          this.winner_reward.string = matchDes.ranks[0].desc;
          this.winner2_reward.string = matchDes.ranks[1].desc;
          this.winner3_reward.string = matchDes.ranks[2].desc;
        }
      },
      onClickClose: function onClickClose() {
        ty.NotificationCenter.ignoreScope(this);
        this.node.destroy();
      },
      onClickShowRewards: function onClickShowRewards() {
        var preFabPath = "prefabs/ddz_window_match_rewards";
        var comName = "ddz_window_match_rewards";
        hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {});
      },
      onClickMatchEnter: function onClickMatchEnter() {
        ddz.matchModel.currentGameMode = "arena";
        hall.LOGD("onClickMatchEnter", "test001");
        var waitInfo = ddz.matchModel.getCurWaitInfo();
        waitInfo && 6789 == waitInfo.matchId ? ddz.MsgFactory.saveMatch() : this.doMatchItemClick();
      },
      onSaveMatch: function onSaveMatch() {
        this.doMatchItemClick();
      },
      doMatchItemClick: function doMatchItemClick() {
        this.matchData && this.matchData.isRecordExist() ? ddz.matchModel.matchResume(this.matchData.roomId, this.matchData.matchId) : ddz.matchModel.matchSignin(this.matchData.roomId, this.matchData.matchId, this.feeIndex);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.trigger(ddz.EventType.RESET_MATCH_CLICK_STATE);
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_match_rewards: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de9c7byIIpG1IgSham+KeMc", "ddz_window_match_rewards");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLable: {
          default: null,
          type: cc.Label
        },
        closeButton: {
          default: null,
          type: cc.Button
        },
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        listItem: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        this.linecount = 1;
        this.spacing = 20;
        this.spacing_x = 20;
        this.content = this.scrollView.content;
        this.items = [];
        this.initialize();
      },
      initialize: function initialize() {
        var matchData = hall.ME.matchInfo.getCurrentMatchData();
        this.titleLable.string = matchData.matchName;
        var ranks = hall.ME.matchInfo.matchDesMap[matchData.matchId.toString()].ranks;
        var totalCount = ranks.length;
        this.content.height = 52 * totalCount;
        for (var i = 0; i < totalCount; i++) {
          var item = cc.instantiate(this.listItem);
          item.getComponent("ddz_cell_match_reward").updateItem(ranks[i].start, ranks[i].end, ranks[i].desc);
          this.content.addChild(item);
          item.setPosition(0, -52 * i - 26);
          this.items.push(item);
        }
      },
      onClickClose: function onClickClose() {
        this.node.removeFromParent();
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_normal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8885a+iviBJPobwYl55Y8Cy", "ddz_window_normal");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        titleLabel: {
          default: null,
          type: cc.Label
        },
        contentLabel: {
          default: null,
          type: cc.RichText
        },
        leftButton: {
          default: null,
          type: cc.Button
        },
        rightButton: {
          default: null,
          type: cc.Button
        },
        centerButton: {
          default: null,
          type: cc.Button
        },
        centerRichText: {
          default: null,
          type: cc.RichText
        },
        leftRichText: {
          default: null,
          type: cc.RichText
        },
        rightRichText: {
          default: null,
          type: cc.RichText
        },
        actionBefore: false,
        clickType: ""
      },
      onLoad: function onLoad() {
        var size = cc.director.getWinSize();
        this.backBg.node.setContentSize(size);
        this.leftCallFunc || (this.leftCallFunc = function() {});
        this.rightCallFunc || (this.rightCallFunc = function() {});
        this.centerCallFunc || (this.centerCallFunc = function() {});
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
      },
      setTitleContentAndButtonsString: function setTitleContentAndButtonsString(titleString, contentString, buttons, closeFun) {
        this.titleLabel.string = titleString;
        this.contentLabel.string = contentString;
        if (1 == buttons.length) {
          this.centerButton.node.active = true;
          this.leftButton.node.active = false;
          this.rightButton.node.active = false;
          this.centerRichText.string = buttons[0].title;
          this.centerCallFunc = buttons[0].callFunc;
        } else if (2 == buttons.length) {
          this.centerButton.node.active = false;
          this.leftButton.node.active = true;
          this.rightButton.node.active = true;
          this.leftRichText.string = buttons[0].title;
          this.leftCallFunc = buttons[0].callFunc;
          this.rightRichText.string = buttons[1].title;
          this.rightCallFunc = buttons[1].callFunc;
        }
        this.closeCallFun = closeFun;
      },
      playEndAnimation: function playEndAnimation() {
        this.completeAni();
      },
      completeAni: function completeAni() {
        if ("" != this.clickType) switch (this.clickType) {
         case "left":
          this.leftCallFunc();
          break;

         case "right":
          this.rightCallFunc();
          break;

         case "center":
          this.centerCallFunc();
        }
        this.node.destroy();
      },
      onClickLeftButton: function onClickLeftButton(event, type) {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (this.actionBefore) this.leftCallFunc(); else {
          this.clickType = type;
          this.playEndAnimation();
        }
      },
      onClickRightButton: function onClickRightButton(event, type) {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        if (this.actionBefore) this.rightCallFunc(); else {
          this.clickType = type;
          this.playEndAnimation();
        }
      },
      onClickCenterButton: function onClickCenterButton(event, type) {
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        if (this.actionBefore) this.centerCallFunc(); else {
          this.clickType = type;
          this.playEndAnimation();
        }
      },
      onClose: function onClose(event) {
        this.closeCallFun && this.closeCallFun();
        this.playEndAnimation();
      },
      onDestroy: function onDestroy() {
        ddz.gameModel.normalWindow = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_revive: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "927b9YJjh5L1aRKLlazTxNr", "ddz_window_revive");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLable: {
          default: null,
          type: cc.Label
        },
        tipDes1: {
          default: null,
          type: cc.Label
        },
        tipDesRich2: {
          default: null,
          type: cc.RichText
        },
        closeButton: {
          default: null,
          type: cc.Button
        },
        cancelButton: {
          default: null,
          type: cc.Button
        },
        OKButton: {
          default: null,
          type: cc.Button
        },
        cancelButtonLable: {
          default: null,
          type: cc.RichText
        },
        okButtonLable: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        ddz.matchModel.isShowingRevive = true;
        ty.NotificationCenter.listen(ddz.EventType.ACTION_CHALLENGE, this.close, this);
        ty.NotificationCenter.listen(ddz.EventType.ARENA_SEND_MATCH_BACK, this.close, this);
        ty.NotificationCenter.listen("arena_revive_share_person", this.showTips, this);
        ty.NotificationCenter.listen("arena_match_back", this.arenaMatchBack, this);
        ty.NotificationCenter.listen(ddz.EventType.SHOW_MATCH_REVIVE, this.showSelf, this);
      },
      showSelf: function showSelf() {
        this.node.active = true;
      },
      setMatchInfo: function setMatchInfo(matchDes, stageIndex) {
        this.matchDes = matchDes;
        this.stageIndex = stageIndex;
        var curArenaConfig = ddz.gameModel.getArenaMatchConfigJson()[this.matchDes.matchId.toString()];
        var sharePointValue = curArenaConfig["reviveSharePoint"];
        this.sharePoint = sharePointValue;
        var leftCount = ddz.ShareRecord[this.sharePoint.toString()] && ddz.ShareRecord[this.sharePoint.toString()].leftCount;
        for (var i in this.matchDes.stages) if (this.matchDes.stages[i].index == this.stageIndex) {
          var stage = this.matchDes.stages[i];
          if (1 == stage.canBack) {
            this.feeCount = stage.backFeeCount;
            this.shareRewardOnceCount = 1;
            "diamond" == curArenaConfig["shareRewardOnce"]["type"] && (this.shareRewardOnceCount = curArenaConfig["shareRewardOnce"]["count"]);
            this.getRewardCount = Math.ceil(this.feeCount / this.shareRewardOnceCount);
            stageIndex <= curArenaConfig["maxStageForReviveShare"] && this.getRewardCount <= leftCount ? this.feeType = "share" : this.feeType = "diamond";
            this.updateByReviveType();
          } else hall.LOGD("arena revive", "something error");
        }
      },
      updateByReviveType: function updateByReviveType() {
        if ("share" == this.feeType) {
          this.tipDesRich2.node.active = false;
          this.okButtonLable.string = "<color=#ffffff>邀请好友</color>";
          this.cancelButtonLable.string = "<color=#ffffff>放弃</c>";
        } else if ("diamond" == this.feeType) {
          this.tipDesRich2.node.active = true;
          this.tipDesRich2.string = "<color=#1A6951>使用 </c><img src='dda_button_diamond_black' height=30 width=34/><color=#1A6951> " + this.feeCount + "可以继续挑战</c>";
          this.okButtonLable.string = "<color=#ffffff>使用</c><img src='dda_button_diamond' height=34 width=43/>";
          this.cancelButtonLable.string = "<color=#ffffff>放弃</c>";
        } else hall.LOGE("something error", "fix it");
      },
      onClickClose: function onClickClose() {
        ddz.matchModel.matchGiveUp(this.matchDes.roomId, this.matchDes.matchId);
        this.close();
      },
      onClickCancel: function onClickCancel() {
        ddz.matchModel.matchGiveUp(this.matchDes.roomId, this.matchDes.matchId);
        this.close();
      },
      onClickOK: function onClickOK() {
        var that = this;
        "diamond" == this.feeType ? ddz.matchModel.matchBack(this.matchDes.roomId, this.matchDes.matchId) : "share" == this.feeType && ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeRevial, function(result) {
          if (result.hasOwnProperty("shareTickets")) {
            ddz.LOGD("ddz_revivalWindow", "分享到了群!");
            ddz.waitGetRevial = {
              sharePoint: that.sharePoint,
              matchType: "arena",
              matchDes: that.matchDes,
              type: "send",
              needCount: that.getRewardCount
            };
          } else {
            ddz.LOGD("ddz_revivalWindow", "分享到了个人!");
            ddz.waitGetRevial = null;
            ty.NotificationCenter.trigger("arena_revive_share_person");
          }
        });
        this.node.active = false;
      },
      showTips: function showTips() {
        var msg = "只有分享到微信群才有效哦~";
        hall.MsgBoxManager.showToast({
          title: msg
        });
      },
      close: function close() {
        ddz.matchModel.isShowingRevive = false;
        ty.NotificationCenter.ignoreScope(this);
        this.node.removeFromParent();
      },
      onDestroy: function onDestroy() {
        ddz.matchModel.isShowingRevive = false;
        ty.NotificationCenter.ignoreScope(this);
      },
      arenaMatchBack: function arenaMatchBack(value) {
        if (this.matchDes.matchId == value.result.matchId && value.error) {
          var tipsString = value.error.info;
          var preFabPath = "prefabs/ddz_window_normal";
          var comName = "ddz_window_normal";
          var that = this;
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var window = preFabNode.getComponent(comName);
            var tiString = "邀请好友";
            window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tipsString + "</c>", [ {
              title: tiString,
              callFunc: function callFunc() {
                ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondHall);
              }
            } ], function() {
              ddz.matchModel.matchGiveUp(that.matchDes.roomId, that.matchDes.matchId);
            });
          });
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_save_match_result: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e79f790RZVERoIO+3vTq1in", "ddz_window_save_match_result");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLable: {
          default: null,
          type: cc.Label
        },
        tipDes: {
          default: null,
          type: cc.Label
        },
        matchInfo1: {
          default: null,
          type: cc.Label
        },
        matchInfo2: {
          default: null,
          type: cc.Label
        },
        OKButton: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {},
      updateByMatchInfo: function updateByMatchInfo(matchInfoList) {
        if (matchInfoList.length >= 1) {
          this.matchInfo1.node.active = true;
          this.matchInfo1.string = matchInfoList[0];
          this.matchInfo2.node.active = false;
        }
        if (matchInfoList.length >= 2) {
          this.matchInfo2.node.active = true;
          this.matchInfo2.string = matchInfoList[1];
        }
        ddz.matchModel.cleanWaitInfo();
      },
      removeAni: function removeAni() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ty.NotificationCenter.trigger(ddz.EventType.RESET_TABLE);
        this.node.removeFromParent();
      },
      onClickBack: function onClickBack() {
        this.removeAni();
        hall.GlobalFuncs.popScene();
        ty.NotificationCenter.trigger(ddz.EventType.ARENA_BACK_TO_SCENE);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_window_skip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fce81ZK4hNHZLY+3hNpQ023", "ddz_window_skip");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: cc.Label,
        contentRichtext: cc.RichText,
        centerButton: cc.Button,
        ignoreButton: cc.Button
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(type) {
        if (type && type == ddz.Share.onShareType.clickStatShareTypeSkipCustom || type == ddz.Share.onShareType.clickStatShareTypeSkipCustomNewer) {
          var reultType = ddz.Share.resultType;
          switch (reultType) {
           case 1:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请分享到微信群哦~"
            });
            break;

           case 2:
            ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
              title: "请不要频繁分享到一个群~"
            });
            break;

           case 3:
            this.onClose();
            this.skipCustom > 0 && ddz.matchModel.matchBackNextLevel(null, null, this.skipCustom);
          }
        }
        ddz.Share.resultType = 0;
      },
      updateWindowInfo: function updateWindowInfo(state) {
        this.state = state;
        this.skipCustom = 0;
        var bc = ddz.gameModel.getSkipCustomsConfigJson();
        hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.CONTINUOUSLOGIN, true);
        hall.GlobalFuncs.setInLocalStorage(ddz.gameModel.YESTERDAYSHARE, true);
        if (1 == state) {
          this.titleLabel.string = "打的不错,送你新人专享权利";
          var count = 7;
          if (bc && bc.newCustoms) {
            count = bc.newCustoms;
            this.skipCustom = bc.newCustoms;
          }
          this.contentRichtext.string = "<color=#1A6951>分享到群直接挑战第" + count + "关</c><br/><color=#1A6951>获胜就能拿红包</c><color=#FD5051> (最高100元)</c>";
          this.ignoreButton.node.active = false;
          this.centerButton.node.y = -120;
        } else if (2 == state) {
          this.titleLabel.string = "连续登录奖励";
          var count = 4;
          if (bc && bc.oldCustoms) {
            count = bc.oldCustoms;
            this.skipCustom = bc.oldCustoms;
          }
          this.contentRichtext.string = "<color=#1A6951>分享到群直接挑战第" + count + "关</c>";
          this.ignoreButton.node.active = true;
          this.centerButton.node.y = -83;
        } else if (3 == state) {
          this.titleLabel.string = "欢迎回来,回归奖励";
          var count = 4;
          if (bc && bc.oldCustoms) {
            count = bc.oldCustoms;
            this.skipCustom = bc.oldCustoms;
          }
          this.contentRichtext.string = "<color=#1A6951>分享到群直接挑战第" + count + "关</c>";
          this.ignoreButton.node.active = true;
          this.centerButton.node.y = -83;
        }
      },
      onClickCenterBtn: function onClickCenterBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "onSkipCustomShare", this.state ]);
        1 == this.state ? ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeSkipCustomNewer) : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeSkipCustom);
      },
      onClickIgnoreBtn: function onClickIgnoreBtn() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "windowSkip", "ignoreBtn" ]);
        ddz.matchModel.startMatchProgress();
        this.onClose();
      },
      onClose: function onClose() {
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_zuanShiAni: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ac9fKCwwNAGLPVS5JjtQTi", "ddz_zuanShiAni");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        drawButton: {
          default: null,
          type: cc.Button
        },
        diamondAniNode: cc.Node,
        chipAniNode: cc.Node,
        hongBaoAniNode: cc.Node,
        getchipAniNode: cc.Node,
        getJiPaaiQiAni: cc.Node,
        countNumberLabel: cc.Label,
        tipsRichText: cc.RichText,
        parentScene: {
          default: null
        }
      },
      onLoad: function onLoad() {},
      setTipsRichText: function setTipsRichText(isVal) {
        this.tipsRichText.node.active = false;
        isVal && (this.tipsRichText.node.active = true);
      },
      setCountWithNumber: function setCountWithNumber(number) {
        this.countNumberLabel.string = "+" + number;
      },
      changeDiamondToChip: function changeDiamondToChip() {
        this.diamondAniNode.active = false;
        this.chipAniNode.active = true;
        this.getJiPaaiQiAni.active = false;
        var ani = this.getchipAniNode.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {});
        anim.play();
      },
      changeDiamondToHongbao: function changeDiamondToHongbao() {
        this.diamondAniNode.active = false;
        this.hongBaoAniNode.active = true;
        this.getJiPaaiQiAni.active = false;
        var ani = this.hongBaoAniNode.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {});
        anim.play();
      },
      changeDiamondToJiPaiQi: function changeDiamondToJiPaiQi() {
        this.diamondAniNode.active = false;
        this.hongBaoAniNode.active = false;
        this.getJiPaaiQiAni.active = true;
        var ani = this.getJiPaaiQiAni.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {});
        anim.play();
      },
      getDiamond: function getDiamond() {
        this.node.removeFromParent();
        this.parentScene && this.parentScene.getDiamondAniFinish && this.parentScene.getDiamondAniFinish();
        ty.NotificationCenter.trigger(ddz.EventType.BOX_ON_CLOSE);
      }
    });
    cc._RF.pop();
  }, {} ],
  ddz_zuanshiBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d93dgJop5Ka4MfnqvAastk", "ddz_zuanshiBox");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        countNumberLabel: cc.Label,
        typeBg: cc.Sprite,
        typeSpriteFrame: [ cc.SpriteFrame ],
        boxBtn: cc.Node,
        bgBtn: cc.Node,
        savaBoxBtn: cc.Node
      },
      onLoad: function onLoad() {
        this.isSavaBox = false;
        this.boxBtn.active = false;
        this.bgBtn.active = true;
        this.savaBoxBtn.active = true;
      },
      saveBox: function saveBox() {
        if (!this.isSavaBox) {
          this.isSavaBox = true;
          var ani = this.node.getComponent(cc.Animation);
          ani.play("fangru");
          var that = this;
          ani.once("finished", function() {
            that.boxBtn.active = true;
            that.bgBtn.active = false;
            that.savaBoxBtn.active = false;
            var curScene = cc.director.getScene();
            "Ddz" == curScene.name && that.onClose();
          });
        }
      },
      setZuanshiNnm: function setZuanshiNnm(_count, isType) {
        hall.LOGW("", "file = [ddz_zuanshiBox] fun = [setZuanshiNnm] ");
        this.isSavaBox = false;
        this.boxBtn.active = false;
        this.bgBtn.active = true;
        this.savaBoxBtn.active = true;
        "item:1311" == isType ? this.typeBg.spriteFrame = this.typeSpriteFrame[0] : "user:chip" == isType && (this.typeBg.spriteFrame = this.typeSpriteFrame[1]);
        this.countNumberLabel.string = "x" + _count;
        var ani = this.node.getComponent(cc.Animation);
        ani.play("feibaoxiang");
      },
      onClickBox: function onClickBox() {
        hall.adManager.destroyWidthBannerAd();
        ddz.isClickOpenBox = true;
        ddz.gameModel.getOpenBox();
        this.onClose();
      },
      stopBoxAni: function stopBoxAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.stop();
      },
      onClose: function onClose() {
        this.isSavaBox = false;
        this.stopBoxAni();
        ddz.zuanshiBoxCom = null;
        this.node && this.node.destroy();
      },
      onDestroy: function onDestroy() {
        ddz.zuanshiBoxCom = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  enter_queue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "daf24m5dAtCR6dv+qkxqldT", "enter_queue");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "enter_queue";
        this.isPlaying = false;
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Button
        },
        tipsLabel: {
          default: null,
          type: cc.Label
        },
        tipsLabel2: {
          default: null,
          type: cc.Label
        },
        bgSprite: {
          default: null,
          type: cc.Sprite
        },
        backBtn: {
          default: null,
          type: cc.Button
        },
        feeText: {
          default: null,
          type: cc.RichText
        },
        nowIndex: 1,
        massageList: null
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_MATCHING, this.shutSelf, this);
        ty.NotificationCenter.listen(ddz.EventType.GAME_HIDE, this.shutSelf, this);
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backBtn.node.y = backButtonH);
        var size = cc.director.getWinSize();
        this.bgBtn && this.bgBtn.node.setContentSize(size);
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TREASURE_BOX);
        var bc = ddz.gameModel.getRoomListBannerConfigJson();
        if (bc) {
          var winnerCount = ddz.matchModel.getCurWinnerCount();
          if (bc.start) {
            if (winnerCount >= bc.start) {
              hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
              this.feeText.node.y = -200;
            }
          } else {
            hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
            this.feeText.node.y = -200;
          }
        }
        ddz.zuanshiBoxCom && ddz.zuanshiBoxCom.onClose && ddz.zuanshiBoxCom.onClose();
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
      },
      enterQueue: function enterQueue() {
        ddz.LOGD("", "file = [enter_queue] fun = [enterQueue] ");
        if (ddz.gameModel.isLoadTableScene) this.shutSelf(); else {
          this.tipsLabel.string = "匹配中...";
          this.tipsLabel2.string = "";
          this.bgSprite.node.active = true;
          var _queueInfo = ddz.matchModel.getCurQueueInfo();
          if (_queueInfo.roomFee && _queueInfo.roomFee > 0 && this.feeText) {
            this.feeText.node.active = true;
            this.feeText.string = "<color=#ffffff>本局服务费</color><img src='ddz_coin_white'/><color=#FFFFFF>" + _queueInfo.roomFee + "</c>";
          }
        }
      },
      backAction: function backAction() {
        var _queueInfo = ddz.matchModel.getCurQueueInfo();
        this.shutSelf();
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_TABLE_ANI);
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.back_button_click_sound, false);
        var _mixID = _queueInfo.mixId;
        var _mixedRoomId = _queueInfo.mixedRoomId;
        ddz.MsgFactory.getRoomLeave(_queueInfo.roomId, null, null, _mixID, _mixedRoomId);
      },
      playAni: function playAni(value) {
        if (this.node) {
          var ani = this.node.getComponent(cc.Animation);
          var anim = ani.getAnimationState("ddz_matching");
          value && !ddz.gameModel.isLoadTableScene ? anim.play() : anim.stop();
        }
        this.isPlaying = value;
      },
      shutSelf: function shutSelf(noDelete) {
        ddz.LOGD("", "file = [enter_queue] fun = [shutSelf] this.isPlaying = " + this.isPlaying);
        this.isPlaying && this.playAni(false);
        if (this.node) {
          var ani = this.node.getComponent(cc.Animation);
          ani && ani.stop();
        }
        ty.NotificationCenter.ignoreScope(this);
        noDelete || this.node && this.node.destroy();
        if (hall.GlobalFuncs.isInAtScene("TableScene")) {
          hall.adManager.canShowTableBanner = true;
          hall.adManager.canShowTableTopBanner = true;
          ty.NotificationCenter.trigger(ddz.EventType.SHOW_TABLE_BANNER);
        }
      },
      onDestroy: function onDestroy() {
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  game_world: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f84b12eAGtJB6qFeM9nyZLU", "game_world");
    "use strict";
    ddz.GameWorld = {
      chatData: [],
      matchingMassage: [ "闯关失败不要怕，钻石可以复活噢", "邀请新玩家，你和ta都可以得到钻石哟", "每天可以多次闯关，获得多次奖励", "关注【富豪斗地主】公众号每天都能领钻石", "闯七关瓜分百万红包，奖金实时到账" ],
      weChatVersionTips: "你当前的微信版本不支持此功能,请升级至6.6.2以上",
      openDataContextNullTips: "页面离家出走啦~",
      getRedPacketTips: "奖励将在24小时内到账,请在微信钱包查收"
    };
    cc._RF.pop();
  }, {} ],
  getJiPaiQi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a3d1pI1TNANZocVs8awXkR", "getJiPaiQi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        jipaiqiAdId: "adunit-8bde7ac62d379503"
      },
      onLoad: function onLoad() {},
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        hall.LOGW("=====", "file = [getJiPaiQi] fun = [finishShowRewardVideo]" + isEnded);
        isEnded && (ddz.gameModel.firstUseJiPaiQiPoint > 0 ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstUseJiPaiQi) : ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.adGetJiPaiQi));
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        hall.LOGW("=====", "file = [ddz_fail] fun = [errorShowRewardVideo]");
        this.isOnShare = false;
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      updateGetReward: function updateGetReward() {},
      onClickCenterBtn: function onClickCenterBtn() {
        hall.adManager.showRewardedVideo(this.jipaiqiAdId, "getJiPaiQi");
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "getJiPaiQi" ]);
      }
    });
    cc._RF.pop();
  }, {} ],
  guideIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f3d3CZMcZOl4eIBON5MrO/", "guideIcon");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        redDot: cc.Node
      },
      onLoad: function onLoad() {},
      onClickIcon: function onClickIcon() {
        ddz.gameModel.getShoreCut();
        hall.GlobalFuncs.onCollectDeskTop();
      }
    });
    cc._RF.pop();
  }, {} ],
  huzhubaoxiang: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84488kr6xFAJJti29vG9Xap", "huzhubaoxiang");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        haveReward: cc.Node
      },
      onLoad: function onLoad() {
        var that = this;
        ty.NotificationCenter.listen(ddz.EventType.IS_HAVE_REWARD, this.isHaveReward, this);
        this.scheduleOnce(function() {
          that.playLoopAni();
        }, 1);
      },
      openBox: function openBox() {
        ddz.isClickOpenBox = true;
        ddz.gameModel.getOpenBox();
      },
      isHaveReward: function isHaveReward(data) {
        var _count = 0;
        if (data.rewards) {
          var _rewards = data.rewards;
          _rewards["item:1311"] > 0 && (_count += _rewards["item:1311"]);
          _rewards["user:chip"] > 0 && (_count += _rewards["user:chip"]);
        }
        this.haveReward.active = _count > 0;
      },
      stopLoopAni: function stopLoopAni() {
        var animationCom = this.node.getComponent(cc.Animation);
        var ani = animationCom.getAnimationState("baoxiang");
        ani.stop();
      },
      playLoopAni: function playLoopAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.play("baoxiang");
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  jipaiqi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d206H895FF4ZHRQ/uZjvqQ", "jipaiqi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        poker_num_1: cc.Label,
        poker_num_2: cc.Label,
        poker_num_3: cc.Label,
        poker_num_4: cc.Label,
        poker_num_5: cc.Label,
        poker_num_6: cc.Label,
        poker_num_7: cc.Label,
        poker_num_8: cc.Label,
        poker_num_9: cc.Label,
        poker_num_10: cc.Label,
        poker_num_11: cc.Label,
        poker_num_12: cc.Label,
        poker_num_13: cc.Label,
        poker_num_14: cc.Label,
        poker_num_15: cc.Label,
        jipaiqi_num: cc.Label,
        bg: cc.Node,
        xiaopai: cc.Node
      },
      onLoad: function onLoad() {
        this.bg.active = false;
        this.xiaopai.active = false;
        ty.NotificationCenter.listen(ddz.EventType.OPEN_JIPAIJI, this.onOpenJipaiQi, this);
        ty.NotificationCenter.listen(ddz.EventType.CLOSE_JIPAIJI, this.onCloseJipaiQi, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TABLE_ANI, this.onRemoveAni, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_CARD_NOTE, this.updateCardNote, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_JIPAIQI, this.updateGetReward, this);
        this.jipaiqi_num.string = hall.ME.udataInfo.jiPaiQiCount;
      },
      updateGetReward: function updateGetReward() {
        this.jipaiqi_num.string = hall.ME.udataInfo.jiPaiQiCount;
      },
      onOpenJipaiQi: function onOpenJipaiQi(data) {
        var cardNote = data.myCardNote;
        if (!(cardNote.length && cardNote.length > 0)) {
          this.onCloseJipaiQi();
          return;
        }
        for (var i = 0; i < cardNote.length; i++) this["poker_num_" + (i + 1)].string = cardNote[i];
        this.jipaiqi_num.string = data.num;
        if (!this.bg.active) {
          this.bg.active = true;
          this.xiaopai.active = true;
          var ani = this.node.getComponent(cc.Animation);
          var anim = ani.getAnimationState("jipaiqi");
          anim.once("finished", function() {});
          anim.play();
          hall.sxAdManager && hall.sxAdManager.hide();
        }
        hall.adManager.canShowTableBanner = false;
        hall.adManager.canShowTableTopBanner = false;
        hall.adManager.destroyWidthBannerAd();
      },
      onCloseJipaiQi: function onCloseJipaiQi() {
        var ani = this.node.getComponent(cc.Animation);
        var anim = ani.getAnimationState("shouhui");
        var that = this;
        anim.once("finished", function() {
          that.bg.active = false;
          that.xiaopai.active = false;
          ty.NotificationCenter.trigger(ddz.EventType.OPEN_DIVERSION);
        });
        anim.play();
      },
      updateCardNote: function updateCardNote(data) {
        if (data.length && data.length > 0) for (var i = 0; i < data.length; i++) this["poker_num_" + (i + 1)] && (this["poker_num_" + (i + 1)].string = data[i]);
      },
      onClickButton: function onClickButton() {
        ddz.isClickJiPaiQi = true;
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "jipaiqi", "click" ]);
        ddz.gameModel.firstUseJiPaiQiPoint > 0 ? ddz.gameModel.shareToGetreward(ddz.Share.SharePointType.firstUseJiPaiQi) : ty.NotificationCenter.trigger(ddz.EventType.USE_NEW_CARD_NOTE);
      },
      onRemoveAni: function onRemoveAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.stop();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  multiReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39ee3KI0MtIS5cqRuZid2VC", "multiReward");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        coinLabel: cc.Label,
        diamondLabel: cc.Label,
        jiPaiQiLabel: cc.Label,
        title: cc.Label,
        coinNode: cc.Node,
        diamondNode: cc.Node,
        jiPaiQiNode: cc.Node
      },
      onLoad: function onLoad() {
        var ani = this.node.getComponent(cc.Animation);
        ani.play("animan");
      },
      updateRewardInfo: function updateRewardInfo(coinNum, diamondNum, jipaiqiNum, _count, _title) {
        var posList = [ -200, 0, 200 ];
        2 == _count ? posList = [ -150, 150 ] : 1 == _count && (posList = [ 0 ]);
        var index = 0;
        if (coinNum) {
          this.setCoinLable(coinNum);
          null != posList[index] && (this.coinNode.x = posList[index]);
          this.coinNode.active = true;
          index++;
        }
        if (diamondNum) {
          this.setDiamondLabel(diamondNum);
          null != posList[index] && (this.diamondNode.x = posList[index]);
          this.diamondNode.active = true;
          index++;
        }
        if (jipaiqiNum) {
          this.setJiPaiQiLabel(jipaiqiNum);
          null != posList[index] && (this.jiPaiQiNode.x = posList[index]);
          this.jiPaiQiNode.active = true;
        }
        _title && (this.title.string = _title);
      },
      setCoinLable: function setCoinLable(num) {
        this.coinLabel.string = num;
      },
      setDiamondLabel: function setDiamondLabel(num) {
        this.diamondLabel.string = num;
      },
      setJiPaiQiLabel: function setJiPaiQiLabel(num) {
        this.jiPaiQiLabel.string = num;
      },
      onClickCenterBtn: function onClickCenterBtn() {
        this.onClose();
      },
      stopAni: function stopAni() {
        var ani = this.node.getComponent(cc.Animation);
        ani.stop();
      },
      onClose: function onClose() {
        this.stopAni();
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  officialAccountGuide: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e838InI4lLX5mEEAoCEkDC", "officialAccountGuide");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        guideNode_1: cc.Node,
        guideNode_2: cc.Node,
        guideNode_3: cc.Node,
        guideNode_4: cc.Node,
        hand: cc.Node,
        yindao: cc.Prefab,
        iosText: cc.RichText,
        androidText: cc.RichText
      },
      onLoad: function onLoad() {
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.gongZhongHaoCard);
        ddz.gameModel.checkShareReward(ddz.Share.SharePointType.gongZhongHaoMenu);
        this.isAction = true;
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("tipsWindowNode");
        anim1.play();
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.hand.y = backButtonH - 30);
        var that = this;
        anim1.on("finished", function() {
          that.isAction = false;
        }, this);
        this.playHandAni();
      },
      openWindow: function openWindow() {
        this.guideNode_4.active = false;
        ddz.gameModel.gongZhonghaoCardPoint > 0 ? this.playAttentionAni() : ddz.gameModel.gongZhonghaoMenuPoint > 0 ? this.playGetDayRewardAni() : ddz.GlobalFuncs.showNormalTipsWindow("今天的免费礼包已领取\n明天奖励更给力哦~", [ {
          title: "确定",
          callFunc: function callFunc() {}
        } ], "天天礼包");
        hall.AdManagerTYWX && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").hideAdNode();
      },
      onClickIssueBtn: function onClickIssueBtn() {
        this.playEnterAni();
      },
      playAttentionAni: function playAttentionAni() {
        this.guideNode_2.active = false;
        this.guideNode_3.active = false;
        this.guideNode_1.active = true;
        this.guideNode_1.setScale(0);
        var actionTime = .15;
        var scaleAction = cc.scaleTo(actionTime, 1.05);
        var scaleAction_2 = cc.scaleTo(actionTime / 3, 1);
        this.guideNode_1.runAction(cc.sequence(scaleAction, scaleAction_2));
      },
      playEnterAni: function playEnterAni() {
        this.guideNode_2.active = false;
        this.guideNode_1.active = false;
        this.guideNode_3.active = true;
        this.guideNode_3.setScale(0);
        var actionTime = .15;
        var scaleAction = cc.scaleTo(actionTime, 1.05);
        var scaleAction_2 = cc.scaleTo(actionTime / 3, 1);
        this.guideNode_3.runAction(cc.sequence(scaleAction, scaleAction_2));
        this.setTipsRich();
      },
      addAppletGetDiamond: function addAppletGetDiamond() {
        this.guideNode_2.active = false;
        this.guideNode_1.active = false;
        this.guideNode_3.active = false;
        this.guideNode_4.active = true;
        hall.adManager.destroyWidthBannerAd();
      },
      setTipsRich: function setTipsRich() {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
          this.androidText.node.active = true;
          this.iosText.node.active = false;
        } else if (cc.sys.os == cc.sys.OS_IOS) {
          this.androidText.node.active = false;
          this.iosText.node.active = true;
        } else {
          this.androidText.node.active = true;
          this.iosText.node.active = false;
        }
      },
      playGetDayRewardAni: function playGetDayRewardAni() {
        this.guideNode_2.active = true;
        this.guideNode_1.active = false;
        this.guideNode_3.active = false;
        this.guideNode_2.setScale(0);
        var actionTime = .15;
        var scaleAction = cc.scaleTo(actionTime, 1.05);
        var scaleAction_2 = cc.scaleTo(actionTime / 3, 1);
        this.guideNode_2.runAction(cc.sequence(scaleAction, scaleAction_2));
      },
      playHandAni: function playHandAni() {
        if (this.yindaoAni) return;
        this.yindaoAni = cc.instantiate(this.yindao);
        this.hand.addChild(this.yindaoAni);
        var ani = this.yindaoAni.getComponent(cc.Animation);
        var clipName = ani.getClips()[0].name;
        var anim = ani.getAnimationState(clipName);
        anim.once("finished", function() {});
        this.hand.setScale(.5);
        anim.play();
      },
      playEndAnimation: function playEndAnimation() {
        this.isAction = false;
        if (this.yindaoAni) {
          var ani = this.yindaoAni.getComponent(cc.Animation);
          ani.stop();
          this.yindaoAni.removeFromParent();
          this.yindaoAni = null;
        }
        this.node && this.node.destroy();
      },
      onClose: function onClose() {
        ddz.LOGD(null, "file = [officialAccountGuide] fun = [onClose]");
        if (this.isAction) return;
        this.playEndAnimation();
      },
      onCloseGetRewardWindow: function onCloseGetRewardWindow() {
        this.guideNode_2.stopAllActions();
        this.guideNode_1.stopAllActions();
        this.guideNode_2.active = true;
        this.guideNode_3.active = false;
        this.guideNode_1.active = false;
      },
      onDestroy: function onDestroy() {
        hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode") && hall.AdManagerTYWX.getAdNodeByTag("myFirstAdNode").showAdNode();
      }
    });
    cc._RF.pop();
  }, {} ],
  personDataEdit: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f63e28Jg1FuqLyMnTyu8TN", "personDataEdit");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        iconSprte: cc.Sprite,
        sexSpriteFrame: [ cc.SpriteFrame ],
        conSpriteFrame: [ cc.SpriteFrame ],
        otherSrpteFrame: [ cc.SpriteFrame ],
        infoLabel: cc.Label,
        selectBg: cc.Node,
        selectPrefab: cc.Prefab,
        scrollView: cc.ScrollView,
        itemHeight: 58,
        infoProperty: ""
      },
      onLoad: function onLoad() {
        this.content = this.scrollView.content;
        this.personInfo = hall.gameWorld.model.personInfo;
        this.scrollView.node.active = false;
        ty.NotificationCenter.listen(ddz.EventType.SELECT_INFO, this.onSelectInfo, this);
        ty.NotificationCenter.listen(ddz.EventType.CLOSE_XIA_LA_VIEW, this.onCloseXiaLaView, this);
        this.setDefaultInfo();
        this.xingzuoSet = false;
        this.shengfenSet = false;
      },
      setDefaultInfo: function setDefaultInfo() {
        switch (this.infoProperty) {
         case "consttellation":
          var str_1 = this.personInfo.getConstellation();
          this.infoLabel.string = str_1;
          if ("未设置" == str_1) this.iconSprte.spriteFrame = this.otherSrpteFrame[0]; else {
            this.iconSprte.spriteFrame = this.conSpriteFrame[0];
            var _config = ddz.constellationConfig;
            var index = _config.indexOf(str_1);
            -1 == index && (index = 0);
            this.iconSprte.spriteFrame = this.conSpriteFrame[index];
          }
          break;

         case "province":
          var str_2 = this.personInfo.getProvince();
          this.infoLabel.string = str_2;
          this.iconSprte.spriteFrame = "未设置" == str_2 ? this.otherSrpteFrame[0] : this.otherSrpteFrame[1];
          break;

         case "district":
          var str_3 = this.personInfo.getDistrict();
          this.infoLabel.string = str_3;
          this.iconSprte.spriteFrame = "未设置" == str_3 ? this.otherSrpteFrame[0] : this.otherSrpteFrame[1];
          break;

         case "sex":
          if (hall.ME.udataInfo.m_sex == ddz.Enums.PlayerSexEnum.SEX_MALE) {
            this.iconSprte.spriteFrame = this.sexSpriteFrame[0];
            this.infoLabel.string = "男";
          } else {
            this.iconSprte.spriteFrame = this.sexSpriteFrame[1];
            this.infoLabel.string = "女";
          }
        }
      },
      onSelectInfo: function onSelectInfo(data) {
        this.infoProperty == data._proType && (this.infoLabel.string = data.infoStr);
        switch (data._proType) {
         case "consttellation":
          this.parentCom.constellationString = data.infoStr;
          if (this.infoProperty == data._proType) {
            var _config = ddz.constellationConfig;
            var index = _config.indexOf(data.infoStr);
            -1 == index && (index = 0);
            this.iconSprte.spriteFrame = this.conSpriteFrame[index];
          }
          break;

         case "province":
          this.parentCom.provinceString = data.infoStr;
          break;

         case "district":
          this.parentCom.districtString = data.infoStr;
        }
      },
      onCloseXiaLaView: function onCloseXiaLaView() {
        this.scrollView.node.active = false;
        this.selectBg.setScaleY(1);
      },
      setParentCom: function setParentCom(_com) {
        this.parentCom = _com;
      },
      setConDefault: function setConDefault() {
        if (this.xingzuoSet) return;
        if (this.personInfo) {
          var _config = ddz.constellationConfig;
          if (_config.length > 0) {
            this.xingzuoSet = true;
            this.scrollView.content.height = _config.length * this.itemHeight;
            for (var i = 0; i < _config.length; i++) {
              var item = cc.instantiate(this.selectPrefab);
              var com = item.getComponent("personInfoSelect");
              com.updateInfo(_config[i], 0, this.infoProperty, i);
              this.content.addChild(item);
              item.y = -i * this.itemHeight - this.itemHeight / 2;
            }
          }
        }
      },
      setProVinceDefault: function setProVinceDefault() {
        if (this.shengfenSet) return;
        var _config = ddz.cityConfig;
        var count = 0;
        for (var key in _config) count++;
        this.scrollView.content.height = count * this.itemHeight;
        var couunt_sig = 0;
        this.shengfenSet = true;
        for (var key in _config) {
          var item = cc.instantiate(this.selectPrefab);
          var com = item.getComponent("personInfoSelect");
          com.updateInfo(key, 1, this.infoProperty);
          this.content.addChild(item);
          item.y = -couunt_sig * this.itemHeight - this.itemHeight / 2;
          couunt_sig++;
        }
      },
      setDistrictDefault: function setDistrictDefault() {
        this.content.removeAllChildren();
        var _config = ddz.cityConfig;
        if ("" == this.parentCom.provinceString || "未设置" == this.parentCom.provinceString) hall.MsgBoxManager.showToast({
          title: "请先设置省份啊!"
        }); else {
          var cityList = _config[this.parentCom.provinceString];
          if (!cityList || cityList.length <= 0) {
            hall.MsgBoxManager.showToast({
              title: "请先设置省份啊!"
            });
            return;
          }
          this.scrollView.content.height = cityList.length * this.itemHeight;
          for (var i = 0; i < cityList.length; i++) {
            var item = cc.instantiate(this.selectPrefab);
            var com = item.getComponent("personInfoSelect");
            com.updateInfo(cityList[i]["市级"], 1, this.infoProperty);
            this.content.addChild(item);
            item.y = -i * this.itemHeight - this.itemHeight / 2;
          }
        }
      },
      setSexDefault: function setSexDefault() {},
      onClickXiaLaBtn: function onClickXiaLaBtn() {
        this.scrollView.node.active = !this.scrollView.node.active;
        this.selectBg.setScaleY(1);
        if (this.scrollView.node.active) {
          this.selectBg.setScaleY(-1);
          switch (this.infoProperty) {
           case "consttellation":
            this.setConDefault();
            break;

           case "province":
            this.setProVinceDefault();
            break;

           case "district":
            if ("" == this.parentCom.provinceString || "未设置" == this.parentCom.provinceString) {
              hall.MsgBoxManager.showToast({
                title: "请先设置省份啊!"
              });
              this.scrollView.node.active = false;
              return;
            }
            this.setDistrictDefault();
          }
        }
      },
      onClose: function onClose() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
        this.parentCom = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  personInfoMode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e4fao4woVGYotBZhim71cV", "personInfoMode");
    "use strict";
    hall.PersonInfo = cc.Class({
      micro_signal: "",
      s_isVisible: false,
      signature: "",
      constellation: "未设置",
      province: "未设置",
      district: "未设置",
      sex: "未设置",
      getMicroSignal: function getMicroSignal() {
        return this.micro_signal;
      },
      getSignalIsVisible: function getSignalIsVisible() {
        return this.s_isVisible;
      },
      getSignature: function getSignature() {
        return this.signature;
      },
      getConstellation: function getConstellation() {
        "" == this.constellation && (this.constellation = "未设置");
        return this.constellation;
      },
      getDistrict: function getDistrict() {
        "" == this.district && (this.district = "未设置");
        return this.district;
      },
      getProvince: function getProvince() {
        "" == this.province && (this.province = "未设置");
        return this.province;
      },
      getSex: function getSex() {
        return this.sex;
      },
      getConsttellationConfig: function getConsttellationConfig() {
        return this.constellationConfig;
      },
      getCityConfig: function getCityConfig() {
        return this.cityConfig;
      },
      parseUserInfo: function parseUserInfo(userInfo) {
        hall.LOGW(null, "file = [personInfoMode] fun = [parseTableInfo]  userInfo =  " + JSON.stringify(userInfo));
        this.micro_signal = userInfo.micro_signal;
        this.s_isVisible = userInfo.isVisible;
        this.signature = userInfo.signature;
        this.constellation = userInfo.constellation;
        this.district = userInfo.district;
        this.province = userInfo.province;
        this.sex = userInfo.sex;
      },
      cleanup: function cleanup() {
        this.micro_signal = "";
        this.s_isVisible = false;
        this.signature = "";
        this.constellation = "未设置";
        this.district = "未设置";
        this.province = "未设置";
        this.sex = "未设置";
      }
    });
    cc._RF.pop();
  }, {} ],
  personInfoSelect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb6a4Hq0YVBTYMHKJTXr3XL", "personInfoSelect");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        infoLabel: cc.Label,
        bg: cc.Node
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.CHOOSE_BAR, this.setBgVisible, this);
      },
      updateInfo: function updateInfo(str, state, _proType, index) {
        this._proType = _proType;
        this.infoStr = str;
        this.infoLabel.string = str;
      },
      setBgVisible: function setBgVisible(isShow) {
        this.bg.active = isShow;
      },
      onClickSelect: function onClickSelect() {
        var data = {};
        data._proType = this._proType;
        data.infoStr = this.infoStr;
        ty.NotificationCenter.trigger(ddz.EventType.SELECT_INFO, data);
        ty.NotificationCenter.trigger(ddz.EventType.CHOOSE_BAR, false);
        this.setBgVisible(true);
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  personalAssets: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "649e0BdnBxEjaMC3IWVCPGf", "personalAssets");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        avatar: {
          default: null,
          type: cc.Node
        },
        coinLabel: {
          default: null,
          type: cc.Label
        },
        diamondLabel: {
          default: null,
          type: cc.Label
        },
        jiPaiQiLabel: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        this.diamondLabel.string = hall.ME.udataInfo.diamondCount + "";
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_DIAMOND_NUMBER, this.updateDiamond, this);
        this.updateCoin();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_COIN_NUMBER, this.updateCoin, this);
      },
      updateInfo: function updateInfo() {
        var wimdow = this.avatar.getComponent("Avatar");
        if (ty.UserInfo.userPic && ddz.gameModel.isLimit) {
          wimdow.setAvatarUrl(ty.UserInfo.userPic);
          wimdow.hideNameDisplay();
        }
        this.updateCoin();
        var num = hall.ME.udataInfo.diamondCount;
        this.updateDiamond(num);
      },
      updateCoin: function updateCoin() {
        var number = hall.ME.getChip();
        this.coinLabel.string = number ? hall.GlobalFuncs.formatGold(number) : 0;
      },
      updateJiPaiQi: function updateJiPaiQi() {},
      updateDiamond: function updateDiamond(num) {
        this.diamondLabel.string = num ? hall.GlobalFuncs.formatGold(num) : 0;
      },
      onClickHeadBtn: function onClickHeadBtn() {
        var curScene = cc.director.getScene();
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "avatar", curScene.name ]);
        hall.GlobalFuncs.onPersonalInfo();
      },
      onClickCoin: function onClickCoin() {
        ty.NotificationCenter.trigger(ddz.EventType.REMOVE_WINDOW_ANI);
        var curScene = cc.director.getScene();
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "chipAdd", curScene.name ]);
        hall.GlobalFuncs.gotoMallScene();
      },
      onClickDiamond: function onClickDiamond() {
        var curScene = cc.director.getScene();
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "diamondAdd", curScene.name ]);
        ddz.isClickShareReward = true;
        ddz.gameModel.getDayInviteReward();
      },
      onClickJiPaiQi: function onClickJiPaiQi() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  personalInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a631NolONBm4mhjqqMohZt", "personalInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        avatar: {
          default: null,
          type: cc.Node
        },
        nickName: {
          default: null,
          type: cc.Label
        },
        uid: {
          default: null,
          type: cc.Label
        },
        totalCount: {
          default: null,
          type: cc.Label
        },
        winCount: {
          default: null,
          type: cc.Label
        },
        winRatioCount: {
          default: null,
          type: cc.Label
        },
        maxBetCount: {
          default: null,
          type: cc.Label
        },
        backButton: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        var wimdow = this.avatar.getComponent("Avatar");
        if (ty.UserInfo.userPic && ddz.gameModel.isLimit) {
          wimdow.setAvatarUrl(ty.UserInfo.userPic);
          wimdow.hideNameDisplay();
        }
        this.nickName.string = "昵称 : " + ty.UserInfo.userName;
        this.uid.string = "账号 : " + ty.UserInfo.userId;
        var backButtonH = ddz.GlobalFuncs.getBackButtonPositionY();
        backButtonH && (this.backButton.node.y = backButtonH);
      },
      updateInfo: function updateInfo() {
        this.totalCount.node.active = false;
        this.winCount.node.active = false;
        this.winRatioCount.node.active = false;
        this.maxBetCount.node.active = false;
      },
      backAction: function backAction() {
        this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {} ],
  shareRedPacket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7effxnXpNPLJ6x3+1+aqoF", "shareRedPacket");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        redPacket: cc.Node,
        yellowPacket: cc.Node,
        packet: cc.Node,
        nameLabel: cc.Label,
        avatar: cc.Node,
        diamond_bg: cc.Node,
        diamond_rich: cc.RichText,
        get_rich: cc.RichText,
        btn_1: cc.Button,
        btn_2: cc.Button,
        btn_lingqu_state: cc.Node,
        jiqiText: cc.Label,
        inviteedCode: -1,
        moneyIcon: cc.Node
      },
      onLoad: function onLoad() {
        this.btn_1.node.on("click", this.getReward, this);
        this.btn_2.node.on("click", this.askForReward, this);
      },
      getReward: function getReward() {
        ddz.gameModel.getInviteRewardDay(this.inviteedCode);
      },
      askForReward: function askForReward() {
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "diamondShare" ]);
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGetDiamondHall);
      },
      setBtnState: function setBtnState(index) {
        if (1 == index) {
          this.redPacket.active = true;
          this.yellowPacket.active = false;
          this.btn_1.node.active = true;
          this.btn_2.node.active = false;
          this.btn_lingqu_state.active = false;
          this.jiqiText.node.active = false;
          this.diamond_bg.active = true;
          this.avatar.active = false;
        } else if (2 == index) {
          this.redPacket.active = true;
          this.yellowPacket.active = false;
          this.btn_1.node.active = false;
          this.btn_2.node.active = false;
          this.btn_lingqu_state.active = true;
          this.jiqiText.node.active = false;
          this.diamond_bg.active = false;
          this.avatar.active = true;
        } else if (3 == index) {
          this.redPacket.active = false;
          this.yellowPacket.active = true;
          this.btn_1.node.active = false;
          this.btn_2.node.active = true;
          this.btn_lingqu_state.active = false;
          this.jiqiText.node.active = false;
        } else if (4 == index) {
          this.redPacket.active = false;
          this.yellowPacket.active = false;
          this.packet.active = true;
          this.btn_1.node.active = true;
          this.btn_2.node.active = false;
          this.btn_lingqu_state.active = false;
          this.jiqiText.node.active = false;
        }
      },
      setSharePeopleInfo: function setSharePeopleInfo(data) {
        if (data.userId) {
          if (0 == data.rewardState) {
            this.setBtnState(1);
            data.itemId && "item:1311" == data.itemId ? data.count && (this.diamond_rich.string = "<img src='dda_button_diamond' height=23 width=29/><color=#ffffff> x" + data.count + "</color>") : data.itemId && "user:chip" == data.itemId ? data.count && (this.diamond_rich.string = "<img src='ddz_main_chip' height=23 width=29/><color=#ffffff> x" + data.count + "</color>") : data.itemId && "user:coupon" == data.itemId && data.count && (this.diamond_rich.string = "<color=#ffffff>?</color>");
          } else {
            this.setBtnState(2);
            var com = this.avatar.getComponent("Avatar");
            com.setAvatarUrl(data.bindPic);
            com.hideNameDisplay();
          }
          this.inviteedCode = data.userId;
          this.nameLabel.node.active = true;
          this.nameLabel.string = data.bindName;
        } else {
          this.setBtnState(3);
          if (data.count) if (data.itemId && "user:coupon" == data.itemId) {
            this.get_rich.string = "<color=#C17C25>最高7元</color>";
            this.moneyIcon.active = true;
          } else {
            this.get_rich.string = "<color=#C17C25> x" + data.count + "</color>";
            this.moneyIcon.active = false;
          }
          this.nameLabel.node.active = false;
        }
      },
      setBigReward: function setBigReward(data) {
        this.setBtnState(4);
        this.nameLabel.node.active = false;
        if (1 == data.rewardState) {
          this.btn_lingqu_state.active = true;
          this.jiqiText.node.active = false;
          this.btn_1.node.active = false;
        } else if (0 == data.rewardState) ; else {
          this.jiqiText.node.active = true;
          this.btn_1.node.active = false;
          this.btn_lingqu_state.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  sxAdManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e9940AL0hIsLLCh8/ru2wk", "sxAdManager");
    "use strict";
    hall.sxAdManager = {
      sxAdInfo: null,
      opDataWeight: [],
      iconWeight: null,
      iconIndex: null,
      preIconIndex: null,
      isSwitchIcon: false,
      callback: null,
      isLoadConfig: false,
      show: function show() {
        var _this = this;
        try {
          console.log("sxAdManager ad Show");
          if (this.adIcon) {
            this.adIcon.active = true;
            cc.director.getScheduler().schedule(this.callback, this.adIcon, this.sxAdInfo.framesInterval, !this.isSwitchIcon);
          } else {
            var callback = function callback() {
              _this.adIcon = new cc.Node();
              _this.initWeight();
              _this.iconIndex = 0;
              _this.isSwitchIcon = true;
              _this.callback = function() {
                _this.switchIcon();
              };
              _this.callback();
              cc.director.getScheduler().schedule(_this.callback, _this.adIcon, _this.sxAdInfo.framesInterval, !_this.isSwitchIcon);
              _this.adIcon.addComponent(cc.Button);
              _this.adIcon.on("click", _this.onClickAdIconBtn, _this);
              cc.game.addPersistRootNode(_this.adIcon);
            };
            this.loadConfigFile(callback);
          }
        } catch (error) {
          console.log("sxAdManager: ", error);
        }
      },
      hide: function hide() {
        if (this.adIcon) {
          cc.director.getScheduler().unschedule(this.callback, this.adIcon);
          console.log("sxAdManager ad hide");
          this.adIcon.active = false;
        }
      },
      setPosition: function setPosition(dx, dy) {
        this.adIcon && (this.adIcon.position = cc.v2(dx, dy));
      },
      setScale: function setScale(scale) {
        this.adIcon && (this.adIcon.scale = scale);
      },
      setPositionById: function setPositionById(id) {
        var _this2 = this;
        if (this.adIcon) {
          var index = -1;
          for (var i = 0; i < this.sxAdInfo.position.length; i++) this.sxAdInfo.position[i].id == id && (index = i);
          if (-1 != index) {
            var widget = this.sxAdInfo.position[index].type;
            var dx = this.sxAdInfo.position[index].x;
            var dy = this.sxAdInfo.position[index].y;
            this.setWidgetPosition(widget, dx, dy);
          }
        } else setTimeout(function() {
          _this2.setPositionById(id);
        }, 10);
      },
      setWidgetPosition: function setWidgetPosition(type, x, y) {
        switch (type) {
         case 1:
          this.adIcon.position = cc.v2(x, cc.winSize.height - y);
          break;

         case 2:
          this.adIcon.position = cc.v2(cc.winSize.width - x, cc.winSize.height - y);
          break;

         case 3:
          this.adIcon.position = cc.v2(x, y);
          break;

         case 4:
          this.adIcon.position = cc.v2(cc.winSize.width - x, y);
          break;

         case 5:
          this.adIcon.position = cc.v2(cc.winSize.width / 2 + x, cc.winSize.height - y);
          break;

         case 6:
          this.adIcon.position = cc.v2(cc.winSize.width / 2 + x, y);
          break;

         case 7:
          this.adIcon.position = cc.v2(x, cc.winSize.height / 2 + y);
          break;

         case 8:
          this.adIcon.position = cc.v2(cc.winSize.width - x, cc.winSize.height / 2 + y);
          break;

         case 9:
          this.adIcon.position = cc.v2(cc.winSize.width / 2 + x, cc.winSize.height / 2 + y);
        }
      },
      loadConfigFile: function loadConfigFile(callback) {
        ddz.gameModel.getDiversionConfig();
        var self = this;
        var loadConfig = function loadConfig() {
          try {
            if (ddz.gameModel.getDiversionConfigJson()) {
              self.isLoadConfig = true;
              self.sxAdInfo = ddz.gameModel.getDiversionConfigJson();
              callback();
            } else self.isLoadConfig || setTimeout(function() {
              loadConfig();
            }, 2e3);
          } catch (error) {
            ddz.gameModel.getDiversionConfig();
          }
        };
        loadConfig();
      },
      retryConfigFile: function retryConfigFile() {
        var _this3 = this;
        this.isLoadConfig || setTimeout(function() {
          _this3.loadConfigFile(false);
        }, 2e4);
      },
      switchIcon: function switchIcon() {
        try {
          var num = Math.floor(Math.random() * this.iconWeight);
          this.iconIndex = this.selectItemByWeight(num, this.sxAdInfo.icons);
          var isClick = 0;
          var count = 0;
          for (var i = 0; i < this.sxAdInfo.icons.length; i++) for (var j = 0; j < this.sxAdInfo.icons[i].openData.length; j++) {
            this.isClickApp(this.sxAdInfo.icons[i].openData[j].imgurl) && isClick++;
            count++;
          }
          if (-1 == this.iconIndex || isClick == count) {
            this.hide();
            return;
          }
          if (this.iconIndex != this.preIconIndex) {
            if (0 == this.sxAdInfo.icons[this.iconIndex].type) {
              if (this.adIcon.getComponent(cc.Animation)) {
                this.adIcon.removeComponent(cc.Animation);
                this.adIcon.removeComponent(cc.Sprite);
              }
              this.loadStaticImg(this.sxAdInfo.icons[this.iconIndex]);
            } else if (1 == this.sxAdInfo.icons[this.iconIndex].type) {
              this.adIcon.getComponent(cc.Sprite) && (this.adIcon.getComponent(cc.Sprite).spriteFrame = null);
              this.loadDynamicImg(this.sxAdInfo.icons[this.iconIndex]);
            }
            this.preIconIndex = this.iconIndex;
          }
        } catch (err) {
          cc.director.getScheduler().unschedule(this.callback, this.adIcon);
        }
      },
      refreshIconsWeight: function refreshIconsWeight() {
        for (var i = 0; i < this.sxAdInfo.icons.length; i++) {
          var allWeight = 0;
          for (var j = 0; j < this.sxAdInfo.icons[i].openData.length; j++) this.sxAdInfo.icons[i].openData[j].clickHide && this.isClickApp(this.sxAdInfo.icons[i].openData[j].imgurl) ? this.sxAdInfo.icons[i].openData[j].weight = 0 : allWeight += this.sxAdInfo.icons[i].openData[j].weight;
          0 == allWeight && (this.sxAdInfo.icons[i].weight = 0);
        }
      },
      initWeight: function initWeight() {
        this.iconWeight = 0;
        for (var i = 0; i < this.sxAdInfo.icons.length; i++) {
          this.iconWeight += this.sxAdInfo.icons[i].weight;
          this.opDataWeight[i] = 0;
          var openData = this.sxAdInfo.icons[i].openData;
          for (var j = 0; j < openData.length; j++) this.opDataWeight[i] += openData[j].weight;
        }
      },
      loadStaticImg: function loadStaticImg(arr) {
        var link = arr.imgLink;
        var scale = arr.scale;
        var self = this;
        cc.loader.load(link, function(err, tex) {
          try {
            if (self.adIcon.getComponent(cc.Sprite)) {
              self.adIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tex);
              self.adIcon.scale = scale;
            } else {
              self.adIcon.addComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tex);
              self.adIcon.scale = scale;
            }
          } catch (err) {
            console.log(err);
            self.adIcon.addComponent(cc.Sprite).spriteFrame = null;
          }
        });
      },
      loadDynamicImg: function loadDynamicImg(arr) {
        var link = arr.imgLink.split(",");
        var scale = arr.scale;
        var self = this;
        var adIconFrames = [];
        var playFrames = function playFrames() {
          if (self.adIcon.getComponent(cc.Animation)) {
            var animation = self.adIcon.getComponent(cc.Animation);
            var clip = cc.AnimationClip.createWithSpriteFrames(adIconFrames, 10);
            clip.name = "anim_frame";
            clip.wrapMode = cc.WrapMode.Loop;
            animation.addClip(clip);
            animation.play("anim_frame");
          } else {
            var animation = self.adIcon.addComponent(cc.Animation);
            self.adIcon.getComponent(cc.Sprite) || self.adIcon.addComponent(cc.Sprite);
            var clip = cc.AnimationClip.createWithSpriteFrames(adIconFrames, 10);
            clip.name = "anim_frame";
            clip.wrapMode = cc.WrapMode.Loop;
            animation.addClip(clip);
            animation.play("anim_frame");
          }
        };
        cc.loader.load(link, function(err, results) {
          try {
            adIconFrames.splice(0, adIconFrames.length);
            for (var i = 0; i < link.length; i++) {
              var tex = results.getContent(link[i]);
              adIconFrames.push(new cc.SpriteFrame(tex));
            }
            null != scale && (self.adIcon.scale = scale);
            playFrames();
          } catch (err) {
            console.log(err);
            adIconFrames.push(null);
          }
        });
      },
      onClickAdIconBtn: function onClickAdIconBtn() {
        if ("undefined" !== typeof wx) try {
          var iconIndex = this.iconIndex;
          var num = Math.floor(Math.random() * this.opDataWeight[iconIndex]);
          var index = this.selectItemByWeight(num, this.sxAdInfo.icons[iconIndex].openData);
          if (-1 != index) if (0 == this.sxAdInfo.icons[iconIndex].openType) wx.previewImage({
            urls: [ this.sxAdInfo.icons[iconIndex].openData[index].imgurl ],
            success: function success(res) {},
            fail: function fail(res) {}
          }); else if (1 == this.sxAdInfo.icons[iconIndex].openType) {
            var bi_paramlist = this.sxAdInfo.icons[iconIndex].biparam;
            ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickAdBtn, bi_paramlist);
            wx.navigateToMiniProgram({
              appId: this.sxAdInfo.icons[iconIndex].openData[index].imgurl,
              path: this.sxAdInfo.icons[iconIndex].topath,
              envVersion: "release",
              extraData: null,
              success: function success(res) {
                hall.sxAdManager.saveItem(hall.sxAdManager.sxAdInfo.icons[iconIndex].openData[index].imgurl);
                hall.sxAdManager.refreshIconsWeight();
                hall.sxAdManager.initWeight();
                hall.sxAdManager.switchIcon();
                ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameSuccess, bi_paramlist);
              },
              fail: function fail(res) {
                ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeClickDirectToMiniGameFail, bi_paramlist);
                console.log("wx.navigateToMiniProgram fail");
                console.log(res);
              },
              complete: function complete(res) {
                console.log("navigateToMiniProgram ==== complete");
              }
            });
          }
        } catch (error) {
          console.log("sxAdManager: ", error);
        }
      },
      selectItemByWeight: function selectItemByWeight(num, arr) {
        var limit = 0;
        for (var i = 0; i < arr.length; i++) {
          var weight = arr[i].weight;
          if (weight && num <= weight + limit && num >= limit) return i;
          limit += weight;
        }
        return -1;
      },
      isClickApp: function isClickApp(appid) {
        var storedata = cc.sys.localStorage.getItem("sxad-data");
        if (storedata && "" !== storedata && storedata.indexOf(appid) >= 0) return true;
        return false;
      },
      saveItem: function saveItem(appid) {
        var storedata = cc.sys.localStorage.getItem("sxad-data");
        storedata && "" !== storedata ? storedata += appid + "," : storedata = appid + ",";
        cc.sys.localStorage.setItem("sxad-data", storedata);
      }
    };
    cc._RF.pop();
  }, {} ],
  treasure_box_newer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e55ccBTZmdEQa3ndljQorNy", "treasure_box_newer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        chipNode: cc.Node,
        diamondNode: cc.Node,
        chipNumberLabel: {
          default: null,
          type: cc.Label
        },
        diamondNumberLabel: {
          default: null,
          type: cc.Label
        },
        countDownRich: {
          default: null,
          type: cc.RichText
        },
        lastNumber: 0
      },
      onBlack: function onBlack() {},
      playEndAnimation: function playEndAnimation() {
        this.node && this.node.destroy();
      },
      onClose: function onClose(event) {
        if (this.isAction) return;
        this.isAction = true;
        this.playEndAnimation();
        ddz.ddz_newUserBox = null;
      },
      onHelp: function onHelp() {
        ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeNewUserGifts);
      },
      setCountDownWithNumber: function setCountDownWithNumber(number) {
        this.chipNode.active = false;
        this.diamondNode.active = false;
        var new_gift_reward = ddz.matchModel.new_gift_reward;
        ddz.Share.shareKeywordReplace.newerTreasureID = new_gift_reward.giftId;
        var reward = new_gift_reward.rewards;
        for (var i = 0; i < reward.length; i++) {
          var rewardInfo = reward[i];
          if ("item:1311" == rewardInfo.itemId) {
            this.diamondNode.active = true;
            this.diamondNumberLabel.string = rewardInfo.count;
          } else if ("user:chip" == rewardInfo.itemId) {
            this.chipNode.active = true;
            this.chipNumberLabel.string = rewardInfo.count;
          }
        }
        this.lastNumber = number;
        this.countDownRich.string = "消失倒计时 " + hall.GlobalFuncs.formatMinSeconds(this.lastNumber);
        ty.Timer.setTimer(this, this.countDown, .1, this.lastNumber);
      },
      countDown: function countDown() {
        this.lastNumber--;
        this.lastNumber > 0 ? this.countDownRich.string = "消失倒计时 " + hall.GlobalFuncs.formatMinSeconds(this.lastNumber) : this.onClose();
      },
      onLoad: function onLoad() {
        this.isAction = true;
        var animation = this.getComponent(cc.Animation);
        var anim1 = animation.getAnimationState("awad_tips_show");
        anim1.on("finished", function() {
          this.isAction = false;
        }, this);
        anim1.play();
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        hall.adManager.showAllWidthBannerAd("adunit-811cc4e234425489");
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareTypeNewUserGifts) return;
        hall.MsgBoxManager.showToast({
          title: "分享到更多群邀请更多好友吧～"
        });
      },
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
        ty.NotificationCenter.ignoreScope(this);
        hall.adManager.destroyWidthBannerAd();
      }
    });
    cc._RF.pop();
  }, {} ],
  treasure_box: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0bc607gVxZIVJcdq7G3jb+H", "treasure_box");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        backBg: {
          default: null,
          type: cc.Button
        },
        coloseButton: {
          default: null,
          type: cc.Button
        },
        centerButton: {
          default: null,
          type: cc.Button
        },
        btnText: cc.Label,
        descLabel: cc.Label,
        tips_1: cc.RichText,
        tips_2: cc.RichText,
        boxSprite: cc.Sprite,
        boxSpritex: cc.Sprite,
        boxSpriteFrame: [ cc.SpriteFrame ],
        bgLight: cc.Node
      },
      onLoad: function onLoad() {
        this.isAction = true;
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_SHARE_STATE, this.playAnimationAfterShareWithType, this);
        ty.NotificationCenter.listen(ddz.EventType.REMOVE_TREASURE_BOX, this.playEndAnimation, this);
        ty.NotificationCenter.listen(ddz.EventType.BOX_ON_CLOSE, this.onClose, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        var ani = this.node.getComponent(cc.Animation);
        var anim1 = ani.getAnimationState("awad_tips_show_box");
        var that = this;
        anim1.once("finished", function() {
          that.isAction = false;
        });
        anim1.play();
      },
      playAnimationAfterShareWithType: function playAnimationAfterShareWithType(shareType) {
        var bt = ddz.gameModel.getBoxShareSuccessTipsJson();
        if (shareType && shareType != ddz.Share.onShareType.clickStatShareTypeGiveProp) return;
        var reultType = ddz.Share.resultType;
        switch (reultType) {
         case 1:
          if (!ddz.gameModel.isBringVersion) {
            var tips_1 = "请分享到微信群哦~";
            bt && bt.shareToFriend && (tips_1 = bt.shareToFriend);
            hall.MsgBoxManager.showToast({
              title: tips_1
            });
          }
          break;

         case 2:
          ddz.gameModel.isBringVersion || hall.MsgBoxManager.showToast({
            title: "请不要频繁分享到一个群~"
          });
          break;

         case 3:
          ty.UserInfo.isInBSGS, ddz.gameModel.getBoxReward(parseInt(ty.UserInfo.userId), this.treasureID);
        }
        ddz.Share.resultType = 0;
      },
      setBoxShareInfo: function setBoxShareInfo(info, windoubles) {
        if (info) {
          this.treasureID = info.boxId;
          this.isClickGet = 1 == info.getRewardDirectly;
          this.descLabel.string = info.desc;
          this.desc = info.desc;
        }
        if (this.isClickGet || ddz.gameModel.isBringVersion) this.btnText.string = "打开宝箱"; else {
          var _shareType = ddz.Share.onShareType.clickStatShareTypeGiveProp;
          this.btnText.string = hall.GlobalFuncs.getButtonTitle(_shareType);
          if (ty.UserInfo.isInBSGS) {
            this.tips_1.node.active = false;
            this.tips_2.node.active = false;
          }
          var _config = ddz.gameModel.getCongratulationGetRewardJson();
          var shareConfig;
          _config && (shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity);
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          shareConfig && null != shareConfig.openBox && shareNumber >= shareConfig.openBox && (this.btnText.string = "看广告开宝箱");
        }
        switch (this.desc) {
         case "青铜宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[0];
          this.boxSpritex.spriteFrame = this.boxSpriteFrame[0];
          break;

         case "白银宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[1];
          this.boxSpritex.spriteFrame = this.boxSpriteFrame[1];
          break;

         case "黄金宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[2];
          this.boxSpritex.spriteFrame = this.boxSpriteFrame[2];
          break;

         case "春天宝箱":
          this.boxSprite.spriteFrame = this.boxSpriteFrame[3];
          this.boxSpritex.spriteFrame = this.boxSpriteFrame[3];
        }
      },
      clickCenterBtn: function clickCenterBtn() {
        if (this.isClickGet || ddz.gameModel.isBringVersion) {
          ddz.gameModel.getBoxReward(parseInt(ty.UserInfo.userId), this.treasureID);
          this.onClose();
        } else {
          var _config = ddz.gameModel.getCongratulationGetRewardJson();
          if (_config) {
            var shareConfig;
            shareConfig = ty.UserInfo.isInBSGS ? _config.bsgsCity : _config.otherCity;
          }
          var shareNumber = hall.GlobalFuncs.ReadStringFromLocalStorage(ddz.Share.YESTERDAY_SHARE_NUMBER, 0);
          shareConfig && null != shareConfig.openBox && shareNumber >= shareConfig.openBox ? this.seeVideoOpenBox() : ddz.Share.shareWithType(ddz.Share.onShareType.clickStatShareTypeGiveProp);
        }
      },
      playEndAnimation: function playEndAnimation() {
        this.node && this.node.destroy();
      },
      seeVideoOpenBox: function seeVideoOpenBox() {
        hall.LOGW("====", "====seeVideoOpenBox===");
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ddz.AudioHelper.playEffect(ddz.EffectPath_mp3.button_click_sound, false);
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "seeVideoOpenBox" ]);
        hall.adManager.showRewardedVideo("", "openBox");
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        isEnded && ddz.gameModel.getBoxReward(parseInt(ty.UserInfo.userId), this.treasureID);
      },
      onClose: function onClose() {
        if (this.isAction) return;
        var ani = this.node.getComponent(cc.Animation);
        var anim_1 = ani.getAnimationState("awad_tips_show_box");
        anim_1.stop();
        var anim_2 = ani.getAnimationState("awad_tips_show_xunhuan");
        anim_2.stop();
        ddz.matchResultPanel && ddz.matchResultPanel.showResults(true);
        this.isAction = true;
        this.playEndAnimation();
      },
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      },
      update: function update(dt) {
        this.isAction || (this.bgLight.rotation += .5);
      }
    });
    cc._RF.pop();
  }, {} ],
  userChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b1cdYW4fZEfKPK7Xe/wcKf", "userChat");
    "use strict";
    cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._TAG = "UserChat";
      },
      setArguments: function setArguments(tableId, _roomId, from, to, _url, _name, _parentScene) {
        this.tableId = tableId;
        this.roomId = _roomId;
        this.from = from;
        this.to = to;
        this._url = _url;
        this._name = _name;
      },
      properties: {
        bgBtn: {
          default: null,
          type: cc.Node
        },
        emoButtonFlower: {
          default: null,
          type: cc.Button
        },
        emoButtonDiamond: {
          default: null,
          type: cc.Button
        },
        emoButtonEgg: {
          default: null,
          type: cc.Button
        },
        emoButtonBrick: {
          default: null,
          type: cc.Button
        },
        nameLabel: cc.Label,
        avatar: cc.Node,
        flowerSpr: cc.Node,
        diamondSpr: cc.Node,
        eggSpr: cc.Node,
        brickSpr: cc.Node,
        coolLabel_1: cc.Label,
        coolLabel_2: cc.Label,
        coolLabel_3: cc.Label,
        coolLabel_4: cc.Label,
        shade_1: cc.Node,
        shade_2: cc.Node,
        shade_3: cc.Node,
        shade_4: cc.Node,
        infoNode: cc.Node,
        chatPanel: cc.Node,
        info_1: cc.Label,
        info_2: cc.Label,
        info_3: cc.Label,
        info_4: cc.Label,
        sexSprite: cc.Sprite,
        sexSpriteFrame: [ cc.SpriteFrame ],
        signatureLabel: cc.Label,
        xingzuoSprite: cc.Sprite,
        xingzuoSpriteFrame: [ cc.SpriteFrame ],
        xingzuoLable: cc.Label,
        locationLabel: cc.Label,
        wechat: cc.Label,
        head_shade: cc.Node,
        headSpr: cc.Sprite
      },
      updatePos: function updatePos() {
        this.avatar.active = true;
        this.nameLabel.active = true;
        var com = this.avatar.getComponent("Avatar");
        com.hideNameDisplay();
        if (this._name) {
          var slice_name = hall.GlobalFuncs.SliceStringToLength(this._name, 10);
          this.nameLabel.string = slice_name;
        } else this.nameLabel.active = false;
        if (this._url) {
          if (this.from != this.to || ddz.gameModel.isLimit) {
            com.setAvatarUrl(this._url);
            ty.SystemInfo.getImageWithURLBig(this._url, this.headSpr);
          }
        } else this.avatar.active = false;
      },
      onClickHead: function onClickHead() {
        this.head_shade.active = true;
        (this.from != this.to || ddz.gameModel.isLimit) && ty.SystemInfo.getImageWithURLBig(this._url, this.headSpr);
      },
      closeHead: function closeHead() {
        this.head_shade.active = false;
      },
      hideChat: function hideChat(isShow) {
        this.chatPanel.active = isShow;
      },
      onLoad: function onLoad() {
        this.emoButtonFlower.node.on("click", this.onEmoButtonFlower, this);
        this.emoButtonDiamond.node.on("click", this.onEmoButtonDiamond, this);
        this.emoButtonEgg.node.on("click", this.onEmoButtonEgg, this);
        this.emoButtonBrick.node.on("click", this.onEmoButtonBrick, this);
        var size = cc.director.getWinSize();
        this.bgBtn.setContentSize(size);
        this.head_shade.setContentSize(size);
        this.popWinAction(true);
        this.btnCooling(false, 0);
        this.info_1.string = "";
        this.info_2.string = "";
        this.info_3.string = "";
        this.info_4.string = "";
      },
      isCooling: function isCooling(num) {
        num > 0 ? this.btnCooling(true, num) : this.btnCooling(false, 0);
      },
      btnCooling: function btnCooling(isVal, num) {
        for (var i = 1; i <= 4; i++) {
          this["coolLabel_" + i].node.active = isVal;
          this["coolLabel_" + i].string = num;
          this["shade_" + i].active = isVal;
        }
        this.emoButtonFlower.node.active = !isVal;
        this.emoButtonDiamond.node.active = !isVal;
        this.emoButtonEgg.node.active = !isVal;
        this.emoButtonBrick.node.active = !isVal;
      },
      updatePersonalInfo: function updatePersonalInfo(_playinfo, _type, _fuhao_user_info) {
        switch (_type) {
         case "chip":
          this.info_1.string = "对局数：" + _playinfo.playcount;
          this.info_2.string = "胜率：" + parseInt(100 * _playinfo.winrate) + "%";
          this.info_3.string = "最大连胜：" + _playinfo.winstreakmax;
          this.info_4.string = "总赢取：" + _playinfo.winchip;
          break;

         case "friend":
          this.info_1.string = "对局数：" + _playinfo.playcount;
          this.info_2.string = "胜率：" + parseInt(100 * _playinfo.winrate) + "%";
          this.info_3.string = "最高倍数：" + _playinfo.windoubles;
          this.info_4.string = "总赢分：" + _playinfo.winchip;
          break;

         case "chuangguan":
          this.info_1.string = "闯关数：" + _playinfo.playcount;
          this.info_2.string = "胜率：" + parseInt(100 * _playinfo.winrate) + "%";
          this.info_3.string = "通关数：" + _playinfo.throughcount;
          this.info_4.string = "总奖金：" + _playinfo.wincoupon / 100;
          break;

         case "match":
          this.info_1.string = "参赛数：" + _playinfo.signcount;
          this.info_2.string = "晋级率：" + parseInt(100 * _playinfo.riserate) + "%";
          this.info_3.string = "冠军数：" + _playinfo.get1st;
          this.info_4.string = "获奖率：" + parseInt(100 * _playinfo.rewardrate) + "%";
        }
        if (_fuhao_user_info) {
          var str_1 = _fuhao_user_info.constellation;
          "" == str_1 && (str_1 = "未设置");
          var _config = ddz.constellationConfig;
          var index = _config.indexOf(str_1);
          index >= 0 && (this.xingzuoSprite.spriteFrame = this.xingzuoSpriteFrame[index]);
          this.xingzuoLable.string = str_1;
          var _signature = _fuhao_user_info.signature;
          this.signatureLabel.string = "" != _signature ? _signature : "该玩家很懒,什么也没有留下";
          var m_sex = _fuhao_user_info.sex;
          m_sex == ddz.Enums.PlayerSexEnum.SEX_MALE ? this.sexSprite.spriteFrame = this.sexSpriteFrame[0] : this.sexSprite.spriteFrame = this.sexSpriteFrame[1];
          var info_1 = _fuhao_user_info.province;
          var info_2 = _fuhao_user_info.district;
          "" == info_1 && (info_1 = "未设置");
          this.locationLabel.string = "未设置" == info_2 || "" == info_2 ? info_1 : info_1 + "  " + info_2;
          var weChatStr = _fuhao_user_info.micro_signal;
          "" == weChatStr && (weChatStr = "未设置");
          this.wechat.string = weChatStr;
        }
      },
      onEmoButtonFlower: function onEmoButtonFlower() {
        ddz.MsgFactory.sendTableChat(this.roomId, this.tableId, this.from, this.to, "flower", 1);
        this.btnCooling();
        this.popWinAction(false);
      },
      onEmoButtonDiamond: function onEmoButtonDiamond() {
        ddz.MsgFactory.sendTableChat(this.roomId, this.tableId, this.from, this.to, "diamond", 1);
        this.btnCooling();
        this.popWinAction(false);
      },
      onEmoButtonEgg: function onEmoButtonEgg() {
        ddz.LOGD(null, "onEmoButtonEgg: 点击鸡蛋");
        ddz.MsgFactory.sendTableChat(this.roomId, this.tableId, this.from, this.to, "egg", 1);
        this.btnCooling();
        this.popWinAction(false);
      },
      onEmoButtonBrick: function onEmoButtonBrick() {
        ddz.MsgFactory.sendTableChat(this.roomId, this.tableId, this.from, this.to, "brick", 1);
        this.btnCooling();
        this.popWinAction(false);
      },
      onClose: function onClose() {
        this.popWinAction(false);
      },
      updateInfo: function updateInfo() {},
      popWinAction: function popWinAction(isVisible) {
        true == isVisible ? this.node.active = true : this.setChatNode(false);
      },
      setChatNode: function setChatNode(isActive, _reSet) {
        this.node.active = isActive;
        _reSet && this.btnCooling(false, 0);
      }
    });
    cc._RF.pop();
  }, {} ],
  videoIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34f7a80O5BAIZzvlbdnQ/qD", "videoIcon");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        timerText: cc.Label,
        redDot: cc.Node,
        guanggao: cc.Node,
        videoBtn: cc.Button
      },
      onLoad: function onLoad() {
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_WATCH_VIDEO_STATUS, this.updateWatchVideoState, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE, this.finishShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.REWARD_VIDEO_COMPLETE_ERROR, this.errorShowRewardVideo, this);
        ty.NotificationCenter.listen(ddz.EventType.UPDATE_VIDEO_REWARD, this.finishGetRewardVideo, this);
        this.adId = "adunit-8bde7ac62d379503";
        ddz.gameModel.queryWatchVideoReward();
        var that = this;
        this.scheduleOnce(function() {
          that.playLoopAni();
        }, 1);
      },
      updateWatchVideoState: function updateWatchVideoState(result) {
        hall.LOGW("", "file = [videoIcon] fun = [updateWatchVideoState] result = " + JSON.stringify(result));
        this.timerText.node.active = false;
        this.adId = result.videoId;
        this.leftSecond = result.seconds;
        if (0 == result.status) if (0 == this.leftSecond) {
          ty.Timer.cancelTimer(this, this.timerAction);
          this.playLoopAni();
          this.videoBtn.interactable = true;
        } else {
          this.setTimerText(this.leftSecond);
          ty.Timer.setTimer(this, this.timerAction, 1, cc.macro.REPEAT_FOREVER, 0);
        } else if (1 == result.status) {
          this.playLoopAni();
          this.videoBtn.interactable = true;
        }
      },
      setTimerText: function setTimerText(_leftSecond) {
        var _minute = parseInt(_leftSecond / 60);
        _minute < 10 && (_minute = "0" + _minute);
        var _second = _leftSecond % 60;
        _second < 10 && (_second = "0" + _second);
        this.timerText.node.active = true;
        this.timerText.string = _minute + ":" + _second;
      },
      timerAction: function timerAction() {
        this.leftSecond--;
        if (this.leftSecond > 0) {
          this.stopLoopAni();
          this.setTimerText(this.leftSecond);
          this.videoBtn.interactable = false;
        } else {
          ty.Timer.cancelTimer(this, this.timerAction);
          this.playLoopAni();
          this.timerText.node.active = false;
          this.videoBtn.interactable = true;
          ddz.gameModel.queryWatchVideoReward();
        }
      },
      seeReardedVideo: function seeReardedVideo() {
        if (ty.TCP.connectStatus != ty.TCP.CONNECT_STATUS_OK) {
          hall.MsgBoxManager.showToast({
            title: "正在登录，请稍候"
          });
          ddz.LOGD(null, "TCP is not ok! Please wait!");
          return;
        }
        ty.BiLog.clickStat(ty.UserInfo.clickStatEventType.clickStatEventTypeButtonClick, [ "watchVideo", "diamond" ]);
        hall.LOGW("====", "file = [videoIcon] fun = [seeReardedVideo]this.adId = " + this.adId);
        if (this.leftSecond > 0) {
          var tipsString = "倒计时结束才能再次领奖哦~";
          var preFabPath = "prefabs/ddz_window_normal";
          var comName = "ddz_window_normal";
          hall.GlobalFuncs.showPopWinByPreFab(preFabPath, function(preFabNode) {
            var window = preFabNode.getComponent(comName);
            var tiString = "确定";
            window.setTitleContentAndButtonsString("提示", "<color=#1A6951>" + tipsString + "</c>", [ {
              title: tiString,
              callFunc: function callFunc() {}
            } ]);
          });
        } else {
          hall.adManager.checkVideoAd();
          hall.adManager.canPlay ? hall.adManager.showRewardedVideo(this.adId, "diamond") : hall.MsgBoxManager.showToast({
            title: "今日已达上限,明天继续哦~"
          });
        }
      },
      finishShowRewardVideo: function finishShowRewardVideo(isEnded) {
        hall.LOGW("finishShowRewardVideo", "收到广告播放完毕消息!");
        isEnded && ddz.gameModel.getWatchVideoReward();
      },
      errorShowRewardVideo: function errorShowRewardVideo(parArr) {
        hall.LOGW("", "file = [videoIcon] fun = [errorShowRewardVideo] parArr = " + JSON.stringify(parArr));
        this.finishShowRewardVideo(parseInt(parArr[1]));
      },
      finishGetRewardVideo: function finishGetRewardVideo(result) {
        if (result.rewards) {
          var rewards = result.rewards;
          "item:1311" == rewards.itemId ? ddz.GlobalFuncs.playZuanShi(false, this, rewards.count, false) : "item:1363" == rewards.itemId ? ddz.GlobalFuncs.playZuanShi(false, this, rewards.count, true, false, true) : ddz.GlobalFuncs.playZuanShi(false, this, rewards.count, true);
          this.leftSecond = result.seconds;
          if (this.leftSecond > 0) {
            this.setTimerText(this.leftSecond);
            ty.Timer.setTimer(this, this.timerAction, 1, cc.macro.REPEAT_FOREVER, 0);
          } else {
            this.videoBtn.interactable = true;
            this.timerText.node.active = false;
            ty.Timer.setTimer(this, this.timerAction, 1, cc.macro.REPEAT_FOREVER, 0);
          }
        }
      },
      stopLoopAni: function stopLoopAni() {},
      playLoopAni: function playLoopAni() {},
      onDestroy: function onDestroy() {
        ty.NotificationCenter.ignoreScope(this);
      }
    });
    cc._RF.pop();
  }, {} ],
  withdrawalMaintain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d87dydaNBBS5mhE0g9wnbD", "withdrawalMaintain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        tips: cc.Label,
        backSprite: {
          default: null,
          type: cc.Sprite
        },
        texture: cc.Texture2D,
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        }
      },
      onLoad: function onLoad() {
        var tempCanvas = wx.createCanvas();
        tempCanvas.width = 491;
        tempCanvas.height = 383;
        var context = tempCanvas.getContext("2d");
        var image = wx.createImage();
        image.src = ty.SystemInfo.cdnPath + "res/raw-assets/resources/main/withdrawal_icon.png";
        var that = this;
        image.onload = function(event) {
          var img = event.target;
          context.drawImage(img, 0, 0, 491, 383);
          that.texture = new cc.Texture2D();
          that.spriteFrame = new cc.SpriteFrame(this.texture);
          that.texture.initWithElement(tempCanvas);
          that.texture.handleLoadedTexture();
          that.backSprite.spriteFrame = that.spriteFrame;
          that.backSprite.spriteFrame._refreshTexture(that.texture);
        };
      },
      setTips: function setTips(timerStr) {
        this.tips.string = timerStr;
      }
    });
    cc._RF.pop();
  }, {} ]
}, {}, [ "PropagateInterface", "Ddz", "DdzTableAniPlayer", "DdzTableChatAni", "DdzTableScene", "MallScene", "MatchListScene", "RechargeScene", "RoomListScene", "SeceneTest", "ddz_detail", "ddz_rank", "ddz_reward", "Avatar", "Card", "ColorBg", "ControlPanel", "DdzMatching", "LaiZiAni", "MatchRankProgressScript", "PlayerPanel", "ProgressBarSub", "SingleReward", "boxTipsNode", "box_up", "conversionSuccess", "ddz_banner_close", "ddz_bubble_tips", "ddz_buttonList", "ddz_buttonList_2", "ddz_cell_getDiamond", "ddz_cell_mall", "ddz_cell_match_reward", "ddz_cell_matchlist", "ddz_cell_recharge", "ddz_cell_roomlist", "ddz_gameDetail_cell", "ddz_getRewardHistory", "ddz_icon_newer_gifts", "ddz_item_createRoom", "ddz_item_ft_chat", "ddz_item_shareMoments", "ddz_item_tipsWindow_buttonNode", "ddz_item_tipswindow_progress", "ddz_notify_cell", "ddz_progress", "ddz_redPacket", "ddz_resultTitle", "ddz_rewardCell", "ddz_rewardDetail_small", "ddz_shareResult", "ddz_tableView", "ddz_tipswindow_createRoom_item", "ddz_toast_cell", "ddz_zuanShiAni", "ddz_zuanshiBox", "enter_queue", "getJiPaiQi", "guideIcon", "huzhubaoxiang", "personDataEdit", "personInfoSelect", "personalAssets", "personalInfo", "shareRedPacket", "userChat", "videoIcon", "AlmsWindow", "ArenaMatchModule", "FriendModule", "GoldModule", "ThroughModule", "award_tips", "betBoxAbstract", "choosePlayMode", "collectDeskTop", "ddz_arena_levelup", "ddz_arena_result_lose", "ddz_arena_result_win", "ddz_arena_start", "ddz_avatar_window", "ddz_bannerResurgence", "ddz_ceLaMenu", "ddz_cell_history", "ddz_congratulation", "ddz_diamond_windows", "ddz_fail", "ddz_gameTasks", "ddz_game_result", "ddz_game_result_through", "ddz_getRedPacket", "ddz_getReward_Withdraw", "ddz_getReward_main", "ddz_helpBox", "ddz_hongbao", "ddz_main", "ddz_new_reward", "ddz_notifyWindow", "ddz_personInfoEdit", "ddz_rank_list", "ddz_revivalWindow", "ddz_rewardDetail", "ddz_reward_ani", "ddz_shareReward_windows", "ddz_success", "ddz_tipsWindow", "ddz_useDiamond", "ddz_window_createRoom", "ddz_window_dissolve", "ddz_window_fee_lack", "ddz_window_gameDetail", "ddz_window_history", "ddz_window_match_enter", "ddz_window_match_rewards", "ddz_window_normal", "ddz_window_revive", "ddz_window_save_match_result", "ddz_window_skip", "jipaiqi", "multiReward", "officialAccountGuide", "treasure_box", "treasure_box_newer", "withdrawalMaintain", "BiLog", "EventType", "HttpUtil", "MsgCache", "NotificationCenter", "Recharge", "ServerStateManager", "Share", "SystemInfo", "TCP", "Timer", "TuyooSDK", "UserInfo", "AILongestType", "AIRobot", "AITypeJudger", "DdzAudioHelper", "DdzEventType", "DdzGlobalFuncs", "QrOption", "RobotGlobal", "ServerManager", "ddz_boot", "ddz_res", "game_world", "CardInfo", "CardType", "ConfigRoomSession", "DetailsModel", "FriendModel", "FtInfo", "GameModel", "HallInfoModel", "HistoryModel", "MatchModel", "NormalRoomInfo", "QuickStartModel", "RoomListModel", "SeatInfo", "TableChatModel", "TableInfo", "TableInfoModel", "TableState", "personInfoMode", "DdzMsgFactory", "DdzNetWorkCenter", "PlayingNetMsg", "GlobalFuncs", "HallGameWorld", "HallNetWorkCenter", "MsgFactory", "boot", "CustomRoomInfo", "CustomRoomResult", "HallUserInfo", "LoginInfo", "LoginRewardInfo", "MatchInfo", "MsgInfo", "NormalInfo", "RebateRankInfo", "StoreItemInfo", "TodoTask", "TodoTaskVec", "UserHeartBeat", "UserInfoGdata", "UserInfoUData", "AdManager", "AdManager_tywx", "BuyCenter", "GlobalTimer", "LoginBtnManager", "MsgBoxManager", "RecordManager", "ToDoTasks", "sxAdManager" ]);